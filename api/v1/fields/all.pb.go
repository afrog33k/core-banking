// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: bnk.to/core/api/v1/fields/all.proto

// Package fields allows retrieving custom fields.

package fields

import (
	reflect "reflect"
	sync "sync"

	v1 "bnk.to/core/api/v1"
	_ "github.com/xo/ecosystem/proto/xo"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type is the type of a field.
type Type int32

const (
	Type_TypeFreeText  Type = 0
	Type_TypeParagraph Type = 1
	Type_TypeSelection Type = 2
	Type_TypeNumber    Type = 3
	Type_TypeCheckbox  Type = 4
	Type_TypeDate      Type = 5
	Type_TypeClient    Type = 6
	Type_TypeGroup     Type = 7
	Type_TypeUser      Type = 8
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "TypeFreeText",
		1: "TypeParagraph",
		2: "TypeSelection",
		3: "TypeNumber",
		4: "TypeCheckbox",
		5: "TypeDate",
		6: "TypeClient",
		7: "TypeGroup",
		8: "TypeUser",
	}
	Type_value = map[string]int32{
		"TypeFreeText":  0,
		"TypeParagraph": 1,
		"TypeSelection": 2,
		"TypeNumber":    3,
		"TypeCheckbox":  4,
		"TypeDate":      5,
		"TypeClient":    6,
		"TypeGroup":     7,
		"TypeUser":      8,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_fields_all_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_fields_all_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{0}
}

// AvailableFor is the scope for which the field can be used.
type AvailableFor int32

const (
	AvailableFor_ForClient             AvailableFor = 0
	AvailableFor_ForGroup              AvailableFor = 1
	AvailableFor_ForCreditArrangement  AvailableFor = 2
	AvailableFor_ForLoanAccount        AvailableFor = 3
	AvailableFor_ForGuarantor          AvailableFor = 4
	AvailableFor_ForAsset              AvailableFor = 5
	AvailableFor_ForDepositAccount     AvailableFor = 6
	AvailableFor_ForTransactionChannel AvailableFor = 7
	AvailableFor_ForTransactionType    AvailableFor = 8
	AvailableFor_ForBranch             AvailableFor = 9
	AvailableFor_ForCentre             AvailableFor = 10
	AvailableFor_ForUser               AvailableFor = 11
)

// Enum value maps for AvailableFor.
var (
	AvailableFor_name = map[int32]string{
		0:  "ForClient",
		1:  "ForGroup",
		2:  "ForCreditArrangement",
		3:  "ForLoanAccount",
		4:  "ForGuarantor",
		5:  "ForAsset",
		6:  "ForDepositAccount",
		7:  "ForTransactionChannel",
		8:  "ForTransactionType",
		9:  "ForBranch",
		10: "ForCentre",
		11: "ForUser",
	}
	AvailableFor_value = map[string]int32{
		"ForClient":             0,
		"ForGroup":              1,
		"ForCreditArrangement":  2,
		"ForLoanAccount":        3,
		"ForGuarantor":          4,
		"ForAsset":              5,
		"ForDepositAccount":     6,
		"ForTransactionChannel": 7,
		"ForTransactionType":    8,
		"ForBranch":             9,
		"ForCentre":             10,
		"ForUser":               11,
	}
)

func (x AvailableFor) Enum() *AvailableFor {
	p := new(AvailableFor)
	*p = x
	return p
}

func (x AvailableFor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailableFor) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_fields_all_proto_enumTypes[1].Descriptor()
}

func (AvailableFor) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_fields_all_proto_enumTypes[1]
}

func (x AvailableFor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailableFor.Descriptor instead.
func (AvailableFor) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{1}
}

// Usage is the usage information for a custom field.
type Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default is whether the field is displayed by default on create/edit page
	// for this record type.
	Default bool `protobuf:"varint,1,opt,name=Default,json=default,proto3" json:"default,omitempty"`
	// Required is whether the field is required.
	Required bool `protobuf:"varint,2,opt,name=Required,json=required,proto3" json:"required,omitempty"`
}

func (x *Usage) Reset() {
	*x = Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{0}
}

func (x *Usage) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *Usage) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

// ValidationRule is a custom field validation rule.
type ValidationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique is a flag indicating whether the field value must be unique.
	Unique bool `protobuf:"varint,1,opt,name=Unique,json=unique,proto3" json:"unique,omitempty"`
	// Patterns is a validation patterns for the field.
	Patterns []string `protobuf:"bytes,2,rep,name=Patterns,json=patterns,proto3" json:"patterns,omitempty"`
}

func (x *ValidationRule) Reset() {
	*x = ValidationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationRule) ProtoMessage() {}

func (x *ValidationRule) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationRule.ProtoReflect.Descriptor instead.
func (*ValidationRule) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{1}
}

func (x *ValidationRule) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *ValidationRule) GetPatterns() []string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

// Field is a custom field.
type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FieldID is the ID of the field which uniquely identifies the field's
	// values.
	FieldID string `protobuf:"bytes,1,opt,name=FieldID,json=field_id,proto3" json:"field_id,omitempty"`
	// Type is the type of the field.
	Type Type `protobuf:"varint,2,opt,name=Type,json=type,proto3,enum=openbank.core.v1.fields.Type" json:"type,omitempty"`
	// Name is the name for the field.
	Name string `protobuf:"bytes,3,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// Description is the description for the field.
	Description string `protobuf:"bytes,4,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	// Options is the list of options for the field.
	//
	// Required if the field type is `TypeSelection`.
	Options []string `protobuf:"bytes,5,rep,name=Options,json=options,proto3" json:"options,omitempty"`
	// Usage is a list of usage information for the field.
	Usage *Usage `protobuf:"bytes,6,opt,name=Usage,json=usage,proto3" json:"usage,omitempty"`
	// ValidationRule is the validation rules for the field.
	ValidationRule *ValidationRule `protobuf:"bytes,7,opt,name=ValidationRule,json=validation_rule,proto3" json:"validation_rule,omitempty"`
	// ViewRights is the viewing permissions for the field.
	// If empty, the field is visible to all users.
	ViewRights []string `protobuf:"bytes,8,rep,name=ViewRights,json=view_rights,proto3" json:"view_rights,omitempty"`
	// EditRights is the editing permissions for the field.
	// If empty, the field is visible to all users.
	EditRights []string `protobuf:"bytes,9,rep,name=EditRights,json=edit_rights,proto3" json:"edit_rights,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{2}
}

func (x *Field) GetFieldID() string {
	if x != nil {
		return x.FieldID
	}
	return ""
}

func (x *Field) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TypeFreeText
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Field) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Field) GetUsage() *Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *Field) GetValidationRule() *ValidationRule {
	if x != nil {
		return x.ValidationRule
	}
	return nil
}

func (x *Field) GetViewRights() []string {
	if x != nil {
		return x.ViewRights
	}
	return nil
}

func (x *Field) GetEditRights() []string {
	if x != nil {
		return x.EditRights
	}
	return nil
}

// Set is a set of fields.
type Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SetID is the unique user-defined ID.
	SetID string `protobuf:"bytes,1,opt,name=SetID,json=set_id,proto3" json:"set_id,omitempty"`
	// Name is the user-provided name of the custom field set.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// Description is the user-provided description of the custom field set.
	Description string `protobuf:"bytes,3,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	// AllowDuplicates is true if the same field set may appear in the same
	// entity multiple times.
	AllowDuplicates bool `protobuf:"varint,4,opt,name=AllowDuplicates,json=allow_duplicates,proto3" json:"allow_duplicates,omitempty"`
	// ValidFor is the associated entity the field can be used in.
	//
	// TODO: Maybe the types of entity can be used in place of this custom type.
	ValidFor AvailableFor `protobuf:"varint,5,opt,name=ValidFor,json=valid_for,proto3,enum=openbank.core.v1.fields.AvailableFor" json:"valid_for,omitempty"`
	// State is the state of the custom field set.
	State v1.State `protobuf:"varint,6,opt,name=State,json=state,proto3,enum=openbank.core.v1.State" json:"state,omitempty"`
	// CreateTime is when the field set was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
	// UpdateTime is the time when the field set was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=UpdateTime,json=update_time,proto3" json:"update_time,omitempty"`
}

func (x *Set) Reset() {
	*x = Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Set) ProtoMessage() {}

func (x *Set) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Set.ProtoReflect.Descriptor instead.
func (*Set) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{3}
}

func (x *Set) GetSetID() string {
	if x != nil {
		return x.SetID
	}
	return ""
}

func (x *Set) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Set) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Set) GetAllowDuplicates() bool {
	if x != nil {
		return x.AllowDuplicates
	}
	return false
}

func (x *Set) GetValidFor() AvailableFor {
	if x != nil {
		return x.ValidFor
	}
	return AvailableFor_ForClient
}

func (x *Set) GetState() v1.State {
	if x != nil {
		return x.State
	}
	return v1.State(0)
}

func (x *Set) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Set) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// CreateSetRequest is the request to create a custom field set.
type CreateSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the custom field set to create.
	Body *Set `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateSetRequest) Reset() {
	*x = CreateSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSetRequest) ProtoMessage() {}

func (x *CreateSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSetRequest.ProtoReflect.Descriptor instead.
func (*CreateSetRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSetRequest) GetBody() *Set {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListSetsRequest is the request to list custom field sets.
type ListSetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageToken is the token when retrieving the next page of results.
	PageToken string `protobuf:"bytes,1,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of results to return per page.
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the field to order the results by.
	OrderBy string `protobuf:"bytes,3,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to apply to the results.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListSetsRequest) Reset() {
	*x = ListSetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSetsRequest) ProtoMessage() {}

func (x *ListSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSetsRequest.ProtoReflect.Descriptor instead.
func (*ListSetsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{5}
}

func (x *ListSetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSetsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSetsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListSetsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListSetsResponse is the response for listing custom field sets.
type ListSetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of sets matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of sets remaining in the list, including the
	// sets in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Sets is the list of custom field sets.
	Sets []*Set `protobuf:"bytes,3,rep,name=Sets,json=sets,proto3" json:"sets,omitempty"`
	// NextPageToken is the token when retrieving the next page of results.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSetsResponse) Reset() {
	*x = ListSetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSetsResponse) ProtoMessage() {}

func (x *ListSetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSetsResponse.ProtoReflect.Descriptor instead.
func (*ListSetsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{6}
}

func (x *ListSetsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSetsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListSetsResponse) GetSets() []*Set {
	if x != nil {
		return x.Sets
	}
	return nil
}

func (x *ListSetsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetSetRequest is the request to retrieve a custom field set.
type GetSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SetID is the ID of the field set to retrieve.
	SetID string `protobuf:"bytes,1,opt,name=SetID,json=set_id,proto3" json:"set_id,omitempty"`
}

func (x *GetSetRequest) Reset() {
	*x = GetSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSetRequest) ProtoMessage() {}

func (x *GetSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSetRequest.ProtoReflect.Descriptor instead.
func (*GetSetRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{7}
}

func (x *GetSetRequest) GetSetID() string {
	if x != nil {
		return x.SetID
	}
	return ""
}

// UpdateSetRequest is the request to update the specified custom field
// set.
type UpdateSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SetID is the ID of the field set to update.
	SetID string `protobuf:"bytes,1,opt,name=SetID,json=set_id,proto3" json:"set_id,omitempty"`
	// Body is the new value of the custom field set.
	Body *Set `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateSetRequest) Reset() {
	*x = UpdateSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSetRequest) ProtoMessage() {}

func (x *UpdateSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSetRequest.ProtoReflect.Descriptor instead.
func (*UpdateSetRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateSetRequest) GetSetID() string {
	if x != nil {
		return x.SetID
	}
	return ""
}

func (x *UpdateSetRequest) GetBody() *Set {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteSetRequest is the request to delete the specified custom field
// set.
type DeleteSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SetID is the ID of the field set to delete.
	SetID string `protobuf:"bytes,1,opt,name=SetID,json=set_id,proto3" json:"set_id,omitempty"`
}

func (x *DeleteSetRequest) Reset() {
	*x = DeleteSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSetRequest) ProtoMessage() {}

func (x *DeleteSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteSetRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteSetRequest) GetSetID() string {
	if x != nil {
		return x.SetID
	}
	return ""
}

// CreateFieldRequest is the request to create a field in a field set.
type CreateFieldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SetID is the ID of the field set to create the field in.
	SetID string `protobuf:"bytes,1,opt,name=SetID,json=set_id,proto3" json:"set_id,omitempty"`
	// Body is the value of the field to create.
	Body *Field `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateFieldRequest) Reset() {
	*x = CreateFieldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFieldRequest) ProtoMessage() {}

func (x *CreateFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFieldRequest.ProtoReflect.Descriptor instead.
func (*CreateFieldRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{10}
}

func (x *CreateFieldRequest) GetSetID() string {
	if x != nil {
		return x.SetID
	}
	return ""
}

func (x *CreateFieldRequest) GetBody() *Field {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListSetFieldsRequest is the request to retrieve the fields of a field set.
type ListSetFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SetID is the ID of the field set to retrieve fields from.
	SetID string `protobuf:"bytes,1,opt,name=SetID,json=set_id,proto3" json:"set_id,omitempty"`
	// PageToken is the token when retrieving the next page of results.
	PageToken string `protobuf:"bytes,2,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of results to return per page.
	PageSize int32 `protobuf:"varint,3,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the field to order the results by.
	OrderBy string `protobuf:"bytes,4,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to apply to the results.
	Filter string `protobuf:"bytes,5,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListSetFieldsRequest) Reset() {
	*x = ListSetFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSetFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSetFieldsRequest) ProtoMessage() {}

func (x *ListSetFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSetFieldsRequest.ProtoReflect.Descriptor instead.
func (*ListSetFieldsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{11}
}

func (x *ListSetFieldsRequest) GetSetID() string {
	if x != nil {
		return x.SetID
	}
	return ""
}

func (x *ListSetFieldsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSetFieldsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSetFieldsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListSetFieldsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListSetFieldsResponse is the response for retrieving the fields in a field set.
type ListSetFieldsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of fields matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of fields remaining in the list, including the
	// fields in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Fields is the retrieved fields of the field set.
	Fields []*Field `protobuf:"bytes,3,rep,name=Fields,json=fields,proto3" json:"fields,omitempty"`
	// NextPageToken is the token when retrieving the next page of results.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSetFieldsResponse) Reset() {
	*x = ListSetFieldsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSetFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSetFieldsResponse) ProtoMessage() {}

func (x *ListSetFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSetFieldsResponse.ProtoReflect.Descriptor instead.
func (*ListSetFieldsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{12}
}

func (x *ListSetFieldsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSetFieldsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListSetFieldsResponse) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ListSetFieldsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetFieldRequest is the request to retrieve the specified field in a field set.
type GetFieldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SetID is the ID of the field set to retrieve fields from.
	SetID string `protobuf:"bytes,1,opt,name=SetID,json=set_id,proto3" json:"set_id,omitempty"`
	// FieldID is the ID of the field to retrieve.
	FieldID string `protobuf:"bytes,2,opt,name=FieldID,json=field_id,proto3" json:"field_id,omitempty"`
}

func (x *GetFieldRequest) Reset() {
	*x = GetFieldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFieldRequest) ProtoMessage() {}

func (x *GetFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFieldRequest.ProtoReflect.Descriptor instead.
func (*GetFieldRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{13}
}

func (x *GetFieldRequest) GetSetID() string {
	if x != nil {
		return x.SetID
	}
	return ""
}

func (x *GetFieldRequest) GetFieldID() string {
	if x != nil {
		return x.FieldID
	}
	return ""
}

// UpdateFieldRequest is the request to update a field in a field set.
type UpdateFieldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SetID is the ID of the field set to update.
	SetID string `protobuf:"bytes,1,opt,name=SetID,json=set_id,proto3" json:"set_id,omitempty"`
	// FieldID is the ID of the field to update.
	FieldID string `protobuf:"bytes,2,opt,name=FieldID,json=field_id,proto3" json:"field_id,omitempty"`
	// Body is the new value of the field.
	Body *Field `protobuf:"bytes,3,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateFieldRequest) Reset() {
	*x = UpdateFieldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFieldRequest) ProtoMessage() {}

func (x *UpdateFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFieldRequest.ProtoReflect.Descriptor instead.
func (*UpdateFieldRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateFieldRequest) GetSetID() string {
	if x != nil {
		return x.SetID
	}
	return ""
}

func (x *UpdateFieldRequest) GetFieldID() string {
	if x != nil {
		return x.FieldID
	}
	return ""
}

func (x *UpdateFieldRequest) GetBody() *Field {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteFieldRequest is the request to delete a field from a field set.
type DeleteFieldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SetID is the ID of the field set.
	SetID string `protobuf:"bytes,1,opt,name=SetID,json=set_id,proto3" json:"set_id,omitempty"`
	// FieldID is the ID of the field to delete.
	FieldID string `protobuf:"bytes,2,opt,name=FieldID,json=field_id,proto3" json:"field_id,omitempty"`
}

func (x *DeleteFieldRequest) Reset() {
	*x = DeleteFieldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFieldRequest) ProtoMessage() {}

func (x *DeleteFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_fields_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFieldRequest.ProtoReflect.Descriptor instead.
func (*DeleteFieldRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteFieldRequest) GetSetID() string {
	if x != nil {
		return x.SetID
	}
	return ""
}

func (x *DeleteFieldRequest) GetFieldID() string {
	if x != nil {
		return x.FieldID
	}
	return ""
}

var File_bnk_to_core_api_v1_fields_all_proto protoreflect.FileDescriptor

var file_bnk_to_core_api_v1_fields_all_proto_rawDesc = []byte{
	0x0a, 0x23, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x0b,
	0x78, 0x6f, 0x2f, 0x78, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3a, 0x0b, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x69, 0x0a, 0x0e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12,
	0x26, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0xe3, 0x03, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25,
	0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xf2, 0x03, 0x0a, 0x03, 0x53,
	0x65, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x02,
	0x08, 0x02, 0x52, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x12,
	0x39, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x21, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x18, 0x22, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22,
	0x58, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb8, 0x01, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xd8, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x53, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x3a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x7b, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x3d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05,
	0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x7f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x3e, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x27, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x12,
	0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe3, 0x01, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x42, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x63, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x66, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0xc3, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x72, 0x65, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a,
	0x0d, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10,
	0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x65, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x12, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x06,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x10, 0x08, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xa2, 0x02,
	0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x11,
	0x0a, 0x09, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x10, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x01, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x16, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x46, 0x6f, 0x72,
	0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x10, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x10, 0x05, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x19, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15,
	0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x46,
	0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x08, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x46, 0x6f,
	0x72, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x10, 0x0a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a,
	0x07, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x10, 0x0b, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02,
	0x18, 0x00, 0x32, 0xce, 0x0a, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x22, 0x1e, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x0a,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0x7d,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x18, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0x74, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x22, 0x20, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x53, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x28,
	0x00, 0x30, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x22, 0x26, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x12,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x53, 0x65, 0x74, 0x49,
	0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x72, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x2f, 0x7b, 0x53, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x27, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x2f, 0x7b, 0x53, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x28, 0x00, 0x30, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2f,
	0x7b, 0x53, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x28, 0x00,
	0x30, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x31, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x53, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x2f, 0x7b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00,
	0x12, 0x91, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x31, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x53, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x7d,
	0x28, 0x00, 0x30, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x31, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x53, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x2f, 0x7b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x1a, 0x03,
	0x88, 0x02, 0x00, 0x42, 0x98, 0x01, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x48,
	0x01, 0x50, 0x01, 0x5a, 0x20, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01,
	0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x92, 0x41, 0x41, 0x0a, 0x03, 0x32,
	0x2e, 0x30, 0x12, 0x13, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x32, 0x02, 0x76, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bnk_to_core_api_v1_fields_all_proto_rawDescOnce sync.Once
	file_bnk_to_core_api_v1_fields_all_proto_rawDescData = file_bnk_to_core_api_v1_fields_all_proto_rawDesc
)

func file_bnk_to_core_api_v1_fields_all_proto_rawDescGZIP() []byte {
	file_bnk_to_core_api_v1_fields_all_proto_rawDescOnce.Do(func() {
		file_bnk_to_core_api_v1_fields_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_bnk_to_core_api_v1_fields_all_proto_rawDescData)
	})
	return file_bnk_to_core_api_v1_fields_all_proto_rawDescData
}

var (
	file_bnk_to_core_api_v1_fields_all_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
	file_bnk_to_core_api_v1_fields_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 16)
	file_bnk_to_core_api_v1_fields_all_proto_goTypes   = []interface{}{
		(Type)(0),                     // 0: openbank.core.v1.fields.Type
		(AvailableFor)(0),             // 1: openbank.core.v1.fields.AvailableFor
		(*Usage)(nil),                 // 2: openbank.core.v1.fields.Usage
		(*ValidationRule)(nil),        // 3: openbank.core.v1.fields.ValidationRule
		(*Field)(nil),                 // 4: openbank.core.v1.fields.Field
		(*Set)(nil),                   // 5: openbank.core.v1.fields.Set
		(*CreateSetRequest)(nil),      // 6: openbank.core.v1.fields.CreateSetRequest
		(*ListSetsRequest)(nil),       // 7: openbank.core.v1.fields.ListSetsRequest
		(*ListSetsResponse)(nil),      // 8: openbank.core.v1.fields.ListSetsResponse
		(*GetSetRequest)(nil),         // 9: openbank.core.v1.fields.GetSetRequest
		(*UpdateSetRequest)(nil),      // 10: openbank.core.v1.fields.UpdateSetRequest
		(*DeleteSetRequest)(nil),      // 11: openbank.core.v1.fields.DeleteSetRequest
		(*CreateFieldRequest)(nil),    // 12: openbank.core.v1.fields.CreateFieldRequest
		(*ListSetFieldsRequest)(nil),  // 13: openbank.core.v1.fields.ListSetFieldsRequest
		(*ListSetFieldsResponse)(nil), // 14: openbank.core.v1.fields.ListSetFieldsResponse
		(*GetFieldRequest)(nil),       // 15: openbank.core.v1.fields.GetFieldRequest
		(*UpdateFieldRequest)(nil),    // 16: openbank.core.v1.fields.UpdateFieldRequest
		(*DeleteFieldRequest)(nil),    // 17: openbank.core.v1.fields.DeleteFieldRequest
		(v1.State)(0),                 // 18: openbank.core.v1.State
		(*timestamppb.Timestamp)(nil), // 19: google.protobuf.Timestamp
		(*emptypb.Empty)(nil),         // 20: google.protobuf.Empty
	}
)

var file_bnk_to_core_api_v1_fields_all_proto_depIdxs = []int32{
	0,  // 0: openbank.core.v1.fields.Field.Type:type_name -> openbank.core.v1.fields.Type
	2,  // 1: openbank.core.v1.fields.Field.Usage:type_name -> openbank.core.v1.fields.Usage
	3,  // 2: openbank.core.v1.fields.Field.ValidationRule:type_name -> openbank.core.v1.fields.ValidationRule
	1,  // 3: openbank.core.v1.fields.Set.ValidFor:type_name -> openbank.core.v1.fields.AvailableFor
	18, // 4: openbank.core.v1.fields.Set.State:type_name -> openbank.core.v1.State
	19, // 5: openbank.core.v1.fields.Set.CreateTime:type_name -> google.protobuf.Timestamp
	19, // 6: openbank.core.v1.fields.Set.UpdateTime:type_name -> google.protobuf.Timestamp
	5,  // 7: openbank.core.v1.fields.CreateSetRequest.Body:type_name -> openbank.core.v1.fields.Set
	5,  // 8: openbank.core.v1.fields.ListSetsResponse.Sets:type_name -> openbank.core.v1.fields.Set
	5,  // 9: openbank.core.v1.fields.UpdateSetRequest.Body:type_name -> openbank.core.v1.fields.Set
	4,  // 10: openbank.core.v1.fields.CreateFieldRequest.Body:type_name -> openbank.core.v1.fields.Field
	4,  // 11: openbank.core.v1.fields.ListSetFieldsResponse.Fields:type_name -> openbank.core.v1.fields.Field
	4,  // 12: openbank.core.v1.fields.UpdateFieldRequest.Body:type_name -> openbank.core.v1.fields.Field
	6,  // 13: openbank.core.v1.fields.FieldsService.CreateSet:input_type -> openbank.core.v1.fields.CreateSetRequest
	7,  // 14: openbank.core.v1.fields.FieldsService.ListSets:input_type -> openbank.core.v1.fields.ListSetsRequest
	9,  // 15: openbank.core.v1.fields.FieldsService.GetSet:input_type -> openbank.core.v1.fields.GetSetRequest
	10, // 16: openbank.core.v1.fields.FieldsService.UpdateSet:input_type -> openbank.core.v1.fields.UpdateSetRequest
	11, // 17: openbank.core.v1.fields.FieldsService.DeleteSet:input_type -> openbank.core.v1.fields.DeleteSetRequest
	12, // 18: openbank.core.v1.fields.FieldsService.CreateField:input_type -> openbank.core.v1.fields.CreateFieldRequest
	13, // 19: openbank.core.v1.fields.FieldsService.ListSetFields:input_type -> openbank.core.v1.fields.ListSetFieldsRequest
	15, // 20: openbank.core.v1.fields.FieldsService.GetField:input_type -> openbank.core.v1.fields.GetFieldRequest
	16, // 21: openbank.core.v1.fields.FieldsService.UpdateField:input_type -> openbank.core.v1.fields.UpdateFieldRequest
	17, // 22: openbank.core.v1.fields.FieldsService.DeleteField:input_type -> openbank.core.v1.fields.DeleteFieldRequest
	5,  // 23: openbank.core.v1.fields.FieldsService.CreateSet:output_type -> openbank.core.v1.fields.Set
	8,  // 24: openbank.core.v1.fields.FieldsService.ListSets:output_type -> openbank.core.v1.fields.ListSetsResponse
	5,  // 25: openbank.core.v1.fields.FieldsService.GetSet:output_type -> openbank.core.v1.fields.Set
	5,  // 26: openbank.core.v1.fields.FieldsService.UpdateSet:output_type -> openbank.core.v1.fields.Set
	20, // 27: openbank.core.v1.fields.FieldsService.DeleteSet:output_type -> google.protobuf.Empty
	4,  // 28: openbank.core.v1.fields.FieldsService.CreateField:output_type -> openbank.core.v1.fields.Field
	14, // 29: openbank.core.v1.fields.FieldsService.ListSetFields:output_type -> openbank.core.v1.fields.ListSetFieldsResponse
	4,  // 30: openbank.core.v1.fields.FieldsService.GetField:output_type -> openbank.core.v1.fields.Field
	4,  // 31: openbank.core.v1.fields.FieldsService.UpdateField:output_type -> openbank.core.v1.fields.Field
	20, // 32: openbank.core.v1.fields.FieldsService.DeleteField:output_type -> google.protobuf.Empty
	23, // [23:33] is the sub-list for method output_type
	13, // [13:23] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_bnk_to_core_api_v1_fields_all_proto_init() }
func file_bnk_to_core_api_v1_fields_all_proto_init() {
	if File_bnk_to_core_api_v1_fields_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFieldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSetFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSetFieldsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFieldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFieldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_fields_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFieldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bnk_to_core_api_v1_fields_all_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bnk_to_core_api_v1_fields_all_proto_goTypes,
		DependencyIndexes: file_bnk_to_core_api_v1_fields_all_proto_depIdxs,
		EnumInfos:         file_bnk_to_core_api_v1_fields_all_proto_enumTypes,
		MessageInfos:      file_bnk_to_core_api_v1_fields_all_proto_msgTypes,
	}.Build()
	File_bnk_to_core_api_v1_fields_all_proto = out.File
	file_bnk_to_core_api_v1_fields_all_proto_rawDesc = nil
	file_bnk_to_core_api_v1_fields_all_proto_goTypes = nil
	file_bnk_to_core_api_v1_fields_all_proto_depIdxs = nil
}
