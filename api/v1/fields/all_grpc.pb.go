// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bnk.to/core/api/v1/fields/all.proto

package fields

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FieldsServiceClient is the client API for FieldsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FieldsServiceClient interface {
	// CreateSet creates a new custom field set.
	CreateSet(ctx context.Context, in *CreateSetRequest, opts ...grpc.CallOption) (*Set, error)
	// ListSets lists custom field sets.
	ListSets(ctx context.Context, in *ListSetsRequest, opts ...grpc.CallOption) (*ListSetsResponse, error)
	// GetSet retrieves the specified custom field set.
	GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*Set, error)
	// UpdateSet updates the specified custom field set.
	UpdateSet(ctx context.Context, in *UpdateSetRequest, opts ...grpc.CallOption) (*Set, error)
	// DeleteSet deletes the specified custom field set.
	DeleteSet(ctx context.Context, in *DeleteSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateField creates a new field in a field set.
	CreateField(ctx context.Context, in *CreateFieldRequest, opts ...grpc.CallOption) (*Field, error)
	// ListSetFields lists all of the fields in a field set.
	ListSetFields(ctx context.Context, in *ListSetFieldsRequest, opts ...grpc.CallOption) (*ListSetFieldsResponse, error)
	// GetField retrieves the specified field in a field set.
	GetField(ctx context.Context, in *GetFieldRequest, opts ...grpc.CallOption) (*Field, error)
	// UpdateField updates the specified field in the field set.
	UpdateField(ctx context.Context, in *UpdateFieldRequest, opts ...grpc.CallOption) (*Field, error)
	// DeleteField deletes the specified field from the field set.
	DeleteField(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fieldsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFieldsServiceClient(cc grpc.ClientConnInterface) FieldsServiceClient {
	return &fieldsServiceClient{cc}
}

func (c *fieldsServiceClient) CreateSet(ctx context.Context, in *CreateSetRequest, opts ...grpc.CallOption) (*Set, error) {
	out := new(Set)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.fields.FieldsService/CreateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsServiceClient) ListSets(ctx context.Context, in *ListSetsRequest, opts ...grpc.CallOption) (*ListSetsResponse, error) {
	out := new(ListSetsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.fields.FieldsService/ListSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsServiceClient) GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*Set, error) {
	out := new(Set)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.fields.FieldsService/GetSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsServiceClient) UpdateSet(ctx context.Context, in *UpdateSetRequest, opts ...grpc.CallOption) (*Set, error) {
	out := new(Set)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.fields.FieldsService/UpdateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsServiceClient) DeleteSet(ctx context.Context, in *DeleteSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.fields.FieldsService/DeleteSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsServiceClient) CreateField(ctx context.Context, in *CreateFieldRequest, opts ...grpc.CallOption) (*Field, error) {
	out := new(Field)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.fields.FieldsService/CreateField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsServiceClient) ListSetFields(ctx context.Context, in *ListSetFieldsRequest, opts ...grpc.CallOption) (*ListSetFieldsResponse, error) {
	out := new(ListSetFieldsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.fields.FieldsService/ListSetFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsServiceClient) GetField(ctx context.Context, in *GetFieldRequest, opts ...grpc.CallOption) (*Field, error) {
	out := new(Field)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.fields.FieldsService/GetField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsServiceClient) UpdateField(ctx context.Context, in *UpdateFieldRequest, opts ...grpc.CallOption) (*Field, error) {
	out := new(Field)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.fields.FieldsService/UpdateField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsServiceClient) DeleteField(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.fields.FieldsService/DeleteField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FieldsServiceServer is the server API for FieldsService service.
// All implementations must embed UnimplementedFieldsServiceServer
// for forward compatibility
type FieldsServiceServer interface {
	// CreateSet creates a new custom field set.
	CreateSet(context.Context, *CreateSetRequest) (*Set, error)
	// ListSets lists custom field sets.
	ListSets(context.Context, *ListSetsRequest) (*ListSetsResponse, error)
	// GetSet retrieves the specified custom field set.
	GetSet(context.Context, *GetSetRequest) (*Set, error)
	// UpdateSet updates the specified custom field set.
	UpdateSet(context.Context, *UpdateSetRequest) (*Set, error)
	// DeleteSet deletes the specified custom field set.
	DeleteSet(context.Context, *DeleteSetRequest) (*emptypb.Empty, error)
	// CreateField creates a new field in a field set.
	CreateField(context.Context, *CreateFieldRequest) (*Field, error)
	// ListSetFields lists all of the fields in a field set.
	ListSetFields(context.Context, *ListSetFieldsRequest) (*ListSetFieldsResponse, error)
	// GetField retrieves the specified field in a field set.
	GetField(context.Context, *GetFieldRequest) (*Field, error)
	// UpdateField updates the specified field in the field set.
	UpdateField(context.Context, *UpdateFieldRequest) (*Field, error)
	// DeleteField deletes the specified field from the field set.
	DeleteField(context.Context, *DeleteFieldRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFieldsServiceServer()
}

// UnimplementedFieldsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFieldsServiceServer struct{}

func (UnimplementedFieldsServiceServer) CreateSet(context.Context, *CreateSetRequest) (*Set, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSet not implemented")
}

func (UnimplementedFieldsServiceServer) ListSets(context.Context, *ListSetsRequest) (*ListSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSets not implemented")
}

func (UnimplementedFieldsServiceServer) GetSet(context.Context, *GetSetRequest) (*Set, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSet not implemented")
}

func (UnimplementedFieldsServiceServer) UpdateSet(context.Context, *UpdateSetRequest) (*Set, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSet not implemented")
}

func (UnimplementedFieldsServiceServer) DeleteSet(context.Context, *DeleteSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSet not implemented")
}

func (UnimplementedFieldsServiceServer) CreateField(context.Context, *CreateFieldRequest) (*Field, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateField not implemented")
}

func (UnimplementedFieldsServiceServer) ListSetFields(context.Context, *ListSetFieldsRequest) (*ListSetFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSetFields not implemented")
}

func (UnimplementedFieldsServiceServer) GetField(context.Context, *GetFieldRequest) (*Field, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetField not implemented")
}

func (UnimplementedFieldsServiceServer) UpdateField(context.Context, *UpdateFieldRequest) (*Field, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateField not implemented")
}

func (UnimplementedFieldsServiceServer) DeleteField(context.Context, *DeleteFieldRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteField not implemented")
}
func (UnimplementedFieldsServiceServer) mustEmbedUnimplementedFieldsServiceServer() {}

// UnsafeFieldsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FieldsServiceServer will
// result in compilation errors.
type UnsafeFieldsServiceServer interface {
	mustEmbedUnimplementedFieldsServiceServer()
}

func RegisterFieldsServiceServer(s grpc.ServiceRegistrar, srv FieldsServiceServer) {
	s.RegisterService(&FieldsService_ServiceDesc, srv)
}

func _FieldsService_CreateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServiceServer).CreateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.fields.FieldsService/CreateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServiceServer).CreateSet(ctx, req.(*CreateSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldsService_ListSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServiceServer).ListSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.fields.FieldsService/ListSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServiceServer).ListSets(ctx, req.(*ListSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldsService_GetSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServiceServer).GetSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.fields.FieldsService/GetSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServiceServer).GetSet(ctx, req.(*GetSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldsService_UpdateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServiceServer).UpdateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.fields.FieldsService/UpdateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServiceServer).UpdateSet(ctx, req.(*UpdateSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldsService_DeleteSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServiceServer).DeleteSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.fields.FieldsService/DeleteSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServiceServer).DeleteSet(ctx, req.(*DeleteSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldsService_CreateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServiceServer).CreateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.fields.FieldsService/CreateField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServiceServer).CreateField(ctx, req.(*CreateFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldsService_ListSetFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSetFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServiceServer).ListSetFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.fields.FieldsService/ListSetFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServiceServer).ListSetFields(ctx, req.(*ListSetFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldsService_GetField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServiceServer).GetField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.fields.FieldsService/GetField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServiceServer).GetField(ctx, req.(*GetFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldsService_UpdateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServiceServer).UpdateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.fields.FieldsService/UpdateField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServiceServer).UpdateField(ctx, req.(*UpdateFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldsService_DeleteField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServiceServer).DeleteField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.fields.FieldsService/DeleteField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServiceServer).DeleteField(ctx, req.(*DeleteFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FieldsService_ServiceDesc is the grpc.ServiceDesc for FieldsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FieldsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.fields.FieldsService",
	HandlerType: (*FieldsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSet",
			Handler:    _FieldsService_CreateSet_Handler,
		},
		{
			MethodName: "ListSets",
			Handler:    _FieldsService_ListSets_Handler,
		},
		{
			MethodName: "GetSet",
			Handler:    _FieldsService_GetSet_Handler,
		},
		{
			MethodName: "UpdateSet",
			Handler:    _FieldsService_UpdateSet_Handler,
		},
		{
			MethodName: "DeleteSet",
			Handler:    _FieldsService_DeleteSet_Handler,
		},
		{
			MethodName: "CreateField",
			Handler:    _FieldsService_CreateField_Handler,
		},
		{
			MethodName: "ListSetFields",
			Handler:    _FieldsService_ListSetFields_Handler,
		},
		{
			MethodName: "GetField",
			Handler:    _FieldsService_GetField_Handler,
		},
		{
			MethodName: "UpdateField",
			Handler:    _FieldsService_UpdateField_Handler,
		},
		{
			MethodName: "DeleteField",
			Handler:    _FieldsService_DeleteField_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/fields/all.proto",
}
