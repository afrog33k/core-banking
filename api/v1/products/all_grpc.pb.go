// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bnk.to/core/api/v1/products/all.proto

package products

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepositProductsServiceClient is the client API for DepositProductsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepositProductsServiceClient interface {
	// CreateDepositProduct creates a new deposit product.
	CreateDepositProduct(ctx context.Context, in *CreateDepositProductRequest, opts ...grpc.CallOption) (*DepositProduct, error)
	// ListDepositProducts lists deposit products.
	ListDepositProducts(ctx context.Context, in *ListDepositProductsRequest, opts ...grpc.CallOption) (*ListDepositProductsResponse, error)
	// GetDepositProduct retrieves the specified deposit product.
	GetDepositProduct(ctx context.Context, in *GetDepositProductRequest, opts ...grpc.CallOption) (*DepositProduct, error)
	// UpdateDepositProduct updates the specified deposit product.
	UpdateDepositProduct(ctx context.Context, in *UpdateDepositProductRequest, opts ...grpc.CallOption) (*DepositProduct, error)
	// UpdateDepositAccounts updates all deposit accounts of the deposit
	// product.
	UpdateDepositAccounts(ctx context.Context, in *UpdateDepositAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteDepositProduct deletes the specified deposit product.
	DeleteDepositProduct(ctx context.Context, in *DeleteDepositProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type depositProductsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepositProductsServiceClient(cc grpc.ClientConnInterface) DepositProductsServiceClient {
	return &depositProductsServiceClient{cc}
}

func (c *depositProductsServiceClient) CreateDepositProduct(ctx context.Context, in *CreateDepositProductRequest, opts ...grpc.CallOption) (*DepositProduct, error) {
	out := new(DepositProduct)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.DepositProductsService/CreateDepositProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositProductsServiceClient) ListDepositProducts(ctx context.Context, in *ListDepositProductsRequest, opts ...grpc.CallOption) (*ListDepositProductsResponse, error) {
	out := new(ListDepositProductsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.DepositProductsService/ListDepositProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositProductsServiceClient) GetDepositProduct(ctx context.Context, in *GetDepositProductRequest, opts ...grpc.CallOption) (*DepositProduct, error) {
	out := new(DepositProduct)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.DepositProductsService/GetDepositProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositProductsServiceClient) UpdateDepositProduct(ctx context.Context, in *UpdateDepositProductRequest, opts ...grpc.CallOption) (*DepositProduct, error) {
	out := new(DepositProduct)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.DepositProductsService/UpdateDepositProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositProductsServiceClient) UpdateDepositAccounts(ctx context.Context, in *UpdateDepositAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.DepositProductsService/UpdateDepositAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositProductsServiceClient) DeleteDepositProduct(ctx context.Context, in *DeleteDepositProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.DepositProductsService/DeleteDepositProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepositProductsServiceServer is the server API for DepositProductsService service.
// All implementations must embed UnimplementedDepositProductsServiceServer
// for forward compatibility
type DepositProductsServiceServer interface {
	// CreateDepositProduct creates a new deposit product.
	CreateDepositProduct(context.Context, *CreateDepositProductRequest) (*DepositProduct, error)
	// ListDepositProducts lists deposit products.
	ListDepositProducts(context.Context, *ListDepositProductsRequest) (*ListDepositProductsResponse, error)
	// GetDepositProduct retrieves the specified deposit product.
	GetDepositProduct(context.Context, *GetDepositProductRequest) (*DepositProduct, error)
	// UpdateDepositProduct updates the specified deposit product.
	UpdateDepositProduct(context.Context, *UpdateDepositProductRequest) (*DepositProduct, error)
	// UpdateDepositAccounts updates all deposit accounts of the deposit
	// product.
	UpdateDepositAccounts(context.Context, *UpdateDepositAccountsRequest) (*emptypb.Empty, error)
	// DeleteDepositProduct deletes the specified deposit product.
	DeleteDepositProduct(context.Context, *DeleteDepositProductRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDepositProductsServiceServer()
}

// UnimplementedDepositProductsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDepositProductsServiceServer struct{}

func (UnimplementedDepositProductsServiceServer) CreateDepositProduct(context.Context, *CreateDepositProductRequest) (*DepositProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepositProduct not implemented")
}

func (UnimplementedDepositProductsServiceServer) ListDepositProducts(context.Context, *ListDepositProductsRequest) (*ListDepositProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepositProducts not implemented")
}

func (UnimplementedDepositProductsServiceServer) GetDepositProduct(context.Context, *GetDepositProductRequest) (*DepositProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositProduct not implemented")
}

func (UnimplementedDepositProductsServiceServer) UpdateDepositProduct(context.Context, *UpdateDepositProductRequest) (*DepositProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepositProduct not implemented")
}

func (UnimplementedDepositProductsServiceServer) UpdateDepositAccounts(context.Context, *UpdateDepositAccountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepositAccounts not implemented")
}

func (UnimplementedDepositProductsServiceServer) DeleteDepositProduct(context.Context, *DeleteDepositProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepositProduct not implemented")
}

func (UnimplementedDepositProductsServiceServer) mustEmbedUnimplementedDepositProductsServiceServer() {
}

// UnsafeDepositProductsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepositProductsServiceServer will
// result in compilation errors.
type UnsafeDepositProductsServiceServer interface {
	mustEmbedUnimplementedDepositProductsServiceServer()
}

func RegisterDepositProductsServiceServer(s grpc.ServiceRegistrar, srv DepositProductsServiceServer) {
	s.RegisterService(&DepositProductsService_ServiceDesc, srv)
}

func _DepositProductsService_CreateDepositProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepositProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositProductsServiceServer).CreateDepositProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.DepositProductsService/CreateDepositProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositProductsServiceServer).CreateDepositProduct(ctx, req.(*CreateDepositProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositProductsService_ListDepositProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositProductsServiceServer).ListDepositProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.DepositProductsService/ListDepositProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositProductsServiceServer).ListDepositProducts(ctx, req.(*ListDepositProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositProductsService_GetDepositProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositProductsServiceServer).GetDepositProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.DepositProductsService/GetDepositProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositProductsServiceServer).GetDepositProduct(ctx, req.(*GetDepositProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositProductsService_UpdateDepositProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepositProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositProductsServiceServer).UpdateDepositProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.DepositProductsService/UpdateDepositProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositProductsServiceServer).UpdateDepositProduct(ctx, req.(*UpdateDepositProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositProductsService_UpdateDepositAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepositAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositProductsServiceServer).UpdateDepositAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.DepositProductsService/UpdateDepositAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositProductsServiceServer).UpdateDepositAccounts(ctx, req.(*UpdateDepositAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositProductsService_DeleteDepositProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepositProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositProductsServiceServer).DeleteDepositProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.DepositProductsService/DeleteDepositProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositProductsServiceServer).DeleteDepositProduct(ctx, req.(*DeleteDepositProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepositProductsService_ServiceDesc is the grpc.ServiceDesc for DepositProductsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepositProductsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.products.DepositProductsService",
	HandlerType: (*DepositProductsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDepositProduct",
			Handler:    _DepositProductsService_CreateDepositProduct_Handler,
		},
		{
			MethodName: "ListDepositProducts",
			Handler:    _DepositProductsService_ListDepositProducts_Handler,
		},
		{
			MethodName: "GetDepositProduct",
			Handler:    _DepositProductsService_GetDepositProduct_Handler,
		},
		{
			MethodName: "UpdateDepositProduct",
			Handler:    _DepositProductsService_UpdateDepositProduct_Handler,
		},
		{
			MethodName: "UpdateDepositAccounts",
			Handler:    _DepositProductsService_UpdateDepositAccounts_Handler,
		},
		{
			MethodName: "DeleteDepositProduct",
			Handler:    _DepositProductsService_DeleteDepositProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/products/all.proto",
}

// LoanProductsServiceClient is the client API for LoanProductsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanProductsServiceClient interface {
	// CreateLoanProduct creates a new loan product.
	CreateLoanProduct(ctx context.Context, in *CreateLoanProductRequest, opts ...grpc.CallOption) (*LoanProduct, error)
	// ListLoanProducts lists loan products.
	ListLoanProducts(ctx context.Context, in *ListLoanProductsRequest, opts ...grpc.CallOption) (*ListLoanProductsResponse, error)
	// GetLoanProduct retrieves the specified loan product.
	GetLoanProduct(ctx context.Context, in *GetLoanProductRequest, opts ...grpc.CallOption) (*LoanProduct, error)
	// UpdateLoanProduct updates the specified loan product.
	UpdateLoanProduct(ctx context.Context, in *UpdateLoanProductRequest, opts ...grpc.CallOption) (*LoanProduct, error)
	// DeleteLoanProduct deletes the specified loan product.
	DeleteLoanProduct(ctx context.Context, in *DeleteLoanProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type loanProductsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanProductsServiceClient(cc grpc.ClientConnInterface) LoanProductsServiceClient {
	return &loanProductsServiceClient{cc}
}

func (c *loanProductsServiceClient) CreateLoanProduct(ctx context.Context, in *CreateLoanProductRequest, opts ...grpc.CallOption) (*LoanProduct, error) {
	out := new(LoanProduct)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.LoanProductsService/CreateLoanProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductsServiceClient) ListLoanProducts(ctx context.Context, in *ListLoanProductsRequest, opts ...grpc.CallOption) (*ListLoanProductsResponse, error) {
	out := new(ListLoanProductsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.LoanProductsService/ListLoanProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductsServiceClient) GetLoanProduct(ctx context.Context, in *GetLoanProductRequest, opts ...grpc.CallOption) (*LoanProduct, error) {
	out := new(LoanProduct)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.LoanProductsService/GetLoanProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductsServiceClient) UpdateLoanProduct(ctx context.Context, in *UpdateLoanProductRequest, opts ...grpc.CallOption) (*LoanProduct, error) {
	out := new(LoanProduct)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.LoanProductsService/UpdateLoanProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductsServiceClient) DeleteLoanProduct(ctx context.Context, in *DeleteLoanProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.LoanProductsService/DeleteLoanProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanProductsServiceServer is the server API for LoanProductsService service.
// All implementations must embed UnimplementedLoanProductsServiceServer
// for forward compatibility
type LoanProductsServiceServer interface {
	// CreateLoanProduct creates a new loan product.
	CreateLoanProduct(context.Context, *CreateLoanProductRequest) (*LoanProduct, error)
	// ListLoanProducts lists loan products.
	ListLoanProducts(context.Context, *ListLoanProductsRequest) (*ListLoanProductsResponse, error)
	// GetLoanProduct retrieves the specified loan product.
	GetLoanProduct(context.Context, *GetLoanProductRequest) (*LoanProduct, error)
	// UpdateLoanProduct updates the specified loan product.
	UpdateLoanProduct(context.Context, *UpdateLoanProductRequest) (*LoanProduct, error)
	// DeleteLoanProduct deletes the specified loan product.
	DeleteLoanProduct(context.Context, *DeleteLoanProductRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLoanProductsServiceServer()
}

// UnimplementedLoanProductsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoanProductsServiceServer struct{}

func (UnimplementedLoanProductsServiceServer) CreateLoanProduct(context.Context, *CreateLoanProductRequest) (*LoanProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoanProduct not implemented")
}

func (UnimplementedLoanProductsServiceServer) ListLoanProducts(context.Context, *ListLoanProductsRequest) (*ListLoanProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoanProducts not implemented")
}

func (UnimplementedLoanProductsServiceServer) GetLoanProduct(context.Context, *GetLoanProductRequest) (*LoanProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanProduct not implemented")
}

func (UnimplementedLoanProductsServiceServer) UpdateLoanProduct(context.Context, *UpdateLoanProductRequest) (*LoanProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoanProduct not implemented")
}

func (UnimplementedLoanProductsServiceServer) DeleteLoanProduct(context.Context, *DeleteLoanProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoanProduct not implemented")
}
func (UnimplementedLoanProductsServiceServer) mustEmbedUnimplementedLoanProductsServiceServer() {}

// UnsafeLoanProductsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanProductsServiceServer will
// result in compilation errors.
type UnsafeLoanProductsServiceServer interface {
	mustEmbedUnimplementedLoanProductsServiceServer()
}

func RegisterLoanProductsServiceServer(s grpc.ServiceRegistrar, srv LoanProductsServiceServer) {
	s.RegisterService(&LoanProductsService_ServiceDesc, srv)
}

func _LoanProductsService_CreateLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductsServiceServer).CreateLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.LoanProductsService/CreateLoanProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductsServiceServer).CreateLoanProduct(ctx, req.(*CreateLoanProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductsService_ListLoanProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoanProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductsServiceServer).ListLoanProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.LoanProductsService/ListLoanProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductsServiceServer).ListLoanProducts(ctx, req.(*ListLoanProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductsService_GetLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductsServiceServer).GetLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.LoanProductsService/GetLoanProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductsServiceServer).GetLoanProduct(ctx, req.(*GetLoanProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductsService_UpdateLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoanProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductsServiceServer).UpdateLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.LoanProductsService/UpdateLoanProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductsServiceServer).UpdateLoanProduct(ctx, req.(*UpdateLoanProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductsService_DeleteLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoanProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductsServiceServer).DeleteLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.LoanProductsService/DeleteLoanProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductsServiceServer).DeleteLoanProduct(ctx, req.(*DeleteLoanProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanProductsService_ServiceDesc is the grpc.ServiceDesc for LoanProductsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanProductsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.products.LoanProductsService",
	HandlerType: (*LoanProductsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoanProduct",
			Handler:    _LoanProductsService_CreateLoanProduct_Handler,
		},
		{
			MethodName: "ListLoanProducts",
			Handler:    _LoanProductsService_ListLoanProducts_Handler,
		},
		{
			MethodName: "GetLoanProduct",
			Handler:    _LoanProductsService_GetLoanProduct_Handler,
		},
		{
			MethodName: "UpdateLoanProduct",
			Handler:    _LoanProductsService_UpdateLoanProduct_Handler,
		},
		{
			MethodName: "DeleteLoanProduct",
			Handler:    _LoanProductsService_DeleteLoanProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/products/all.proto",
}

// RiskLevelsServiceClient is the client API for RiskLevelsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiskLevelsServiceClient interface {
	// CreateRiskLevel creates the provided risk level.
	CreateRiskLevel(ctx context.Context, in *CreateRiskLevelRequest, opts ...grpc.CallOption) (*RiskLevel, error)
	// ListRiskLevels lists the risk levels.
	ListRiskLevels(ctx context.Context, in *ListRiskLevelsRequest, opts ...grpc.CallOption) (*ListRiskLevelsResponse, error)
	// GetRiskLevel retrieves the specified risk level.
	GetRiskLevel(ctx context.Context, in *GetRiskLevelRequest, opts ...grpc.CallOption) (*RiskLevel, error)
	// UpdateRiskLevel updates the specified risk level.
	UpdateRiskLevel(ctx context.Context, in *UpdateRiskLevelRequest, opts ...grpc.CallOption) (*RiskLevel, error)
	// DeleteRiskLevel deletes the specified risk level.
	DeleteRiskLevel(ctx context.Context, in *DeleteRiskLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type riskLevelsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiskLevelsServiceClient(cc grpc.ClientConnInterface) RiskLevelsServiceClient {
	return &riskLevelsServiceClient{cc}
}

func (c *riskLevelsServiceClient) CreateRiskLevel(ctx context.Context, in *CreateRiskLevelRequest, opts ...grpc.CallOption) (*RiskLevel, error) {
	out := new(RiskLevel)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.RiskLevelsService/CreateRiskLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskLevelsServiceClient) ListRiskLevels(ctx context.Context, in *ListRiskLevelsRequest, opts ...grpc.CallOption) (*ListRiskLevelsResponse, error) {
	out := new(ListRiskLevelsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.RiskLevelsService/ListRiskLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskLevelsServiceClient) GetRiskLevel(ctx context.Context, in *GetRiskLevelRequest, opts ...grpc.CallOption) (*RiskLevel, error) {
	out := new(RiskLevel)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.RiskLevelsService/GetRiskLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskLevelsServiceClient) UpdateRiskLevel(ctx context.Context, in *UpdateRiskLevelRequest, opts ...grpc.CallOption) (*RiskLevel, error) {
	out := new(RiskLevel)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.RiskLevelsService/UpdateRiskLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskLevelsServiceClient) DeleteRiskLevel(ctx context.Context, in *DeleteRiskLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.products.RiskLevelsService/DeleteRiskLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskLevelsServiceServer is the server API for RiskLevelsService service.
// All implementations must embed UnimplementedRiskLevelsServiceServer
// for forward compatibility
type RiskLevelsServiceServer interface {
	// CreateRiskLevel creates the provided risk level.
	CreateRiskLevel(context.Context, *CreateRiskLevelRequest) (*RiskLevel, error)
	// ListRiskLevels lists the risk levels.
	ListRiskLevels(context.Context, *ListRiskLevelsRequest) (*ListRiskLevelsResponse, error)
	// GetRiskLevel retrieves the specified risk level.
	GetRiskLevel(context.Context, *GetRiskLevelRequest) (*RiskLevel, error)
	// UpdateRiskLevel updates the specified risk level.
	UpdateRiskLevel(context.Context, *UpdateRiskLevelRequest) (*RiskLevel, error)
	// DeleteRiskLevel deletes the specified risk level.
	DeleteRiskLevel(context.Context, *DeleteRiskLevelRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRiskLevelsServiceServer()
}

// UnimplementedRiskLevelsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRiskLevelsServiceServer struct{}

func (UnimplementedRiskLevelsServiceServer) CreateRiskLevel(context.Context, *CreateRiskLevelRequest) (*RiskLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRiskLevel not implemented")
}

func (UnimplementedRiskLevelsServiceServer) ListRiskLevels(context.Context, *ListRiskLevelsRequest) (*ListRiskLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRiskLevels not implemented")
}

func (UnimplementedRiskLevelsServiceServer) GetRiskLevel(context.Context, *GetRiskLevelRequest) (*RiskLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiskLevel not implemented")
}

func (UnimplementedRiskLevelsServiceServer) UpdateRiskLevel(context.Context, *UpdateRiskLevelRequest) (*RiskLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRiskLevel not implemented")
}

func (UnimplementedRiskLevelsServiceServer) DeleteRiskLevel(context.Context, *DeleteRiskLevelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRiskLevel not implemented")
}
func (UnimplementedRiskLevelsServiceServer) mustEmbedUnimplementedRiskLevelsServiceServer() {}

// UnsafeRiskLevelsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiskLevelsServiceServer will
// result in compilation errors.
type UnsafeRiskLevelsServiceServer interface {
	mustEmbedUnimplementedRiskLevelsServiceServer()
}

func RegisterRiskLevelsServiceServer(s grpc.ServiceRegistrar, srv RiskLevelsServiceServer) {
	s.RegisterService(&RiskLevelsService_ServiceDesc, srv)
}

func _RiskLevelsService_CreateRiskLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRiskLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskLevelsServiceServer).CreateRiskLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.RiskLevelsService/CreateRiskLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskLevelsServiceServer).CreateRiskLevel(ctx, req.(*CreateRiskLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskLevelsService_ListRiskLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRiskLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskLevelsServiceServer).ListRiskLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.RiskLevelsService/ListRiskLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskLevelsServiceServer).ListRiskLevels(ctx, req.(*ListRiskLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskLevelsService_GetRiskLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiskLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskLevelsServiceServer).GetRiskLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.RiskLevelsService/GetRiskLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskLevelsServiceServer).GetRiskLevel(ctx, req.(*GetRiskLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskLevelsService_UpdateRiskLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRiskLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskLevelsServiceServer).UpdateRiskLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.RiskLevelsService/UpdateRiskLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskLevelsServiceServer).UpdateRiskLevel(ctx, req.(*UpdateRiskLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskLevelsService_DeleteRiskLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRiskLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskLevelsServiceServer).DeleteRiskLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.products.RiskLevelsService/DeleteRiskLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskLevelsServiceServer).DeleteRiskLevel(ctx, req.(*DeleteRiskLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiskLevelsService_ServiceDesc is the grpc.ServiceDesc for RiskLevelsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiskLevelsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.products.RiskLevelsService",
	HandlerType: (*RiskLevelsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRiskLevel",
			Handler:    _RiskLevelsService_CreateRiskLevel_Handler,
		},
		{
			MethodName: "ListRiskLevels",
			Handler:    _RiskLevelsService_ListRiskLevels_Handler,
		},
		{
			MethodName: "GetRiskLevel",
			Handler:    _RiskLevelsService_GetRiskLevel_Handler,
		},
		{
			MethodName: "UpdateRiskLevel",
			Handler:    _RiskLevelsService_UpdateRiskLevel_Handler,
		},
		{
			MethodName: "DeleteRiskLevel",
			Handler:    _RiskLevelsService_DeleteRiskLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/products/all.proto",
}
