// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: bnk.to/core/api/v1/products/all.proto

// Package products is a package for managing products.
// TODO: restructure types

package products

import (
	reflect "reflect"
	sync "sync"

	v1 "bnk.to/core/api/v1"
	_ "github.com/xo/ecosystem/proto/xo"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DepositProductType is the type of a deposit product.
type DepositProductType int32

const (
	DepositProductType_TypeCurrentAccount  DepositProductType = 0
	DepositProductType_TypeRegularSavings  DepositProductType = 1
	DepositProductType_TypeFixedDeposit    DepositProductType = 2
	DepositProductType_TypeSavingsPlan     DepositProductType = 3
	DepositProductType_TypeInvestorAccount DepositProductType = 4
)

// Enum value maps for DepositProductType.
var (
	DepositProductType_name = map[int32]string{
		0: "TypeCurrentAccount",
		1: "TypeRegularSavings",
		2: "TypeFixedDeposit",
		3: "TypeSavingsPlan",
		4: "TypeInvestorAccount",
	}
	DepositProductType_value = map[string]int32{
		"TypeCurrentAccount":  0,
		"TypeRegularSavings":  1,
		"TypeFixedDeposit":    2,
		"TypeSavingsPlan":     3,
		"TypeInvestorAccount": 4,
	}
)

func (x DepositProductType) Enum() *DepositProductType {
	p := new(DepositProductType)
	*p = x
	return p
}

func (x DepositProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepositProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[0].Descriptor()
}

func (DepositProductType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[0]
}

func (x DepositProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepositProductType.Descriptor instead.
func (DepositProductType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{0}
}

// DepositCategory is the category of a deposit product.
type DepositCategory int32

const (
	DepositCategory_DepositCategoryPersonalDeposit         DepositCategory = 0
	DepositCategory_DepositCategoryBusinessDeposit         DepositCategory = 1
	DepositCategory_DepositCategoryDailyBankingAccounts    DepositCategory = 2
	DepositCategory_DepositCategoryBusinessBankingAccounts DepositCategory = 3
	DepositCategory_DepositCategoryStoredValueAccounts     DepositCategory = 4
	DepositCategory_DepositCategoryUncategorized           DepositCategory = 5
)

// Enum value maps for DepositCategory.
var (
	DepositCategory_name = map[int32]string{
		0: "DepositCategoryPersonalDeposit",
		1: "DepositCategoryBusinessDeposit",
		2: "DepositCategoryDailyBankingAccounts",
		3: "DepositCategoryBusinessBankingAccounts",
		4: "DepositCategoryStoredValueAccounts",
		5: "DepositCategoryUncategorized",
	}
	DepositCategory_value = map[string]int32{
		"DepositCategoryPersonalDeposit":         0,
		"DepositCategoryBusinessDeposit":         1,
		"DepositCategoryDailyBankingAccounts":    2,
		"DepositCategoryBusinessBankingAccounts": 3,
		"DepositCategoryStoredValueAccounts":     4,
		"DepositCategoryUncategorized":           5,
	}
)

func (x DepositCategory) Enum() *DepositCategory {
	p := new(DepositCategory)
	*p = x
	return p
}

func (x DepositCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepositCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[1].Descriptor()
}

func (DepositCategory) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[1]
}

func (x DepositCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepositCategory.Descriptor instead.
func (DepositCategory) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{1}
}

// BatchUpdateAction is the batch update action to perform.
type BatchUpdateAction int32

const (
	BatchUpdateAction_UpdateInterestSettings BatchUpdateAction = 0
)

// Enum value maps for BatchUpdateAction.
var (
	BatchUpdateAction_name = map[int32]string{
		0: "UpdateInterestSettings",
	}
	BatchUpdateAction_value = map[string]int32{
		"UpdateInterestSettings": 0,
	}
)

func (x BatchUpdateAction) Enum() *BatchUpdateAction {
	p := new(BatchUpdateAction)
	*p = x
	return p
}

func (x BatchUpdateAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchUpdateAction) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[2].Descriptor()
}

func (BatchUpdateAction) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[2]
}

func (x BatchUpdateAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchUpdateAction.Descriptor instead.
func (BatchUpdateAction) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{2}
}

// FeeCalculationMethod is the method used to calculate the fee for a
// disbursement. By default, the fee is a flat amount.
type FeeCalculationMethod int32

const (
	FeeCalculationMethod_MethodFlat                                     FeeCalculationMethod = 0
	FeeCalculationMethod_MethodLoanAmountPercentage                     FeeCalculationMethod = 1
	FeeCalculationMethod_MethodRepaymentPrincipalAmountPercentage       FeeCalculationMethod = 2
	FeeCalculationMethod_MethodLoanAmountPercentageNumberOfInstallments FeeCalculationMethod = 3
	FeeCalculationMethod_MethodFlatNumberOfInstallments                 FeeCalculationMethod = 4
)

// Enum value maps for FeeCalculationMethod.
var (
	FeeCalculationMethod_name = map[int32]string{
		0: "MethodFlat",
		1: "MethodLoanAmountPercentage",
		2: "MethodRepaymentPrincipalAmountPercentage",
		3: "MethodLoanAmountPercentageNumberOfInstallments",
		4: "MethodFlatNumberOfInstallments",
	}
	FeeCalculationMethod_value = map[string]int32{
		"MethodFlat":                                     0,
		"MethodLoanAmountPercentage":                     1,
		"MethodRepaymentPrincipalAmountPercentage":       2,
		"MethodLoanAmountPercentageNumberOfInstallments": 3,
		"MethodFlatNumberOfInstallments":                 4,
	}
)

func (x FeeCalculationMethod) Enum() *FeeCalculationMethod {
	p := new(FeeCalculationMethod)
	*p = x
	return p
}

func (x FeeCalculationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeCalculationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[3].Descriptor()
}

func (FeeCalculationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[3]
}

func (x FeeCalculationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeCalculationMethod.Descriptor instead.
func (FeeCalculationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{3}
}

// FeeApplyDateMethod is the method used to determine when the fee is applied.
// By default, the fee is applied monthly from the fee was activated.
type FeeApplyDateMethod int32

const (
	FeeApplyDateMethod_MonthlyFromActivation FeeApplyDateMethod = 0
	FeeApplyDateMethod_FirstOfEveryMonth     FeeApplyDateMethod = 1
)

// Enum value maps for FeeApplyDateMethod.
var (
	FeeApplyDateMethod_name = map[int32]string{
		0: "MonthlyFromActivation",
		1: "FirstOfEveryMonth",
	}
	FeeApplyDateMethod_value = map[string]int32{
		"MonthlyFromActivation": 0,
		"FirstOfEveryMonth":     1,
	}
)

func (x FeeApplyDateMethod) Enum() *FeeApplyDateMethod {
	p := new(FeeApplyDateMethod)
	*p = x
	return p
}

func (x FeeApplyDateMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeApplyDateMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[4].Descriptor()
}

func (FeeApplyDateMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[4]
}

func (x FeeApplyDateMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeApplyDateMethod.Descriptor instead.
func (FeeApplyDateMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{4}
}

// FeeTrigger is the instance in which the fee is applied.
type FeeTrigger int32

const (
	FeeTrigger_Manual                      FeeTrigger = 0
	FeeTrigger_ManualPlanned               FeeTrigger = 1
	FeeTrigger_Disbursement                FeeTrigger = 2
	FeeTrigger_CapitalizedDisbursement     FeeTrigger = 3
	FeeTrigger_UpfrontDisbursement         FeeTrigger = 4
	FeeTrigger_LateRepayment               FeeTrigger = 5
	FeeTrigger_MonthlyFee                  FeeTrigger = 6
	FeeTrigger_PaymentDue                  FeeTrigger = 7
	FeeTrigger_PaymentDueAppliedOnDueDates FeeTrigger = 8
)

// Enum value maps for FeeTrigger.
var (
	FeeTrigger_name = map[int32]string{
		0: "Manual",
		1: "ManualPlanned",
		2: "Disbursement",
		3: "CapitalizedDisbursement",
		4: "UpfrontDisbursement",
		5: "LateRepayment",
		6: "MonthlyFee",
		7: "PaymentDue",
		8: "PaymentDueAppliedOnDueDates",
	}
	FeeTrigger_value = map[string]int32{
		"Manual":                      0,
		"ManualPlanned":               1,
		"Disbursement":                2,
		"CapitalizedDisbursement":     3,
		"UpfrontDisbursement":         4,
		"LateRepayment":               5,
		"MonthlyFee":                  6,
		"PaymentDue":                  7,
		"PaymentDueAppliedOnDueDates": 8,
	}
)

func (x FeeTrigger) Enum() *FeeTrigger {
	p := new(FeeTrigger)
	*p = x
	return p
}

func (x FeeTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[5].Descriptor()
}

func (FeeTrigger) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[5]
}

func (x FeeTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeTrigger.Descriptor instead.
func (FeeTrigger) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{5}
}

// AmortizationType is the type of profile used for amortization for a fee.
type AmortizationType int32

const (
	AmortizationType_ProfileNone                  AmortizationType = 0
	AmortizationType_ProfileSumOfYearsDigits      AmortizationType = 1
	AmortizationType_ProfileStraightLine          AmortizationType = 2
	AmortizationType_ProfileEffectiveInterestRate AmortizationType = 3
)

// Enum value maps for AmortizationType.
var (
	AmortizationType_name = map[int32]string{
		0: "ProfileNone",
		1: "ProfileSumOfYearsDigits",
		2: "ProfileStraightLine",
		3: "ProfileEffectiveInterestRate",
	}
	AmortizationType_value = map[string]int32{
		"ProfileNone":                  0,
		"ProfileSumOfYearsDigits":      1,
		"ProfileStraightLine":          2,
		"ProfileEffectiveInterestRate": 3,
	}
)

func (x AmortizationType) Enum() *AmortizationType {
	p := new(AmortizationType)
	*p = x
	return p
}

func (x AmortizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AmortizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[6].Descriptor()
}

func (AmortizationType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[6]
}

func (x AmortizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AmortizationType.Descriptor instead.
func (AmortizationType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{6}
}

// PeriodFrequency is the frequency of the period interval.
type PeriodFrequency int32

const (
	PeriodFrequency_AccountInstallmentsDueDates             PeriodFrequency = 0
	PeriodFrequency_AccountInstallmentsDueDatesDailyBooking PeriodFrequency = 1
	PeriodFrequency_CustomInterval                          PeriodFrequency = 2
)

// Enum value maps for PeriodFrequency.
var (
	PeriodFrequency_name = map[int32]string{
		0: "AccountInstallmentsDueDates",
		1: "AccountInstallmentsDueDatesDailyBooking",
		2: "CustomInterval",
	}
	PeriodFrequency_value = map[string]int32{
		"AccountInstallmentsDueDates":             0,
		"AccountInstallmentsDueDatesDailyBooking": 1,
		"CustomInterval":                          2,
	}
)

func (x PeriodFrequency) Enum() *PeriodFrequency {
	p := new(PeriodFrequency)
	*p = x
	return p
}

func (x PeriodFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeriodFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[7].Descriptor()
}

func (PeriodFrequency) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[7]
}

func (x PeriodFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeriodFrequency.Descriptor instead.
func (PeriodFrequency) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{7}
}

// IntervalType is the type of the interval used for the period.
type IntervalType int32

const (
	IntervalType_PredefinedIntervals IntervalType = 0
	IntervalType_FullTerm            IntervalType = 1
)

// Enum value maps for IntervalType.
var (
	IntervalType_name = map[int32]string{
		0: "PredefinedIntervals",
		1: "FullTerm",
	}
	IntervalType_value = map[string]int32{
		"PredefinedIntervals": 0,
		"FullTerm":            1,
	}
)

func (x IntervalType) Enum() *IntervalType {
	p := new(IntervalType)
	*p = x
	return p
}

func (x IntervalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntervalType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[8].Descriptor()
}

func (IntervalType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[8]
}

func (x IntervalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntervalType.Descriptor instead.
func (IntervalType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{8}
}

// InterestRateSource is the source used for interest rate calculation.
type InterestRateSource int32

const (
	InterestRateSource_FixedInterestRate InterestRateSource = 0
	InterestRateSource_IndexInterestRate InterestRateSource = 1
)

// Enum value maps for InterestRateSource.
var (
	InterestRateSource_name = map[int32]string{
		0: "FixedInterestRate",
		1: "IndexInterestRate",
	}
	InterestRateSource_value = map[string]int32{
		"FixedInterestRate": 0,
		"IndexInterestRate": 1,
	}
)

func (x InterestRateSource) Enum() *InterestRateSource {
	p := new(InterestRateSource)
	*p = x
	return p
}

func (x InterestRateSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterestRateSource) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[9].Descriptor()
}

func (InterestRateSource) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[9]
}

func (x InterestRateSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterestRateSource.Descriptor instead.
func (InterestRateSource) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{9}
}

// InterestRateTerms is the terms used for interest rate calculation.
type InterestRateTerms int32

const (
	InterestRateTerms_Fixed        InterestRateTerms = 0
	InterestRateTerms_Tiered       InterestRateTerms = 1
	InterestRateTerms_TieredPeriod InterestRateTerms = 2
	InterestRateTerms_TieredBand   InterestRateTerms = 3
)

// Enum value maps for InterestRateTerms.
var (
	InterestRateTerms_name = map[int32]string{
		0: "Fixed",
		1: "Tiered",
		2: "TieredPeriod",
		3: "TieredBand",
	}
	InterestRateTerms_value = map[string]int32{
		"Fixed":        0,
		"Tiered":       1,
		"TieredPeriod": 2,
		"TieredBand":   3,
	}
)

func (x InterestRateTerms) Enum() *InterestRateTerms {
	p := new(InterestRateTerms)
	*p = x
	return p
}

func (x InterestRateTerms) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterestRateTerms) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[10].Descriptor()
}

func (InterestRateTerms) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[10]
}

func (x InterestRateTerms) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterestRateTerms.Descriptor instead.
func (InterestRateTerms) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{10}
}

// DaysInYear is the number of days in a year for the purpose of interest
// calculation.
type DaysInYear int32

const (
	DaysInYear_YearActual365Fixed   DaysInYear = 0
	DaysInYear_YearActual364        DaysInYear = 1
	DaysInYear_YearActual360        DaysInYear = 2
	DaysInYear_YearActualActualIsda DaysInYear = 3
	DaysInYear_YearE30360           DaysInYear = 4
	DaysInYear_YearE3042365         DaysInYear = 5
)

// Enum value maps for DaysInYear.
var (
	DaysInYear_name = map[int32]string{
		0: "YearActual365Fixed",
		1: "YearActual364",
		2: "YearActual360",
		3: "YearActualActualIsda",
		4: "YearE30360",
		5: "YearE3042365",
	}
	DaysInYear_value = map[string]int32{
		"YearActual365Fixed":   0,
		"YearActual364":        1,
		"YearActual360":        2,
		"YearActualActualIsda": 3,
		"YearE30360":           4,
		"YearE3042365":         5,
	}
)

func (x DaysInYear) Enum() *DaysInYear {
	p := new(DaysInYear)
	*p = x
	return p
}

func (x DaysInYear) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaysInYear) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[11].Descriptor()
}

func (DaysInYear) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[11]
}

func (x DaysInYear) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DaysInYear.Descriptor instead.
func (DaysInYear) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{11}
}

// InterestType is the type of the interest.
type InterestType int32

const (
	InterestType_Simple      InterestType = 0
	InterestType_Capitalized InterestType = 1
	InterestType_Compounding InterestType = 2
)

// Enum value maps for InterestType.
var (
	InterestType_name = map[int32]string{
		0: "Simple",
		1: "Capitalized",
		2: "Compounding",
	}
	InterestType_value = map[string]int32{
		"Simple":      0,
		"Capitalized": 1,
		"Compounding": 2,
	}
)

func (x InterestType) Enum() *InterestType {
	p := new(InterestType)
	*p = x
	return p
}

func (x InterestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterestType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[12].Descriptor()
}

func (InterestType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[12]
}

func (x InterestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterestType.Descriptor instead.
func (InterestType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{12}
}

// InterestApplicationMethod is the method used to apply the interest.
type InterestApplicationMethod int32

const (
	InterestApplicationMethod_MethodAfterDisbursement InterestApplicationMethod = 0
	InterestApplicationMethod_MethodRepaymentDueDate  InterestApplicationMethod = 1
)

// Enum value maps for InterestApplicationMethod.
var (
	InterestApplicationMethod_name = map[int32]string{
		0: "MethodAfterDisbursement",
		1: "MethodRepaymentDueDate",
	}
	InterestApplicationMethod_value = map[string]int32{
		"MethodAfterDisbursement": 0,
		"MethodRepaymentDueDate":  1,
	}
)

func (x InterestApplicationMethod) Enum() *InterestApplicationMethod {
	p := new(InterestApplicationMethod)
	*p = x
	return p
}

func (x InterestApplicationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterestApplicationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[13].Descriptor()
}

func (InterestApplicationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[13]
}

func (x InterestApplicationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterestApplicationMethod.Descriptor instead.
func (InterestApplicationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{13}
}

// BalanceCalculationMethod is the method used to calculate the balance of the
// interest.
type BalanceCalculationMethod int32

const (
	BalanceCalculationMethod_MethodPrincipal            BalanceCalculationMethod = 0
	BalanceCalculationMethod_MethodPrincipalAndInterest BalanceCalculationMethod = 1
)

// Enum value maps for BalanceCalculationMethod.
var (
	BalanceCalculationMethod_name = map[int32]string{
		0: "MethodPrincipal",
		1: "MethodPrincipalAndInterest",
	}
	BalanceCalculationMethod_value = map[string]int32{
		"MethodPrincipal":            0,
		"MethodPrincipalAndInterest": 1,
	}
)

func (x BalanceCalculationMethod) Enum() *BalanceCalculationMethod {
	p := new(BalanceCalculationMethod)
	*p = x
	return p
}

func (x BalanceCalculationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalanceCalculationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[14].Descriptor()
}

func (BalanceCalculationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[14]
}

func (x BalanceCalculationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BalanceCalculationMethod.Descriptor instead.
func (BalanceCalculationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{14}
}

// InterestCalculationMethod is the method used to calculate the interest.
type InterestCalculationMethod int32

const (
	InterestCalculationMethod_MethodFlatInterest               InterestCalculationMethod = 0
	InterestCalculationMethod_MethodDecliningBalance           InterestCalculationMethod = 1
	InterestCalculationMethod_MethodDecliningBalanceDiscounted InterestCalculationMethod = 2
)

// Enum value maps for InterestCalculationMethod.
var (
	InterestCalculationMethod_name = map[int32]string{
		0: "MethodFlatInterest",
		1: "MethodDecliningBalance",
		2: "MethodDecliningBalanceDiscounted",
	}
	InterestCalculationMethod_value = map[string]int32{
		"MethodFlatInterest":               0,
		"MethodDecliningBalance":           1,
		"MethodDecliningBalanceDiscounted": 2,
	}
)

func (x InterestCalculationMethod) Enum() *InterestCalculationMethod {
	p := new(InterestCalculationMethod)
	*p = x
	return p
}

func (x InterestCalculationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterestCalculationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[15].Descriptor()
}

func (InterestCalculationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[15]
}

func (x InterestCalculationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterestCalculationMethod.Descriptor instead.
func (InterestCalculationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{15}
}

// DaysCountMethod is the method used to count the days.
type DaysCountMethod int32

const (
	// DaysCountMethod_MethodRepaymentPeriodicity is the method that counts the day up to the
	// most recent repayment date.
	DaysCountMethod_MethodRepaymentPeriodicity DaysCountMethod = 0
	// DaysCountMethod_MethodActualDayCount is the method that counts the actual number of days.
	DaysCountMethod_MethodActualDayCount DaysCountMethod = 1
)

// Enum value maps for DaysCountMethod.
var (
	DaysCountMethod_name = map[int32]string{
		0: "MethodRepaymentPeriodicity",
		1: "MethodActualDayCount",
	}
	DaysCountMethod_value = map[string]int32{
		"MethodRepaymentPeriodicity": 0,
		"MethodActualDayCount":       1,
	}
)

func (x DaysCountMethod) Enum() *DaysCountMethod {
	p := new(DaysCountMethod)
	*p = x
	return p
}

func (x DaysCountMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaysCountMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[16].Descriptor()
}

func (DaysCountMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[16]
}

func (x DaysCountMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DaysCountMethod.Descriptor instead.
func (DaysCountMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{16}
}

// InterestCalculationBalance is the balance used for interest calculation.
type InterestCalculationBalance int32

const (
	InterestCalculationBalance_BalanceMinimum           InterestCalculationBalance = 0
	InterestCalculationBalance_BalanceAverage           InterestCalculationBalance = 1
	InterestCalculationBalance_BalanceEndOfDay          InterestCalculationBalance = 2
	InterestCalculationBalance_BalanceMinimumToEndOfDay InterestCalculationBalance = 3
)

// Enum value maps for InterestCalculationBalance.
var (
	InterestCalculationBalance_name = map[int32]string{
		0: "BalanceMinimum",
		1: "BalanceAverage",
		2: "BalanceEndOfDay",
		3: "BalanceMinimumToEndOfDay",
	}
	InterestCalculationBalance_value = map[string]int32{
		"BalanceMinimum":           0,
		"BalanceAverage":           1,
		"BalanceEndOfDay":          2,
		"BalanceMinimumToEndOfDay": 3,
	}
)

func (x InterestCalculationBalance) Enum() *InterestCalculationBalance {
	p := new(InterestCalculationBalance)
	*p = x
	return p
}

func (x InterestCalculationBalance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterestCalculationBalance) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[17].Descriptor()
}

func (InterestCalculationBalance) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[17]
}

func (x InterestCalculationBalance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterestCalculationBalance.Descriptor instead.
func (InterestCalculationBalance) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{17}
}

// DateCalculationMethod is the method of calculating the arrears date.
type DateCalculationMethod int32

const (
	DateCalculationMethod_DateAccountFirstWentToArrears                DateCalculationMethod = 0
	DateCalculationMethod_DateLastLateRepayment                        DateCalculationMethod = 1
	DateCalculationMethod_DateAccountFirstBreachedMaterialityThreshold DateCalculationMethod = 2
)

// Enum value maps for DateCalculationMethod.
var (
	DateCalculationMethod_name = map[int32]string{
		0: "DateAccountFirstWentToArrears",
		1: "DateLastLateRepayment",
		2: "DateAccountFirstBreachedMaterialityThreshold",
	}
	DateCalculationMethod_value = map[string]int32{
		"DateAccountFirstWentToArrears":                0,
		"DateLastLateRepayment":                        1,
		"DateAccountFirstBreachedMaterialityThreshold": 2,
	}
)

func (x DateCalculationMethod) Enum() *DateCalculationMethod {
	p := new(DateCalculationMethod)
	*p = x
	return p
}

func (x DateCalculationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateCalculationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[18].Descriptor()
}

func (DateCalculationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[18]
}

func (x DateCalculationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateCalculationMethod.Descriptor instead.
func (DateCalculationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{18}
}

// ToleranceCalculation is the method of calculating the tolerance.
type ToleranceCalculation int32

const (
	ToleranceCalculation_ArrearsTolerancePeriod     ToleranceCalculation = 0
	ToleranceCalculation_MonthlyArrearsToleranceDay ToleranceCalculation = 1
)

// Enum value maps for ToleranceCalculation.
var (
	ToleranceCalculation_name = map[int32]string{
		0: "ArrearsTolerancePeriod",
		1: "MonthlyArrearsToleranceDay",
	}
	ToleranceCalculation_value = map[string]int32{
		"ArrearsTolerancePeriod":     0,
		"MonthlyArrearsToleranceDay": 1,
	}
)

func (x ToleranceCalculation) Enum() *ToleranceCalculation {
	p := new(ToleranceCalculation)
	*p = x
	return p
}

func (x ToleranceCalculation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToleranceCalculation) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[19].Descriptor()
}

func (ToleranceCalculation) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[19]
}

func (x ToleranceCalculation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToleranceCalculation.Descriptor instead.
func (ToleranceCalculation) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{19}
}

// SettlementMethod is the method of settling the loan account.
type SettlementMethod int32

const (
	SettlementMethod_MethodFullDueAmounts       SettlementMethod = 0
	SettlementMethod_MethodPartialDueAmounts    SettlementMethod = 1
	SettlementMethod_MethodNoAutomatedTransfers SettlementMethod = 2
)

// Enum value maps for SettlementMethod.
var (
	SettlementMethod_name = map[int32]string{
		0: "MethodFullDueAmounts",
		1: "MethodPartialDueAmounts",
		2: "MethodNoAutomatedTransfers",
	}
	SettlementMethod_value = map[string]int32{
		"MethodFullDueAmounts":       0,
		"MethodPartialDueAmounts":    1,
		"MethodNoAutomatedTransfers": 2,
	}
)

func (x SettlementMethod) Enum() *SettlementMethod {
	p := new(SettlementMethod)
	*p = x
	return p
}

func (x SettlementMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettlementMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[20].Descriptor()
}

func (SettlementMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[20]
}

func (x SettlementMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettlementMethod.Descriptor instead.
func (SettlementMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{20}
}

// LinkedAccountOptions is options for configuring the linked account.
type LinkedAccountOptions int32

const (
	LinkedAccountOptions_AutoLinkAccounts         LinkedAccountOptions = 0
	LinkedAccountOptions_AutoCreateLinkedAccounts LinkedAccountOptions = 1
)

// Enum value maps for LinkedAccountOptions.
var (
	LinkedAccountOptions_name = map[int32]string{
		0: "AutoLinkAccounts",
		1: "AutoCreateLinkedAccounts",
	}
	LinkedAccountOptions_value = map[string]int32{
		"AutoLinkAccounts":         0,
		"AutoCreateLinkedAccounts": 1,
	}
)

func (x LinkedAccountOptions) Enum() *LinkedAccountOptions {
	p := new(LinkedAccountOptions)
	*p = x
	return p
}

func (x LinkedAccountOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkedAccountOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[21].Descriptor()
}

func (LinkedAccountOptions) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[21]
}

func (x LinkedAccountOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkedAccountOptions.Descriptor instead.
func (LinkedAccountOptions) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{21}
}

// CommissionAllocationType is the type of allocation for the commission.
type CommissionAllocationType int32

const (
	CommissionAllocationType_TypePercentageOfLoanFunding  CommissionAllocationType = 0
	CommissionAllocationType_TypeFixedInterestCommissions CommissionAllocationType = 1
)

// Enum value maps for CommissionAllocationType.
var (
	CommissionAllocationType_name = map[int32]string{
		0: "TypePercentageOfLoanFunding",
		1: "TypeFixedInterestCommissions",
	}
	CommissionAllocationType_value = map[string]int32{
		"TypePercentageOfLoanFunding":  0,
		"TypeFixedInterestCommissions": 1,
	}
)

func (x CommissionAllocationType) Enum() *CommissionAllocationType {
	p := new(CommissionAllocationType)
	*p = x
	return p
}

func (x CommissionAllocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommissionAllocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[22].Descriptor()
}

func (CommissionAllocationType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[22]
}

func (x CommissionAllocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommissionAllocationType.Descriptor instead.
func (CommissionAllocationType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{22}
}

// GracePeriodType is the type of grace period available.
type GracePeriodType int32

const (
	GracePeriodType_NoGracePeriod       GracePeriodType = 0
	GracePeriodType_PayInterestOnly     GracePeriodType = 1
	GracePeriodType_InterestForgiveness GracePeriodType = 2
)

// Enum value maps for GracePeriodType.
var (
	GracePeriodType_name = map[int32]string{
		0: "NoGracePeriod",
		1: "PayInterestOnly",
		2: "InterestForgiveness",
	}
	GracePeriodType_value = map[string]int32{
		"NoGracePeriod":       0,
		"PayInterestOnly":     1,
		"InterestForgiveness": 2,
	}
)

func (x GracePeriodType) Enum() *GracePeriodType {
	p := new(GracePeriodType)
	*p = x
	return p
}

func (x GracePeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GracePeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[23].Descriptor()
}

func (GracePeriodType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[23]
}

func (x GracePeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GracePeriodType.Descriptor instead.
func (GracePeriodType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{23}
}

// LatePaymentsRecalculationMethod is the method of recalculating the late
// payment.
type LatePaymentsRecalculationMethod int32

const (
	LatePaymentsRecalculationMethod_MethodOverdueInstallmentsIncrease LatePaymentsRecalculationMethod = 0
	LatePaymentsRecalculationMethod_MethodLastInstallmentIncrease     LatePaymentsRecalculationMethod = 1
)

// Enum value maps for LatePaymentsRecalculationMethod.
var (
	LatePaymentsRecalculationMethod_name = map[int32]string{
		0: "MethodOverdueInstallmentsIncrease",
		1: "MethodLastInstallmentIncrease",
	}
	LatePaymentsRecalculationMethod_value = map[string]int32{
		"MethodOverdueInstallmentsIncrease": 0,
		"MethodLastInstallmentIncrease":     1,
	}
)

func (x LatePaymentsRecalculationMethod) Enum() *LatePaymentsRecalculationMethod {
	p := new(LatePaymentsRecalculationMethod)
	*p = x
	return p
}

func (x LatePaymentsRecalculationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LatePaymentsRecalculationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[24].Descriptor()
}

func (LatePaymentsRecalculationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[24]
}

func (x LatePaymentsRecalculationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LatePaymentsRecalculationMethod.Descriptor instead.
func (LatePaymentsRecalculationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{24}
}

// PaymentType is the type of payment for the loan account.
type PaymentType int32

const (
	// PaymentType_MethodHorizontal is the method of payment for the loan account where
	// payments are made on the repayments.
	PaymentType_MethodHorizontal PaymentType = 0
	// PaymentType_MethodVertical is the method of payment for the loan account where
	// payments are made on the loan account.
	PaymentType_MethodVertical PaymentType = 1
)

// Enum value maps for PaymentType.
var (
	PaymentType_name = map[int32]string{
		0: "MethodHorizontal",
		1: "MethodVertical",
	}
	PaymentType_value = map[string]int32{
		"MethodHorizontal": 0,
		"MethodVertical":   1,
	}
)

func (x PaymentType) Enum() *PaymentType {
	p := new(PaymentType)
	*p = x
	return p
}

func (x PaymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[25].Descriptor()
}

func (PaymentType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[25]
}

func (x PaymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentType.Descriptor instead.
func (PaymentType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{25}
}

// RepaymentAllocationOrder is the order in which the repayments are allocated.
type RepaymentAllocationOrder int32

const (
	RepaymentAllocationOrder_OrderPrincipal RepaymentAllocationOrder = 0
	RepaymentAllocationOrder_OrderInterest  RepaymentAllocationOrder = 1
	RepaymentAllocationOrder_OrderFee       RepaymentAllocationOrder = 2
	RepaymentAllocationOrder_OrderPenalty   RepaymentAllocationOrder = 3
)

// Enum value maps for RepaymentAllocationOrder.
var (
	RepaymentAllocationOrder_name = map[int32]string{
		0: "OrderPrincipal",
		1: "OrderInterest",
		2: "OrderFee",
		3: "OrderPenalty",
	}
	RepaymentAllocationOrder_value = map[string]int32{
		"OrderPrincipal": 0,
		"OrderInterest":  1,
		"OrderFee":       2,
		"OrderPenalty":   3,
	}
)

func (x RepaymentAllocationOrder) Enum() *RepaymentAllocationOrder {
	p := new(RepaymentAllocationOrder)
	*p = x
	return p
}

func (x RepaymentAllocationOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepaymentAllocationOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[26].Descriptor()
}

func (RepaymentAllocationOrder) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[26]
}

func (x RepaymentAllocationOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepaymentAllocationOrder.Descriptor instead.
func (RepaymentAllocationOrder) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{26}
}

// ElementsRecalculationMethod is the method of recalculating the elements.
type ElementsRecalculationMethod int32

const (
	ElementsRecalculationMethod_MethodPrincipalExpectedFixed ElementsRecalculationMethod = 0
	ElementsRecalculationMethod_MethodTotalExpectedFixed     ElementsRecalculationMethod = 1
)

// Enum value maps for ElementsRecalculationMethod.
var (
	ElementsRecalculationMethod_name = map[int32]string{
		0: "MethodPrincipalExpectedFixed",
		1: "MethodTotalExpectedFixed",
	}
	ElementsRecalculationMethod_value = map[string]int32{
		"MethodPrincipalExpectedFixed": 0,
		"MethodTotalExpectedFixed":     1,
	}
)

func (x ElementsRecalculationMethod) Enum() *ElementsRecalculationMethod {
	p := new(ElementsRecalculationMethod)
	*p = x
	return p
}

func (x ElementsRecalculationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElementsRecalculationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[27].Descriptor()
}

func (ElementsRecalculationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[27]
}

func (x ElementsRecalculationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElementsRecalculationMethod.Descriptor instead.
func (ElementsRecalculationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{27}
}

// FuturePaymentsAcceptance is different levels of future payments acceptance.
type FuturePaymentsAcceptance int32

const (
	FuturePaymentsAcceptance_NoFuturePayments               FuturePaymentsAcceptance = 0
	FuturePaymentsAcceptance_AcceptanceAcceptFuturePayments FuturePaymentsAcceptance = 1
	FuturePaymentsAcceptance_AcceptanceAcceptOverpayments   FuturePaymentsAcceptance = 2
)

// Enum value maps for FuturePaymentsAcceptance.
var (
	FuturePaymentsAcceptance_name = map[int32]string{
		0: "NoFuturePayments",
		1: "AcceptanceAcceptFuturePayments",
		2: "AcceptanceAcceptOverpayments",
	}
	FuturePaymentsAcceptance_value = map[string]int32{
		"NoFuturePayments":               0,
		"AcceptanceAcceptFuturePayments": 1,
		"AcceptanceAcceptOverpayments":   2,
	}
)

func (x FuturePaymentsAcceptance) Enum() *FuturePaymentsAcceptance {
	p := new(FuturePaymentsAcceptance)
	*p = x
	return p
}

func (x FuturePaymentsAcceptance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FuturePaymentsAcceptance) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[28].Descriptor()
}

func (FuturePaymentsAcceptance) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[28]
}

func (x FuturePaymentsAcceptance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FuturePaymentsAcceptance.Descriptor instead.
func (FuturePaymentsAcceptance) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{28}
}

// PrepaymentRecalculationMethod is the method of recalculating the payment when
// prepayments are made.
type PrepaymentRecalculationMethod int32

const (
	PrepaymentRecalculationMethod_NoRecalculation                                 PrepaymentRecalculationMethod = 0
	PrepaymentRecalculationMethod_RescheduleRemainingRepayments                   PrepaymentRecalculationMethod = 1
	PrepaymentRecalculationMethod_RecalculateScheduleKeepSameNumberOfTerms        PrepaymentRecalculationMethod = 2
	PrepaymentRecalculationMethod_RecalculateScheduleKeepSamePrincipalAmount      PrepaymentRecalculationMethod = 3
	PrepaymentRecalculationMethod_RecalculateScheduleKeepSameTotalRepaymentAmount PrepaymentRecalculationMethod = 4
	PrepaymentRecalculationMethod_ReduceAmountPerInstallment                      PrepaymentRecalculationMethod = 5
	PrepaymentRecalculationMethod_ReduceNumberOfInstallments                      PrepaymentRecalculationMethod = 6
	PrepaymentRecalculationMethod_ReduceNumberOfInstallmentsNew                   PrepaymentRecalculationMethod = 7
)

// Enum value maps for PrepaymentRecalculationMethod.
var (
	PrepaymentRecalculationMethod_name = map[int32]string{
		0: "NoRecalculation",
		1: "RescheduleRemainingRepayments",
		2: "RecalculateScheduleKeepSameNumberOfTerms",
		3: "RecalculateScheduleKeepSamePrincipalAmount",
		4: "RecalculateScheduleKeepSameTotalRepaymentAmount",
		5: "ReduceAmountPerInstallment",
		6: "ReduceNumberOfInstallments",
		7: "ReduceNumberOfInstallmentsNew",
	}
	PrepaymentRecalculationMethod_value = map[string]int32{
		"NoRecalculation":                                 0,
		"RescheduleRemainingRepayments":                   1,
		"RecalculateScheduleKeepSameNumberOfTerms":        2,
		"RecalculateScheduleKeepSamePrincipalAmount":      3,
		"RecalculateScheduleKeepSameTotalRepaymentAmount": 4,
		"ReduceAmountPerInstallment":                      5,
		"ReduceNumberOfInstallments":                      6,
		"ReduceNumberOfInstallmentsNew":                   7,
	}
)

func (x PrepaymentRecalculationMethod) Enum() *PrepaymentRecalculationMethod {
	p := new(PrepaymentRecalculationMethod)
	*p = x
	return p
}

func (x PrepaymentRecalculationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrepaymentRecalculationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[29].Descriptor()
}

func (PrepaymentRecalculationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[29]
}

func (x PrepaymentRecalculationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrepaymentRecalculationMethod.Descriptor instead.
func (PrepaymentRecalculationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{29}
}

// PrincipalPaidInstallmentStatus is the status of repayment of the principal.
type PrincipalPaidInstallmentStatus int32

const (
	PrincipalPaidInstallmentStatus_StatusPartiallyPaid             PrincipalPaidInstallmentStatus = 0
	PrincipalPaidInstallmentStatus_StatusPaid                      PrincipalPaidInstallmentStatus = 1
	PrincipalPaidInstallmentStatus_StatusOriginalTotalExpectedPaid PrincipalPaidInstallmentStatus = 2
)

// Enum value maps for PrincipalPaidInstallmentStatus.
var (
	PrincipalPaidInstallmentStatus_name = map[int32]string{
		0: "StatusPartiallyPaid",
		1: "StatusPaid",
		2: "StatusOriginalTotalExpectedPaid",
	}
	PrincipalPaidInstallmentStatus_value = map[string]int32{
		"StatusPartiallyPaid":             0,
		"StatusPaid":                      1,
		"StatusOriginalTotalExpectedPaid": 2,
	}
)

func (x PrincipalPaidInstallmentStatus) Enum() *PrincipalPaidInstallmentStatus {
	p := new(PrincipalPaidInstallmentStatus)
	*p = x
	return p
}

func (x PrincipalPaidInstallmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrincipalPaidInstallmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[30].Descriptor()
}

func (PrincipalPaidInstallmentStatus) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[30]
}

func (x PrincipalPaidInstallmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrincipalPaidInstallmentStatus.Descriptor instead.
func (PrincipalPaidInstallmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{30}
}

// PrincipalPaymentMethod is the method of payment for the principal.
type PrincipalPaymentMethod int32

const (
	PrincipalPaymentMethod_MethodFlatPayment                    PrincipalPaymentMethod = 0
	PrincipalPaymentMethod_MethodOutstandingPrincipalPercentage PrincipalPaymentMethod = 1
	PrincipalPaymentMethod_MethodPrincipalPercentageLastDisb    PrincipalPaymentMethod = 2
	PrincipalPaymentMethod_MethodTotalBalancePercentage         PrincipalPaymentMethod = 3
	PrincipalPaymentMethod_MethodTotalBalanceFlat               PrincipalPaymentMethod = 4
	PrincipalPaymentMethod_MethodTotalPrincipalPercentage       PrincipalPaymentMethod = 5
)

// Enum value maps for PrincipalPaymentMethod.
var (
	PrincipalPaymentMethod_name = map[int32]string{
		0: "MethodFlatPayment",
		1: "MethodOutstandingPrincipalPercentage",
		2: "MethodPrincipalPercentageLastDisb",
		3: "MethodTotalBalancePercentage",
		4: "MethodTotalBalanceFlat",
		5: "MethodTotalPrincipalPercentage",
	}
	PrincipalPaymentMethod_value = map[string]int32{
		"MethodFlatPayment":                    0,
		"MethodOutstandingPrincipalPercentage": 1,
		"MethodPrincipalPercentageLastDisb":    2,
		"MethodTotalBalancePercentage":         3,
		"MethodTotalBalanceFlat":               4,
		"MethodTotalPrincipalPercentage":       5,
	}
)

func (x PrincipalPaymentMethod) Enum() *PrincipalPaymentMethod {
	p := new(PrincipalPaymentMethod)
	*p = x
	return p
}

func (x PrincipalPaymentMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrincipalPaymentMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[31].Descriptor()
}

func (PrincipalPaymentMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[31]
}

func (x PrincipalPaymentMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrincipalPaymentMethod.Descriptor instead.
func (PrincipalPaymentMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{31}
}

// TotalDuePayment is the method of determining the total amount due.
type TotalDuePayment int32

const (
	TotalDuePayment_PaymentFlat                           TotalDuePayment = 0
	TotalDuePayment_PaymentOutstandingPrincipalPercentage TotalDuePayment = 1
	TotalDuePayment_PaymentPrincipalPercentageLastDisb    TotalDuePayment = 2
	TotalDuePayment_PaymentTotalBalancePercentage         TotalDuePayment = 3
	TotalDuePayment_PaymentTotalBalanceFlat               TotalDuePayment = 4
	TotalDuePayment_PaymentTotalPrincipalPercentage       TotalDuePayment = 5
)

// Enum value maps for TotalDuePayment.
var (
	TotalDuePayment_name = map[int32]string{
		0: "PaymentFlat",
		1: "PaymentOutstandingPrincipalPercentage",
		2: "PaymentPrincipalPercentageLastDisb",
		3: "PaymentTotalBalancePercentage",
		4: "PaymentTotalBalanceFlat",
		5: "PaymentTotalPrincipalPercentage",
	}
	TotalDuePayment_value = map[string]int32{
		"PaymentFlat":                           0,
		"PaymentOutstandingPrincipalPercentage": 1,
		"PaymentPrincipalPercentageLastDisb":    2,
		"PaymentTotalBalancePercentage":         3,
		"PaymentTotalBalanceFlat":               4,
		"PaymentTotalPrincipalPercentage":       5,
	}
)

func (x TotalDuePayment) Enum() *TotalDuePayment {
	p := new(TotalDuePayment)
	*p = x
	return p
}

func (x TotalDuePayment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TotalDuePayment) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[32].Descriptor()
}

func (TotalDuePayment) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[32]
}

func (x TotalDuePayment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TotalDuePayment.Descriptor instead.
func (TotalDuePayment) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{32}
}

// AmortizationMethod is the method used to generate repayment schedules for
// loan accounts.
type AmortizationMethod int32

const (
	AmortizationMethod_MethodStandardPayments  AmortizationMethod = 0
	AmortizationMethod_MethodBalloonPayments   AmortizationMethod = 1
	AmortizationMethod_MethodOptimizedPayments AmortizationMethod = 2
	AmortizationMethod_MethodPaymentPlan       AmortizationMethod = 3
)

// Enum value maps for AmortizationMethod.
var (
	AmortizationMethod_name = map[int32]string{
		0: "MethodStandardPayments",
		1: "MethodBalloonPayments",
		2: "MethodOptimizedPayments",
		3: "MethodPaymentPlan",
	}
	AmortizationMethod_value = map[string]int32{
		"MethodStandardPayments":  0,
		"MethodBalloonPayments":   1,
		"MethodOptimizedPayments": 2,
		"MethodPaymentPlan":       3,
	}
)

func (x AmortizationMethod) Enum() *AmortizationMethod {
	p := new(AmortizationMethod)
	*p = x
	return p
}

func (x AmortizationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AmortizationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[33].Descriptor()
}

func (AmortizationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[33]
}

func (x AmortizationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AmortizationMethod.Descriptor instead.
func (AmortizationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{33}
}

// LoanPenaltyCalculationMethod is the method used to calculate loan penalties.
type LoanPenaltyCalculationMethod int32

const (
	LoanPenaltyCalculationMethod_MethodNoRecalculate             LoanPenaltyCalculationMethod = 0
	LoanPenaltyCalculationMethod_MethodOverdueBalance            LoanPenaltyCalculationMethod = 1
	LoanPenaltyCalculationMethod_MethodOverdueBalanceAndInterest LoanPenaltyCalculationMethod = 2
	LoanPenaltyCalculationMethod_MethodOutstandingPrincipal      LoanPenaltyCalculationMethod = 3
)

// Enum value maps for LoanPenaltyCalculationMethod.
var (
	LoanPenaltyCalculationMethod_name = map[int32]string{
		0: "MethodNoRecalculate",
		1: "MethodOverdueBalance",
		2: "MethodOverdueBalanceAndInterest",
		3: "MethodOutstandingPrincipal",
	}
	LoanPenaltyCalculationMethod_value = map[string]int32{
		"MethodNoRecalculate":             0,
		"MethodOverdueBalance":            1,
		"MethodOverdueBalanceAndInterest": 2,
		"MethodOutstandingPrincipal":      3,
	}
)

func (x LoanPenaltyCalculationMethod) Enum() *LoanPenaltyCalculationMethod {
	p := new(LoanPenaltyCalculationMethod)
	*p = x
	return p
}

func (x LoanPenaltyCalculationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoanPenaltyCalculationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[34].Descriptor()
}

func (LoanPenaltyCalculationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[34]
}

func (x LoanPenaltyCalculationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoanPenaltyCalculationMethod.Descriptor instead.
func (LoanPenaltyCalculationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{34}
}

// RepaymentReschedulingMethod is the method used to reschedule repayments.
type RepaymentReschedulingMethod int32

const (
	RepaymentReschedulingMethod_NoRescheduleRepayment RepaymentReschedulingMethod = 0
	RepaymentReschedulingMethod_NextWorkingDay        RepaymentReschedulingMethod = 1
	RepaymentReschedulingMethod_PreviousWorkingDay    RepaymentReschedulingMethod = 2
	RepaymentReschedulingMethod_ExtendSchedule        RepaymentReschedulingMethod = 3
)

// Enum value maps for RepaymentReschedulingMethod.
var (
	RepaymentReschedulingMethod_name = map[int32]string{
		0: "NoRescheduleRepayment",
		1: "NextWorkingDay",
		2: "PreviousWorkingDay",
		3: "ExtendSchedule",
	}
	RepaymentReschedulingMethod_value = map[string]int32{
		"NoRescheduleRepayment": 0,
		"NextWorkingDay":        1,
		"PreviousWorkingDay":    2,
		"ExtendSchedule":        3,
	}
)

func (x RepaymentReschedulingMethod) Enum() *RepaymentReschedulingMethod {
	p := new(RepaymentReschedulingMethod)
	*p = x
	return p
}

func (x RepaymentReschedulingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepaymentReschedulingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[35].Descriptor()
}

func (RepaymentReschedulingMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[35]
}

func (x RepaymentReschedulingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepaymentReschedulingMethod.Descriptor instead.
func (RepaymentReschedulingMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{35}
}

// RepaymentScheduleType is the type of repayment schedule.
type RepaymentScheduleType int32

const (
	RepaymentScheduleType_NoRepaymentSchedule      RepaymentScheduleType = 0
	RepaymentScheduleType_FixedRepaymentSchedule   RepaymentScheduleType = 1
	RepaymentScheduleType_DynamicRepaymentSchedule RepaymentScheduleType = 2
)

// Enum value maps for RepaymentScheduleType.
var (
	RepaymentScheduleType_name = map[int32]string{
		0: "NoRepaymentSchedule",
		1: "FixedRepaymentSchedule",
		2: "DynamicRepaymentSchedule",
	}
	RepaymentScheduleType_value = map[string]int32{
		"NoRepaymentSchedule":      0,
		"FixedRepaymentSchedule":   1,
		"DynamicRepaymentSchedule": 2,
	}
)

func (x RepaymentScheduleType) Enum() *RepaymentScheduleType {
	p := new(RepaymentScheduleType)
	*p = x
	return p
}

func (x RepaymentScheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepaymentScheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[36].Descriptor()
}

func (RepaymentScheduleType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[36]
}

func (x RepaymentScheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepaymentScheduleType.Descriptor instead.
func (RepaymentScheduleType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{36}
}

// DueDateScheduleMethod is the method used to calculate the due date of a
// repayment.
type DueDateScheduleMethod int32

const (
	DueDateScheduleMethod_IntervalDueDates         DueDateScheduleMethod = 0
	DueDateScheduleMethod_IntervalFixedDaysOfMonth DueDateScheduleMethod = 1
)

// Enum value maps for DueDateScheduleMethod.
var (
	DueDateScheduleMethod_name = map[int32]string{
		0: "IntervalDueDates",
		1: "IntervalFixedDaysOfMonth",
	}
	DueDateScheduleMethod_value = map[string]int32{
		"IntervalDueDates":         0,
		"IntervalFixedDaysOfMonth": 1,
	}
)

func (x DueDateScheduleMethod) Enum() *DueDateScheduleMethod {
	p := new(DueDateScheduleMethod)
	*p = x
	return p
}

func (x DueDateScheduleMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DueDateScheduleMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[37].Descriptor()
}

func (DueDateScheduleMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[37]
}

func (x DueDateScheduleMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DueDateScheduleMethod.Descriptor instead.
func (DueDateScheduleMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{37}
}

// MonthHandlingMethod is the method used to handle a certain month if the
// regular strategy on determining repayment date does not work.
type MonthHandlingMethod int32

const (
	MonthHandlingMethod_LastDayInMonth      MonthHandlingMethod = 0
	MonthHandlingMethod_FirstDayOfNextMonth MonthHandlingMethod = 1
)

// Enum value maps for MonthHandlingMethod.
var (
	MonthHandlingMethod_name = map[int32]string{
		0: "LastDayInMonth",
		1: "FirstDayOfNextMonth",
	}
	MonthHandlingMethod_value = map[string]int32{
		"LastDayInMonth":      0,
		"FirstDayOfNextMonth": 1,
	}
)

func (x MonthHandlingMethod) Enum() *MonthHandlingMethod {
	p := new(MonthHandlingMethod)
	*p = x
	return p
}

func (x MonthHandlingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonthHandlingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[38].Descriptor()
}

func (MonthHandlingMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[38]
}

func (x MonthHandlingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonthHandlingMethod.Descriptor instead.
func (MonthHandlingMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{38}
}

// RepaymentScheduleEditOptions is the options for editing the repayment
// schedule.
type RepaymentScheduleEditOptions int32

const (
	RepaymentScheduleEditOptions_AdjustPaymentDates             RepaymentScheduleEditOptions = 0
	RepaymentScheduleEditOptions_AdjustPrincipalPaymentSchedule RepaymentScheduleEditOptions = 1
	RepaymentScheduleEditOptions_AdjustInterestPaymentSchedule  RepaymentScheduleEditOptions = 2
	RepaymentScheduleEditOptions_AdjustFeePaymentSchedule       RepaymentScheduleEditOptions = 3
	RepaymentScheduleEditOptions_AdjustPenaltyPaymentSchedule   RepaymentScheduleEditOptions = 4
	RepaymentScheduleEditOptions_AdjustNumberOfInstallments     RepaymentScheduleEditOptions = 5
	RepaymentScheduleEditOptions_AdjustPaymentHolidays          RepaymentScheduleEditOptions = 6
)

// Enum value maps for RepaymentScheduleEditOptions.
var (
	RepaymentScheduleEditOptions_name = map[int32]string{
		0: "AdjustPaymentDates",
		1: "AdjustPrincipalPaymentSchedule",
		2: "AdjustInterestPaymentSchedule",
		3: "AdjustFeePaymentSchedule",
		4: "AdjustPenaltyPaymentSchedule",
		5: "AdjustNumberOfInstallments",
		6: "AdjustPaymentHolidays",
	}
	RepaymentScheduleEditOptions_value = map[string]int32{
		"AdjustPaymentDates":             0,
		"AdjustPrincipalPaymentSchedule": 1,
		"AdjustInterestPaymentSchedule":  2,
		"AdjustFeePaymentSchedule":       3,
		"AdjustPenaltyPaymentSchedule":   4,
		"AdjustNumberOfInstallments":     5,
		"AdjustPaymentHolidays":          6,
	}
)

func (x RepaymentScheduleEditOptions) Enum() *RepaymentScheduleEditOptions {
	p := new(RepaymentScheduleEditOptions)
	*p = x
	return p
}

func (x RepaymentScheduleEditOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepaymentScheduleEditOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[39].Descriptor()
}

func (RepaymentScheduleEditOptions) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[39]
}

func (x RepaymentScheduleEditOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepaymentScheduleEditOptions.Descriptor instead.
func (RepaymentScheduleEditOptions) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{39}
}

// RepaymentCurrencyRounding is the method the repayment currency is rounded.
type RepaymentCurrencyRounding int32

const (
	RepaymentCurrencyRounding_NoCurrencyRounding        RepaymentCurrencyRounding = 0
	RepaymentCurrencyRounding_RoundToNearestWholeUnit   RepaymentCurrencyRounding = 1
	RepaymentCurrencyRounding_RoundUpToNearestWholeUnit RepaymentCurrencyRounding = 2
)

// Enum value maps for RepaymentCurrencyRounding.
var (
	RepaymentCurrencyRounding_name = map[int32]string{
		0: "NoCurrencyRounding",
		1: "RoundToNearestWholeUnit",
		2: "RoundUpToNearestWholeUnit",
	}
	RepaymentCurrencyRounding_value = map[string]int32{
		"NoCurrencyRounding":        0,
		"RoundToNearestWholeUnit":   1,
		"RoundUpToNearestWholeUnit": 2,
	}
)

func (x RepaymentCurrencyRounding) Enum() *RepaymentCurrencyRounding {
	p := new(RepaymentCurrencyRounding)
	*p = x
	return p
}

func (x RepaymentCurrencyRounding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepaymentCurrencyRounding) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[40].Descriptor()
}

func (RepaymentCurrencyRounding) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[40]
}

func (x RepaymentCurrencyRounding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepaymentCurrencyRounding.Descriptor instead.
func (RepaymentCurrencyRounding) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{40}
}

// RepaymentElementsRounding is the method the repayment elements are rounded.
type RepaymentElementsRounding int32

const (
	RepaymentElementsRounding_NoRepaymentRounding RepaymentElementsRounding = 0
	RepaymentElementsRounding_RoundAll            RepaymentElementsRounding = 1
	RepaymentElementsRounding_RoundPaymentDue     RepaymentElementsRounding = 2
)

// Enum value maps for RepaymentElementsRounding.
var (
	RepaymentElementsRounding_name = map[int32]string{
		0: "NoRepaymentRounding",
		1: "RoundAll",
		2: "RoundPaymentDue",
	}
	RepaymentElementsRounding_value = map[string]int32{
		"NoRepaymentRounding": 0,
		"RoundAll":            1,
		"RoundPaymentDue":     2,
	}
)

func (x RepaymentElementsRounding) Enum() *RepaymentElementsRounding {
	p := new(RepaymentElementsRounding)
	*p = x
	return p
}

func (x RepaymentElementsRounding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepaymentElementsRounding) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[41].Descriptor()
}

func (RepaymentElementsRounding) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[41]
}

func (x RepaymentElementsRounding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepaymentElementsRounding.Descriptor instead.
func (RepaymentElementsRounding) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{41}
}

// RepaymentScheduleRounding is the method the repayment schedule is rounded.
type RepaymentScheduleRounding int32

const (
	RepaymentScheduleRounding_NoScheduleRounding                                  RepaymentScheduleRounding = 0
	RepaymentScheduleRounding_RoundRemainderIntoLastRepayment                     RepaymentScheduleRounding = 1
	RepaymentScheduleRounding_RoundPrincipalAndInterestRemainderIntoLastRepayment RepaymentScheduleRounding = 2
)

// Enum value maps for RepaymentScheduleRounding.
var (
	RepaymentScheduleRounding_name = map[int32]string{
		0: "NoScheduleRounding",
		1: "RoundRemainderIntoLastRepayment",
		2: "RoundPrincipalAndInterestRemainderIntoLastRepayment",
	}
	RepaymentScheduleRounding_value = map[string]int32{
		"NoScheduleRounding":                                  0,
		"RoundRemainderIntoLastRepayment":                     1,
		"RoundPrincipalAndInterestRemainderIntoLastRepayment": 2,
	}
)

func (x RepaymentScheduleRounding) Enum() *RepaymentScheduleRounding {
	p := new(RepaymentScheduleRounding)
	*p = x
	return p
}

func (x RepaymentScheduleRounding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepaymentScheduleRounding) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[42].Descriptor()
}

func (RepaymentScheduleRounding) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[42]
}

func (x RepaymentScheduleRounding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepaymentScheduleRounding.Descriptor instead.
func (RepaymentScheduleRounding) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{42}
}

// LoanCategory is the category of a loan product.
type LoanCategory int32

const (
	LoanCategory_CategoryPersonalLending   LoanCategory = 0
	LoanCategory_CategoryPurchaseFinancing LoanCategory = 1
	LoanCategory_CategoryRetailMortgages   LoanCategory = 2
	LoanCategory_CategorySmeLending        LoanCategory = 3
	LoanCategory_CategoryCommercial        LoanCategory = 4
	LoanCategory_CategoryUncategorized     LoanCategory = 5
)

// Enum value maps for LoanCategory.
var (
	LoanCategory_name = map[int32]string{
		0: "CategoryPersonalLending",
		1: "CategoryPurchaseFinancing",
		2: "CategoryRetailMortgages",
		3: "CategorySmeLending",
		4: "CategoryCommercial",
		5: "CategoryUncategorized",
	}
	LoanCategory_value = map[string]int32{
		"CategoryPersonalLending":   0,
		"CategoryPurchaseFinancing": 1,
		"CategoryRetailMortgages":   2,
		"CategorySmeLending":        3,
		"CategoryCommercial":        4,
		"CategoryUncategorized":     5,
	}
)

func (x LoanCategory) Enum() *LoanCategory {
	p := new(LoanCategory)
	*p = x
	return p
}

func (x LoanCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoanCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[43].Descriptor()
}

func (LoanCategory) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[43]
}

func (x LoanCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoanCategory.Descriptor instead.
func (LoanCategory) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{43}
}

// LoanType is the type of the loan product.
type LoanType int32

const (
	LoanType_TypeFixedTermLoan    LoanType = 0
	LoanType_TypeDynamicTermLoan  LoanType = 1
	LoanType_TypeInterestFreeLoan LoanType = 2
	LoanType_TypeTranchedLoan     LoanType = 3
	LoanType_TypeRevolvingCredit  LoanType = 4
)

// Enum value maps for LoanType.
var (
	LoanType_name = map[int32]string{
		0: "TypeFixedTermLoan",
		1: "TypeDynamicTermLoan",
		2: "TypeInterestFreeLoan",
		3: "TypeTranchedLoan",
		4: "TypeRevolvingCredit",
	}
	LoanType_value = map[string]int32{
		"TypeFixedTermLoan":    0,
		"TypeDynamicTermLoan":  1,
		"TypeInterestFreeLoan": 2,
		"TypeTranchedLoan":     3,
		"TypeRevolvingCredit":  4,
	}
)

func (x LoanType) Enum() *LoanType {
	p := new(LoanType)
	*p = x
	return p
}

func (x LoanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoanType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[44].Descriptor()
}

func (LoanType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[44]
}

func (x LoanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoanType.Descriptor instead.
func (LoanType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{44}
}

// CappingConstraintType is the type of capping for charges.
type CappingConstraintType int32

const (
	CappingConstraintType_SoftCap CappingConstraintType = 0
	CappingConstraintType_HardCap CappingConstraintType = 1
)

// Enum value maps for CappingConstraintType.
var (
	CappingConstraintType_name = map[int32]string{
		0: "SoftCap",
		1: "HardCap",
	}
	CappingConstraintType_value = map[string]int32{
		"SoftCap": 0,
		"HardCap": 1,
	}
)

func (x CappingConstraintType) Enum() *CappingConstraintType {
	p := new(CappingConstraintType)
	*p = x
	return p
}

func (x CappingConstraintType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CappingConstraintType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[45].Descriptor()
}

func (CappingConstraintType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[45]
}

func (x CappingConstraintType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CappingConstraintType.Descriptor instead.
func (CappingConstraintType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{45}
}

// PrincipalCapMethod is the method the principal is used when determining
// capping value.
type PrincipalCapMethod int32

const (
	PrincipalCapMethod_OutstandingPrincipalPercentage PrincipalCapMethod = 0
	PrincipalCapMethod_OriginalPrincipalPercentage    PrincipalCapMethod = 1
)

// Enum value maps for PrincipalCapMethod.
var (
	PrincipalCapMethod_name = map[int32]string{
		0: "OutstandingPrincipalPercentage",
		1: "OriginalPrincipalPercentage",
	}
	PrincipalCapMethod_value = map[string]int32{
		"OutstandingPrincipalPercentage": 0,
		"OriginalPrincipalPercentage":    1,
	}
)

func (x PrincipalCapMethod) Enum() *PrincipalCapMethod {
	p := new(PrincipalCapMethod)
	*p = x
	return p
}

func (x PrincipalCapMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrincipalCapMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[46].Descriptor()
}

func (PrincipalCapMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[46]
}

func (x PrincipalCapMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrincipalCapMethod.Descriptor instead.
func (PrincipalCapMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{46}
}

// InitialAccountState is the initial state of an account when it was created.
type InitialAccountState int32

const (
	InitialAccountState_StatePartialApplication InitialAccountState = 0
	InitialAccountState_StatePendingApproval    InitialAccountState = 1
	InitialAccountState_StateApproved           InitialAccountState = 2
	InitialAccountState_StateActive             InitialAccountState = 3
	InitialAccountState_StateActiveInArrears    InitialAccountState = 4
	InitialAccountState_StateClosed             InitialAccountState = 5
)

// Enum value maps for InitialAccountState.
var (
	InitialAccountState_name = map[int32]string{
		0: "StatePartialApplication",
		1: "StatePendingApproval",
		2: "StateApproved",
		3: "StateActive",
		4: "StateActiveInArrears",
		5: "StateClosed",
	}
	InitialAccountState_value = map[string]int32{
		"StatePartialApplication": 0,
		"StatePendingApproval":    1,
		"StateApproved":           2,
		"StateActive":             3,
		"StateActiveInArrears":    4,
		"StateClosed":             5,
	}
)

func (x InitialAccountState) Enum() *InitialAccountState {
	p := new(InitialAccountState)
	*p = x
	return p
}

func (x InitialAccountState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitialAccountState) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[47].Descriptor()
}

func (InitialAccountState) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[47]
}

func (x InitialAccountState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitialAccountState.Descriptor instead.
func (InitialAccountState) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{47}
}

// IDGeneratorType is the type of ID generator used to generate IDs for
// accounts.
type IDGeneratorType int32

const (
	IDGeneratorType_TypeIncrementalNumber IDGeneratorType = 0
	IDGeneratorType_TypeRandomPattern     IDGeneratorType = 1
)

// Enum value maps for IDGeneratorType.
var (
	IDGeneratorType_name = map[int32]string{
		0: "TypeIncrementalNumber",
		1: "TypeRandomPattern",
	}
	IDGeneratorType_value = map[string]int32{
		"TypeIncrementalNumber": 0,
		"TypeRandomPattern":     1,
	}
)

func (x IDGeneratorType) Enum() *IDGeneratorType {
	p := new(IDGeneratorType)
	*p = x
	return p
}

func (x IDGeneratorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDGeneratorType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[48].Descriptor()
}

func (IDGeneratorType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[48]
}

func (x IDGeneratorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDGeneratorType.Descriptor instead.
func (IDGeneratorType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{48}
}

// AccountingMethod is the method used to account for the product.
type AccountingMethod int32

const (
	AccountingMethod_None    AccountingMethod = 0
	AccountingMethod_Cash    AccountingMethod = 1
	AccountingMethod_Accrual AccountingMethod = 2
)

// Enum value maps for AccountingMethod.
var (
	AccountingMethod_name = map[int32]string{
		0: "None",
		1: "Cash",
		2: "Accrual",
	}
	AccountingMethod_value = map[string]int32{
		"None":    0,
		"Cash":    1,
		"Accrual": 2,
	}
)

func (x AccountingMethod) Enum() *AccountingMethod {
	p := new(AccountingMethod)
	*p = x
	return p
}

func (x AccountingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[49].Descriptor()
}

func (AccountingMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[49]
}

func (x AccountingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountingMethod.Descriptor instead.
func (AccountingMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{49}
}

// InterestAccrued is the method used to determine when the interest is accrued.
type InterestAccrued int32

const (
	InterestAccrued_Never      InterestAccrued = 0
	InterestAccrued_Daily      InterestAccrued = 1
	InterestAccrued_EndOfMonth InterestAccrued = 2
)

// Enum value maps for InterestAccrued.
var (
	InterestAccrued_name = map[int32]string{
		0: "Never",
		1: "Daily",
		2: "EndOfMonth",
	}
	InterestAccrued_value = map[string]int32{
		"Never":      0,
		"Daily":      1,
		"EndOfMonth": 2,
	}
)

func (x InterestAccrued) Enum() *InterestAccrued {
	p := new(InterestAccrued)
	*p = x
	return p
}

func (x InterestAccrued) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterestAccrued) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[50].Descriptor()
}

func (InterestAccrued) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[50]
}

func (x InterestAccrued) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterestAccrued.Descriptor instead.
func (InterestAccrued) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{50}
}

// FinancialResource is a type of resource used to setup the product accounting
// rule.
type FinancialResource int32

const (
	FinancialResource_ResourcePortfolioControl                  FinancialResource = 0
	FinancialResource_ResourceFundSource                        FinancialResource = 1
	FinancialResource_ResourceWriteOffExpense                   FinancialResource = 2
	FinancialResource_ResourceInterestIncome                    FinancialResource = 3
	FinancialResource_ResourceTaxesPayable                      FinancialResource = 4
	FinancialResource_ResourceFeeIncome                         FinancialResource = 5
	FinancialResource_ResourcePenaltyIncome                     FinancialResource = 6
	FinancialResource_ResourceNegativeInterestPayableReceivable FinancialResource = 7
	FinancialResource_ResourceNegativeInterestPayable           FinancialResource = 8
	FinancialResource_ResourceInterestReceivable                FinancialResource = 9
	FinancialResource_ResourceFeeReceivable                     FinancialResource = 10
	FinancialResource_ResourcePenaltyReceivable                 FinancialResource = 11
	FinancialResource_ResourceTaxesReceivable                   FinancialResource = 12
	FinancialResource_ResourceDeferredInterestsIncome           FinancialResource = 13
	FinancialResource_ResourceDeferredFeeIncome                 FinancialResource = 14
	FinancialResource_ResourceDeferredTaxes                     FinancialResource = 15
	FinancialResource_ResourceDepositReference                  FinancialResource = 16
	FinancialResource_ResourceSavingsControl                    FinancialResource = 17
	FinancialResource_ResourceInterestExpense                   FinancialResource = 18
	FinancialResource_ResourceInterestPayable                   FinancialResource = 19
	FinancialResource_ResourceNegativeInterestIncome            FinancialResource = 20
	FinancialResource_ResourceNegativeInterestReceivable        FinancialResource = 21
	FinancialResource_ResourceOverdraftPortfolioControl         FinancialResource = 22
	FinancialResource_ResourceOverdraftInterestIncome           FinancialResource = 23
	FinancialResource_ResourceOverdraftWriteOffExpense          FinancialResource = 24
	FinancialResource_ResourceOverdraftInterestReceivable       FinancialResource = 25
	FinancialResource_ResourceInterBranchTransfer               FinancialResource = 26
)

// Enum value maps for FinancialResource.
var (
	FinancialResource_name = map[int32]string{
		0:  "ResourcePortfolioControl",
		1:  "ResourceFundSource",
		2:  "ResourceWriteOffExpense",
		3:  "ResourceInterestIncome",
		4:  "ResourceTaxesPayable",
		5:  "ResourceFeeIncome",
		6:  "ResourcePenaltyIncome",
		7:  "ResourceNegativeInterestPayableReceivable",
		8:  "ResourceNegativeInterestPayable",
		9:  "ResourceInterestReceivable",
		10: "ResourceFeeReceivable",
		11: "ResourcePenaltyReceivable",
		12: "ResourceTaxesReceivable",
		13: "ResourceDeferredInterestsIncome",
		14: "ResourceDeferredFeeIncome",
		15: "ResourceDeferredTaxes",
		16: "ResourceDepositReference",
		17: "ResourceSavingsControl",
		18: "ResourceInterestExpense",
		19: "ResourceInterestPayable",
		20: "ResourceNegativeInterestIncome",
		21: "ResourceNegativeInterestReceivable",
		22: "ResourceOverdraftPortfolioControl",
		23: "ResourceOverdraftInterestIncome",
		24: "ResourceOverdraftWriteOffExpense",
		25: "ResourceOverdraftInterestReceivable",
		26: "ResourceInterBranchTransfer",
	}
	FinancialResource_value = map[string]int32{
		"ResourcePortfolioControl":                  0,
		"ResourceFundSource":                        1,
		"ResourceWriteOffExpense":                   2,
		"ResourceInterestIncome":                    3,
		"ResourceTaxesPayable":                      4,
		"ResourceFeeIncome":                         5,
		"ResourcePenaltyIncome":                     6,
		"ResourceNegativeInterestPayableReceivable": 7,
		"ResourceNegativeInterestPayable":           8,
		"ResourceInterestReceivable":                9,
		"ResourceFeeReceivable":                     10,
		"ResourcePenaltyReceivable":                 11,
		"ResourceTaxesReceivable":                   12,
		"ResourceDeferredInterestsIncome":           13,
		"ResourceDeferredFeeIncome":                 14,
		"ResourceDeferredTaxes":                     15,
		"ResourceDepositReference":                  16,
		"ResourceSavingsControl":                    17,
		"ResourceInterestExpense":                   18,
		"ResourceInterestPayable":                   19,
		"ResourceNegativeInterestIncome":            20,
		"ResourceNegativeInterestReceivable":        21,
		"ResourceOverdraftPortfolioControl":         22,
		"ResourceOverdraftInterestIncome":           23,
		"ResourceOverdraftWriteOffExpense":          24,
		"ResourceOverdraftInterestReceivable":       25,
		"ResourceInterBranchTransfer":               26,
	}
)

func (x FinancialResource) Enum() *FinancialResource {
	p := new(FinancialResource)
	*p = x
	return p
}

func (x FinancialResource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinancialResource) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[51].Descriptor()
}

func (FinancialResource) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[51]
}

func (x FinancialResource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinancialResource.Descriptor instead.
func (FinancialResource) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{51}
}

// AvailableFor is the type of entity that can register for the product.
type AvailableFor int32

const (
	AvailableFor_AvailableForIndividuals      AvailableFor = 0
	AvailableFor_AvailableForPureGroups       AvailableFor = 1
	AvailableFor_AvailableForSolidarityGroups AvailableFor = 2
)

// Enum value maps for AvailableFor.
var (
	AvailableFor_name = map[int32]string{
		0: "AvailableForIndividuals",
		1: "AvailableForPureGroups",
		2: "AvailableForSolidarityGroups",
	}
	AvailableFor_value = map[string]int32{
		"AvailableForIndividuals":      0,
		"AvailableForPureGroups":       1,
		"AvailableForSolidarityGroups": 2,
	}
)

func (x AvailableFor) Enum() *AvailableFor {
	p := new(AvailableFor)
	*p = x
	return p
}

func (x AvailableFor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailableFor) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[52].Descriptor()
}

func (AvailableFor) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[52]
}

func (x AvailableFor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailableFor.Descriptor instead.
func (AvailableFor) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{52}
}

// RevolvingAccountRequirement is the requirement settings for assigning a
// revolving account to a product.
type RevolvingAccountRequirement int32

const (
	RevolvingAccountRequirement_RequirementOptional    RevolvingAccountRequirement = 0
	RevolvingAccountRequirement_RequirementRequired    RevolvingAccountRequirement = 1
	RevolvingAccountRequirement_RequirementNotRequired RevolvingAccountRequirement = 2
)

// Enum value maps for RevolvingAccountRequirement.
var (
	RevolvingAccountRequirement_name = map[int32]string{
		0: "RequirementOptional",
		1: "RequirementRequired",
		2: "RequirementNotRequired",
	}
	RevolvingAccountRequirement_value = map[string]int32{
		"RequirementOptional":    0,
		"RequirementRequired":    1,
		"RequirementNotRequired": 2,
	}
)

func (x RevolvingAccountRequirement) Enum() *RevolvingAccountRequirement {
	p := new(RevolvingAccountRequirement)
	*p = x
	return p
}

func (x RevolvingAccountRequirement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevolvingAccountRequirement) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_products_all_proto_enumTypes[53].Descriptor()
}

func (RevolvingAccountRequirement) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_products_all_proto_enumTypes[53]
}

func (x RevolvingAccountRequirement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevolvingAccountRequirement.Descriptor instead.
func (RevolvingAccountRequirement) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{53}
}

// MaturitySettings is the maturity settings for a deposit product.
type MaturitySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DefaultPeriod is the default maturity period for the product.
	DefaultPeriod *durationpb.Duration `protobuf:"bytes,1,opt,name=DefaultPeriod,json=default_period,proto3" json:"default_period,omitempty"`
	// MaxPeriod is the maximum maturity period for the product.
	MaxPeriod *durationpb.Duration `protobuf:"bytes,2,opt,name=MaxPeriod,json=max_period,proto3" json:"max_period,omitempty"`
	// MinPeriod is the minimum maturity period for the product.
	MinPeriod *durationpb.Duration `protobuf:"bytes,3,opt,name=MinPeriod,json=min_period,proto3" json:"min_period,omitempty"`
}

func (x *MaturitySettings) Reset() {
	*x = MaturitySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaturitySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaturitySettings) ProtoMessage() {}

func (x *MaturitySettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaturitySettings.ProtoReflect.Descriptor instead.
func (*MaturitySettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{0}
}

func (x *MaturitySettings) GetDefaultPeriod() *durationpb.Duration {
	if x != nil {
		return x.DefaultPeriod
	}
	return nil
}

func (x *MaturitySettings) GetMaxPeriod() *durationpb.Duration {
	if x != nil {
		return x.MaxPeriod
	}
	return nil
}

func (x *MaturitySettings) GetMinPeriod() *durationpb.Duration {
	if x != nil {
		return x.MinPeriod
	}
	return nil
}

// OverdraftSettings is the overdraft settings for a deposit account.
type OverdraftSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled is true if the account can be overdrafted.
	Enabled bool `protobuf:"varint,1,opt,name=Enabled,json=enabled,proto3" json:"enabled,omitempty"`
	// AllowTechnicalOverdraft is a flag to enable technical overdraft for
	// accounts of the product.
	AllowTechnicalOverdraft bool `protobuf:"varint,2,opt,name=AllowTechnicalOverdraft,json=allow_technical_overdraft,proto3" json:"allow_technical_overdraft,omitempty"`
	// MaxOverdraftLimit is the maximum amount of money that may be taken out
	// of the account to go negative.
	MaxOverdraftLimit *v1.Amount `protobuf:"bytes,3,opt,name=MaxOverdraftLimit,json=max_overdraft_limit,proto3" json:"max_overdraft_limit,omitempty"`
}

func (x *OverdraftSettings) Reset() {
	*x = OverdraftSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverdraftSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverdraftSettings) ProtoMessage() {}

func (x *OverdraftSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverdraftSettings.ProtoReflect.Descriptor instead.
func (*OverdraftSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{1}
}

func (x *OverdraftSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *OverdraftSettings) GetAllowTechnicalOverdraft() bool {
	if x != nil {
		return x.AllowTechnicalOverdraft
	}
	return false
}

func (x *OverdraftSettings) GetMaxOverdraftLimit() *v1.Amount {
	if x != nil {
		return x.MaxOverdraftLimit
	}
	return nil
}

// DepositTaxSettings is the tax settings for a deposit account.
type DepositTaxSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WithholdingTaxEnabled is true if withholding tax is enabled for accounts
	// of the product.
	WithholdingTaxEnabled bool `protobuf:"varint,1,opt,name=WithholdingTaxEnabled,json=withholding_tax_enabled,proto3" json:"withholding_tax_enabled,omitempty"`
}

func (x *DepositTaxSettings) Reset() {
	*x = DepositTaxSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositTaxSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositTaxSettings) ProtoMessage() {}

func (x *DepositTaxSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositTaxSettings.ProtoReflect.Descriptor instead.
func (*DepositTaxSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{2}
}

func (x *DepositTaxSettings) GetWithholdingTaxEnabled() bool {
	if x != nil {
		return x.WithholdingTaxEnabled
	}
	return false
}

// DepositSettings is the settings for a deposit product.
type DepositSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Accounting is the accounting settings for the product.
	Accounting *AccountingSettings `protobuf:"bytes,1,opt,name=Accounting,json=accounting,proto3" json:"accounting,omitempty"`
	// Availability is the availability settings for the product.
	Availability *AvailabilitySettings `protobuf:"bytes,2,opt,name=Availability,json=availability,proto3" json:"availability,omitempty"`
	// RevolvingAccount is the revolving accounts settings for the product.
	RevolvingAccount *RevolvingAccountSettings `protobuf:"bytes,3,opt,name=RevolvingAccount,json=revolving_account,proto3" json:"revolving_account,omitempty"`
	// Fees is the fee settings for the product.
	Fees *FeeSettings `protobuf:"bytes,4,opt,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// Interest is the interest settings for the product.
	Interest *DepositInterestSettings `protobuf:"bytes,5,opt,name=Interest,json=interest,proto3" json:"interest,omitempty"`
	// Maturity is the maturity settings for the product.
	Maturity *MaturitySettings `protobuf:"bytes,6,opt,name=Maturity,json=maturity,proto3" json:"maturity,omitempty"`
	// NewAccount is the settings for new accounts of the product.
	NewAccount *NewAccountSettings `protobuf:"bytes,7,opt,name=NewAccount,json=new_account,proto3" json:"new_account,omitempty"`
	// Offset is the offset settings for the product.
	Offset *OffsetSettings `protobuf:"bytes,8,opt,name=Offset,json=offset,proto3" json:"offset,omitempty"`
	// OverdraftInterest is the overdraft interest settings for the product.
	OverdraftInterest *DepositInterestSettings `protobuf:"bytes,9,opt,name=OverdraftInterest,json=overdraft_interest,proto3" json:"overdraft_interest,omitempty"`
	// Overdraft is the overdraft settings for the product.
	Overdraft *OverdraftSettings `protobuf:"bytes,10,opt,name=Overdraft,json=overdraft,proto3" json:"overdraft,omitempty"`
	// Tax is the tax settings for the product.
	Tax *DepositTaxSettings `protobuf:"bytes,11,opt,name=Tax,json=tax,proto3" json:"tax,omitempty"`
}

func (x *DepositSettings) Reset() {
	*x = DepositSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositSettings) ProtoMessage() {}

func (x *DepositSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositSettings.ProtoReflect.Descriptor instead.
func (*DepositSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{3}
}

func (x *DepositSettings) GetAccounting() *AccountingSettings {
	if x != nil {
		return x.Accounting
	}
	return nil
}

func (x *DepositSettings) GetAvailability() *AvailabilitySettings {
	if x != nil {
		return x.Availability
	}
	return nil
}

func (x *DepositSettings) GetRevolvingAccount() *RevolvingAccountSettings {
	if x != nil {
		return x.RevolvingAccount
	}
	return nil
}

func (x *DepositSettings) GetFees() *FeeSettings {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *DepositSettings) GetInterest() *DepositInterestSettings {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *DepositSettings) GetMaturity() *MaturitySettings {
	if x != nil {
		return x.Maturity
	}
	return nil
}

func (x *DepositSettings) GetNewAccount() *NewAccountSettings {
	if x != nil {
		return x.NewAccount
	}
	return nil
}

func (x *DepositSettings) GetOffset() *OffsetSettings {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *DepositSettings) GetOverdraftInterest() *DepositInterestSettings {
	if x != nil {
		return x.OverdraftInterest
	}
	return nil
}

func (x *DepositSettings) GetOverdraft() *OverdraftSettings {
	if x != nil {
		return x.Overdraft
	}
	return nil
}

func (x *DepositSettings) GetTax() *DepositTaxSettings {
	if x != nil {
		return x.Tax
	}
	return nil
}

// DepositControls is the controls for a deposit product.
type DepositControls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DormancyPeriodDays is the number of days after which a dormant account
	// will be automatically closed.
	DormancyPeriodDays int32 `protobuf:"varint,1,opt,name=DormancyPeriodDays,json=dormancy_period_days,proto3" json:"dormancy_period_days,omitempty"`
	// MaxWithdrawalAmount is the maximum amount that can be withdrawn from the
	// account per withdrawal.
	MaxWithdrawalAmount *v1.Amount `protobuf:"bytes,2,opt,name=MaxWithdrawalAmount,json=max_withdrawal_amount,proto3" json:"max_withdrawal_amount,omitempty"`
	// OpeningBalance is the constraint on the opening balance for accounts of
	// the product.
	OpeningBalance *DecimalInterval `protobuf:"bytes,3,opt,name=OpeningBalance,json=opening_balance,proto3" json:"opening_balance,omitempty"`
	// RecommendedDepositAmount is the recommended deposit amount for accounts
	// of the product.
	RecommendedDepositAmount *v1.Amount `protobuf:"bytes,4,opt,name=RecommendedDepositAmount,json=recommended_deposit_amount,proto3" json:"recommended_deposit_amount,omitempty"`
}

func (x *DepositControls) Reset() {
	*x = DepositControls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositControls) ProtoMessage() {}

func (x *DepositControls) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositControls.ProtoReflect.Descriptor instead.
func (*DepositControls) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{4}
}

func (x *DepositControls) GetDormancyPeriodDays() int32 {
	if x != nil {
		return x.DormancyPeriodDays
	}
	return 0
}

func (x *DepositControls) GetMaxWithdrawalAmount() *v1.Amount {
	if x != nil {
		return x.MaxWithdrawalAmount
	}
	return nil
}

func (x *DepositControls) GetOpeningBalance() *DecimalInterval {
	if x != nil {
		return x.OpeningBalance
	}
	return nil
}

func (x *DepositControls) GetRecommendedDepositAmount() *v1.Amount {
	if x != nil {
		return x.RecommendedDepositAmount
	}
	return nil
}

// DepositProduct is the terms and constraints representing a deposit product.
type DepositProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProductID is the ID of the deposit product.
	ProductID string `protobuf:"bytes,1,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
	// Name is the name of the deposit product.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// Notes is the description of the product.
	Notes string `protobuf:"bytes,3,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// Category is the category of the deposit product.
	Category DepositCategory `protobuf:"varint,4,opt,name=Category,json=category,proto3,enum=openbank.core.v1.products.DepositCategory" json:"category,omitempty"`
	// Currencies is a list of currencies that can be used by accounts of this
	// product.
	Currencies []string `protobuf:"bytes,5,rep,name=Currencies,json=currencies,proto3" json:"currencies,omitempty"`
	// Controls is the controls for the deposit product.
	Controls *DepositControls `protobuf:"bytes,6,opt,name=Controls,json=controls,proto3" json:"controls,omitempty"`
	// Settings is the settings for the product.
	Settings *DepositSettings `protobuf:"bytes,7,opt,name=Settings,json=settings,proto3" json:"settings,omitempty"`
	// Active is true if the product is active.
	Active bool `protobuf:"varint,8,opt,name=Active,json=active,proto3" json:"active,omitempty"`
	// TemplateIDs is the list of template IDs of documents associated with the
	// product.
	TemplateIDs []string `protobuf:"bytes,9,rep,name=TemplateIDs,json=template_ids,proto3" json:"template_ids,omitempty"`
	// Type is the type of the product.
	Type DepositProductType `protobuf:"varint,10,opt,name=Type,json=type,proto3,enum=openbank.core.v1.products.DepositProductType" json:"type,omitempty"`
	// CreateTime is the time the product was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
	// UpdateTime is the time the product was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=UpdateTime,json=update_time,proto3" json:"update_time,omitempty"`
}

func (x *DepositProduct) Reset() {
	*x = DepositProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositProduct) ProtoMessage() {}

func (x *DepositProduct) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositProduct.ProtoReflect.Descriptor instead.
func (*DepositProduct) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{5}
}

func (x *DepositProduct) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DepositProduct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DepositProduct) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *DepositProduct) GetCategory() DepositCategory {
	if x != nil {
		return x.Category
	}
	return DepositCategory_DepositCategoryPersonalDeposit
}

func (x *DepositProduct) GetCurrencies() []string {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *DepositProduct) GetControls() *DepositControls {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *DepositProduct) GetSettings() *DepositSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *DepositProduct) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *DepositProduct) GetTemplateIDs() []string {
	if x != nil {
		return x.TemplateIDs
	}
	return nil
}

func (x *DepositProduct) GetType() DepositProductType {
	if x != nil {
		return x.Type
	}
	return DepositProductType_TypeCurrentAccount
}

func (x *DepositProduct) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DepositProduct) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// CreateDepositProductRequest is the request for creating a deposit product.
type CreateDepositProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the deposit product to create.
	Body *DepositProduct `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateDepositProductRequest) Reset() {
	*x = CreateDepositProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDepositProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDepositProductRequest) ProtoMessage() {}

func (x *CreateDepositProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDepositProductRequest.ProtoReflect.Descriptor instead.
func (*CreateDepositProductRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{6}
}

func (x *CreateDepositProductRequest) GetBody() *DepositProduct {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListDepositProductsRequest is the request to list deposit products.
type ListDepositProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageToken is the page token to use for listing deposit products.
	PageToken string `protobuf:"bytes,1,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the page size to use for listing deposit products.
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the order to order deposit products in.
	OrderBy string `protobuf:"bytes,3,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to filter the deposit products by.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListDepositProductsRequest) Reset() {
	*x = ListDepositProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDepositProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDepositProductsRequest) ProtoMessage() {}

func (x *ListDepositProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDepositProductsRequest.ProtoReflect.Descriptor instead.
func (*ListDepositProductsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{7}
}

func (x *ListDepositProductsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDepositProductsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDepositProductsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListDepositProductsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListDepositProductsResponse is the response for listing deposit products.
type ListDepositProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of products matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of products remaining in the list, including the
	// products in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Products is the list of deposit products.
	Products []*DepositProduct `protobuf:"bytes,3,rep,name=Products,json=products,proto3" json:"products,omitempty"`
	// NextPageToken is the next page token to use for listing deposit products.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDepositProductsResponse) Reset() {
	*x = ListDepositProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDepositProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDepositProductsResponse) ProtoMessage() {}

func (x *ListDepositProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDepositProductsResponse.ProtoReflect.Descriptor instead.
func (*ListDepositProductsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{8}
}

func (x *ListDepositProductsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListDepositProductsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListDepositProductsResponse) GetProducts() []*DepositProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *ListDepositProductsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetDepositProductRequest is the request to retrieve a deposit product.
type GetDepositProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProductID is the ID of the deposit product to retrieve.
	ProductID string `protobuf:"bytes,1,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
}

func (x *GetDepositProductRequest) Reset() {
	*x = GetDepositProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDepositProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDepositProductRequest) ProtoMessage() {}

func (x *GetDepositProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDepositProductRequest.ProtoReflect.Descriptor instead.
func (*GetDepositProductRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{9}
}

func (x *GetDepositProductRequest) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

// UpdateDepositProductRequest is the request for updating a deposit product.
type UpdateDepositProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProductID is the ID of the deposit product to update.
	ProductID string `protobuf:"bytes,1,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
	// Body is the new value of the deposit product.
	Body *DepositProduct `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateDepositProductRequest) Reset() {
	*x = UpdateDepositProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDepositProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDepositProductRequest) ProtoMessage() {}

func (x *UpdateDepositProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDepositProductRequest.ProtoReflect.Descriptor instead.
func (*UpdateDepositProductRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDepositProductRequest) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *UpdateDepositProductRequest) GetBody() *DepositProduct {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewBatchUpdate is the details on the batch update to trigger.
type NewBatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action is the action to perform.
	Action BatchUpdateAction `protobuf:"varint,1,opt,name=Action,json=action,proto3,enum=openbank.core.v1.products.BatchUpdateAction" json:"action,omitempty"`
}

func (x *NewBatchUpdate) Reset() {
	*x = NewBatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBatchUpdate) ProtoMessage() {}

func (x *NewBatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBatchUpdate.ProtoReflect.Descriptor instead.
func (*NewBatchUpdate) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{11}
}

func (x *NewBatchUpdate) GetAction() BatchUpdateAction {
	if x != nil {
		return x.Action
	}
	return BatchUpdateAction_UpdateInterestSettings
}

// UpdateDepositAccountsRequest is the request for updating multiple deposit
// accounts.
type UpdateDepositAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProductID is the ID of the deposit product to trigger account updates
	// for.
	ProductID string `protobuf:"bytes,1,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
	// Body is the details on the batch update to trigger.
	Body *NewBatchUpdate `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateDepositAccountsRequest) Reset() {
	*x = UpdateDepositAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDepositAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDepositAccountsRequest) ProtoMessage() {}

func (x *UpdateDepositAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDepositAccountsRequest.ProtoReflect.Descriptor instead.
func (*UpdateDepositAccountsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateDepositAccountsRequest) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *UpdateDepositAccountsRequest) GetBody() *NewBatchUpdate {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteDepositProductRequest is the request for deleting a deposit product.
type DeleteDepositProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProductID is the ID of the deposit product to delete.
	ProductID string `protobuf:"bytes,1,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
}

func (x *DeleteDepositProductRequest) Reset() {
	*x = DeleteDepositProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDepositProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDepositProductRequest) ProtoMessage() {}

func (x *DeleteDepositProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDepositProductRequest.ProtoReflect.Descriptor instead.
func (*DeleteDepositProductRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteDepositProductRequest) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

// PeriodIntervalSettings is the settings for a period interval.
type PeriodIntervalSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AmortizationType is the type of profile used for amortization for a fee.
	AmortizationType AmortizationType `protobuf:"varint,1,opt,name=AmortizationType,json=amortization_type,proto3,enum=openbank.core.v1.products.AmortizationType" json:"amortization_type,omitempty"`
	// ContinueAmortization is a flag for signaling if fee amortization should
	// be continued or finished at account reschedule/refinance.
	ContinueAmortization bool `protobuf:"varint,2,opt,name=ContinueAmortization,json=continue_amortization,proto3" json:"continue_amortization,omitempty"`
	// Frequency is the frequency settings of the fee amortization.
	Frequency PeriodFrequency `protobuf:"varint,3,opt,name=Frequency,json=frequency,proto3,enum=openbank.core.v1.products.PeriodFrequency" json:"frequency,omitempty"`
	// IntervalType is the type of the interval used for the period.
	IntervalType IntervalType `protobuf:"varint,4,opt,name=IntervalType,json=interval_type,proto3,enum=openbank.core.v1.products.IntervalType" json:"interval_type,omitempty"`
	// IntervalCount is the total number of intervals for the period.
	IntervalCount int32 `protobuf:"varint,5,opt,name=IntervalCount,json=interval_count,proto3" json:"interval_count,omitempty"`
	// Period is the duration of the period interval.
	Period *durationpb.Duration `protobuf:"bytes,6,opt,name=Period,json=period,proto3" json:"period,omitempty"`
}

func (x *PeriodIntervalSettings) Reset() {
	*x = PeriodIntervalSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodIntervalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodIntervalSettings) ProtoMessage() {}

func (x *PeriodIntervalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodIntervalSettings.ProtoReflect.Descriptor instead.
func (*PeriodIntervalSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{14}
}

func (x *PeriodIntervalSettings) GetAmortizationType() AmortizationType {
	if x != nil {
		return x.AmortizationType
	}
	return AmortizationType_ProfileNone
}

func (x *PeriodIntervalSettings) GetContinueAmortization() bool {
	if x != nil {
		return x.ContinueAmortization
	}
	return false
}

func (x *PeriodIntervalSettings) GetFrequency() PeriodFrequency {
	if x != nil {
		return x.Frequency
	}
	return PeriodFrequency_AccountInstallmentsDueDates
}

func (x *PeriodIntervalSettings) GetIntervalType() IntervalType {
	if x != nil {
		return x.IntervalType
	}
	return IntervalType_PredefinedIntervals
}

func (x *PeriodIntervalSettings) GetIntervalCount() int32 {
	if x != nil {
		return x.IntervalCount
	}
	return 0
}

func (x *PeriodIntervalSettings) GetPeriod() *durationpb.Duration {
	if x != nil {
		return x.Period
	}
	return nil
}

// Fee is an instance of pre-defined fee that can be applied to accounts.
type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FeeID is the ID of the fee.
	FeeID string `protobuf:"bytes,1,opt,name=FeeID,json=fee_id,proto3" json:"fee_id,omitempty"`
	// Name is the name of the fee that is displayed to the user.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// CalculationMethod is the method used to calculate the fee.
	// If the method is Flat, the `amount` field is used. Otherwise, the `percent`
	// field is used in for calculation.
	CalculationMethod FeeCalculationMethod `protobuf:"varint,3,opt,name=CalculationMethod,json=calculation_method,proto3,enum=openbank.core.v1.products.FeeCalculationMethod" json:"calculation_method,omitempty"`
	// Required is whether the fee is required when a disburse is applied.
	Required bool `protobuf:"varint,4,opt,name=Required,json=required,proto3" json:"required,omitempty"`
	// Amount is the amount of the fee.
	Amount *v1.Amount `protobuf:"bytes,5,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Percent is the percentage value of a fee. The value is a decimal between
	// 0 and 1.
	Percent string `protobuf:"bytes,6,opt,name=Percent,json=percent,proto3" json:"percent,omitempty"`
	// ApplyDateMethod is the method used to determine when the fee is applied.
	ApplyDateMethod FeeApplyDateMethod `protobuf:"varint,7,opt,name=ApplyDateMethod,json=apply_date_method,proto3,enum=openbank.core.v1.products.FeeApplyDateMethod" json:"apply_date_method,omitempty"`
	// Trigger is the event that will trigger the fee to be collected.
	Trigger FeeTrigger `protobuf:"varint,8,opt,name=Trigger,json=trigger,proto3,enum=openbank.core.v1.products.FeeTrigger" json:"trigger,omitempty"`
	// AccountingRules is a list of rules that are applied to the fee.
	// If not provided, the default for the product are used.
	AccountingRules []*AccountingRule `protobuf:"bytes,9,rep,name=AccountingRules,json=accounting_rules,proto3" json:"accounting_rules,omitempty"`
	// AmortizationSettings is period and interval configuration for
	// amortization.
	AmortizationSettings *PeriodIntervalSettings `protobuf:"bytes,10,opt,name=AmortizationSettings,json=amortization_settings,proto3" json:"amortization_settings,omitempty"`
	// IsActive is a flag that indicates if the fee is active.
	IsActive bool `protobuf:"varint,11,opt,name=IsActive,json=is_active,proto3" json:"is_active,omitempty"`
	// IsTaxable is a flag that indicates if the fee is taxable.
	IsTaxable bool `protobuf:"varint,12,opt,name=IsTaxable,json=is_taxable,proto3" json:"is_taxable,omitempty"`
	// CreateTime is the time the fee was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
	// UpdateTime is the time the fee was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=UpdateTime,json=update_time,proto3" json:"update_time,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{15}
}

func (x *Fee) GetFeeID() string {
	if x != nil {
		return x.FeeID
	}
	return ""
}

func (x *Fee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fee) GetCalculationMethod() FeeCalculationMethod {
	if x != nil {
		return x.CalculationMethod
	}
	return FeeCalculationMethod_MethodFlat
}

func (x *Fee) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Fee) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Fee) GetPercent() string {
	if x != nil {
		return x.Percent
	}
	return ""
}

func (x *Fee) GetApplyDateMethod() FeeApplyDateMethod {
	if x != nil {
		return x.ApplyDateMethod
	}
	return FeeApplyDateMethod_MonthlyFromActivation
}

func (x *Fee) GetTrigger() FeeTrigger {
	if x != nil {
		return x.Trigger
	}
	return FeeTrigger_Manual
}

func (x *Fee) GetAccountingRules() []*AccountingRule {
	if x != nil {
		return x.AccountingRules
	}
	return nil
}

func (x *Fee) GetAmortizationSettings() *PeriodIntervalSettings {
	if x != nil {
		return x.AmortizationSettings
	}
	return nil
}

func (x *Fee) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Fee) GetIsTaxable() bool {
	if x != nil {
		return x.IsTaxable
	}
	return false
}

func (x *Fee) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Fee) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// InterestRateTier is a tier of interest rates on a deposit account, holding
// information on the method interest is computed.
type InterestRateTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EndingBalance is the upper limit for accounts' balance in this tier.
	EndingBalance *v1.Amount `protobuf:"bytes,1,opt,name=EndingBalance,json=ending_balance,proto3" json:"ending_balance,omitempty"`
	// EndingDay is the upper limit for days since account activation in this
	// tier.
	EndingDay int32 `protobuf:"varint,2,opt,name=EndingDay,json=ending_day,proto3" json:"ending_day,omitempty"`
	// InterestRate is the interest rate for this tier.
	InterestRate float64 `protobuf:"fixed64,3,opt,name=InterestRate,json=interest_rate,proto3" json:"interest_rate,omitempty"`
}

func (x *InterestRateTier) Reset() {
	*x = InterestRateTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterestRateTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterestRateTier) ProtoMessage() {}

func (x *InterestRateTier) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterestRateTier.ProtoReflect.Descriptor instead.
func (*InterestRateTier) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{16}
}

func (x *InterestRateTier) GetEndingBalance() *v1.Amount {
	if x != nil {
		return x.EndingBalance
	}
	return nil
}

func (x *InterestRateTier) GetEndingDay() int32 {
	if x != nil {
		return x.EndingDay
	}
	return 0
}

func (x *InterestRateTier) GetInterestRate() float64 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

// InterestRateSettings is the settings for interest rate calculation.
type InterestRateSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccrueAfterMaturity is a flag indicating whether interest is accrued after
	// the account maturity date.
	AccrueAfterMaturity bool `protobuf:"varint,1,opt,name=AccrueAfterMaturity,json=accrue_after_maturity,proto3" json:"accrue_after_maturity,omitempty"`
	// IndexSourceID is the ID of the index rate source.
	IndexSourceID string `protobuf:"bytes,2,opt,name=IndexSourceID,json=index_source_id,proto3" json:"index_source_id,omitempty"`
	// Frequency is the period between interest charges.
	Frequency *durationpb.Duration `protobuf:"bytes,3,opt,name=Frequency,json=frequency,proto3" json:"frequency,omitempty"`
	// Constraints is the minimum, maximum and default values for the interest
	// rate.
	Constraints *DecimalInterval `protobuf:"bytes,4,opt,name=Constraints,json=constraints,proto3" json:"constraints,omitempty"`
	// Ceiling is the maximum amount of interest spread and index interest rate
	// for index interest rate products.
	Ceiling float64 `protobuf:"fixed64,5,opt,name=Ceiling,json=ceiling,proto3" json:"ceiling,omitempty"`
	// Floor is the minimum amount of interest spread and index interest rate
	// for index interest rate products.
	Floor float64 `protobuf:"fixed64,6,opt,name=Floor,json=floor,proto3" json:"floor,omitempty"`
	// Source is the source used for interest rate calculation.
	Source InterestRateSource `protobuf:"varint,7,opt,name=Source,json=source,proto3,enum=openbank.core.v1.products.InterestRateSource" json:"source,omitempty"`
	// RateReview is the duration between interest rate reviews.
	RateReview *durationpb.Duration `protobuf:"bytes,8,opt,name=RateReview,json=rate_review,proto3" json:"rate_review,omitempty"`
	// Terms is the terms used for interest rate calculation.
	Terms InterestRateTerms `protobuf:"varint,9,opt,name=Terms,json=terms,proto3,enum=openbank.core.v1.products.InterestRateTerms" json:"terms,omitempty"`
	// Tiers is the list of interest rate tiers for the configuration.
	Tiers []*InterestRateTier `protobuf:"bytes,10,rep,name=Tiers,json=tiers,proto3" json:"tiers,omitempty"`
}

func (x *InterestRateSettings) Reset() {
	*x = InterestRateSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterestRateSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterestRateSettings) ProtoMessage() {}

func (x *InterestRateSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterestRateSettings.ProtoReflect.Descriptor instead.
func (*InterestRateSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{17}
}

func (x *InterestRateSettings) GetAccrueAfterMaturity() bool {
	if x != nil {
		return x.AccrueAfterMaturity
	}
	return false
}

func (x *InterestRateSettings) GetIndexSourceID() string {
	if x != nil {
		return x.IndexSourceID
	}
	return ""
}

func (x *InterestRateSettings) GetFrequency() *durationpb.Duration {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *InterestRateSettings) GetConstraints() *DecimalInterval {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *InterestRateSettings) GetCeiling() float64 {
	if x != nil {
		return x.Ceiling
	}
	return 0
}

func (x *InterestRateSettings) GetFloor() float64 {
	if x != nil {
		return x.Floor
	}
	return 0
}

func (x *InterestRateSettings) GetSource() InterestRateSource {
	if x != nil {
		return x.Source
	}
	return InterestRateSource_FixedInterestRate
}

func (x *InterestRateSettings) GetRateReview() *durationpb.Duration {
	if x != nil {
		return x.RateReview
	}
	return nil
}

func (x *InterestRateSettings) GetTerms() InterestRateTerms {
	if x != nil {
		return x.Terms
	}
	return InterestRateTerms_Fixed
}

func (x *InterestRateSettings) GetTiers() []*InterestRateTier {
	if x != nil {
		return x.Tiers
	}
	return nil
}

// DepositInterestSettings is the settings for deposit interest calculation.
type DepositInterestSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CollectInterestWhenLocked is a flag indicating whether interest is
	// collected when the account is locked.
	CollectInterestWhenLocked bool `protobuf:"varint,1,opt,name=CollectInterestWhenLocked,json=collect_interest_when_locked,proto3" json:"collect_interest_when_locked,omitempty"`
	// DaysInYear is the number of days in a year for the purpose of interest
	// calculation.
	DaysInYear DaysInYear `protobuf:"varint,2,opt,name=DaysInYear,json=days_in_year,proto3,enum=openbank.core.v1.products.DaysInYear" json:"days_in_year,omitempty"`
	// CalculationBalance is the balance used for interest calculation.
	CalculationBalance InterestCalculationBalance `protobuf:"varint,3,opt,name=CalculationBalance,json=calculation_balance,proto3,enum=openbank.core.v1.products.InterestCalculationBalance" json:"calculation_balance,omitempty"`
	// PaidIntoAccount is a flag indicating whether interest is paid into the
	// account directly.
	PaidIntoAccount bool `protobuf:"varint,4,opt,name=PaidIntoAccount,json=paid_into_account,proto3" json:"paid_into_account,omitempty"`
	// PaymentSettings is the settings for interest payment.
	PaymentSettings *InterestPaymentSettings `protobuf:"bytes,5,opt,name=PaymentSettings,json=payment_settings,proto3" json:"payment_settings,omitempty"`
	// RateSettings is the settings for interest rate calculation.
	RateSettings *InterestRateSettings `protobuf:"bytes,6,opt,name=RateSettings,json=rate_settings,proto3" json:"rate_settings,omitempty"`
	// MaximumBalance is the maximum amount of balance used in interest
	// calculation.
	MaximumBalance *v1.Amount `protobuf:"bytes,7,opt,name=MaximumBalance,json=maximum_balance,proto3" json:"maximum_balance,omitempty"`
}

func (x *DepositInterestSettings) Reset() {
	*x = DepositInterestSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositInterestSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositInterestSettings) ProtoMessage() {}

func (x *DepositInterestSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositInterestSettings.ProtoReflect.Descriptor instead.
func (*DepositInterestSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{18}
}

func (x *DepositInterestSettings) GetCollectInterestWhenLocked() bool {
	if x != nil {
		return x.CollectInterestWhenLocked
	}
	return false
}

func (x *DepositInterestSettings) GetDaysInYear() DaysInYear {
	if x != nil {
		return x.DaysInYear
	}
	return DaysInYear_YearActual365Fixed
}

func (x *DepositInterestSettings) GetCalculationBalance() InterestCalculationBalance {
	if x != nil {
		return x.CalculationBalance
	}
	return InterestCalculationBalance_BalanceMinimum
}

func (x *DepositInterestSettings) GetPaidIntoAccount() bool {
	if x != nil {
		return x.PaidIntoAccount
	}
	return false
}

func (x *DepositInterestSettings) GetPaymentSettings() *InterestPaymentSettings {
	if x != nil {
		return x.PaymentSettings
	}
	return nil
}

func (x *DepositInterestSettings) GetRateSettings() *InterestRateSettings {
	if x != nil {
		return x.RateSettings
	}
	return nil
}

func (x *DepositInterestSettings) GetMaximumBalance() *v1.Amount {
	if x != nil {
		return x.MaximumBalance
	}
	return nil
}

// InterestPaymentSettings is the settings for interest payments on a deposit
// account.
type InterestPaymentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PaymentDates is a list of dates on which interest payments are to be
	// made.
	PaymentDates []*timestamppb.Timestamp `protobuf:"bytes,1,rep,name=PaymentDates,json=payment_dates,proto3" json:"payment_dates,omitempty"`
	// Frequency is the amount of time between interest payment to the account.
	Frequency *durationpb.Duration `protobuf:"bytes,2,opt,name=Frequency,json=frequency,proto3" json:"frequency,omitempty"`
}

func (x *InterestPaymentSettings) Reset() {
	*x = InterestPaymentSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterestPaymentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterestPaymentSettings) ProtoMessage() {}

func (x *InterestPaymentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterestPaymentSettings.ProtoReflect.Descriptor instead.
func (*InterestPaymentSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{19}
}

func (x *InterestPaymentSettings) GetPaymentDates() []*timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDates
	}
	return nil
}

func (x *InterestPaymentSettings) GetFrequency() *durationpb.Duration {
	if x != nil {
		return x.Frequency
	}
	return nil
}

// LoanInterestSettings is the settings for interest calculation for loan
// accounts.
type LoanInterestSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccrueLateInterest is a flag indicating whether late interest should be
	// accrued.
	AccrueLateInterest bool `protobuf:"varint,1,opt,name=AccrueLateInterest,json=accrue_late_interest,proto3" json:"accrue_late_interest,omitempty"`
	// CompoundingFrequency is the duration between interest compounding.
	CompoundingFrequency *durationpb.Duration `protobuf:"bytes,2,opt,name=CompoundingFrequency,json=compounding_frequency,proto3" json:"compounding_frequency,omitempty"`
	// DaysInYear is the number of days in a year for the purpose of interest
	// calculation.
	DaysInYear DaysInYear `protobuf:"varint,3,opt,name=DaysInYear,json=days_in_year,proto3,enum=openbank.core.v1.products.DaysInYear" json:"days_in_year,omitempty"`
	// IndexRateSettings is the settings for index rate calculation.
	IndexRateSettings *InterestRateSettings `protobuf:"bytes,4,opt,name=IndexRateSettings,json=index_rate_settings,proto3" json:"index_rate_settings,omitempty"`
	// ApplicationMethod is the method the interest is applied onto the loan.
	ApplicationMethod InterestApplicationMethod `protobuf:"varint,5,opt,name=ApplicationMethod,json=application_method,proto3,enum=openbank.core.v1.products.InterestApplicationMethod" json:"application_method,omitempty"`
	// BalanceCalculationMethod is the method used to calculate the balance the
	// interest is based on.
	BalanceCalculationMethod BalanceCalculationMethod `protobuf:"varint,6,opt,name=BalanceCalculationMethod,json=balance_calculation_method,proto3,enum=openbank.core.v1.products.BalanceCalculationMethod" json:"balance_calculation_method,omitempty"`
	// CalculationMethod is the method used to calculate the interest.
	CalculationMethod InterestCalculationMethod `protobuf:"varint,7,opt,name=CalculationMethod,json=calculation_method,proto3,enum=openbank.core.v1.products.InterestCalculationMethod" json:"calculation_method,omitempty"`
	// RateSettings is the settings for interest rate calculation.
	RateSettings []*InterestRateSettings `protobuf:"bytes,8,rep,name=RateSettings,json=rate_settings,proto3" json:"rate_settings,omitempty"`
	// Type is the type of the interest.
	Type InterestType `protobuf:"varint,9,opt,name=Type,json=type,proto3,enum=openbank.core.v1.products.InterestType" json:"type,omitempty"`
	// ScheduleInterestMethod is the method the interest's timespan is
	// calculated.
	ScheduleInterestMethod DaysCountMethod `protobuf:"varint,10,opt,name=ScheduleInterestMethod,json=schedule_interest_method,proto3,enum=openbank.core.v1.products.DaysCountMethod" json:"schedule_interest_method,omitempty"`
}

func (x *LoanInterestSettings) Reset() {
	*x = LoanInterestSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoanInterestSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoanInterestSettings) ProtoMessage() {}

func (x *LoanInterestSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoanInterestSettings.ProtoReflect.Descriptor instead.
func (*LoanInterestSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{20}
}

func (x *LoanInterestSettings) GetAccrueLateInterest() bool {
	if x != nil {
		return x.AccrueLateInterest
	}
	return false
}

func (x *LoanInterestSettings) GetCompoundingFrequency() *durationpb.Duration {
	if x != nil {
		return x.CompoundingFrequency
	}
	return nil
}

func (x *LoanInterestSettings) GetDaysInYear() DaysInYear {
	if x != nil {
		return x.DaysInYear
	}
	return DaysInYear_YearActual365Fixed
}

func (x *LoanInterestSettings) GetIndexRateSettings() *InterestRateSettings {
	if x != nil {
		return x.IndexRateSettings
	}
	return nil
}

func (x *LoanInterestSettings) GetApplicationMethod() InterestApplicationMethod {
	if x != nil {
		return x.ApplicationMethod
	}
	return InterestApplicationMethod_MethodAfterDisbursement
}

func (x *LoanInterestSettings) GetBalanceCalculationMethod() BalanceCalculationMethod {
	if x != nil {
		return x.BalanceCalculationMethod
	}
	return BalanceCalculationMethod_MethodPrincipal
}

func (x *LoanInterestSettings) GetCalculationMethod() InterestCalculationMethod {
	if x != nil {
		return x.CalculationMethod
	}
	return InterestCalculationMethod_MethodFlatInterest
}

func (x *LoanInterestSettings) GetRateSettings() []*InterestRateSettings {
	if x != nil {
		return x.RateSettings
	}
	return nil
}

func (x *LoanInterestSettings) GetType() InterestType {
	if x != nil {
		return x.Type
	}
	return InterestType_Simple
}

func (x *LoanInterestSettings) GetScheduleInterestMethod() DaysCountMethod {
	if x != nil {
		return x.ScheduleInterestMethod
	}
	return DaysCountMethod_MethodRepaymentPeriodicity
}

// ArrearsSettings is the arrears settings for a loan account.
type ArrearsSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DateCalculationMethod is the method the date the account goes into
	// arrears is determined.
	DateCalculationMethod DateCalculationMethod `protobuf:"varint,1,opt,name=DateCalculationMethod,json=date_calculation_method,proto3,enum=openbank.core.v1.products.DateCalculationMethod" json:"date_calculation_method,omitempty"`
	// IncludeNonWorkingDays is a flag indicating whether non-working days
	// should be included when calculating penaltees and late fees.
	IncludeNonWorkingDays bool `protobuf:"varint,2,opt,name=IncludeNonWorkingDays,json=include_non_working_days,proto3" json:"include_non_working_days,omitempty"`
	// ToleranceCalculationMethod is the method of calculating the tolerance.
	ToleranceCalculationMethod ToleranceCalculation `protobuf:"varint,3,opt,name=ToleranceCalculationMethod,json=tolerance_calculation_method,proto3,enum=openbank.core.v1.products.ToleranceCalculation" json:"tolerance_calculation_method,omitempty"`
	// MonthlyToleranceDay is the day of the month the tolerance is up until if
	// ToleranceCalculationMethod is set to MonthlyArrearsToleranceDay.
	MonthlyToleranceDay int32 `protobuf:"varint,4,opt,name=MonthlyToleranceDay,json=monthly_tolerance_day,proto3" json:"monthly_tolerance_day,omitempty"`
	// TolerancePeriod is the tolerance period if ToleranceCalculationMethod is
	// set to ArrearsTolerancePeriod.
	TolerancePeriod *durationpb.Duration `protobuf:"bytes,5,opt,name=TolerancePeriod,json=tolerance_period,proto3" json:"tolerance_period,omitempty"`
	// ToleranceFloorAmount is the minimum amount of tolerance applied to the
	// loan account.
	ToleranceFloorAmount *v1.Amount `protobuf:"bytes,6,opt,name=ToleranceFloorAmount,json=tolerance_floor_amount,proto3" json:"tolerance_floor_amount,omitempty"`
	// TolerancePercentageOfOutstandingPrincipal is the percentage of
	// outstanding principal within tolerance.
	TolerancePercentageOfOutstandingPrincipal float64 `protobuf:"fixed64,7,opt,name=TolerancePercentageOfOutstandingPrincipal,json=tolerance_percentage_of_outstanding_principal,proto3" json:"tolerance_percentage_of_outstanding_principal,omitempty"`
}

func (x *ArrearsSettings) Reset() {
	*x = ArrearsSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrearsSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrearsSettings) ProtoMessage() {}

func (x *ArrearsSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrearsSettings.ProtoReflect.Descriptor instead.
func (*ArrearsSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{21}
}

func (x *ArrearsSettings) GetDateCalculationMethod() DateCalculationMethod {
	if x != nil {
		return x.DateCalculationMethod
	}
	return DateCalculationMethod_DateAccountFirstWentToArrears
}

func (x *ArrearsSettings) GetIncludeNonWorkingDays() bool {
	if x != nil {
		return x.IncludeNonWorkingDays
	}
	return false
}

func (x *ArrearsSettings) GetToleranceCalculationMethod() ToleranceCalculation {
	if x != nil {
		return x.ToleranceCalculationMethod
	}
	return ToleranceCalculation_ArrearsTolerancePeriod
}

func (x *ArrearsSettings) GetMonthlyToleranceDay() int32 {
	if x != nil {
		return x.MonthlyToleranceDay
	}
	return 0
}

func (x *ArrearsSettings) GetTolerancePeriod() *durationpb.Duration {
	if x != nil {
		return x.TolerancePeriod
	}
	return nil
}

func (x *ArrearsSettings) GetToleranceFloorAmount() *v1.Amount {
	if x != nil {
		return x.ToleranceFloorAmount
	}
	return nil
}

func (x *ArrearsSettings) GetTolerancePercentageOfOutstandingPrincipal() float64 {
	if x != nil {
		return x.TolerancePercentageOfOutstandingPrincipal
	}
	return 0
}

// AccountLinkSettings is the settings for linking deposit accounts to the loan
// account.
type AccountLinkSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled is a flag indicating whether loan accounts created using the loan
	// product should be linked to deposit accounts.
	Enabled bool `protobuf:"varint,1,opt,name=Enabled,json=enabled,proto3" json:"enabled,omitempty"`
	// DepositProductIDs is a list of IDs of deposit products that can be linked
	// to the loan account. All deposit products may be linked if the field is
	// null.
	DepositProductIDs []string `protobuf:"bytes,2,rep,name=DepositProductIDs,json=deposit_product_ids,proto3" json:"deposit_product_ids,omitempty"`
	// Options is a list of options for configuring the linked account.
	Options []LinkedAccountOptions `protobuf:"varint,3,rep,packed,name=Options,json=options,proto3,enum=openbank.core.v1.products.LinkedAccountOptions" json:"options,omitempty"`
	// SettlementMethod is the method of settlement for the loan accounts,
	// including automated transfers from the linked deposit account into the
	// loan account.
	SettlementMethod SettlementMethod `protobuf:"varint,4,opt,name=SettlementMethod,json=settlement_method,proto3,enum=openbank.core.v1.products.SettlementMethod" json:"settlement_method,omitempty"`
}

func (x *AccountLinkSettings) Reset() {
	*x = AccountLinkSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountLinkSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountLinkSettings) ProtoMessage() {}

func (x *AccountLinkSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountLinkSettings.ProtoReflect.Descriptor instead.
func (*AccountLinkSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{22}
}

func (x *AccountLinkSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AccountLinkSettings) GetDepositProductIDs() []string {
	if x != nil {
		return x.DepositProductIDs
	}
	return nil
}

func (x *AccountLinkSettings) GetOptions() []LinkedAccountOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AccountLinkSettings) GetSettlementMethod() SettlementMethod {
	if x != nil {
		return x.SettlementMethod
	}
	return SettlementMethod_MethodFullDueAmounts
}

// FundingSettings is the settings for the funding of a loan account.
type FundingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Investor is a flag that indicates whether the loan account is funded by
	// investor(s).
	Investor bool `protobuf:"varint,1,opt,name=Investor,json=investor,proto3" json:"investor,omitempty"`
	// Commission is the minimum and maximum amount of interest commissioned.
	Commission *DecimalInterval `protobuf:"bytes,2,opt,name=Commission,json=commission,proto3" json:"commission,omitempty"`
	// CommissionAllocationType is the type of interest commission allocation
	// used when paying back investors.
	CommissionAllocationType CommissionAllocationType `protobuf:"varint,3,opt,name=CommissionAllocationType,json=commission_allocation_type,proto3,enum=openbank.core.v1.products.CommissionAllocationType" json:"commission_allocation_type,omitempty"`
	// LockFundsOnApproval is a flag that indicates whether the investor's funds
	// should be locked when a loan account is approved.
	LockFundsOnApproval bool `protobuf:"varint,4,opt,name=LockFundsOnApproval,json=lock_funds_on_approval,proto3" json:"lock_funds_on_approval,omitempty"`
	// OrganizationCommission is the minimum and maximum amount of interest
	// commissioned to the organization.
	OrganizationCommission *DecimalInterval `protobuf:"bytes,5,opt,name=OrganizationCommission,json=organization_commission,proto3" json:"organization_commission,omitempty"`
	// RequiredFunds is the minimum amount of investor funds package.
	RequiredFunds *v1.Amount `protobuf:"bytes,6,opt,name=RequiredFunds,json=required_funds,proto3" json:"required_funds,omitempty"`
}

func (x *FundingSettings) Reset() {
	*x = FundingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingSettings) ProtoMessage() {}

func (x *FundingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingSettings.ProtoReflect.Descriptor instead.
func (*FundingSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{23}
}

func (x *FundingSettings) GetInvestor() bool {
	if x != nil {
		return x.Investor
	}
	return false
}

func (x *FundingSettings) GetCommission() *DecimalInterval {
	if x != nil {
		return x.Commission
	}
	return nil
}

func (x *FundingSettings) GetCommissionAllocationType() CommissionAllocationType {
	if x != nil {
		return x.CommissionAllocationType
	}
	return CommissionAllocationType_TypePercentageOfLoanFunding
}

func (x *FundingSettings) GetLockFundsOnApproval() bool {
	if x != nil {
		return x.LockFundsOnApproval
	}
	return false
}

func (x *FundingSettings) GetOrganizationCommission() *DecimalInterval {
	if x != nil {
		return x.OrganizationCommission
	}
	return nil
}

func (x *FundingSettings) GetRequiredFunds() *v1.Amount {
	if x != nil {
		return x.RequiredFunds
	}
	return nil
}

// GracePeriodSettings is the settings for the grace period of repayment.
type GracePeriodSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GracePeriod is the minimum and maximum duration of the grace period.
	GracePeriod *DurationInterval `protobuf:"bytes,1,opt,name=GracePeriod,json=grace_period,proto3" json:"grace_period,omitempty"`
	// GracePeriodType is the type of repayment required during the grace
	// period.
	GracePeriodType GracePeriodType `protobuf:"varint,2,opt,name=GracePeriodType,json=grace_period_type,proto3,enum=openbank.core.v1.products.GracePeriodType" json:"grace_period_type,omitempty"`
}

func (x *GracePeriodSettings) Reset() {
	*x = GracePeriodSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GracePeriodSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GracePeriodSettings) ProtoMessage() {}

func (x *GracePeriodSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GracePeriodSettings.ProtoReflect.Descriptor instead.
func (*GracePeriodSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{24}
}

func (x *GracePeriodSettings) GetGracePeriod() *DurationInterval {
	if x != nil {
		return x.GracePeriod
	}
	return nil
}

func (x *GracePeriodSettings) GetGracePeriodType() GracePeriodType {
	if x != nil {
		return x.GracePeriodType
	}
	return GracePeriodType_NoGracePeriod
}

// PrepaymentSettings is the settings for the prepayment of a loan account.
type PrepaymentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AcceptPrepayment is a flag indicating whether pre-payments are accepted
	// for the product.
	AcceptPrepayment bool `protobuf:"varint,1,opt,name=AcceptPrepayment,json=accept_prepayment,proto3" json:"accept_prepayment,omitempty"`
	// AutomaticInterest is a flag indicating whether interest is automatically
	// applied for the prepayment.
	AutomaticInterest bool `protobuf:"varint,2,opt,name=AutomaticInterest,json=automatic_interest,proto3" json:"automatic_interest,omitempty"`
	// ElementsRecalculationMethod is the method the declining balance is
	// handled.
	ElementsRecalculationMethod ElementsRecalculationMethod `protobuf:"varint,3,opt,name=ElementsRecalculationMethod,json=elements_recalculation_method,proto3,enum=openbank.core.v1.products.ElementsRecalculationMethod" json:"elements_recalculation_method,omitempty"`
	// FuturePaymentsAcceptance is the level of acceptance for future payments
	// (repayments with entry date set in the future).
	FuturePaymentsAcceptance FuturePaymentsAcceptance `protobuf:"varint,4,opt,name=FuturePaymentsAcceptance,json=future_payments_acceptance,proto3,enum=openbank.core.v1.products.FuturePaymentsAcceptance" json:"future_payments_acceptance,omitempty"`
	// RecalculationMethod is the method of recalculating the payment
	// when prepayments are made.
	RecalculationMethod PrepaymentRecalculationMethod `protobuf:"varint,5,opt,name=RecalculationMethod,json=recalculation_method,proto3,enum=openbank.core.v1.products.PrepaymentRecalculationMethod" json:"recalculation_method,omitempty"`
	// PrincipalPaidInstallmentStatus is the new installment status when the
	// principal is paid off.
	PrincipalPaidInstallmentStatus PrincipalPaidInstallmentStatus `protobuf:"varint,6,opt,name=PrincipalPaidInstallmentStatus,json=principal_paid_installment_status,proto3,enum=openbank.core.v1.products.PrincipalPaidInstallmentStatus" json:"principal_paid_installment_status,omitempty"`
}

func (x *PrepaymentSettings) Reset() {
	*x = PrepaymentSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepaymentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepaymentSettings) ProtoMessage() {}

func (x *PrepaymentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepaymentSettings.ProtoReflect.Descriptor instead.
func (*PrepaymentSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{25}
}

func (x *PrepaymentSettings) GetAcceptPrepayment() bool {
	if x != nil {
		return x.AcceptPrepayment
	}
	return false
}

func (x *PrepaymentSettings) GetAutomaticInterest() bool {
	if x != nil {
		return x.AutomaticInterest
	}
	return false
}

func (x *PrepaymentSettings) GetElementsRecalculationMethod() ElementsRecalculationMethod {
	if x != nil {
		return x.ElementsRecalculationMethod
	}
	return ElementsRecalculationMethod_MethodPrincipalExpectedFixed
}

func (x *PrepaymentSettings) GetFuturePaymentsAcceptance() FuturePaymentsAcceptance {
	if x != nil {
		return x.FuturePaymentsAcceptance
	}
	return FuturePaymentsAcceptance_NoFuturePayments
}

func (x *PrepaymentSettings) GetRecalculationMethod() PrepaymentRecalculationMethod {
	if x != nil {
		return x.RecalculationMethod
	}
	return PrepaymentRecalculationMethod_NoRecalculation
}

func (x *PrepaymentSettings) GetPrincipalPaidInstallmentStatus() PrincipalPaidInstallmentStatus {
	if x != nil {
		return x.PrincipalPaidInstallmentStatus
	}
	return PrincipalPaidInstallmentStatus_StatusPartiallyPaid
}

// PrincipalPaymentSettings is the settings for the payment of the principal for
// loans created based on the product.
type PrincipalPaymentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the minimum, maximum and default amount of principal for
	// accounts made for this product.
	Amount *DecimalInterval `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// DefaultInterval is the default number of repayments for the principal.
	DefaultInterval int32 `protobuf:"varint,2,opt,name=DefaultInterval,json=default_interval,proto3" json:"default_interval,omitempty"`
	// Percentage is the minimum, maximum and default principal payment
	// percentage for the account made after the product.
	Percentage *DecimalInterval `protobuf:"bytes,3,opt,name=Percentage,json=percentage,proto3" json:"percentage,omitempty"`
	// Ceiling is the maximum amount of principal due a repayment can have.
	Ceiling *v1.Amount `protobuf:"bytes,4,opt,name=Ceiling,json=ceiling,proto3" json:"ceiling,omitempty"`
	// Floor is the minimum amount of principal due a repayment can have.
	Floor *v1.Amount `protobuf:"bytes,5,opt,name=Floor,json=floor,proto3" json:"floor,omitempty"`
	// PrincipalPaymentMethod is the method of determining principal payment.
	PrincipalPaymentMethod PrincipalPaymentMethod `protobuf:"varint,6,opt,name=PrincipalPaymentMethod,json=principal_payment_method,proto3,enum=openbank.core.v1.products.PrincipalPaymentMethod" json:"principal_payment_method,omitempty"`
	// IncludeFeesInFloorAmount is a flag to indicate whether the fees should
	// be included in the floor amount in a revolving credit account.
	IncludeFeesInFloorAmount bool `protobuf:"varint,7,opt,name=IncludeFeesInFloorAmount,json=include_fees_in_floor_amount,proto3" json:"include_fees_in_floor_amount,omitempty"`
	// IncludeInterestInFloorAmount is a flag to indicate whether the interest
	// should be included in the floor amount in a revolving credit account.
	IncludeInterestInFloorAmount bool `protobuf:"varint,8,opt,name=IncludeInterestInFloorAmount,json=include_interest_in_floor_amount,proto3" json:"include_interest_in_floor_amount,omitempty"`
	// TotalDueAmountFloor is the minimum due amount for revolving credit
	// accounts.
	TotalDueAmountFloor *v1.Amount `protobuf:"bytes,9,opt,name=TotalDueAmountFloor,json=total_due_amount_floor,proto3" json:"total_due_amount_floor,omitempty"`
	// TotalDuePayment is the method of determining total amount of payment due
	// for revolving credit accounts.
	TotalDuePayment TotalDuePayment `protobuf:"varint,10,opt,name=TotalDuePayment,json=total_due_payment,proto3,enum=openbank.core.v1.products.TotalDuePayment" json:"total_due_payment,omitempty"`
}

func (x *PrincipalPaymentSettings) Reset() {
	*x = PrincipalPaymentSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrincipalPaymentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalPaymentSettings) ProtoMessage() {}

func (x *PrincipalPaymentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalPaymentSettings.ProtoReflect.Descriptor instead.
func (*PrincipalPaymentSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{26}
}

func (x *PrincipalPaymentSettings) GetAmount() *DecimalInterval {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PrincipalPaymentSettings) GetDefaultInterval() int32 {
	if x != nil {
		return x.DefaultInterval
	}
	return 0
}

func (x *PrincipalPaymentSettings) GetPercentage() *DecimalInterval {
	if x != nil {
		return x.Percentage
	}
	return nil
}

func (x *PrincipalPaymentSettings) GetCeiling() *v1.Amount {
	if x != nil {
		return x.Ceiling
	}
	return nil
}

func (x *PrincipalPaymentSettings) GetFloor() *v1.Amount {
	if x != nil {
		return x.Floor
	}
	return nil
}

func (x *PrincipalPaymentSettings) GetPrincipalPaymentMethod() PrincipalPaymentMethod {
	if x != nil {
		return x.PrincipalPaymentMethod
	}
	return PrincipalPaymentMethod_MethodFlatPayment
}

func (x *PrincipalPaymentSettings) GetIncludeFeesInFloorAmount() bool {
	if x != nil {
		return x.IncludeFeesInFloorAmount
	}
	return false
}

func (x *PrincipalPaymentSettings) GetIncludeInterestInFloorAmount() bool {
	if x != nil {
		return x.IncludeInterestInFloorAmount
	}
	return false
}

func (x *PrincipalPaymentSettings) GetTotalDueAmountFloor() *v1.Amount {
	if x != nil {
		return x.TotalDueAmountFloor
	}
	return nil
}

func (x *PrincipalPaymentSettings) GetTotalDuePayment() TotalDuePayment {
	if x != nil {
		return x.TotalDuePayment
	}
	return TotalDuePayment_PaymentFlat
}

// PaymentSettings is the settings for repayment in loan accounts.
type PaymentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AmortizationMethod is the method used to generate repayment schedules for
	// the loan account.
	AmortizationMethod AmortizationMethod `protobuf:"varint,1,opt,name=AmortizationMethod,json=amortization_method,proto3,enum=openbank.core.v1.products.AmortizationMethod" json:"amortization_method,omitempty"`
	// LatePaymentsMethod is the method used to recalculate the schedule when a
	// late payment is made.
	LatePaymentsMethod LatePaymentsRecalculationMethod `protobuf:"varint,2,opt,name=LatePaymentsMethod,json=late_payments_method,proto3,enum=openbank.core.v1.products.LatePaymentsRecalculationMethod" json:"late_payments_method,omitempty"`
	// Type is the type of the interest payment.
	Type PaymentType `protobuf:"varint,3,opt,name=Type,json=type,proto3,enum=openbank.core.v1.products.PaymentType" json:"type,omitempty"`
	// Prepayment is the settings for the prepayment for the product.
	Prepayment *PrepaymentSettings `protobuf:"bytes,4,opt,name=Prepayment,json=prepayment,proto3" json:"prepayment,omitempty"`
	// PrincipalPayment is the settings for constraints on principal payment.
	PrincipalPayment *PrincipalPaymentSettings `protobuf:"bytes,5,opt,name=PrincipalPayment,json=principal_payment,proto3" json:"principal_payment,omitempty"`
	// AllocationOrder is the order the funds of a repayment is allocated.
	AllocationOrder []RepaymentAllocationOrder `protobuf:"varint,6,rep,packed,name=AllocationOrder,json=allocation_order,proto3,enum=openbank.core.v1.products.RepaymentAllocationOrder" json:"allocation_order,omitempty"`
}

func (x *PaymentSettings) Reset() {
	*x = PaymentSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentSettings) ProtoMessage() {}

func (x *PaymentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentSettings.ProtoReflect.Descriptor instead.
func (*PaymentSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{27}
}

func (x *PaymentSettings) GetAmortizationMethod() AmortizationMethod {
	if x != nil {
		return x.AmortizationMethod
	}
	return AmortizationMethod_MethodStandardPayments
}

func (x *PaymentSettings) GetLatePaymentsMethod() LatePaymentsRecalculationMethod {
	if x != nil {
		return x.LatePaymentsMethod
	}
	return LatePaymentsRecalculationMethod_MethodOverdueInstallmentsIncrease
}

func (x *PaymentSettings) GetType() PaymentType {
	if x != nil {
		return x.Type
	}
	return PaymentType_MethodHorizontal
}

func (x *PaymentSettings) GetPrepayment() *PrepaymentSettings {
	if x != nil {
		return x.Prepayment
	}
	return nil
}

func (x *PaymentSettings) GetPrincipalPayment() *PrincipalPaymentSettings {
	if x != nil {
		return x.PrincipalPayment
	}
	return nil
}

func (x *PaymentSettings) GetAllocationOrder() []RepaymentAllocationOrder {
	if x != nil {
		return x.AllocationOrder
	}
	return nil
}

// LoanAmountSettings is the settings for the loan amount limitations of the
// loan product.
type LoanAmountSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoanAmount is the minimum, maximum and default loan amount.
	LoanAmount *DecimalInterval `protobuf:"bytes,1,opt,name=LoanAmount,json=loan_amount,proto3" json:"loan_amount,omitempty"`
	// MaxNumberOfTranches is the maximum number of tranches supported by the
	// loan product.
	MaxNumberOfTranches int32 `protobuf:"varint,2,opt,name=MaxNumberOfTranches,json=max_number_of_tranches,proto3" json:"max_number_of_tranches,omitempty"`
}

func (x *LoanAmountSettings) Reset() {
	*x = LoanAmountSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoanAmountSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoanAmountSettings) ProtoMessage() {}

func (x *LoanAmountSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoanAmountSettings.ProtoReflect.Descriptor instead.
func (*LoanAmountSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{28}
}

func (x *LoanAmountSettings) GetLoanAmount() *DecimalInterval {
	if x != nil {
		return x.LoanAmount
	}
	return nil
}

func (x *LoanAmountSettings) GetMaxNumberOfTranches() int32 {
	if x != nil {
		return x.MaxNumberOfTranches
	}
	return 0
}

// PenaltySettings is the settings for the penalties of the loan product.
type PenaltySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CalculationMethod is the method loan penalties are calculated.
	CalculationMethod LoanPenaltyCalculationMethod `protobuf:"varint,1,opt,name=CalculationMethod,json=calculation_method,proto3,enum=openbank.core.v1.products.LoanPenaltyCalculationMethod" json:"calculation_method,omitempty"`
	// GracePeriod is the period to wait before applying the penalty amount.
	GracePeriod *durationpb.Duration `protobuf:"bytes,2,opt,name=GracePeriod,json=grace_period,proto3" json:"grace_period,omitempty"`
	// PenaltyRate is the minimum, maximum and default penalty rate.
	PenaltyRate *DecimalInterval `protobuf:"bytes,3,opt,name=PenaltyRate,json=penalty_rate,proto3" json:"penalty_rate,omitempty"`
}

func (x *PenaltySettings) Reset() {
	*x = PenaltySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PenaltySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PenaltySettings) ProtoMessage() {}

func (x *PenaltySettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PenaltySettings.ProtoReflect.Descriptor instead.
func (*PenaltySettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{29}
}

func (x *PenaltySettings) GetCalculationMethod() LoanPenaltyCalculationMethod {
	if x != nil {
		return x.CalculationMethod
	}
	return LoanPenaltyCalculationMethod_MethodNoRecalculate
}

func (x *PenaltySettings) GetGracePeriod() *durationpb.Duration {
	if x != nil {
		return x.GracePeriod
	}
	return nil
}

func (x *PenaltySettings) GetPenaltyRate() *DecimalInterval {
	if x != nil {
		return x.PenaltyRate
	}
	return nil
}

// RedrawSettings is the settings for redrawing loans.
type RedrawSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AllowRedraw is a flag indicating whether redrawing is allowed for
	// prepayments on the loan account.
	AllowRedraw bool `protobuf:"varint,1,opt,name=AllowRedraw,json=allow_redraw,proto3" json:"allow_redraw,omitempty"`
}

func (x *RedrawSettings) Reset() {
	*x = RedrawSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedrawSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedrawSettings) ProtoMessage() {}

func (x *RedrawSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedrawSettings.ProtoReflect.Descriptor instead.
func (*RedrawSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{30}
}

func (x *RedrawSettings) GetAllowRedraw() bool {
	if x != nil {
		return x.AllowRedraw
	}
	return false
}

// SecuritySettings is the settings for security requirements on the loan
// product.
type SecuritySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EnableCollateral is a flag indicating whether collateral (assets or other
	// goods) are accepted to reach required securities percentage.
	EnableCollateral bool `protobuf:"varint,1,opt,name=EnableCollateral,json=enable_collateral,proto3" json:"enable_collateral,omitempty"`
	// EnableGuarantors is a flag indicating whether guarantors (other clients)
	// are accepted to reach required securities percentage.
	EnableGuarantors bool `protobuf:"varint,2,opt,name=EnableGuarantors,json=enable_guarantors,proto3" json:"enable_guarantors,omitempty"`
	// RequiredGuaranties is the amount of securities required to approve the
	// account, in percentage.
	RequiredGuaranties float64 `protobuf:"fixed64,3,opt,name=RequiredGuaranties,json=required_guaranties,proto3" json:"required_guaranties,omitempty"`
}

func (x *SecuritySettings) Reset() {
	*x = SecuritySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecuritySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecuritySettings) ProtoMessage() {}

func (x *SecuritySettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecuritySettings.ProtoReflect.Descriptor instead.
func (*SecuritySettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{31}
}

func (x *SecuritySettings) GetEnableCollateral() bool {
	if x != nil {
		return x.EnableCollateral
	}
	return false
}

func (x *SecuritySettings) GetEnableGuarantors() bool {
	if x != nil {
		return x.EnableGuarantors
	}
	return false
}

func (x *SecuritySettings) GetRequiredGuaranties() float64 {
	if x != nil {
		return x.RequiredGuaranties
	}
	return 0
}

// LoanTaxSettings is the settings for the taxes on the loan product.
type LoanTaxSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IncludeTax is a flag indicating whether the tax should be included in the
	// target amount.
	IncludeTax bool `protobuf:"varint,1,opt,name=IncludeTax,json=include_tax,proto3" json:"include_tax,omitempty"`
	// TaxSourceID is the ID of the tax source the loan account taxes should be
	// updated from.
	TaxSourceID string `protobuf:"bytes,2,opt,name=TaxSourceID,json=tax_source_id,proto3" json:"tax_source_id,omitempty"`
	// EnableFeeTax is a flag indicating whether tax should be applied to fees.
	EnableFeeTax bool `protobuf:"varint,3,opt,name=EnableFeeTax,json=enable_fee_tax,proto3" json:"enable_fee_tax,omitempty"`
	// EnableInterestTax is a flag indicating whether tax should be applied to
	// interests.
	EnableInterestTax bool `protobuf:"varint,4,opt,name=EnableInterestTax,json=enable_interest_tax,proto3" json:"enable_interest_tax,omitempty"`
	// EnablePenaltyTax is a flag indicating whether tax should be applied to
	// penalties.
	EnablePenaltyTax bool `protobuf:"varint,5,opt,name=EnablePenaltyTax,json=enable_penalty_tax,proto3" json:"enable_penalty_tax,omitempty"`
}

func (x *LoanTaxSettings) Reset() {
	*x = LoanTaxSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoanTaxSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoanTaxSettings) ProtoMessage() {}

func (x *LoanTaxSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoanTaxSettings.ProtoReflect.Descriptor instead.
func (*LoanTaxSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{32}
}

func (x *LoanTaxSettings) GetIncludeTax() bool {
	if x != nil {
		return x.IncludeTax
	}
	return false
}

func (x *LoanTaxSettings) GetTaxSourceID() string {
	if x != nil {
		return x.TaxSourceID
	}
	return ""
}

func (x *LoanTaxSettings) GetEnableFeeTax() bool {
	if x != nil {
		return x.EnableFeeTax
	}
	return false
}

func (x *LoanTaxSettings) GetEnableInterestTax() bool {
	if x != nil {
		return x.EnableInterestTax
	}
	return false
}

func (x *LoanTaxSettings) GetEnablePenaltyTax() bool {
	if x != nil {
		return x.EnablePenaltyTax
	}
	return false
}

// BillingCycleSettings is the billing cycle settings for revolving
// credit products.
type BillingCycleSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled is a flag indicating whether the billing cycle is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=Enabled,json=enabled,proto3" json:"enabled,omitempty"`
	// StartDays is the start days of a billing cycle in the month.
	StartDays []int32 `protobuf:"varint,2,rep,packed,name=StartDays,json=start_days,proto3" json:"start_days,omitempty"`
}

func (x *BillingCycleSettings) Reset() {
	*x = BillingCycleSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillingCycleSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingCycleSettings) ProtoMessage() {}

func (x *BillingCycleSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingCycleSettings.ProtoReflect.Descriptor instead.
func (*BillingCycleSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{33}
}

func (x *BillingCycleSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BillingCycleSettings) GetStartDays() []int32 {
	if x != nil {
		return x.StartDays
	}
	return nil
}

// PreviewScheduleSettings is the settings for previewing schedules for loan
// products.
type PreviewScheduleSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled is a flag indicating whether the preview schedule is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=Enabled,json=enabled,proto3" json:"enabled,omitempty"`
	// PreviewCount is the number of previewed installments.
	PreviewCount int32 `protobuf:"varint,2,opt,name=PreviewCount,json=preview_count,proto3" json:"preview_count,omitempty"`
}

func (x *PreviewScheduleSettings) Reset() {
	*x = PreviewScheduleSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewScheduleSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewScheduleSettings) ProtoMessage() {}

func (x *PreviewScheduleSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewScheduleSettings.ProtoReflect.Descriptor instead.
func (*PreviewScheduleSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{34}
}

func (x *PreviewScheduleSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PreviewScheduleSettings) GetPreviewCount() int32 {
	if x != nil {
		return x.PreviewCount
	}
	return 0
}

// RoundingSettings is the rounding settings used in loan computation.
type RoundingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RepaymentCurrency is the method the repayment currency is rounded.
	RepaymentCurrency RepaymentCurrencyRounding `protobuf:"varint,1,opt,name=RepaymentCurrency,json=repayment_currency,proto3,enum=openbank.core.v1.products.RepaymentCurrencyRounding" json:"repayment_currency,omitempty"`
	// RepaymentElements is the method each element from the schedule are
	// rounded.
	RepaymentElements RepaymentElementsRounding `protobuf:"varint,2,opt,name=RepaymentElements,json=repayment_elements,proto3,enum=openbank.core.v1.products.RepaymentElementsRounding" json:"repayment_elements,omitempty"`
	// RepaymentSchedule is the method repayment schedules are rounded.
	RepaymentSchedule RepaymentScheduleRounding `protobuf:"varint,3,opt,name=RepaymentSchedule,json=repayment_schedule,proto3,enum=openbank.core.v1.products.RepaymentScheduleRounding" json:"repayment_schedule,omitempty"`
}

func (x *RoundingSettings) Reset() {
	*x = RoundingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundingSettings) ProtoMessage() {}

func (x *RoundingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundingSettings.ProtoReflect.Descriptor instead.
func (*RoundingSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{35}
}

func (x *RoundingSettings) GetRepaymentCurrency() RepaymentCurrencyRounding {
	if x != nil {
		return x.RepaymentCurrency
	}
	return RepaymentCurrencyRounding_NoCurrencyRounding
}

func (x *RoundingSettings) GetRepaymentElements() RepaymentElementsRounding {
	if x != nil {
		return x.RepaymentElements
	}
	return RepaymentElementsRounding_NoRepaymentRounding
}

func (x *RoundingSettings) GetRepaymentSchedule() RepaymentScheduleRounding {
	if x != nil {
		return x.RepaymentSchedule
	}
	return RepaymentScheduleRounding_NoScheduleRounding
}

// LoanScheduleSettings is the settings for schedules in loan products.
type LoanScheduleSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the type of the loan schedule.
	Type RepaymentScheduleType `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=openbank.core.v1.products.RepaymentScheduleType" json:"type,omitempty"`
	// BillingCycle is the billing cycle settings for revolving credit products.
	BillingCycle *BillingCycleSettings `protobuf:"bytes,2,opt,name=BillingCycle,json=billing_cycle,proto3" json:"billing_cycle,omitempty"`
	// RepaymentCount is the number of installments.
	RepaymentCount int32 `protobuf:"varint,3,opt,name=RepaymentCount,json=repayment_count,proto3" json:"repayment_count,omitempty"`
	// ScheduleDueDatesMethod is the method used to determine the repayment due
	// dates.
	ScheduleDueDatesMethod DueDateScheduleMethod `protobuf:"varint,4,opt,name=ScheduleDueDatesMethod,json=schedule_due_dates_method,proto3,enum=openbank.core.v1.products.DueDateScheduleMethod" json:"schedule_due_dates_method,omitempty"`
	// FixedDaysOfMonth is the list of days in the month where the repayments
	// are due.
	FixedDaysOfMonth []int32 `protobuf:"varint,5,rep,packed,name=FixedDaysOfMonth,json=fixed_days_of_month,proto3" json:"fixed_days_of_month,omitempty"`
	// Period is the period between loan repayments.
	Period *durationpb.Duration `protobuf:"bytes,6,opt,name=Period,json=period,proto3" json:"period,omitempty"`
	// InstallmentCount is the minimum, maximum and default number of
	// installments.
	InstallmentCount *IntegerInterval `protobuf:"bytes,7,opt,name=InstallmentCount,json=installment_count,proto3" json:"installment_count,omitempty"`
	// FirstDueDateOffset is the minimum, maximum and default number of days to
	// add to the first installment date.
	FirstDueDateOffset *IntegerInterval `protobuf:"bytes,8,opt,name=FirstDueDateOffset,json=first_due_date_offset,proto3" json:"first_due_date_offset,omitempty"`
	// PreviewSchedule is the settings for previewing schedules.
	PreviewSchedule *PreviewScheduleSettings `protobuf:"bytes,9,opt,name=PreviewSchedule,json=preview_schedule,proto3" json:"preview_schedule,omitempty"`
	// ReschedulingMethod is the method used when rescheduling repayments.
	ReschedulingMethod RepaymentReschedulingMethod `protobuf:"varint,10,opt,name=ReschedulingMethod,json=rescheduling_method,proto3,enum=openbank.core.v1.products.RepaymentReschedulingMethod" json:"rescheduling_method,omitempty"`
	// EditOptions is a list of properties that can be edited after creation.
	EditOptions []RepaymentScheduleEditOptions `protobuf:"varint,11,rep,packed,name=EditOptions,json=edit_options,proto3,enum=openbank.core.v1.products.RepaymentScheduleEditOptions" json:"edit_options,omitempty"`
	// Rounding is the rounding settings used in loan computation.
	Rounding *RoundingSettings `protobuf:"bytes,12,opt,name=Rounding,json=rounding,proto3" json:"rounding,omitempty"`
	// ShortMonthHandlingMethod is the method used in handling short months if a
	// fixed day of month above 28 is specified.
	ShortMonthHandlingMethod MonthHandlingMethod `protobuf:"varint,13,opt,name=ShortMonthHandlingMethod,json=short_month_handling_method,proto3,enum=openbank.core.v1.products.MonthHandlingMethod" json:"short_month_handling_method,omitempty"`
}

func (x *LoanScheduleSettings) Reset() {
	*x = LoanScheduleSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoanScheduleSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoanScheduleSettings) ProtoMessage() {}

func (x *LoanScheduleSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoanScheduleSettings.ProtoReflect.Descriptor instead.
func (*LoanScheduleSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{36}
}

func (x *LoanScheduleSettings) GetType() RepaymentScheduleType {
	if x != nil {
		return x.Type
	}
	return RepaymentScheduleType_NoRepaymentSchedule
}

func (x *LoanScheduleSettings) GetBillingCycle() *BillingCycleSettings {
	if x != nil {
		return x.BillingCycle
	}
	return nil
}

func (x *LoanScheduleSettings) GetRepaymentCount() int32 {
	if x != nil {
		return x.RepaymentCount
	}
	return 0
}

func (x *LoanScheduleSettings) GetScheduleDueDatesMethod() DueDateScheduleMethod {
	if x != nil {
		return x.ScheduleDueDatesMethod
	}
	return DueDateScheduleMethod_IntervalDueDates
}

func (x *LoanScheduleSettings) GetFixedDaysOfMonth() []int32 {
	if x != nil {
		return x.FixedDaysOfMonth
	}
	return nil
}

func (x *LoanScheduleSettings) GetPeriod() *durationpb.Duration {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *LoanScheduleSettings) GetInstallmentCount() *IntegerInterval {
	if x != nil {
		return x.InstallmentCount
	}
	return nil
}

func (x *LoanScheduleSettings) GetFirstDueDateOffset() *IntegerInterval {
	if x != nil {
		return x.FirstDueDateOffset
	}
	return nil
}

func (x *LoanScheduleSettings) GetPreviewSchedule() *PreviewScheduleSettings {
	if x != nil {
		return x.PreviewSchedule
	}
	return nil
}

func (x *LoanScheduleSettings) GetReschedulingMethod() RepaymentReschedulingMethod {
	if x != nil {
		return x.ReschedulingMethod
	}
	return RepaymentReschedulingMethod_NoRescheduleRepayment
}

func (x *LoanScheduleSettings) GetEditOptions() []RepaymentScheduleEditOptions {
	if x != nil {
		return x.EditOptions
	}
	return nil
}

func (x *LoanScheduleSettings) GetRounding() *RoundingSettings {
	if x != nil {
		return x.Rounding
	}
	return nil
}

func (x *LoanScheduleSettings) GetShortMonthHandlingMethod() MonthHandlingMethod {
	if x != nil {
		return x.ShortMonthHandlingMethod
	}
	return MonthHandlingMethod_LastDayInMonth
}

// LoanSettings is the settings for a loan product.
type LoanSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountLink is the settings for linking a deposit account to the loan
	// account.
	AccountLink *AccountLinkSettings `protobuf:"bytes,1,opt,name=AccountLink,json=account_link,proto3" json:"account_link,omitempty"`
	// Accounting is the settings for the loan account's accounting.
	Accounting *AccountingSettings `protobuf:"bytes,2,opt,name=Accounting,json=accounting,proto3" json:"accounting,omitempty"`
	// Arrears is the settings for the loan account's arrears.
	Arrears *ArrearsSettings `protobuf:"bytes,3,opt,name=Arrears,json=arrears,proto3" json:"arrears,omitempty"`
	// Availability is the settings for the loan product's availability.
	// The product availability settings.
	Availability *AvailabilitySettings `protobuf:"bytes,4,opt,name=Availability,json=availability,proto3" json:"availability,omitempty"`
	// RevolvingAccount is the settings for the loan account's revolving
	// account.
	RevolvingAccount *RevolvingAccountSettings `protobuf:"bytes,5,opt,name=RevolvingAccount,json=revolving_account,proto3" json:"revolving_account,omitempty"`
	// Fees is the settings for the loan account's fees.
	Fees *FeeSettings `protobuf:"bytes,6,opt,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// Funding is the settings for the loan account's funding.
	Funding *FundingSettings `protobuf:"bytes,7,opt,name=Funding,json=funding,proto3" json:"funding,omitempty"`
	// GracePeriod is the settings for the loan account's grace period.
	GracePeriod *GracePeriodSettings `protobuf:"bytes,8,opt,name=GracePeriod,json=grace_period,proto3" json:"grace_period,omitempty"`
	// Interest is the settings for the loan account's interest.
	Interest *LoanInterestSettings `protobuf:"bytes,9,opt,name=Interest,json=interest,proto3" json:"interest,omitempty"`
	// LoanAmount is the settings for the loan account's loan amount.
	LoanAmount *LoanAmountSettings `protobuf:"bytes,10,opt,name=LoanAmount,json=loan_amount,proto3" json:"loan_amount,omitempty"`
	// NewAccount is the settings for new loan accounts.
	NewAccount *NewAccountSettings `protobuf:"bytes,11,opt,name=NewAccount,json=new_account,proto3" json:"new_account,omitempty"`
	// Offset is the settings for the loan account's offset.
	Offset *OffsetSettings `protobuf:"bytes,12,opt,name=Offset,json=offset,proto3" json:"offset,omitempty"`
	// Payment is the settings for the loan account's payment.
	Payment *PaymentSettings `protobuf:"bytes,13,opt,name=Payment,json=payment,proto3" json:"payment,omitempty"`
	// Penalty is the settings for the loan account's penalty.
	Penalty *PenaltySettings `protobuf:"bytes,14,opt,name=Penalty,json=penalty,proto3" json:"penalty,omitempty"`
	// Redraw is the settings for the loan account's redraw.
	Redraw *RedrawSettings `protobuf:"bytes,15,opt,name=Redraw,json=redraw,proto3" json:"redraw,omitempty"`
	// Schedule is the settings for the loan account's schedule.
	Schedule *LoanScheduleSettings `protobuf:"bytes,16,opt,name=Schedule,json=schedule,proto3" json:"schedule,omitempty"`
	// Security is the settings for the loan account's security.
	Security *SecuritySettings `protobuf:"bytes,17,opt,name=Security,json=security,proto3" json:"security,omitempty"`
	// Tax is the settings for the loan account's tax.
	Tax *LoanTaxSettings `protobuf:"bytes,18,opt,name=Tax,json=tax,proto3" json:"tax,omitempty"`
}

func (x *LoanSettings) Reset() {
	*x = LoanSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoanSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoanSettings) ProtoMessage() {}

func (x *LoanSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoanSettings.ProtoReflect.Descriptor instead.
func (*LoanSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{37}
}

func (x *LoanSettings) GetAccountLink() *AccountLinkSettings {
	if x != nil {
		return x.AccountLink
	}
	return nil
}

func (x *LoanSettings) GetAccounting() *AccountingSettings {
	if x != nil {
		return x.Accounting
	}
	return nil
}

func (x *LoanSettings) GetArrears() *ArrearsSettings {
	if x != nil {
		return x.Arrears
	}
	return nil
}

func (x *LoanSettings) GetAvailability() *AvailabilitySettings {
	if x != nil {
		return x.Availability
	}
	return nil
}

func (x *LoanSettings) GetRevolvingAccount() *RevolvingAccountSettings {
	if x != nil {
		return x.RevolvingAccount
	}
	return nil
}

func (x *LoanSettings) GetFees() *FeeSettings {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *LoanSettings) GetFunding() *FundingSettings {
	if x != nil {
		return x.Funding
	}
	return nil
}

func (x *LoanSettings) GetGracePeriod() *GracePeriodSettings {
	if x != nil {
		return x.GracePeriod
	}
	return nil
}

func (x *LoanSettings) GetInterest() *LoanInterestSettings {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *LoanSettings) GetLoanAmount() *LoanAmountSettings {
	if x != nil {
		return x.LoanAmount
	}
	return nil
}

func (x *LoanSettings) GetNewAccount() *NewAccountSettings {
	if x != nil {
		return x.NewAccount
	}
	return nil
}

func (x *LoanSettings) GetOffset() *OffsetSettings {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *LoanSettings) GetPayment() *PaymentSettings {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *LoanSettings) GetPenalty() *PenaltySettings {
	if x != nil {
		return x.Penalty
	}
	return nil
}

func (x *LoanSettings) GetRedraw() *RedrawSettings {
	if x != nil {
		return x.Redraw
	}
	return nil
}

func (x *LoanSettings) GetSchedule() *LoanScheduleSettings {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *LoanSettings) GetSecurity() *SecuritySettings {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *LoanSettings) GetTax() *LoanTaxSettings {
	if x != nil {
		return x.Tax
	}
	return nil
}

// LockSettings are settings for when the loan account is locked.
type LockSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CappingConstraintType is the type of capping for charges.
	CappingConstraintType CappingConstraintType `protobuf:"varint,1,opt,name=CappingConstraintType,json=capping_constraint_type,proto3,enum=openbank.core.v1.products.CappingConstraintType" json:"capping_constraint_type,omitempty"`
	// PrincipalCapMethod is the method the principal is used when determining
	// capping value.
	PrincipalCapMethod PrincipalCapMethod `protobuf:"varint,2,opt,name=PrincipalCapMethod,json=principal_cap_method,proto3,enum=openbank.core.v1.products.PrincipalCapMethod" json:"principal_cap_method,omitempty"`
	// CappingPercentage is the percentage of principal that cannot be exceeded
	// by interest, fees and penalty balances.
	CappingPercentage float64 `protobuf:"fixed64,3,opt,name=CappingPercentage,json=capping_percentage,proto3" json:"capping_percentage,omitempty"`
	// LockPeriod is the duration the account is locked for if it stays in
	// arrears.
	LockPeriod *durationpb.Duration `protobuf:"bytes,4,opt,name=LockPeriod,json=lock_period,proto3" json:"lock_period,omitempty"`
}

func (x *LockSettings) Reset() {
	*x = LockSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockSettings) ProtoMessage() {}

func (x *LockSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockSettings.ProtoReflect.Descriptor instead.
func (*LockSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{38}
}

func (x *LockSettings) GetCappingConstraintType() CappingConstraintType {
	if x != nil {
		return x.CappingConstraintType
	}
	return CappingConstraintType_SoftCap
}

func (x *LockSettings) GetPrincipalCapMethod() PrincipalCapMethod {
	if x != nil {
		return x.PrincipalCapMethod
	}
	return PrincipalCapMethod_OutstandingPrincipalPercentage
}

func (x *LockSettings) GetCappingPercentage() float64 {
	if x != nil {
		return x.CappingPercentage
	}
	return 0
}

func (x *LockSettings) GetLockPeriod() *durationpb.Duration {
	if x != nil {
		return x.LockPeriod
	}
	return nil
}

// LoanInternalControls is the internal controls for loan accounts.
type LoanInternalControls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DormancyPeriod is the amount of time after the account is fully paid to
	// auto-close it.
	DormancyPeriod *durationpb.Duration `protobuf:"bytes,1,opt,name=DormancyPeriod,json=dormancy_period,proto3" json:"dormancy_period,omitempty"`
	// MultiUserApproval is a flag that indicates whether multiple users are
	// required to create and approve the loan account following the four eyes
	// principle.
	MultiUserApproval bool `protobuf:"varint,2,opt,name=MultiUserApproval,json=multi_user_approval,proto3" json:"multi_user_approval,omitempty"`
	// LockSettings is the settings applied when the account is locked.
	LockSettings *LockSettings `protobuf:"bytes,3,opt,name=LockSettings,json=lock_settings,proto3" json:"lock_settings,omitempty"`
}

func (x *LoanInternalControls) Reset() {
	*x = LoanInternalControls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoanInternalControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoanInternalControls) ProtoMessage() {}

func (x *LoanInternalControls) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoanInternalControls.ProtoReflect.Descriptor instead.
func (*LoanInternalControls) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{39}
}

func (x *LoanInternalControls) GetDormancyPeriod() *durationpb.Duration {
	if x != nil {
		return x.DormancyPeriod
	}
	return nil
}

func (x *LoanInternalControls) GetMultiUserApproval() bool {
	if x != nil {
		return x.MultiUserApproval
	}
	return false
}

func (x *LoanInternalControls) GetLockSettings() *LockSettings {
	if x != nil {
		return x.LockSettings
	}
	return nil
}

// LoanProduct is a product where the bank provides a loan account to its
// clients.
type LoanProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProductID is the ID of the product.
	ProductID string `protobuf:"bytes,1,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
	// Name is the name of the loan product.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// Type is the type of the loan product.
	Type LoanType `protobuf:"varint,3,opt,name=Type,json=type,proto3,enum=openbank.core.v1.products.LoanType" json:"type,omitempty"`
	// Active is a flag that indicates whether the loan product is active.
	Active bool `protobuf:"varint,4,opt,name=Active,json=active,proto3" json:"active,omitempty"`
	// Notes is the notes of the loan product.
	Notes string `protobuf:"bytes,5,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// AllowCustomRepaymentAllocation is a flag that indicates whether the loan
	// product allows a payment to be customly allocated, ignoring the default
	// repayment allocation order.
	AllowCustomRepaymentAllocation bool `protobuf:"varint,6,opt,name=AllowCustomRepaymentAllocation,json=allow_custom_repayment_allocation,proto3" json:"allow_custom_repayment_allocation,omitempty"`
	// Category is the category of the loan product.
	Category LoanCategory `protobuf:"varint,7,opt,name=Category,json=category,proto3,enum=openbank.core.v1.products.LoanCategory" json:"category,omitempty"`
	// CurrencyCode is the code of the currency used for the loan product.
	CurrencyCode string `protobuf:"bytes,8,opt,name=CurrencyCode,json=currency_code,proto3" json:"currency_code,omitempty"`
	// InternalControls are the constraints and automated actions and that will
	// be applied on accounts of the product.
	InternalControls *LoanInternalControls `protobuf:"bytes,9,opt,name=InternalControls,json=internal_controls,proto3" json:"internal_controls,omitempty"`
	// TemplateIDs is the list of IDs of templates for documents related to the
	// product.
	TemplateIDs []string `protobuf:"bytes,10,rep,name=TemplateIDs,json=template_ids,proto3" json:"template_ids,omitempty"`
	// Settings is the settings applied to the loan product.
	Settings *LoanSettings `protobuf:"bytes,11,opt,name=Settings,json=settings,proto3" json:"settings,omitempty"`
	// CreateTime is the time the loan product was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
	// UpdateTime is the time the loan product was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=UpdateTime,json=update_time,proto3" json:"update_time,omitempty"`
}

func (x *LoanProduct) Reset() {
	*x = LoanProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoanProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoanProduct) ProtoMessage() {}

func (x *LoanProduct) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoanProduct.ProtoReflect.Descriptor instead.
func (*LoanProduct) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{40}
}

func (x *LoanProduct) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *LoanProduct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoanProduct) GetType() LoanType {
	if x != nil {
		return x.Type
	}
	return LoanType_TypeFixedTermLoan
}

func (x *LoanProduct) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *LoanProduct) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *LoanProduct) GetAllowCustomRepaymentAllocation() bool {
	if x != nil {
		return x.AllowCustomRepaymentAllocation
	}
	return false
}

func (x *LoanProduct) GetCategory() LoanCategory {
	if x != nil {
		return x.Category
	}
	return LoanCategory_CategoryPersonalLending
}

func (x *LoanProduct) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *LoanProduct) GetInternalControls() *LoanInternalControls {
	if x != nil {
		return x.InternalControls
	}
	return nil
}

func (x *LoanProduct) GetTemplateIDs() []string {
	if x != nil {
		return x.TemplateIDs
	}
	return nil
}

func (x *LoanProduct) GetSettings() *LoanSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *LoanProduct) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *LoanProduct) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// CreateLoanProductRequest is the request to create a new loan product.
type CreateLoanProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the loan product to be created.
	Body *LoanProduct `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateLoanProductRequest) Reset() {
	*x = CreateLoanProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLoanProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoanProductRequest) ProtoMessage() {}

func (x *CreateLoanProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoanProductRequest.ProtoReflect.Descriptor instead.
func (*CreateLoanProductRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{41}
}

func (x *CreateLoanProductRequest) GetBody() *LoanProduct {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListLoanProductsRequest is the request to list loan products.
type ListLoanProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageToken is the token for the page of loan products to be returned.
	PageToken string `protobuf:"bytes,1,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the maximum number of loan products to be returned.
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the field to order loan products by.
	OrderBy string `protobuf:"bytes,3,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to apply to loan products.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListLoanProductsRequest) Reset() {
	*x = ListLoanProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoanProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoanProductsRequest) ProtoMessage() {}

func (x *ListLoanProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoanProductsRequest.ProtoReflect.Descriptor instead.
func (*ListLoanProductsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{42}
}

func (x *ListLoanProductsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListLoanProductsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLoanProductsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListLoanProductsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListLoanProductsResponse is the response for listing loan products.
type ListLoanProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of products matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of products remaining in the list, including the
	// products in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Products is the list of loan products.
	Products []*LoanProduct `protobuf:"bytes,3,rep,name=Products,json=products,proto3" json:"products,omitempty"`
	// NextPageToken is the token for the next page of loan products.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListLoanProductsResponse) Reset() {
	*x = ListLoanProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoanProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoanProductsResponse) ProtoMessage() {}

func (x *ListLoanProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoanProductsResponse.ProtoReflect.Descriptor instead.
func (*ListLoanProductsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{43}
}

func (x *ListLoanProductsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListLoanProductsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListLoanProductsResponse) GetProducts() []*LoanProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *ListLoanProductsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetLoanProductRequest is the request to retrieve the specified loan product.
type GetLoanProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProductID is the ID of the loan product to be retrieved.
	ProductID string `protobuf:"bytes,1,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
}

func (x *GetLoanProductRequest) Reset() {
	*x = GetLoanProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoanProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoanProductRequest) ProtoMessage() {}

func (x *GetLoanProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoanProductRequest.ProtoReflect.Descriptor instead.
func (*GetLoanProductRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{44}
}

func (x *GetLoanProductRequest) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

// UpdateLoanProductRequest is the request to update a loan product.
type UpdateLoanProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProductID is the ID of the loan product to be updated.
	ProductID string `protobuf:"bytes,1,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
	// Body is the new value of the loan product.
	Body *LoanProduct `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateLoanProductRequest) Reset() {
	*x = UpdateLoanProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLoanProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLoanProductRequest) ProtoMessage() {}

func (x *UpdateLoanProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLoanProductRequest.ProtoReflect.Descriptor instead.
func (*UpdateLoanProductRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateLoanProductRequest) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *UpdateLoanProductRequest) GetBody() *LoanProduct {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteLoanProductRequest is the request to delete a loan product.
type DeleteLoanProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProductID is the ID of the loan product to be deleted.
	ProductID string `protobuf:"bytes,1,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
}

func (x *DeleteLoanProductRequest) Reset() {
	*x = DeleteLoanProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLoanProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoanProductRequest) ProtoMessage() {}

func (x *DeleteLoanProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoanProductRequest.ProtoReflect.Descriptor instead.
func (*DeleteLoanProductRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteLoanProductRequest) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

// NewAccountSettings is the settings for a new account.
type NewAccountSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InitialState is the initial state of the account when it is created.
	InitialState InitialAccountState `protobuf:"varint,1,opt,name=InitialState,json=initial_state,proto3,enum=openbank.core.v1.products.InitialAccountState" json:"initial_state,omitempty"`
	// IDGeneratorType is the type of ID generator to use for the account.
	IDGeneratorType IDGeneratorType `protobuf:"varint,2,opt,name=IDGeneratorType,json=id_generator_type,proto3,enum=openbank.core.v1.products.IDGeneratorType" json:"id_generator_type,omitempty"`
	// IDPattern is the pattern to use for the ID generator.
	IDPattern string `protobuf:"bytes,3,opt,name=IDPattern,json=id_pattern,proto3" json:"id_pattern,omitempty"`
}

func (x *NewAccountSettings) Reset() {
	*x = NewAccountSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAccountSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAccountSettings) ProtoMessage() {}

func (x *NewAccountSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAccountSettings.ProtoReflect.Descriptor instead.
func (*NewAccountSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{47}
}

func (x *NewAccountSettings) GetInitialState() InitialAccountState {
	if x != nil {
		return x.InitialState
	}
	return InitialAccountState_StatePartialApplication
}

func (x *NewAccountSettings) GetIDGeneratorType() IDGeneratorType {
	if x != nil {
		return x.IDGeneratorType
	}
	return IDGeneratorType_TypeIncrementalNumber
}

func (x *NewAccountSettings) GetIDPattern() string {
	if x != nil {
		return x.IDPattern
	}
	return ""
}

// DurationInterval is a range of duration values. The range is inclusive.
// The default value is always in the range.
type DurationInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default is the default value of the range.
	Default *durationpb.Duration `protobuf:"bytes,1,opt,name=Default,json=default,proto3" json:"default,omitempty"`
	// Min is the minimum value of the range.
	Min *durationpb.Duration `protobuf:"bytes,2,opt,name=Min,json=min,proto3" json:"min,omitempty"`
	// Max is the maximum value of the range.
	Max *durationpb.Duration `protobuf:"bytes,3,opt,name=Max,json=max,proto3" json:"max,omitempty"`
}

func (x *DurationInterval) Reset() {
	*x = DurationInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationInterval) ProtoMessage() {}

func (x *DurationInterval) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationInterval.ProtoReflect.Descriptor instead.
func (*DurationInterval) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{48}
}

func (x *DurationInterval) GetDefault() *durationpb.Duration {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *DurationInterval) GetMin() *durationpb.Duration {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *DurationInterval) GetMax() *durationpb.Duration {
	if x != nil {
		return x.Max
	}
	return nil
}

// DecimalInterval is a range of decimal values. The range is inclusive.
// The default value is always in the range.
type DecimalInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default is the default value of the range.
	Default float64 `protobuf:"fixed64,1,opt,name=Default,json=default,proto3" json:"default,omitempty"`
	// Max is the maximum value of the range.
	Max float64 `protobuf:"fixed64,2,opt,name=Max,json=max,proto3" json:"max,omitempty"`
	// Min is the minimum value of the range.
	Min float64 `protobuf:"fixed64,3,opt,name=Min,json=min,proto3" json:"min,omitempty"`
}

func (x *DecimalInterval) Reset() {
	*x = DecimalInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecimalInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecimalInterval) ProtoMessage() {}

func (x *DecimalInterval) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecimalInterval.ProtoReflect.Descriptor instead.
func (*DecimalInterval) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{49}
}

func (x *DecimalInterval) GetDefault() float64 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *DecimalInterval) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *DecimalInterval) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

// IntegerInterval is a range of integer values. The range is inclusive.
// The default value is always in the range.
type IntegerInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default is the default value of the range.
	Default int32 `protobuf:"varint,1,opt,name=Default,json=default,proto3" json:"default,omitempty"`
	// Max is the maximum value of the range.
	Max int32 `protobuf:"varint,2,opt,name=Max,json=max,proto3" json:"max,omitempty"`
	// Min is the minimum value of the range.
	Min int32 `protobuf:"varint,3,opt,name=Min,json=min,proto3" json:"min,omitempty"`
}

func (x *IntegerInterval) Reset() {
	*x = IntegerInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerInterval) ProtoMessage() {}

func (x *IntegerInterval) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerInterval.ProtoReflect.Descriptor instead.
func (*IntegerInterval) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{50}
}

func (x *IntegerInterval) GetDefault() int32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *IntegerInterval) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *IntegerInterval) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

// AccountingRule is the accounting rule for the product, mapping financial
// resources to a GL account.
//
// TODO: Move to package GL.
type AccountingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the account ID of the general ledger account mapped to the
	// financial resource.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// TransactionChannelID is the ID of the transaction channel used.
	TransactionChannelID string `protobuf:"bytes,2,opt,name=TransactionChannelID,json=transaction_channel_id,proto3" json:"transaction_channel_id,omitempty"`
	// FinancialResource is the financial resource used to setup the accounting
	// rules for determining the accounts for journal entries.
	FinancialResource FinancialResource `protobuf:"varint,3,opt,name=FinancialResource,json=financial_resource,proto3,enum=openbank.core.v1.products.FinancialResource" json:"financial_resource,omitempty"`
}

func (x *AccountingRule) Reset() {
	*x = AccountingRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingRule) ProtoMessage() {}

func (x *AccountingRule) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingRule.ProtoReflect.Descriptor instead.
func (*AccountingRule) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{51}
}

func (x *AccountingRule) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *AccountingRule) GetTransactionChannelID() string {
	if x != nil {
		return x.TransactionChannelID
	}
	return ""
}

func (x *AccountingRule) GetFinancialResource() FinancialResource {
	if x != nil {
		return x.FinancialResource
	}
	return FinancialResource_ResourcePortfolioControl
}

// AccountingSettings is a list of accounting settings for a product.
type AccountingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountingRules is a list of accounting rules used for the product.
	AccountingRules []*AccountingRule `protobuf:"bytes,1,rep,name=AccountingRules,json=accounting_rules,proto3" json:"accounting_rules,omitempty"`
	// InterestAccrued is the method used to determine when the interest is
	// AccountingMethod is the method used to account for the product.
	InterestAccrued InterestAccrued `protobuf:"varint,2,opt,name=InterestAccrued,json=interest_accrued,proto3,enum=openbank.core.v1.products.InterestAccrued" json:"interest_accrued,omitempty"`
	// AccountingMethod is the method used to account for the product.
	AccountingMethod AccountingMethod `protobuf:"varint,3,opt,name=AccountingMethod,json=accounting_method,proto3,enum=openbank.core.v1.products.AccountingMethod" json:"accounting_method,omitempty"`
	// InterestAccountingMethod is the method used to account for the interest
	// for the product.
	InterestAccountingMethod AccountingMethod `protobuf:"varint,4,opt,name=InterestAccountingMethod,json=interest_accounting_method,proto3,enum=openbank.core.v1.products.AccountingMethod" json:"interest_accounting_method,omitempty"`
}

func (x *AccountingSettings) Reset() {
	*x = AccountingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingSettings) ProtoMessage() {}

func (x *AccountingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingSettings.ProtoReflect.Descriptor instead.
func (*AccountingSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{52}
}

func (x *AccountingSettings) GetAccountingRules() []*AccountingRule {
	if x != nil {
		return x.AccountingRules
	}
	return nil
}

func (x *AccountingSettings) GetInterestAccrued() InterestAccrued {
	if x != nil {
		return x.InterestAccrued
	}
	return InterestAccrued_Never
}

func (x *AccountingSettings) GetAccountingMethod() AccountingMethod {
	if x != nil {
		return x.AccountingMethod
	}
	return AccountingMethod_None
}

func (x *AccountingSettings) GetInterestAccountingMethod() AccountingMethod {
	if x != nil {
		return x.InterestAccountingMethod
	}
	return AccountingMethod_None
}

// AvailabilitySettings is the settings for the availability of a product.
type AvailabilitySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AvailableFor is the type of entity that can register for the product.
	AvailableFor []AvailableFor `protobuf:"varint,1,rep,packed,name=AvailableFor,json=available_for,proto3,enum=openbank.core.v1.products.AvailableFor" json:"available_for,omitempty"`
	// AllBranches is a flag indicating that the product is available for all
	// branches.
	AllBranches bool `protobuf:"varint,2,opt,name=AllBranches,json=all_branches,proto3" json:"all_branches,omitempty"`
	// BranchIDs is a list of IDs of branches that the product is available for
	// if allBranches is false.
	BranchIDs []string `protobuf:"bytes,3,rep,name=BranchIDs,json=branch_ids,proto3" json:"branch_ids,omitempty"`
}

func (x *AvailabilitySettings) Reset() {
	*x = AvailabilitySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilitySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilitySettings) ProtoMessage() {}

func (x *AvailabilitySettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilitySettings.ProtoReflect.Descriptor instead.
func (*AvailabilitySettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{53}
}

func (x *AvailabilitySettings) GetAvailableFor() []AvailableFor {
	if x != nil {
		return x.AvailableFor
	}
	return nil
}

func (x *AvailabilitySettings) GetAllBranches() bool {
	if x != nil {
		return x.AllBranches
	}
	return false
}

func (x *AvailabilitySettings) GetBranchIDs() []string {
	if x != nil {
		return x.BranchIDs
	}
	return nil
}

// RevolvingAccountSettings is the settings for the credit arrangement for a
// product.
type RevolvingAccountSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requirement is the requirement settings for assigning a revolving
	// account to a product.
	Requirement RevolvingAccountRequirement `protobuf:"varint,1,opt,name=Requirement,json=requirement,proto3,enum=openbank.core.v1.products.RevolvingAccountRequirement" json:"requirement,omitempty"`
}

func (x *RevolvingAccountSettings) Reset() {
	*x = RevolvingAccountSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevolvingAccountSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevolvingAccountSettings) ProtoMessage() {}

func (x *RevolvingAccountSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevolvingAccountSettings.ProtoReflect.Descriptor instead.
func (*RevolvingAccountSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{54}
}

func (x *RevolvingAccountSettings) GetRequirement() RevolvingAccountRequirement {
	if x != nil {
		return x.Requirement
	}
	return RevolvingAccountRequirement_RequirementOptional
}

// FeeSettings is the settings for the fees for a product.
type FeeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AllowArbitrary is a flag indicating that the product allows for
	// arbitrary fees to be added to the account of the product.
	AllowArbitrary bool `protobuf:"varint,1,opt,name=AllowArbitrary,json=allow_arbitrary,proto3" json:"allow_arbitrary,omitempty"`
	// Fees is a list of predefined fees for the product.
	Fees []*Fee `protobuf:"bytes,2,rep,name=Fees,json=fees,proto3" json:"fees,omitempty"`
}

func (x *FeeSettings) Reset() {
	*x = FeeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeSettings) ProtoMessage() {}

func (x *FeeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeSettings.ProtoReflect.Descriptor instead.
func (*FeeSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{55}
}

func (x *FeeSettings) GetAllowArbitrary() bool {
	if x != nil {
		return x.AllowArbitrary
	}
	return false
}

func (x *FeeSettings) GetFees() []*Fee {
	if x != nil {
		return x.Fees
	}
	return nil
}

// OffsetSettings is the settings for the offsets for a product.
type OffsetSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AllowOffset is a flag indicating that the product allows for offsets.
	AllowOffset bool `protobuf:"varint,1,opt,name=AllowOffset,json=allow_offset,proto3" json:"allow_offset,omitempty"`
}

func (x *OffsetSettings) Reset() {
	*x = OffsetSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetSettings) ProtoMessage() {}

func (x *OffsetSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetSettings.ProtoReflect.Descriptor instead.
func (*OffsetSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{56}
}

func (x *OffsetSettings) GetAllowOffset() bool {
	if x != nil {
		return x.AllowOffset
	}
	return false
}

// RiskLevel is the configured level of risk for loans.
type RiskLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LevelID is the unique identifier for the risk level.
	LevelID string `protobuf:"bytes,1,opt,name=LevelID,json=level_id,proto3" json:"level_id,omitempty"`
	// Name is the human-readable name of the loan risk level.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// MinimumDays is the minimum number of days the account is at risk for it
	// to be considered to be in this risk level.
	MinimumDays int32 `protobuf:"varint,3,opt,name=MinimumDays,json=minimum_days,proto3" json:"minimum_days,omitempty"`
	// MaximumDays is the maximum number of days the account is at risk for it
	// to be considered to be in this risk level.
	MaximumDays int32 `protobuf:"varint,4,opt,name=MaximumDays,json=maximum_days,proto3" json:"maximum_days,omitempty"`
	// ProvisioningPercent is the percent of loans to be provisioned (set aside
	// as an allowance for uncollected loans).
	ProvisioningPercent float64 `protobuf:"fixed64,5,opt,name=ProvisioningPercent,json=provisioning_percent,proto3" json:"provisioning_percent,omitempty"`
}

func (x *RiskLevel) Reset() {
	*x = RiskLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskLevel) ProtoMessage() {}

func (x *RiskLevel) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskLevel.ProtoReflect.Descriptor instead.
func (*RiskLevel) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{57}
}

func (x *RiskLevel) GetLevelID() string {
	if x != nil {
		return x.LevelID
	}
	return ""
}

func (x *RiskLevel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RiskLevel) GetMinimumDays() int32 {
	if x != nil {
		return x.MinimumDays
	}
	return 0
}

func (x *RiskLevel) GetMaximumDays() int32 {
	if x != nil {
		return x.MaximumDays
	}
	return 0
}

func (x *RiskLevel) GetProvisioningPercent() float64 {
	if x != nil {
		return x.ProvisioningPercent
	}
	return 0
}

// CreateRiskLevelRequest is the request to create a risk level.
type CreateRiskLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the risk level to be created.
	Body *RiskLevel `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateRiskLevelRequest) Reset() {
	*x = CreateRiskLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRiskLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRiskLevelRequest) ProtoMessage() {}

func (x *CreateRiskLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRiskLevelRequest.ProtoReflect.Descriptor instead.
func (*CreateRiskLevelRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{58}
}

func (x *CreateRiskLevelRequest) GetBody() *RiskLevel {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListRiskLevelsRequest is the request to list risk levels.
type ListRiskLevelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageToken is the page token to use for the request.
	PageToken string `protobuf:"bytes,1,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the page size to use for the request.
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the field to order the results by.
	OrderBy string `protobuf:"bytes,3,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to apply to the results.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListRiskLevelsRequest) Reset() {
	*x = ListRiskLevelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRiskLevelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRiskLevelsRequest) ProtoMessage() {}

func (x *ListRiskLevelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRiskLevelsRequest.ProtoReflect.Descriptor instead.
func (*ListRiskLevelsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{59}
}

func (x *ListRiskLevelsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRiskLevelsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRiskLevelsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListRiskLevelsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListRiskLevelsResponse is the response for listing risk levels.
type ListRiskLevelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of risk levels matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of risk levels remaining in the list, including
	// the risk levels in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Levels is the list of risk levels.
	Levels []*RiskLevel `protobuf:"bytes,3,rep,name=Levels,json=levels,proto3" json:"levels,omitempty"`
	// NextPageToken is the next page token to use for the request.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRiskLevelsResponse) Reset() {
	*x = ListRiskLevelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRiskLevelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRiskLevelsResponse) ProtoMessage() {}

func (x *ListRiskLevelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRiskLevelsResponse.ProtoReflect.Descriptor instead.
func (*ListRiskLevelsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{60}
}

func (x *ListRiskLevelsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListRiskLevelsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListRiskLevelsResponse) GetLevels() []*RiskLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *ListRiskLevelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetRiskLevelRequest is the request to retrieve the specified risk level.
type GetRiskLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LevelID is the ID of the risk level to retrieve.
	LevelID string `protobuf:"bytes,1,opt,name=LevelID,json=level_id,proto3" json:"level_id,omitempty"`
}

func (x *GetRiskLevelRequest) Reset() {
	*x = GetRiskLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskLevelRequest) ProtoMessage() {}

func (x *GetRiskLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskLevelRequest.ProtoReflect.Descriptor instead.
func (*GetRiskLevelRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{61}
}

func (x *GetRiskLevelRequest) GetLevelID() string {
	if x != nil {
		return x.LevelID
	}
	return ""
}

// UpdateRiskLevelRequest is the request to update the specified risk level.
type UpdateRiskLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LevelID is the ID of the risk level to update.
	LevelID string `protobuf:"bytes,1,opt,name=LevelID,json=level_id,proto3" json:"level_id,omitempty"`
	// Body is the new content of the risk level.
	Body *RiskLevel `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateRiskLevelRequest) Reset() {
	*x = UpdateRiskLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRiskLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRiskLevelRequest) ProtoMessage() {}

func (x *UpdateRiskLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRiskLevelRequest.ProtoReflect.Descriptor instead.
func (*UpdateRiskLevelRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateRiskLevelRequest) GetLevelID() string {
	if x != nil {
		return x.LevelID
	}
	return ""
}

func (x *UpdateRiskLevelRequest) GetBody() *RiskLevel {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteRiskLevelRequest is the request to delete the specified risk level.
type DeleteRiskLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LevelID is the ID of the risk level to delete.
	LevelID string `protobuf:"bytes,1,opt,name=LevelID,json=level_id,proto3" json:"level_id,omitempty"`
}

func (x *DeleteRiskLevelRequest) Reset() {
	*x = DeleteRiskLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRiskLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRiskLevelRequest) ProtoMessage() {}

func (x *DeleteRiskLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_products_all_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRiskLevelRequest.ProtoReflect.Descriptor instead.
func (*DeleteRiskLevelRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP(), []int{63}
}

func (x *DeleteRiskLevelRequest) GetLevelID() string {
	if x != nil {
		return x.LevelID
	}
	return ""
}

var File_bnk_to_core_api_v1_products_all_proto protoreflect.FileDescriptor

var file_bnk_to_core_api_v1_products_all_proto_rawDesc = []byte{
	0x0a, 0x25, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x6c,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x1a, 0x0b, 0x78, 0x6f, 0x2f, 0x78, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6e, 0x6b,
	0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x10, 0x4d, 0x61,
	0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4c,
	0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x09,
	0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x11, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x46, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x54, 0x0a, 0x11, 0x4d, 0x61, 0x78,
	0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a,
	0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x65, 0x0a, 0x12,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x61, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x42, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x78, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x17, 0x77,
	0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47,
	0x02, 0x10, 0x01, 0x22, 0x80, 0x08, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x5f, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x6c, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11,
	0x72, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x46, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x08, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x0a, 0x4e, 0x65,
	0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x6d, 0x0a, 0x11, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x4b, 0x0a, 0x03,
	0x54, 0x61, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x61, 0x78,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x74, 0x61, 0x78, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xfb, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x12, 0x44, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x14, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x6d, 0x61, 0x78,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0xe6, 0x05, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x02, 0x08, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a,
	0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x52, 0x0a,
	0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x70, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0xc3, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xf8, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x51, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x9b, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x6f, 0x0a,
	0x0e, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x50, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x9c,
	0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x50, 0x0a,
	0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0xee, 0x03, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x64, 0x0a, 0x10, 0x41, 0x6d,
	0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x61,
	0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3f, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x72,
	0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x58, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01,
	0x22, 0xbd, 0x07, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x46, 0x65, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0xda, 0x47, 0x02, 0x08, 0x02, 0x52, 0x06, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x6a, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x08,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x65,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x4b, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x0f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x72,
	0x0a, 0x14, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x61, 0x6d, 0x6f,
	0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x49,
	0x73, 0x54, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x69, 0x73, 0x5f, 0x74,
	0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x47, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0xc8, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x12, 0x2f, 0x0a,
	0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x0b,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xb8, 0x05, 0x0a, 0x14,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x61,
	0x63, 0x63, 0x72, 0x75, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x58, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x43, 0x65, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a,
	0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12,
	0x51, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x4e, 0x0a, 0x05, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x54, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x90, 0x05, 0x0a, 0x17, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x4b, 0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x1c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x53, 0x0a, 0x0a, 0x44, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x72, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x50, 0x61, 0x69, 0x64,
	0x49, 0x6e, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x69, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x0c, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4d, 0x0a,
	0x0e, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x0b, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0xfd, 0x07, 0x0a, 0x14, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a,
	0x12, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x53, 0x0a, 0x0a, 0x44, 0x61, 0x79, 0x73, 0x49,
	0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x59, 0x65,
	0x61, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c,
	0x64, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x12, 0x6b, 0x0a, 0x11,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6f, 0x0a, 0x11, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x7d, 0x0a, 0x18, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x6f, 0x0a, 0x11, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x60, 0x0a, 0x0c, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x70, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0xb4, 0x05, 0x0a, 0x0f, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x74, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x17, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x43,
	0x0a, 0x15, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x12, 0x7d, 0x0a, 0x1a, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x1c, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x79, 0x12, 0x50, 0x0a, 0x0f, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x10, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x5a, 0x0a, 0x14, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x6c, 0x0a, 0x29, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x2d, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x3a, 0x0b,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xc1, 0x02, 0x0a, 0x13,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x11, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22,
	0x9c, 0x04, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3f, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x6b, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x4f,
	0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x12, 0x6f, 0x0a, 0x16, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x17, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x46, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xe2,
	0x01, 0x0a, 0x13, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x62, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x11, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47,
	0x02, 0x10, 0x01, 0x22, 0xa9, 0x05, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x10, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x86,
	0x01, 0x0a, 0x1b, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x7d, 0x0a, 0x18, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x72, 0x65, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x90, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x69,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61,
	0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x21, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22,
	0xda, 0x06, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4e, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x43,
	0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x05, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x77, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x4a, 0x0a, 0x18, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x65, 0x65, 0x73, 0x49,
	0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x1c,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x20,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x59, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x0f, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x3a,
	0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x81, 0x05, 0x0a,
	0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x6a, 0x0a, 0x12, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x78, 0x0a, 0x12,
	0x4c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x59,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x10, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01,
	0x22, 0xbb, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xb7,
	0x02, 0x0a, 0x0f, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x72, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x59, 0x0a, 0x0b, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x4c, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x72,
	0x61, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x10, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3b, 0x0a,
	0x12, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x6e,
	0x54, 0x61, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x12, 0x2e, 0x0a, 0x0b, 0x54, 0x61, 0x78, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x65, 0x65, 0x54, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x12, 0x3a, 0x0a, 0x11, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x54, 0x61, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x61, 0x78, 0x12, 0x38, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x54, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x78,
	0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x74, 0x0a,
	0x14, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47,
	0x02, 0x10, 0x01, 0x22, 0x7d, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24,
	0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0xf2, 0x02, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6f, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x6f, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x11, 0x52, 0x65, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xe7, 0x09, 0x0a, 0x14, 0x4c, 0x6f, 0x61, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x50, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x60, 0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x16, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x39, 0x0a, 0x10, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73, 0x4f,
	0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x3d, 0x0a,
	0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x63, 0x0a, 0x10,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x69, 0x0a, 0x12, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x69, 0x0a, 0x0f,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x73, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x66, 0x0a, 0x0b,
	0x45, 0x64, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45,
	0x64, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x79, 0x0a, 0x18, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10,
	0x01, 0x22, 0xba, 0x0c, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x59, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x07,
	0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x12, 0x5f,
	0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x6c, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x72, 0x65, 0x76, 0x6f,
	0x6c, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a,
	0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x07, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x57, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0a, 0x4e,
	0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x06, 0x52, 0x65,
	0x64, 0x72, 0x61, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x12, 0x57, 0x0a, 0x08, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x03, 0x54, 0x61, 0x78, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x61, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x74, 0x61,
	0x78, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x81,
	0x03, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x74, 0x0a, 0x15, 0x43, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x17, 0x63, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x43, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x39, 0x0a, 0x11, 0x43, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x63, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a,
	0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0x89, 0x02, 0x0a, 0x14, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x44,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x64, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x11, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xe5,
	0x06, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2e,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x02,
	0x08, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x1e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x21, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c,
	0x6f, 0x61, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x4f, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0xda, 0x47, 0x1d, 0x2a, 0x1b, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x68, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x0b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x6a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xf2, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4e,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x32,
	0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x4a, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x95, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x46,
	0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x4d,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x91, 0x02,
	0x0a, 0x12, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x49, 0x44, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x44, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x49, 0x44, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10,
	0x01, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x37, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x07, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x1c, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1c,
	0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x3a, 0x0b, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a,
	0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x1c, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x3a,
	0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xf3, 0x01, 0x0a,
	0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x11,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0xc3, 0x03, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x0f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x12, 0x64,
	0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x75, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x58, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x0b, 0x41,
	0x6c, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x64, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x33, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x72,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x46, 0x65, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0x4c, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0xfc, 0x01, 0x0a, 0x09, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2a, 0x0a, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x02,
	0x08, 0x02, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x12, 0x3d, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x66, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xbe, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27,
	0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x12, 0x22,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xea, 0x01, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x48, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x44, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8d, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x47, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0xa0, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x12, 0x54, 0x79, 0x70, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x10,
	0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x17, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0x04, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x94, 0x02, 0x0a, 0x0f, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a,
	0x1e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10,
	0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2b, 0x0a,
	0x23, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2e, 0x0a, 0x26, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2a, 0x0a, 0x22, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00,
	0x2a, 0x37, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10,
	0x00, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xe4, 0x01, 0x0a, 0x14, 0x46, 0x65,
	0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x12, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x6c, 0x61, 0x74,
	0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x30, 0x0a, 0x28, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x36, 0x0a, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x03,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x6c,
	0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00,
	0x2a, 0x52, 0x0a, 0x12, 0x46, 0x65, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x66,
	0x45, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00,
	0x1a, 0x02, 0x18, 0x00, 0x2a, 0xef, 0x01, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x00, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x44, 0x69,
	0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x1f, 0x0a, 0x17, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44,
	0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x1b, 0x0a, 0x13, 0x55, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x62,
	0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15,
	0x0a, 0x0d, 0x4c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x46, 0x65, 0x65, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a,
	0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x4f, 0x6e, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x10, 0x08, 0x1a, 0x02,
	0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x8f, 0x01, 0x0a, 0x10, 0x41, 0x6d, 0x6f, 0x72, 0x74,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x1f, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x4f, 0x66,
	0x59, 0x65, 0x61, 0x72, 0x73, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x1b, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24,
	0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x10, 0x03,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x83, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x1b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x2f, 0x0a, 0x27, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x41,
	0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x13, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x46,
	0x75, 0x6c, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18,
	0x00, 0x2a, 0x4e, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x11, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18,
	0x00, 0x2a, 0x60, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x0d, 0x0a, 0x05, 0x46, 0x69, 0x78, 0x65, 0x64, 0x10,
	0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x10,
	0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x54,
	0x69, 0x65, 0x72, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x1a,
	0x02, 0x18, 0x00, 0x2a, 0xa2, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x1a, 0x0a, 0x12, 0x59, 0x65, 0x61, 0x72, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x33, 0x36, 0x35, 0x46, 0x69, 0x78, 0x65, 0x64, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15,
	0x0a, 0x0d, 0x59, 0x65, 0x61, 0x72, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x33, 0x36, 0x34, 0x10,
	0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x59, 0x65, 0x61, 0x72, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x33, 0x36, 0x30, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14,
	0x59, 0x65, 0x61, 0x72, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x49, 0x73, 0x64, 0x61, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x59, 0x65,
	0x61, 0x72, 0x45, 0x33, 0x30, 0x33, 0x36, 0x30, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14,
	0x0a, 0x0c, 0x59, 0x65, 0x61, 0x72, 0x45, 0x33, 0x30, 0x34, 0x32, 0x33, 0x36, 0x35, 0x10, 0x05,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x4c, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x06, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x1a, 0x02,
	0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x60, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x17, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x00,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x10, 0x01,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x5b, 0x0a, 0x18, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x22, 0x0a,
	0x1a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x41, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x10, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x85, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x6c, 0x61,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1e, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x28, 0x0a, 0x20, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x64, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x57, 0x0a,
	0x0f, 0x44, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x22, 0x0a, 0x1a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x00,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x01, 0x1a, 0x02,
	0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x8b, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a,
	0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x10,
	0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x45, 0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20,
	0x0a, 0x18, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x54, 0x6f, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00,
	0x1a, 0x02, 0x18, 0x00, 0x2a, 0x97, 0x01, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x25,
	0x0a, 0x1d, 0x44, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x57, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x10,
	0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x34, 0x0a, 0x2c, 0x44, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x5e,
	0x0a, 0x14, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x16, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72,
	0x73, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x79, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x79,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x14, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x75, 0x6c, 0x6c,
	0x44, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x1f, 0x0a, 0x17, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x44, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x22, 0x0a, 0x1a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x6f, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x10,
	0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x56, 0x0a, 0x14, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x18, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x41,
	0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18,
	0x00, 0x2a, 0x69, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x1b, 0x54, 0x79, 0x70, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f,
	0x66, 0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x62, 0x0a, 0x0f,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x0d, 0x4e, 0x6f, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1b, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00,
	0x2a, 0x77, 0x0a, 0x1f, 0x4c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x21, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x76, 0x65,
	0x72, 0x64, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x25,
	0x0a, 0x1d, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x10,
	0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x43, 0x0a, 0x0b, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x75,
	0x0a, 0x18, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x0e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x10, 0x03, 0x1a, 0x02, 0x08,
	0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x69, 0x0a, 0x1b, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x1c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00,
	0x2a, 0x86, 0x01, 0x0a, 0x18, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x10, 0x4e, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x24, 0x0a, 0x1c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10,
	0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xf1, 0x02, 0x0a, 0x1d, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x0f, 0x4e,
	0x6f, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x25, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x30, 0x0a, 0x28, 0x52,
	0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x32, 0x0a,
	0x2a, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x03, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x37, 0x0a, 0x2f, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x61, 0x6d, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x22,
	0x0a, 0x1a, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x06, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x25, 0x0a, 0x1d, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x4e, 0x65, 0x77, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x7e, 0x0a,
	0x1e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x6c, 0x79, 0x50, 0x61, 0x69, 0x64, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x69, 0x64, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x27, 0x0a, 0x1f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x69, 0x64, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xfe, 0x01,
	0x0a, 0x16, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x46, 0x6c, 0x61, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x2c, 0x0a, 0x24, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x75, 0x74,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x29, 0x0a, 0x21, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x44, 0x69, 0x73, 0x62, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x10, 0x03, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x10, 0x04, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xf6,
	0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x13, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61,
	0x74, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2d, 0x0a, 0x25, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2a, 0x0a, 0x22, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x62, 0x10, 0x02, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x25, 0x0a, 0x1d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x6c, 0x61, 0x74, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x27, 0x0a, 0x1f, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x10, 0x05, 0x1a,
	0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x93, 0x01, 0x0a, 0x12, 0x41, 0x6d, 0x6f, 0x72,
	0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e,
	0x0a, 0x16, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d,
	0x0a, 0x15, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a,
	0x17, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19,
	0x0a, 0x11, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xaa, 0x01,
	0x0a, 0x1c, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b,
	0x0a, 0x13, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x6f, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x27, 0x0a, 0x1f, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x10, 0x02, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x75, 0x74, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x8c, 0x01, 0x0a, 0x1b, 0x52,
	0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x15, 0x4e, 0x6f,
	0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x4e, 0x65, 0x78,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x10, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x1a, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x57, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a,
	0x0e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10,
	0x03, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x7a, 0x0a, 0x15, 0x52, 0x65, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x13, 0x4e, 0x6f, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1e, 0x0a, 0x16, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x20, 0x0a, 0x18, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x02, 0x1a, 0x02, 0x08,
	0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x57, 0x0a, 0x15, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18,
	0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x4e,
	0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79,
	0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a,
	0x13, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x4e, 0x65, 0x78, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x98,
	0x02, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x12, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x01, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x25, 0x0a, 0x1d, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x04, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x10,
	0x06, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x7f, 0x0a, 0x19, 0x52, 0x65, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x12, 0x4e, 0x6f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x4e, 0x65, 0x61,
	0x72, 0x65, 0x73, 0x74, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x10, 0x01, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x70, 0x54, 0x6f,
	0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x67, 0x0a, 0x19, 0x52, 0x65,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x13, 0x4e, 0x6f, 0x52, 0x65, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a,
	0x02, 0x18, 0x00, 0x2a, 0xa1, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x12, 0x4e, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x27, 0x0a,
	0x1f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x3b, 0x0a, 0x33, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x6f,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xce, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x17, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x73, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a,
	0x12, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x10,
	0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x55, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x05,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x9b, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x4c, 0x6f, 0x61, 0x6e, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x1b, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54,
	0x65, 0x72, 0x6d, 0x4c, 0x6f, 0x61, 0x6e, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a,
	0x14, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x46, 0x72, 0x65,
	0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x10,
	0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x76,
	0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x10, 0x04, 0x1a, 0x02,
	0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x3d, 0x0a, 0x15, 0x43, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x07, 0x53, 0x6f, 0x66, 0x74, 0x43, 0x61, 0x70, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0f, 0x0a, 0x07, 0x48, 0x61, 0x72, 0x64, 0x43, 0x61, 0x70, 0x10, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x65, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x43, 0x61, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x1e, 0x4f,
	0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x10, 0x00, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xb7, 0x01, 0x0a,
	0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x10, 0x01, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1c, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x05, 0x1a, 0x02,
	0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x4f, 0x0a, 0x0f, 0x49, 0x44, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x15, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x10, 0x01, 0x1a,
	0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x43, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0c, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x43, 0x61, 0x73,
	0x68, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x72, 0x75,
	0x61, 0x6c, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x47, 0x0a, 0x0f,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x12,
	0x0d, 0x0a, 0x05, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d,
	0x0a, 0x05, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a,
	0x0a, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x02, 0x1a, 0x02, 0x08,
	0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xe4, 0x07, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x18, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a,
	0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x78, 0x65, 0x73, 0x50, 0x61, 0x79, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0x05, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0x06, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x31, 0x0a, 0x29, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x27, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x08, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x22,
	0x0a, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x09, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x65,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x0a, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x21, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x0b,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x61, 0x78, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x0c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x27, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0x0d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x21,
	0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0x0e, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x1d, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x61, 0x78, 0x65, 0x73, 0x10, 0x0f, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x20, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x10, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x11, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x10, 0x12, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x13,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0x14, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2a, 0x0a, 0x22,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x15, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x29, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x16, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x27, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0x17, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x28, 0x0a, 0x20,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x10, 0x18, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2b, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x19, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x10, 0x1a, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x79, 0x0a, 0x0c,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x17,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e, 0x0a,
	0x16, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x75, 0x72,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a,
	0x1c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x7b, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x6f, 0x6c,
	0x76, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x00, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x1e, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00,
	0x1a, 0x02, 0x18, 0x00, 0x32, 0xa3, 0x08, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xa7, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x28, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0x14, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xac, 0x01, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x22, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa7, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x33,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x2e,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x2f, 0x7b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00,
	0x30, 0x00, 0x12, 0xb3, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x36, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x34,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x1a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f, 0x7b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xaf, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x43, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f, 0x7b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x28, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2e, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x2a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2f, 0x7b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x7d, 0x28, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x32, 0xb5, 0x06, 0x0a, 0x13, 0x4c,
	0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x25, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x28, 0x00, 0x30, 0x00,
	0x12, 0xa0, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x28,
	0x00, 0x30, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x22, 0x2b, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61,
	0x6e, 0x2f, 0x7b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30,
	0x00, 0x12, 0xa7, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x22, 0x31, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x2f, 0x7b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x2f,
	0x7b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x1a, 0x03, 0x88,
	0x02, 0x00, 0x32, 0xc7, 0x06, 0x0a, 0x11, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x69, 0x73, 0x6b,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x31, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x72, 0x69,
	0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa6, 0x01, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12,
	0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x35, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x72,
	0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69,
	0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x35, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x1a, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12,
	0x95, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x35,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2f, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x99, 0x01, 0x0a,
	0x19, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x24,
	0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00,
	0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x92, 0x41, 0x3c, 0x0a, 0x03, 0x32, 0x2e,
	0x30, 0x12, 0x0e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x32, 0x02, 0x76,
	0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bnk_to_core_api_v1_products_all_proto_rawDescOnce sync.Once
	file_bnk_to_core_api_v1_products_all_proto_rawDescData = file_bnk_to_core_api_v1_products_all_proto_rawDesc
)

func file_bnk_to_core_api_v1_products_all_proto_rawDescGZIP() []byte {
	file_bnk_to_core_api_v1_products_all_proto_rawDescOnce.Do(func() {
		file_bnk_to_core_api_v1_products_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_bnk_to_core_api_v1_products_all_proto_rawDescData)
	})
	return file_bnk_to_core_api_v1_products_all_proto_rawDescData
}

var (
	file_bnk_to_core_api_v1_products_all_proto_enumTypes = make([]protoimpl.EnumInfo, 54)
	file_bnk_to_core_api_v1_products_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 64)
	file_bnk_to_core_api_v1_products_all_proto_goTypes   = []interface{}{
		(DepositProductType)(0),              // 0: openbank.core.v1.products.DepositProductType
		(DepositCategory)(0),                 // 1: openbank.core.v1.products.DepositCategory
		(BatchUpdateAction)(0),               // 2: openbank.core.v1.products.BatchUpdateAction
		(FeeCalculationMethod)(0),            // 3: openbank.core.v1.products.FeeCalculationMethod
		(FeeApplyDateMethod)(0),              // 4: openbank.core.v1.products.FeeApplyDateMethod
		(FeeTrigger)(0),                      // 5: openbank.core.v1.products.FeeTrigger
		(AmortizationType)(0),                // 6: openbank.core.v1.products.AmortizationType
		(PeriodFrequency)(0),                 // 7: openbank.core.v1.products.PeriodFrequency
		(IntervalType)(0),                    // 8: openbank.core.v1.products.IntervalType
		(InterestRateSource)(0),              // 9: openbank.core.v1.products.InterestRateSource
		(InterestRateTerms)(0),               // 10: openbank.core.v1.products.InterestRateTerms
		(DaysInYear)(0),                      // 11: openbank.core.v1.products.DaysInYear
		(InterestType)(0),                    // 12: openbank.core.v1.products.InterestType
		(InterestApplicationMethod)(0),       // 13: openbank.core.v1.products.InterestApplicationMethod
		(BalanceCalculationMethod)(0),        // 14: openbank.core.v1.products.BalanceCalculationMethod
		(InterestCalculationMethod)(0),       // 15: openbank.core.v1.products.InterestCalculationMethod
		(DaysCountMethod)(0),                 // 16: openbank.core.v1.products.DaysCountMethod
		(InterestCalculationBalance)(0),      // 17: openbank.core.v1.products.InterestCalculationBalance
		(DateCalculationMethod)(0),           // 18: openbank.core.v1.products.DateCalculationMethod
		(ToleranceCalculation)(0),            // 19: openbank.core.v1.products.ToleranceCalculation
		(SettlementMethod)(0),                // 20: openbank.core.v1.products.SettlementMethod
		(LinkedAccountOptions)(0),            // 21: openbank.core.v1.products.LinkedAccountOptions
		(CommissionAllocationType)(0),        // 22: openbank.core.v1.products.CommissionAllocationType
		(GracePeriodType)(0),                 // 23: openbank.core.v1.products.GracePeriodType
		(LatePaymentsRecalculationMethod)(0), // 24: openbank.core.v1.products.LatePaymentsRecalculationMethod
		(PaymentType)(0),                     // 25: openbank.core.v1.products.PaymentType
		(RepaymentAllocationOrder)(0),        // 26: openbank.core.v1.products.RepaymentAllocationOrder
		(ElementsRecalculationMethod)(0),     // 27: openbank.core.v1.products.ElementsRecalculationMethod
		(FuturePaymentsAcceptance)(0),        // 28: openbank.core.v1.products.FuturePaymentsAcceptance
		(PrepaymentRecalculationMethod)(0),   // 29: openbank.core.v1.products.PrepaymentRecalculationMethod
		(PrincipalPaidInstallmentStatus)(0),  // 30: openbank.core.v1.products.PrincipalPaidInstallmentStatus
		(PrincipalPaymentMethod)(0),          // 31: openbank.core.v1.products.PrincipalPaymentMethod
		(TotalDuePayment)(0),                 // 32: openbank.core.v1.products.TotalDuePayment
		(AmortizationMethod)(0),              // 33: openbank.core.v1.products.AmortizationMethod
		(LoanPenaltyCalculationMethod)(0),    // 34: openbank.core.v1.products.LoanPenaltyCalculationMethod
		(RepaymentReschedulingMethod)(0),     // 35: openbank.core.v1.products.RepaymentReschedulingMethod
		(RepaymentScheduleType)(0),           // 36: openbank.core.v1.products.RepaymentScheduleType
		(DueDateScheduleMethod)(0),           // 37: openbank.core.v1.products.DueDateScheduleMethod
		(MonthHandlingMethod)(0),             // 38: openbank.core.v1.products.MonthHandlingMethod
		(RepaymentScheduleEditOptions)(0),    // 39: openbank.core.v1.products.RepaymentScheduleEditOptions
		(RepaymentCurrencyRounding)(0),       // 40: openbank.core.v1.products.RepaymentCurrencyRounding
		(RepaymentElementsRounding)(0),       // 41: openbank.core.v1.products.RepaymentElementsRounding
		(RepaymentScheduleRounding)(0),       // 42: openbank.core.v1.products.RepaymentScheduleRounding
		(LoanCategory)(0),                    // 43: openbank.core.v1.products.LoanCategory
		(LoanType)(0),                        // 44: openbank.core.v1.products.LoanType
		(CappingConstraintType)(0),           // 45: openbank.core.v1.products.CappingConstraintType
		(PrincipalCapMethod)(0),              // 46: openbank.core.v1.products.PrincipalCapMethod
		(InitialAccountState)(0),             // 47: openbank.core.v1.products.InitialAccountState
		(IDGeneratorType)(0),                 // 48: openbank.core.v1.products.IDGeneratorType
		(AccountingMethod)(0),                // 49: openbank.core.v1.products.AccountingMethod
		(InterestAccrued)(0),                 // 50: openbank.core.v1.products.InterestAccrued
		(FinancialResource)(0),               // 51: openbank.core.v1.products.FinancialResource
		(AvailableFor)(0),                    // 52: openbank.core.v1.products.AvailableFor
		(RevolvingAccountRequirement)(0),     // 53: openbank.core.v1.products.RevolvingAccountRequirement
		(*MaturitySettings)(nil),             // 54: openbank.core.v1.products.MaturitySettings
		(*OverdraftSettings)(nil),            // 55: openbank.core.v1.products.OverdraftSettings
		(*DepositTaxSettings)(nil),           // 56: openbank.core.v1.products.DepositTaxSettings
		(*DepositSettings)(nil),              // 57: openbank.core.v1.products.DepositSettings
		(*DepositControls)(nil),              // 58: openbank.core.v1.products.DepositControls
		(*DepositProduct)(nil),               // 59: openbank.core.v1.products.DepositProduct
		(*CreateDepositProductRequest)(nil),  // 60: openbank.core.v1.products.CreateDepositProductRequest
		(*ListDepositProductsRequest)(nil),   // 61: openbank.core.v1.products.ListDepositProductsRequest
		(*ListDepositProductsResponse)(nil),  // 62: openbank.core.v1.products.ListDepositProductsResponse
		(*GetDepositProductRequest)(nil),     // 63: openbank.core.v1.products.GetDepositProductRequest
		(*UpdateDepositProductRequest)(nil),  // 64: openbank.core.v1.products.UpdateDepositProductRequest
		(*NewBatchUpdate)(nil),               // 65: openbank.core.v1.products.NewBatchUpdate
		(*UpdateDepositAccountsRequest)(nil), // 66: openbank.core.v1.products.UpdateDepositAccountsRequest
		(*DeleteDepositProductRequest)(nil),  // 67: openbank.core.v1.products.DeleteDepositProductRequest
		(*PeriodIntervalSettings)(nil),       // 68: openbank.core.v1.products.PeriodIntervalSettings
		(*Fee)(nil),                          // 69: openbank.core.v1.products.Fee
		(*InterestRateTier)(nil),             // 70: openbank.core.v1.products.InterestRateTier
		(*InterestRateSettings)(nil),         // 71: openbank.core.v1.products.InterestRateSettings
		(*DepositInterestSettings)(nil),      // 72: openbank.core.v1.products.DepositInterestSettings
		(*InterestPaymentSettings)(nil),      // 73: openbank.core.v1.products.InterestPaymentSettings
		(*LoanInterestSettings)(nil),         // 74: openbank.core.v1.products.LoanInterestSettings
		(*ArrearsSettings)(nil),              // 75: openbank.core.v1.products.ArrearsSettings
		(*AccountLinkSettings)(nil),          // 76: openbank.core.v1.products.AccountLinkSettings
		(*FundingSettings)(nil),              // 77: openbank.core.v1.products.FundingSettings
		(*GracePeriodSettings)(nil),          // 78: openbank.core.v1.products.GracePeriodSettings
		(*PrepaymentSettings)(nil),           // 79: openbank.core.v1.products.PrepaymentSettings
		(*PrincipalPaymentSettings)(nil),     // 80: openbank.core.v1.products.PrincipalPaymentSettings
		(*PaymentSettings)(nil),              // 81: openbank.core.v1.products.PaymentSettings
		(*LoanAmountSettings)(nil),           // 82: openbank.core.v1.products.LoanAmountSettings
		(*PenaltySettings)(nil),              // 83: openbank.core.v1.products.PenaltySettings
		(*RedrawSettings)(nil),               // 84: openbank.core.v1.products.RedrawSettings
		(*SecuritySettings)(nil),             // 85: openbank.core.v1.products.SecuritySettings
		(*LoanTaxSettings)(nil),              // 86: openbank.core.v1.products.LoanTaxSettings
		(*BillingCycleSettings)(nil),         // 87: openbank.core.v1.products.BillingCycleSettings
		(*PreviewScheduleSettings)(nil),      // 88: openbank.core.v1.products.PreviewScheduleSettings
		(*RoundingSettings)(nil),             // 89: openbank.core.v1.products.RoundingSettings
		(*LoanScheduleSettings)(nil),         // 90: openbank.core.v1.products.LoanScheduleSettings
		(*LoanSettings)(nil),                 // 91: openbank.core.v1.products.LoanSettings
		(*LockSettings)(nil),                 // 92: openbank.core.v1.products.LockSettings
		(*LoanInternalControls)(nil),         // 93: openbank.core.v1.products.LoanInternalControls
		(*LoanProduct)(nil),                  // 94: openbank.core.v1.products.LoanProduct
		(*CreateLoanProductRequest)(nil),     // 95: openbank.core.v1.products.CreateLoanProductRequest
		(*ListLoanProductsRequest)(nil),      // 96: openbank.core.v1.products.ListLoanProductsRequest
		(*ListLoanProductsResponse)(nil),     // 97: openbank.core.v1.products.ListLoanProductsResponse
		(*GetLoanProductRequest)(nil),        // 98: openbank.core.v1.products.GetLoanProductRequest
		(*UpdateLoanProductRequest)(nil),     // 99: openbank.core.v1.products.UpdateLoanProductRequest
		(*DeleteLoanProductRequest)(nil),     // 100: openbank.core.v1.products.DeleteLoanProductRequest
		(*NewAccountSettings)(nil),           // 101: openbank.core.v1.products.NewAccountSettings
		(*DurationInterval)(nil),             // 102: openbank.core.v1.products.DurationInterval
		(*DecimalInterval)(nil),              // 103: openbank.core.v1.products.DecimalInterval
		(*IntegerInterval)(nil),              // 104: openbank.core.v1.products.IntegerInterval
		(*AccountingRule)(nil),               // 105: openbank.core.v1.products.AccountingRule
		(*AccountingSettings)(nil),           // 106: openbank.core.v1.products.AccountingSettings
		(*AvailabilitySettings)(nil),         // 107: openbank.core.v1.products.AvailabilitySettings
		(*RevolvingAccountSettings)(nil),     // 108: openbank.core.v1.products.RevolvingAccountSettings
		(*FeeSettings)(nil),                  // 109: openbank.core.v1.products.FeeSettings
		(*OffsetSettings)(nil),               // 110: openbank.core.v1.products.OffsetSettings
		(*RiskLevel)(nil),                    // 111: openbank.core.v1.products.RiskLevel
		(*CreateRiskLevelRequest)(nil),       // 112: openbank.core.v1.products.CreateRiskLevelRequest
		(*ListRiskLevelsRequest)(nil),        // 113: openbank.core.v1.products.ListRiskLevelsRequest
		(*ListRiskLevelsResponse)(nil),       // 114: openbank.core.v1.products.ListRiskLevelsResponse
		(*GetRiskLevelRequest)(nil),          // 115: openbank.core.v1.products.GetRiskLevelRequest
		(*UpdateRiskLevelRequest)(nil),       // 116: openbank.core.v1.products.UpdateRiskLevelRequest
		(*DeleteRiskLevelRequest)(nil),       // 117: openbank.core.v1.products.DeleteRiskLevelRequest
		(*durationpb.Duration)(nil),          // 118: google.protobuf.Duration
		(*v1.Amount)(nil),                    // 119: openbank.core.v1.Amount
		(*timestamppb.Timestamp)(nil),        // 120: google.protobuf.Timestamp
		(*emptypb.Empty)(nil),                // 121: google.protobuf.Empty
	}
)

var file_bnk_to_core_api_v1_products_all_proto_depIdxs = []int32{
	118, // 0: openbank.core.v1.products.MaturitySettings.DefaultPeriod:type_name -> google.protobuf.Duration
	118, // 1: openbank.core.v1.products.MaturitySettings.MaxPeriod:type_name -> google.protobuf.Duration
	118, // 2: openbank.core.v1.products.MaturitySettings.MinPeriod:type_name -> google.protobuf.Duration
	119, // 3: openbank.core.v1.products.OverdraftSettings.MaxOverdraftLimit:type_name -> openbank.core.v1.Amount
	106, // 4: openbank.core.v1.products.DepositSettings.Accounting:type_name -> openbank.core.v1.products.AccountingSettings
	107, // 5: openbank.core.v1.products.DepositSettings.Availability:type_name -> openbank.core.v1.products.AvailabilitySettings
	108, // 6: openbank.core.v1.products.DepositSettings.RevolvingAccount:type_name -> openbank.core.v1.products.RevolvingAccountSettings
	109, // 7: openbank.core.v1.products.DepositSettings.Fees:type_name -> openbank.core.v1.products.FeeSettings
	72,  // 8: openbank.core.v1.products.DepositSettings.Interest:type_name -> openbank.core.v1.products.DepositInterestSettings
	54,  // 9: openbank.core.v1.products.DepositSettings.Maturity:type_name -> openbank.core.v1.products.MaturitySettings
	101, // 10: openbank.core.v1.products.DepositSettings.NewAccount:type_name -> openbank.core.v1.products.NewAccountSettings
	110, // 11: openbank.core.v1.products.DepositSettings.Offset:type_name -> openbank.core.v1.products.OffsetSettings
	72,  // 12: openbank.core.v1.products.DepositSettings.OverdraftInterest:type_name -> openbank.core.v1.products.DepositInterestSettings
	55,  // 13: openbank.core.v1.products.DepositSettings.Overdraft:type_name -> openbank.core.v1.products.OverdraftSettings
	56,  // 14: openbank.core.v1.products.DepositSettings.Tax:type_name -> openbank.core.v1.products.DepositTaxSettings
	119, // 15: openbank.core.v1.products.DepositControls.MaxWithdrawalAmount:type_name -> openbank.core.v1.Amount
	103, // 16: openbank.core.v1.products.DepositControls.OpeningBalance:type_name -> openbank.core.v1.products.DecimalInterval
	119, // 17: openbank.core.v1.products.DepositControls.RecommendedDepositAmount:type_name -> openbank.core.v1.Amount
	1,   // 18: openbank.core.v1.products.DepositProduct.Category:type_name -> openbank.core.v1.products.DepositCategory
	58,  // 19: openbank.core.v1.products.DepositProduct.Controls:type_name -> openbank.core.v1.products.DepositControls
	57,  // 20: openbank.core.v1.products.DepositProduct.Settings:type_name -> openbank.core.v1.products.DepositSettings
	0,   // 21: openbank.core.v1.products.DepositProduct.Type:type_name -> openbank.core.v1.products.DepositProductType
	120, // 22: openbank.core.v1.products.DepositProduct.CreateTime:type_name -> google.protobuf.Timestamp
	120, // 23: openbank.core.v1.products.DepositProduct.UpdateTime:type_name -> google.protobuf.Timestamp
	59,  // 24: openbank.core.v1.products.CreateDepositProductRequest.Body:type_name -> openbank.core.v1.products.DepositProduct
	59,  // 25: openbank.core.v1.products.ListDepositProductsResponse.Products:type_name -> openbank.core.v1.products.DepositProduct
	59,  // 26: openbank.core.v1.products.UpdateDepositProductRequest.Body:type_name -> openbank.core.v1.products.DepositProduct
	2,   // 27: openbank.core.v1.products.NewBatchUpdate.Action:type_name -> openbank.core.v1.products.BatchUpdateAction
	65,  // 28: openbank.core.v1.products.UpdateDepositAccountsRequest.Body:type_name -> openbank.core.v1.products.NewBatchUpdate
	6,   // 29: openbank.core.v1.products.PeriodIntervalSettings.AmortizationType:type_name -> openbank.core.v1.products.AmortizationType
	7,   // 30: openbank.core.v1.products.PeriodIntervalSettings.Frequency:type_name -> openbank.core.v1.products.PeriodFrequency
	8,   // 31: openbank.core.v1.products.PeriodIntervalSettings.IntervalType:type_name -> openbank.core.v1.products.IntervalType
	118, // 32: openbank.core.v1.products.PeriodIntervalSettings.Period:type_name -> google.protobuf.Duration
	3,   // 33: openbank.core.v1.products.Fee.CalculationMethod:type_name -> openbank.core.v1.products.FeeCalculationMethod
	119, // 34: openbank.core.v1.products.Fee.Amount:type_name -> openbank.core.v1.Amount
	4,   // 35: openbank.core.v1.products.Fee.ApplyDateMethod:type_name -> openbank.core.v1.products.FeeApplyDateMethod
	5,   // 36: openbank.core.v1.products.Fee.Trigger:type_name -> openbank.core.v1.products.FeeTrigger
	105, // 37: openbank.core.v1.products.Fee.AccountingRules:type_name -> openbank.core.v1.products.AccountingRule
	68,  // 38: openbank.core.v1.products.Fee.AmortizationSettings:type_name -> openbank.core.v1.products.PeriodIntervalSettings
	120, // 39: openbank.core.v1.products.Fee.CreateTime:type_name -> google.protobuf.Timestamp
	120, // 40: openbank.core.v1.products.Fee.UpdateTime:type_name -> google.protobuf.Timestamp
	119, // 41: openbank.core.v1.products.InterestRateTier.EndingBalance:type_name -> openbank.core.v1.Amount
	118, // 42: openbank.core.v1.products.InterestRateSettings.Frequency:type_name -> google.protobuf.Duration
	103, // 43: openbank.core.v1.products.InterestRateSettings.Constraints:type_name -> openbank.core.v1.products.DecimalInterval
	9,   // 44: openbank.core.v1.products.InterestRateSettings.Source:type_name -> openbank.core.v1.products.InterestRateSource
	118, // 45: openbank.core.v1.products.InterestRateSettings.RateReview:type_name -> google.protobuf.Duration
	10,  // 46: openbank.core.v1.products.InterestRateSettings.Terms:type_name -> openbank.core.v1.products.InterestRateTerms
	70,  // 47: openbank.core.v1.products.InterestRateSettings.Tiers:type_name -> openbank.core.v1.products.InterestRateTier
	11,  // 48: openbank.core.v1.products.DepositInterestSettings.DaysInYear:type_name -> openbank.core.v1.products.DaysInYear
	17,  // 49: openbank.core.v1.products.DepositInterestSettings.CalculationBalance:type_name -> openbank.core.v1.products.InterestCalculationBalance
	73,  // 50: openbank.core.v1.products.DepositInterestSettings.PaymentSettings:type_name -> openbank.core.v1.products.InterestPaymentSettings
	71,  // 51: openbank.core.v1.products.DepositInterestSettings.RateSettings:type_name -> openbank.core.v1.products.InterestRateSettings
	119, // 52: openbank.core.v1.products.DepositInterestSettings.MaximumBalance:type_name -> openbank.core.v1.Amount
	120, // 53: openbank.core.v1.products.InterestPaymentSettings.PaymentDates:type_name -> google.protobuf.Timestamp
	118, // 54: openbank.core.v1.products.InterestPaymentSettings.Frequency:type_name -> google.protobuf.Duration
	118, // 55: openbank.core.v1.products.LoanInterestSettings.CompoundingFrequency:type_name -> google.protobuf.Duration
	11,  // 56: openbank.core.v1.products.LoanInterestSettings.DaysInYear:type_name -> openbank.core.v1.products.DaysInYear
	71,  // 57: openbank.core.v1.products.LoanInterestSettings.IndexRateSettings:type_name -> openbank.core.v1.products.InterestRateSettings
	13,  // 58: openbank.core.v1.products.LoanInterestSettings.ApplicationMethod:type_name -> openbank.core.v1.products.InterestApplicationMethod
	14,  // 59: openbank.core.v1.products.LoanInterestSettings.BalanceCalculationMethod:type_name -> openbank.core.v1.products.BalanceCalculationMethod
	15,  // 60: openbank.core.v1.products.LoanInterestSettings.CalculationMethod:type_name -> openbank.core.v1.products.InterestCalculationMethod
	71,  // 61: openbank.core.v1.products.LoanInterestSettings.RateSettings:type_name -> openbank.core.v1.products.InterestRateSettings
	12,  // 62: openbank.core.v1.products.LoanInterestSettings.Type:type_name -> openbank.core.v1.products.InterestType
	16,  // 63: openbank.core.v1.products.LoanInterestSettings.ScheduleInterestMethod:type_name -> openbank.core.v1.products.DaysCountMethod
	18,  // 64: openbank.core.v1.products.ArrearsSettings.DateCalculationMethod:type_name -> openbank.core.v1.products.DateCalculationMethod
	19,  // 65: openbank.core.v1.products.ArrearsSettings.ToleranceCalculationMethod:type_name -> openbank.core.v1.products.ToleranceCalculation
	118, // 66: openbank.core.v1.products.ArrearsSettings.TolerancePeriod:type_name -> google.protobuf.Duration
	119, // 67: openbank.core.v1.products.ArrearsSettings.ToleranceFloorAmount:type_name -> openbank.core.v1.Amount
	21,  // 68: openbank.core.v1.products.AccountLinkSettings.Options:type_name -> openbank.core.v1.products.LinkedAccountOptions
	20,  // 69: openbank.core.v1.products.AccountLinkSettings.SettlementMethod:type_name -> openbank.core.v1.products.SettlementMethod
	103, // 70: openbank.core.v1.products.FundingSettings.Commission:type_name -> openbank.core.v1.products.DecimalInterval
	22,  // 71: openbank.core.v1.products.FundingSettings.CommissionAllocationType:type_name -> openbank.core.v1.products.CommissionAllocationType
	103, // 72: openbank.core.v1.products.FundingSettings.OrganizationCommission:type_name -> openbank.core.v1.products.DecimalInterval
	119, // 73: openbank.core.v1.products.FundingSettings.RequiredFunds:type_name -> openbank.core.v1.Amount
	102, // 74: openbank.core.v1.products.GracePeriodSettings.GracePeriod:type_name -> openbank.core.v1.products.DurationInterval
	23,  // 75: openbank.core.v1.products.GracePeriodSettings.GracePeriodType:type_name -> openbank.core.v1.products.GracePeriodType
	27,  // 76: openbank.core.v1.products.PrepaymentSettings.ElementsRecalculationMethod:type_name -> openbank.core.v1.products.ElementsRecalculationMethod
	28,  // 77: openbank.core.v1.products.PrepaymentSettings.FuturePaymentsAcceptance:type_name -> openbank.core.v1.products.FuturePaymentsAcceptance
	29,  // 78: openbank.core.v1.products.PrepaymentSettings.RecalculationMethod:type_name -> openbank.core.v1.products.PrepaymentRecalculationMethod
	30,  // 79: openbank.core.v1.products.PrepaymentSettings.PrincipalPaidInstallmentStatus:type_name -> openbank.core.v1.products.PrincipalPaidInstallmentStatus
	103, // 80: openbank.core.v1.products.PrincipalPaymentSettings.Amount:type_name -> openbank.core.v1.products.DecimalInterval
	103, // 81: openbank.core.v1.products.PrincipalPaymentSettings.Percentage:type_name -> openbank.core.v1.products.DecimalInterval
	119, // 82: openbank.core.v1.products.PrincipalPaymentSettings.Ceiling:type_name -> openbank.core.v1.Amount
	119, // 83: openbank.core.v1.products.PrincipalPaymentSettings.Floor:type_name -> openbank.core.v1.Amount
	31,  // 84: openbank.core.v1.products.PrincipalPaymentSettings.PrincipalPaymentMethod:type_name -> openbank.core.v1.products.PrincipalPaymentMethod
	119, // 85: openbank.core.v1.products.PrincipalPaymentSettings.TotalDueAmountFloor:type_name -> openbank.core.v1.Amount
	32,  // 86: openbank.core.v1.products.PrincipalPaymentSettings.TotalDuePayment:type_name -> openbank.core.v1.products.TotalDuePayment
	33,  // 87: openbank.core.v1.products.PaymentSettings.AmortizationMethod:type_name -> openbank.core.v1.products.AmortizationMethod
	24,  // 88: openbank.core.v1.products.PaymentSettings.LatePaymentsMethod:type_name -> openbank.core.v1.products.LatePaymentsRecalculationMethod
	25,  // 89: openbank.core.v1.products.PaymentSettings.Type:type_name -> openbank.core.v1.products.PaymentType
	79,  // 90: openbank.core.v1.products.PaymentSettings.Prepayment:type_name -> openbank.core.v1.products.PrepaymentSettings
	80,  // 91: openbank.core.v1.products.PaymentSettings.PrincipalPayment:type_name -> openbank.core.v1.products.PrincipalPaymentSettings
	26,  // 92: openbank.core.v1.products.PaymentSettings.AllocationOrder:type_name -> openbank.core.v1.products.RepaymentAllocationOrder
	103, // 93: openbank.core.v1.products.LoanAmountSettings.LoanAmount:type_name -> openbank.core.v1.products.DecimalInterval
	34,  // 94: openbank.core.v1.products.PenaltySettings.CalculationMethod:type_name -> openbank.core.v1.products.LoanPenaltyCalculationMethod
	118, // 95: openbank.core.v1.products.PenaltySettings.GracePeriod:type_name -> google.protobuf.Duration
	103, // 96: openbank.core.v1.products.PenaltySettings.PenaltyRate:type_name -> openbank.core.v1.products.DecimalInterval
	40,  // 97: openbank.core.v1.products.RoundingSettings.RepaymentCurrency:type_name -> openbank.core.v1.products.RepaymentCurrencyRounding
	41,  // 98: openbank.core.v1.products.RoundingSettings.RepaymentElements:type_name -> openbank.core.v1.products.RepaymentElementsRounding
	42,  // 99: openbank.core.v1.products.RoundingSettings.RepaymentSchedule:type_name -> openbank.core.v1.products.RepaymentScheduleRounding
	36,  // 100: openbank.core.v1.products.LoanScheduleSettings.Type:type_name -> openbank.core.v1.products.RepaymentScheduleType
	87,  // 101: openbank.core.v1.products.LoanScheduleSettings.BillingCycle:type_name -> openbank.core.v1.products.BillingCycleSettings
	37,  // 102: openbank.core.v1.products.LoanScheduleSettings.ScheduleDueDatesMethod:type_name -> openbank.core.v1.products.DueDateScheduleMethod
	118, // 103: openbank.core.v1.products.LoanScheduleSettings.Period:type_name -> google.protobuf.Duration
	104, // 104: openbank.core.v1.products.LoanScheduleSettings.InstallmentCount:type_name -> openbank.core.v1.products.IntegerInterval
	104, // 105: openbank.core.v1.products.LoanScheduleSettings.FirstDueDateOffset:type_name -> openbank.core.v1.products.IntegerInterval
	88,  // 106: openbank.core.v1.products.LoanScheduleSettings.PreviewSchedule:type_name -> openbank.core.v1.products.PreviewScheduleSettings
	35,  // 107: openbank.core.v1.products.LoanScheduleSettings.ReschedulingMethod:type_name -> openbank.core.v1.products.RepaymentReschedulingMethod
	39,  // 108: openbank.core.v1.products.LoanScheduleSettings.EditOptions:type_name -> openbank.core.v1.products.RepaymentScheduleEditOptions
	89,  // 109: openbank.core.v1.products.LoanScheduleSettings.Rounding:type_name -> openbank.core.v1.products.RoundingSettings
	38,  // 110: openbank.core.v1.products.LoanScheduleSettings.ShortMonthHandlingMethod:type_name -> openbank.core.v1.products.MonthHandlingMethod
	76,  // 111: openbank.core.v1.products.LoanSettings.AccountLink:type_name -> openbank.core.v1.products.AccountLinkSettings
	106, // 112: openbank.core.v1.products.LoanSettings.Accounting:type_name -> openbank.core.v1.products.AccountingSettings
	75,  // 113: openbank.core.v1.products.LoanSettings.Arrears:type_name -> openbank.core.v1.products.ArrearsSettings
	107, // 114: openbank.core.v1.products.LoanSettings.Availability:type_name -> openbank.core.v1.products.AvailabilitySettings
	108, // 115: openbank.core.v1.products.LoanSettings.RevolvingAccount:type_name -> openbank.core.v1.products.RevolvingAccountSettings
	109, // 116: openbank.core.v1.products.LoanSettings.Fees:type_name -> openbank.core.v1.products.FeeSettings
	77,  // 117: openbank.core.v1.products.LoanSettings.Funding:type_name -> openbank.core.v1.products.FundingSettings
	78,  // 118: openbank.core.v1.products.LoanSettings.GracePeriod:type_name -> openbank.core.v1.products.GracePeriodSettings
	74,  // 119: openbank.core.v1.products.LoanSettings.Interest:type_name -> openbank.core.v1.products.LoanInterestSettings
	82,  // 120: openbank.core.v1.products.LoanSettings.LoanAmount:type_name -> openbank.core.v1.products.LoanAmountSettings
	101, // 121: openbank.core.v1.products.LoanSettings.NewAccount:type_name -> openbank.core.v1.products.NewAccountSettings
	110, // 122: openbank.core.v1.products.LoanSettings.Offset:type_name -> openbank.core.v1.products.OffsetSettings
	81,  // 123: openbank.core.v1.products.LoanSettings.Payment:type_name -> openbank.core.v1.products.PaymentSettings
	83,  // 124: openbank.core.v1.products.LoanSettings.Penalty:type_name -> openbank.core.v1.products.PenaltySettings
	84,  // 125: openbank.core.v1.products.LoanSettings.Redraw:type_name -> openbank.core.v1.products.RedrawSettings
	90,  // 126: openbank.core.v1.products.LoanSettings.Schedule:type_name -> openbank.core.v1.products.LoanScheduleSettings
	85,  // 127: openbank.core.v1.products.LoanSettings.Security:type_name -> openbank.core.v1.products.SecuritySettings
	86,  // 128: openbank.core.v1.products.LoanSettings.Tax:type_name -> openbank.core.v1.products.LoanTaxSettings
	45,  // 129: openbank.core.v1.products.LockSettings.CappingConstraintType:type_name -> openbank.core.v1.products.CappingConstraintType
	46,  // 130: openbank.core.v1.products.LockSettings.PrincipalCapMethod:type_name -> openbank.core.v1.products.PrincipalCapMethod
	118, // 131: openbank.core.v1.products.LockSettings.LockPeriod:type_name -> google.protobuf.Duration
	118, // 132: openbank.core.v1.products.LoanInternalControls.DormancyPeriod:type_name -> google.protobuf.Duration
	92,  // 133: openbank.core.v1.products.LoanInternalControls.LockSettings:type_name -> openbank.core.v1.products.LockSettings
	44,  // 134: openbank.core.v1.products.LoanProduct.Type:type_name -> openbank.core.v1.products.LoanType
	43,  // 135: openbank.core.v1.products.LoanProduct.Category:type_name -> openbank.core.v1.products.LoanCategory
	93,  // 136: openbank.core.v1.products.LoanProduct.InternalControls:type_name -> openbank.core.v1.products.LoanInternalControls
	91,  // 137: openbank.core.v1.products.LoanProduct.Settings:type_name -> openbank.core.v1.products.LoanSettings
	120, // 138: openbank.core.v1.products.LoanProduct.CreateTime:type_name -> google.protobuf.Timestamp
	120, // 139: openbank.core.v1.products.LoanProduct.UpdateTime:type_name -> google.protobuf.Timestamp
	94,  // 140: openbank.core.v1.products.CreateLoanProductRequest.Body:type_name -> openbank.core.v1.products.LoanProduct
	94,  // 141: openbank.core.v1.products.ListLoanProductsResponse.Products:type_name -> openbank.core.v1.products.LoanProduct
	94,  // 142: openbank.core.v1.products.UpdateLoanProductRequest.Body:type_name -> openbank.core.v1.products.LoanProduct
	47,  // 143: openbank.core.v1.products.NewAccountSettings.InitialState:type_name -> openbank.core.v1.products.InitialAccountState
	48,  // 144: openbank.core.v1.products.NewAccountSettings.IDGeneratorType:type_name -> openbank.core.v1.products.IDGeneratorType
	118, // 145: openbank.core.v1.products.DurationInterval.Default:type_name -> google.protobuf.Duration
	118, // 146: openbank.core.v1.products.DurationInterval.Min:type_name -> google.protobuf.Duration
	118, // 147: openbank.core.v1.products.DurationInterval.Max:type_name -> google.protobuf.Duration
	51,  // 148: openbank.core.v1.products.AccountingRule.FinancialResource:type_name -> openbank.core.v1.products.FinancialResource
	105, // 149: openbank.core.v1.products.AccountingSettings.AccountingRules:type_name -> openbank.core.v1.products.AccountingRule
	50,  // 150: openbank.core.v1.products.AccountingSettings.InterestAccrued:type_name -> openbank.core.v1.products.InterestAccrued
	49,  // 151: openbank.core.v1.products.AccountingSettings.AccountingMethod:type_name -> openbank.core.v1.products.AccountingMethod
	49,  // 152: openbank.core.v1.products.AccountingSettings.InterestAccountingMethod:type_name -> openbank.core.v1.products.AccountingMethod
	52,  // 153: openbank.core.v1.products.AvailabilitySettings.AvailableFor:type_name -> openbank.core.v1.products.AvailableFor
	53,  // 154: openbank.core.v1.products.RevolvingAccountSettings.Requirement:type_name -> openbank.core.v1.products.RevolvingAccountRequirement
	69,  // 155: openbank.core.v1.products.FeeSettings.Fees:type_name -> openbank.core.v1.products.Fee
	111, // 156: openbank.core.v1.products.CreateRiskLevelRequest.Body:type_name -> openbank.core.v1.products.RiskLevel
	111, // 157: openbank.core.v1.products.ListRiskLevelsResponse.Levels:type_name -> openbank.core.v1.products.RiskLevel
	111, // 158: openbank.core.v1.products.UpdateRiskLevelRequest.Body:type_name -> openbank.core.v1.products.RiskLevel
	60,  // 159: openbank.core.v1.products.DepositProductsService.CreateDepositProduct:input_type -> openbank.core.v1.products.CreateDepositProductRequest
	61,  // 160: openbank.core.v1.products.DepositProductsService.ListDepositProducts:input_type -> openbank.core.v1.products.ListDepositProductsRequest
	63,  // 161: openbank.core.v1.products.DepositProductsService.GetDepositProduct:input_type -> openbank.core.v1.products.GetDepositProductRequest
	64,  // 162: openbank.core.v1.products.DepositProductsService.UpdateDepositProduct:input_type -> openbank.core.v1.products.UpdateDepositProductRequest
	66,  // 163: openbank.core.v1.products.DepositProductsService.UpdateDepositAccounts:input_type -> openbank.core.v1.products.UpdateDepositAccountsRequest
	67,  // 164: openbank.core.v1.products.DepositProductsService.DeleteDepositProduct:input_type -> openbank.core.v1.products.DeleteDepositProductRequest
	95,  // 165: openbank.core.v1.products.LoanProductsService.CreateLoanProduct:input_type -> openbank.core.v1.products.CreateLoanProductRequest
	96,  // 166: openbank.core.v1.products.LoanProductsService.ListLoanProducts:input_type -> openbank.core.v1.products.ListLoanProductsRequest
	98,  // 167: openbank.core.v1.products.LoanProductsService.GetLoanProduct:input_type -> openbank.core.v1.products.GetLoanProductRequest
	99,  // 168: openbank.core.v1.products.LoanProductsService.UpdateLoanProduct:input_type -> openbank.core.v1.products.UpdateLoanProductRequest
	100, // 169: openbank.core.v1.products.LoanProductsService.DeleteLoanProduct:input_type -> openbank.core.v1.products.DeleteLoanProductRequest
	112, // 170: openbank.core.v1.products.RiskLevelsService.CreateRiskLevel:input_type -> openbank.core.v1.products.CreateRiskLevelRequest
	113, // 171: openbank.core.v1.products.RiskLevelsService.ListRiskLevels:input_type -> openbank.core.v1.products.ListRiskLevelsRequest
	115, // 172: openbank.core.v1.products.RiskLevelsService.GetRiskLevel:input_type -> openbank.core.v1.products.GetRiskLevelRequest
	116, // 173: openbank.core.v1.products.RiskLevelsService.UpdateRiskLevel:input_type -> openbank.core.v1.products.UpdateRiskLevelRequest
	117, // 174: openbank.core.v1.products.RiskLevelsService.DeleteRiskLevel:input_type -> openbank.core.v1.products.DeleteRiskLevelRequest
	59,  // 175: openbank.core.v1.products.DepositProductsService.CreateDepositProduct:output_type -> openbank.core.v1.products.DepositProduct
	62,  // 176: openbank.core.v1.products.DepositProductsService.ListDepositProducts:output_type -> openbank.core.v1.products.ListDepositProductsResponse
	59,  // 177: openbank.core.v1.products.DepositProductsService.GetDepositProduct:output_type -> openbank.core.v1.products.DepositProduct
	59,  // 178: openbank.core.v1.products.DepositProductsService.UpdateDepositProduct:output_type -> openbank.core.v1.products.DepositProduct
	121, // 179: openbank.core.v1.products.DepositProductsService.UpdateDepositAccounts:output_type -> google.protobuf.Empty
	121, // 180: openbank.core.v1.products.DepositProductsService.DeleteDepositProduct:output_type -> google.protobuf.Empty
	94,  // 181: openbank.core.v1.products.LoanProductsService.CreateLoanProduct:output_type -> openbank.core.v1.products.LoanProduct
	97,  // 182: openbank.core.v1.products.LoanProductsService.ListLoanProducts:output_type -> openbank.core.v1.products.ListLoanProductsResponse
	94,  // 183: openbank.core.v1.products.LoanProductsService.GetLoanProduct:output_type -> openbank.core.v1.products.LoanProduct
	94,  // 184: openbank.core.v1.products.LoanProductsService.UpdateLoanProduct:output_type -> openbank.core.v1.products.LoanProduct
	121, // 185: openbank.core.v1.products.LoanProductsService.DeleteLoanProduct:output_type -> google.protobuf.Empty
	111, // 186: openbank.core.v1.products.RiskLevelsService.CreateRiskLevel:output_type -> openbank.core.v1.products.RiskLevel
	114, // 187: openbank.core.v1.products.RiskLevelsService.ListRiskLevels:output_type -> openbank.core.v1.products.ListRiskLevelsResponse
	111, // 188: openbank.core.v1.products.RiskLevelsService.GetRiskLevel:output_type -> openbank.core.v1.products.RiskLevel
	111, // 189: openbank.core.v1.products.RiskLevelsService.UpdateRiskLevel:output_type -> openbank.core.v1.products.RiskLevel
	121, // 190: openbank.core.v1.products.RiskLevelsService.DeleteRiskLevel:output_type -> google.protobuf.Empty
	175, // [175:191] is the sub-list for method output_type
	159, // [159:175] is the sub-list for method input_type
	159, // [159:159] is the sub-list for extension type_name
	159, // [159:159] is the sub-list for extension extendee
	0,   // [0:159] is the sub-list for field type_name
}

func init() { file_bnk_to_core_api_v1_products_all_proto_init() }
func file_bnk_to_core_api_v1_products_all_proto_init() {
	if File_bnk_to_core_api_v1_products_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaturitySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverdraftSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositTaxSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositControls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDepositProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDepositProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDepositProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDepositProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDepositProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDepositAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDepositProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodIntervalSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterestRateTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterestRateSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositInterestSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterestPaymentSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoanInterestSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrearsSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountLinkSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GracePeriodSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepaymentSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrincipalPaymentSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoanAmountSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PenaltySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedrawSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecuritySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoanTaxSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillingCycleSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewScheduleSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoanScheduleSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoanSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoanInternalControls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoanProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLoanProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoanProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoanProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoanProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLoanProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLoanProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAccountSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurationInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecimalInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountingRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilitySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevolvingAccountSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRiskLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRiskLevelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRiskLevelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRiskLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_products_all_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRiskLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bnk_to_core_api_v1_products_all_proto_rawDesc,
			NumEnums:      54,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_bnk_to_core_api_v1_products_all_proto_goTypes,
		DependencyIndexes: file_bnk_to_core_api_v1_products_all_proto_depIdxs,
		EnumInfos:         file_bnk_to_core_api_v1_products_all_proto_enumTypes,
		MessageInfos:      file_bnk_to_core_api_v1_products_all_proto_msgTypes,
	}.Build()
	File_bnk_to_core_api_v1_products_all_proto = out.File
	file_bnk_to_core_api_v1_products_all_proto_rawDesc = nil
	file_bnk_to_core_api_v1_products_all_proto_goTypes = nil
	file_bnk_to_core_api_v1_products_all_proto_depIdxs = nil
}
