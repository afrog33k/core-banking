// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bnk.to/core/api/v1/roles/all.proto

package roles

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientRoleServiceClient is the client API for ClientRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientRoleServiceClient interface {
	// CreateClientRole creates a new client role.
	CreateClientRole(ctx context.Context, in *CreateClientRoleRequest, opts ...grpc.CallOption) (*ClientRole, error)
	// ListClientRoles lists client roles.
	ListClientRoles(ctx context.Context, in *ListClientRolesRequest, opts ...grpc.CallOption) (*ListClientRolesResponse, error)
	// GetClientRole retrieves a client role.
	GetClientRole(ctx context.Context, in *GetClientRoleRequest, opts ...grpc.CallOption) (*ClientRole, error)
	// UpdateClientRole updates the configuration of the specified client role.
	UpdateClientRole(ctx context.Context, in *UpdateClientRoleRequest, opts ...grpc.CallOption) (*ClientRole, error)
	// DeleteClientRole deletes the specified client role.
	DeleteClientRole(ctx context.Context, in *DeleteClientRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type clientRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientRoleServiceClient(cc grpc.ClientConnInterface) ClientRoleServiceClient {
	return &clientRoleServiceClient{cc}
}

func (c *clientRoleServiceClient) CreateClientRole(ctx context.Context, in *CreateClientRoleRequest, opts ...grpc.CallOption) (*ClientRole, error) {
	out := new(ClientRole)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.roles.ClientRoleService/CreateClientRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRoleServiceClient) ListClientRoles(ctx context.Context, in *ListClientRolesRequest, opts ...grpc.CallOption) (*ListClientRolesResponse, error) {
	out := new(ListClientRolesResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.roles.ClientRoleService/ListClientRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRoleServiceClient) GetClientRole(ctx context.Context, in *GetClientRoleRequest, opts ...grpc.CallOption) (*ClientRole, error) {
	out := new(ClientRole)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.roles.ClientRoleService/GetClientRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRoleServiceClient) UpdateClientRole(ctx context.Context, in *UpdateClientRoleRequest, opts ...grpc.CallOption) (*ClientRole, error) {
	out := new(ClientRole)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.roles.ClientRoleService/UpdateClientRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRoleServiceClient) DeleteClientRole(ctx context.Context, in *DeleteClientRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.roles.ClientRoleService/DeleteClientRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientRoleServiceServer is the server API for ClientRoleService service.
// All implementations must embed UnimplementedClientRoleServiceServer
// for forward compatibility
type ClientRoleServiceServer interface {
	// CreateClientRole creates a new client role.
	CreateClientRole(context.Context, *CreateClientRoleRequest) (*ClientRole, error)
	// ListClientRoles lists client roles.
	ListClientRoles(context.Context, *ListClientRolesRequest) (*ListClientRolesResponse, error)
	// GetClientRole retrieves a client role.
	GetClientRole(context.Context, *GetClientRoleRequest) (*ClientRole, error)
	// UpdateClientRole updates the configuration of the specified client role.
	UpdateClientRole(context.Context, *UpdateClientRoleRequest) (*ClientRole, error)
	// DeleteClientRole deletes the specified client role.
	DeleteClientRole(context.Context, *DeleteClientRoleRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedClientRoleServiceServer()
}

// UnimplementedClientRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientRoleServiceServer struct{}

func (UnimplementedClientRoleServiceServer) CreateClientRole(context.Context, *CreateClientRoleRequest) (*ClientRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClientRole not implemented")
}

func (UnimplementedClientRoleServiceServer) ListClientRoles(context.Context, *ListClientRolesRequest) (*ListClientRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientRoles not implemented")
}

func (UnimplementedClientRoleServiceServer) GetClientRole(context.Context, *GetClientRoleRequest) (*ClientRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientRole not implemented")
}

func (UnimplementedClientRoleServiceServer) UpdateClientRole(context.Context, *UpdateClientRoleRequest) (*ClientRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientRole not implemented")
}

func (UnimplementedClientRoleServiceServer) DeleteClientRole(context.Context, *DeleteClientRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClientRole not implemented")
}
func (UnimplementedClientRoleServiceServer) mustEmbedUnimplementedClientRoleServiceServer() {}

// UnsafeClientRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientRoleServiceServer will
// result in compilation errors.
type UnsafeClientRoleServiceServer interface {
	mustEmbedUnimplementedClientRoleServiceServer()
}

func RegisterClientRoleServiceServer(s grpc.ServiceRegistrar, srv ClientRoleServiceServer) {
	s.RegisterService(&ClientRoleService_ServiceDesc, srv)
}

func _ClientRoleService_CreateClientRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRoleServiceServer).CreateClientRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.roles.ClientRoleService/CreateClientRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRoleServiceServer).CreateClientRole(ctx, req.(*CreateClientRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRoleService_ListClientRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRoleServiceServer).ListClientRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.roles.ClientRoleService/ListClientRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRoleServiceServer).ListClientRoles(ctx, req.(*ListClientRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRoleService_GetClientRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRoleServiceServer).GetClientRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.roles.ClientRoleService/GetClientRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRoleServiceServer).GetClientRole(ctx, req.(*GetClientRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRoleService_UpdateClientRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRoleServiceServer).UpdateClientRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.roles.ClientRoleService/UpdateClientRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRoleServiceServer).UpdateClientRole(ctx, req.(*UpdateClientRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRoleService_DeleteClientRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRoleServiceServer).DeleteClientRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.roles.ClientRoleService/DeleteClientRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRoleServiceServer).DeleteClientRole(ctx, req.(*DeleteClientRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientRoleService_ServiceDesc is the grpc.ServiceDesc for ClientRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.roles.ClientRoleService",
	HandlerType: (*ClientRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClientRole",
			Handler:    _ClientRoleService_CreateClientRole_Handler,
		},
		{
			MethodName: "ListClientRoles",
			Handler:    _ClientRoleService_ListClientRoles_Handler,
		},
		{
			MethodName: "GetClientRole",
			Handler:    _ClientRoleService_GetClientRole_Handler,
		},
		{
			MethodName: "UpdateClientRole",
			Handler:    _ClientRoleService_UpdateClientRole_Handler,
		},
		{
			MethodName: "DeleteClientRole",
			Handler:    _ClientRoleService_DeleteClientRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/roles/all.proto",
}

// UserRolesServiceClient is the client API for UserRolesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRolesServiceClient interface {
	// CreateUserRole creates a new user role.
	CreateUserRole(ctx context.Context, in *CreateUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error)
	// ListUserRoles lists user roles.
	ListUserRoles(ctx context.Context, in *ListUserRolesRequest, opts ...grpc.CallOption) (*ListUserRolesResponse, error)
	// GetUserRole retrieves a user role.
	GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error)
	// UpdateUserRole updates an existing user role.
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error)
	// DeleteUserRole deletes a role via the role ID.
	DeleteUserRole(ctx context.Context, in *DeleteUserRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userRolesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRolesServiceClient(cc grpc.ClientConnInterface) UserRolesServiceClient {
	return &userRolesServiceClient{cc}
}

func (c *userRolesServiceClient) CreateUserRole(ctx context.Context, in *CreateUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error) {
	out := new(UserRole)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.roles.UserRolesService/CreateUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRolesServiceClient) ListUserRoles(ctx context.Context, in *ListUserRolesRequest, opts ...grpc.CallOption) (*ListUserRolesResponse, error) {
	out := new(ListUserRolesResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.roles.UserRolesService/ListUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRolesServiceClient) GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error) {
	out := new(UserRole)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.roles.UserRolesService/GetUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRolesServiceClient) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UserRole, error) {
	out := new(UserRole)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.roles.UserRolesService/UpdateUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRolesServiceClient) DeleteUserRole(ctx context.Context, in *DeleteUserRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.roles.UserRolesService/DeleteUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRolesServiceServer is the server API for UserRolesService service.
// All implementations must embed UnimplementedUserRolesServiceServer
// for forward compatibility
type UserRolesServiceServer interface {
	// CreateUserRole creates a new user role.
	CreateUserRole(context.Context, *CreateUserRoleRequest) (*UserRole, error)
	// ListUserRoles lists user roles.
	ListUserRoles(context.Context, *ListUserRolesRequest) (*ListUserRolesResponse, error)
	// GetUserRole retrieves a user role.
	GetUserRole(context.Context, *GetUserRoleRequest) (*UserRole, error)
	// UpdateUserRole updates an existing user role.
	UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UserRole, error)
	// DeleteUserRole deletes a role via the role ID.
	DeleteUserRole(context.Context, *DeleteUserRoleRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserRolesServiceServer()
}

// UnimplementedUserRolesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserRolesServiceServer struct{}

func (UnimplementedUserRolesServiceServer) CreateUserRole(context.Context, *CreateUserRoleRequest) (*UserRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserRole not implemented")
}

func (UnimplementedUserRolesServiceServer) ListUserRoles(context.Context, *ListUserRolesRequest) (*ListUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRoles not implemented")
}

func (UnimplementedUserRolesServiceServer) GetUserRole(context.Context, *GetUserRoleRequest) (*UserRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRole not implemented")
}

func (UnimplementedUserRolesServiceServer) UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UserRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}

func (UnimplementedUserRolesServiceServer) DeleteUserRole(context.Context, *DeleteUserRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserRole not implemented")
}
func (UnimplementedUserRolesServiceServer) mustEmbedUnimplementedUserRolesServiceServer() {}

// UnsafeUserRolesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRolesServiceServer will
// result in compilation errors.
type UnsafeUserRolesServiceServer interface {
	mustEmbedUnimplementedUserRolesServiceServer()
}

func RegisterUserRolesServiceServer(s grpc.ServiceRegistrar, srv UserRolesServiceServer) {
	s.RegisterService(&UserRolesService_ServiceDesc, srv)
}

func _UserRolesService_CreateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRolesServiceServer).CreateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.roles.UserRolesService/CreateUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRolesServiceServer).CreateUserRole(ctx, req.(*CreateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRolesService_ListUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRolesServiceServer).ListUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.roles.UserRolesService/ListUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRolesServiceServer).ListUserRoles(ctx, req.(*ListUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRolesService_GetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRolesServiceServer).GetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.roles.UserRolesService/GetUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRolesServiceServer).GetUserRole(ctx, req.(*GetUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRolesService_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRolesServiceServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.roles.UserRolesService/UpdateUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRolesServiceServer).UpdateUserRole(ctx, req.(*UpdateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRolesService_DeleteUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRolesServiceServer).DeleteUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.roles.UserRolesService/DeleteUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRolesServiceServer).DeleteUserRole(ctx, req.(*DeleteUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRolesService_ServiceDesc is the grpc.ServiceDesc for UserRolesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRolesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.roles.UserRolesService",
	HandlerType: (*UserRolesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserRole",
			Handler:    _UserRolesService_CreateUserRole_Handler,
		},
		{
			MethodName: "ListUserRoles",
			Handler:    _UserRolesService_ListUserRoles_Handler,
		},
		{
			MethodName: "GetUserRole",
			Handler:    _UserRolesService_GetUserRole_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _UserRolesService_UpdateUserRole_Handler,
		},
		{
			MethodName: "DeleteUserRole",
			Handler:    _UserRolesService_DeleteUserRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/roles/all.proto",
}
