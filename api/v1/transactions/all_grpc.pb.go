// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bnk.to/core/api/v1/transactions/all.proto

package transactions

import (
	context "context"

	v1 "bnk.to/core/api/v1"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepositTransactionsServiceClient is the client API for DepositTransactionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepositTransactionsServiceClient interface {
	// CreateBulkDeposit creates multiple deposit transactions.
	// TODO: Add Response type.
	CreateBulkDeposit(ctx context.Context, in *CreateBulkDepositRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateDeposit creates a new deposit transaction for the account.
	CreateDeposit(ctx context.Context, in *CreateDepositRequest, opts ...grpc.CallOption) (*DepositTransaction, error)
	// CreateFee creates a new fee transaction for the account.
	CreateFee(ctx context.Context, in *CreateDepositFeeRequest, opts ...grpc.CallOption) (*DepositTransaction, error)
	// CreateSeizure creates a new seizure block for the account.
	CreateSeizure(ctx context.Context, in *CreateSeizureRequest, opts ...grpc.CallOption) (*DepositTransaction, error)
	// CreateTransfer creates a new transfer transaction for the account.
	CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*DepositTransaction, error)
	// CreateWithdrawal creates a new withdrawal transaction for the account.
	CreateWithdrawal(ctx context.Context, in *CreateWithdrawalRequest, opts ...grpc.CallOption) (*DepositTransaction, error)
	// ListDepositTransactions lists deposit transactions.
	ListDepositTransactions(ctx context.Context, in *ListDepositTransactionsRequest, opts ...grpc.CallOption) (*ListDepositTransactionsResponse, error)
	// GetDepositTransaction retrieves a deposit transaction.
	GetDepositTransaction(ctx context.Context, in *GetDepositTransactionRequest, opts ...grpc.CallOption) (*DepositTransaction, error)
	// Adjust adjusts a deposit transaction.
	Adjust(ctx context.Context, in *AdjustDepositRequest, opts ...grpc.CallOption) (*DepositTransaction, error)
	// GetDocument retrieves a document for the transaction.
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*v1.File, error)
}

type depositTransactionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepositTransactionsServiceClient(cc grpc.ClientConnInterface) DepositTransactionsServiceClient {
	return &depositTransactionsServiceClient{cc}
}

func (c *depositTransactionsServiceClient) CreateBulkDeposit(ctx context.Context, in *CreateBulkDepositRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.DepositTransactionsService/CreateBulkDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionsServiceClient) CreateDeposit(ctx context.Context, in *CreateDepositRequest, opts ...grpc.CallOption) (*DepositTransaction, error) {
	out := new(DepositTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.DepositTransactionsService/CreateDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionsServiceClient) CreateFee(ctx context.Context, in *CreateDepositFeeRequest, opts ...grpc.CallOption) (*DepositTransaction, error) {
	out := new(DepositTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.DepositTransactionsService/CreateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionsServiceClient) CreateSeizure(ctx context.Context, in *CreateSeizureRequest, opts ...grpc.CallOption) (*DepositTransaction, error) {
	out := new(DepositTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.DepositTransactionsService/CreateSeizure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionsServiceClient) CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*DepositTransaction, error) {
	out := new(DepositTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.DepositTransactionsService/CreateTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionsServiceClient) CreateWithdrawal(ctx context.Context, in *CreateWithdrawalRequest, opts ...grpc.CallOption) (*DepositTransaction, error) {
	out := new(DepositTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.DepositTransactionsService/CreateWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionsServiceClient) ListDepositTransactions(ctx context.Context, in *ListDepositTransactionsRequest, opts ...grpc.CallOption) (*ListDepositTransactionsResponse, error) {
	out := new(ListDepositTransactionsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.DepositTransactionsService/ListDepositTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionsServiceClient) GetDepositTransaction(ctx context.Context, in *GetDepositTransactionRequest, opts ...grpc.CallOption) (*DepositTransaction, error) {
	out := new(DepositTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.DepositTransactionsService/GetDepositTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionsServiceClient) Adjust(ctx context.Context, in *AdjustDepositRequest, opts ...grpc.CallOption) (*DepositTransaction, error) {
	out := new(DepositTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.DepositTransactionsService/Adjust", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionsServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*v1.File, error) {
	out := new(v1.File)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.DepositTransactionsService/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepositTransactionsServiceServer is the server API for DepositTransactionsService service.
// All implementations must embed UnimplementedDepositTransactionsServiceServer
// for forward compatibility
type DepositTransactionsServiceServer interface {
	// CreateBulkDeposit creates multiple deposit transactions.
	// TODO: Add Response type.
	CreateBulkDeposit(context.Context, *CreateBulkDepositRequest) (*emptypb.Empty, error)
	// CreateDeposit creates a new deposit transaction for the account.
	CreateDeposit(context.Context, *CreateDepositRequest) (*DepositTransaction, error)
	// CreateFee creates a new fee transaction for the account.
	CreateFee(context.Context, *CreateDepositFeeRequest) (*DepositTransaction, error)
	// CreateSeizure creates a new seizure block for the account.
	CreateSeizure(context.Context, *CreateSeizureRequest) (*DepositTransaction, error)
	// CreateTransfer creates a new transfer transaction for the account.
	CreateTransfer(context.Context, *CreateTransferRequest) (*DepositTransaction, error)
	// CreateWithdrawal creates a new withdrawal transaction for the account.
	CreateWithdrawal(context.Context, *CreateWithdrawalRequest) (*DepositTransaction, error)
	// ListDepositTransactions lists deposit transactions.
	ListDepositTransactions(context.Context, *ListDepositTransactionsRequest) (*ListDepositTransactionsResponse, error)
	// GetDepositTransaction retrieves a deposit transaction.
	GetDepositTransaction(context.Context, *GetDepositTransactionRequest) (*DepositTransaction, error)
	// Adjust adjusts a deposit transaction.
	Adjust(context.Context, *AdjustDepositRequest) (*DepositTransaction, error)
	// GetDocument retrieves a document for the transaction.
	GetDocument(context.Context, *GetDocumentRequest) (*v1.File, error)
	mustEmbedUnimplementedDepositTransactionsServiceServer()
}

// UnimplementedDepositTransactionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDepositTransactionsServiceServer struct{}

func (UnimplementedDepositTransactionsServiceServer) CreateBulkDeposit(context.Context, *CreateBulkDepositRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBulkDeposit not implemented")
}

func (UnimplementedDepositTransactionsServiceServer) CreateDeposit(context.Context, *CreateDepositRequest) (*DepositTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeposit not implemented")
}

func (UnimplementedDepositTransactionsServiceServer) CreateFee(context.Context, *CreateDepositFeeRequest) (*DepositTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFee not implemented")
}

func (UnimplementedDepositTransactionsServiceServer) CreateSeizure(context.Context, *CreateSeizureRequest) (*DepositTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeizure not implemented")
}

func (UnimplementedDepositTransactionsServiceServer) CreateTransfer(context.Context, *CreateTransferRequest) (*DepositTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfer not implemented")
}

func (UnimplementedDepositTransactionsServiceServer) CreateWithdrawal(context.Context, *CreateWithdrawalRequest) (*DepositTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdrawal not implemented")
}

func (UnimplementedDepositTransactionsServiceServer) ListDepositTransactions(context.Context, *ListDepositTransactionsRequest) (*ListDepositTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepositTransactions not implemented")
}

func (UnimplementedDepositTransactionsServiceServer) GetDepositTransaction(context.Context, *GetDepositTransactionRequest) (*DepositTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositTransaction not implemented")
}

func (UnimplementedDepositTransactionsServiceServer) Adjust(context.Context, *AdjustDepositRequest) (*DepositTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Adjust not implemented")
}

func (UnimplementedDepositTransactionsServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*v1.File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}

func (UnimplementedDepositTransactionsServiceServer) mustEmbedUnimplementedDepositTransactionsServiceServer() {
}

// UnsafeDepositTransactionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepositTransactionsServiceServer will
// result in compilation errors.
type UnsafeDepositTransactionsServiceServer interface {
	mustEmbedUnimplementedDepositTransactionsServiceServer()
}

func RegisterDepositTransactionsServiceServer(s grpc.ServiceRegistrar, srv DepositTransactionsServiceServer) {
	s.RegisterService(&DepositTransactionsService_ServiceDesc, srv)
}

func _DepositTransactionsService_CreateBulkDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBulkDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionsServiceServer).CreateBulkDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.DepositTransactionsService/CreateBulkDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionsServiceServer).CreateBulkDeposit(ctx, req.(*CreateBulkDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionsService_CreateDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionsServiceServer).CreateDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.DepositTransactionsService/CreateDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionsServiceServer).CreateDeposit(ctx, req.(*CreateDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionsService_CreateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepositFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionsServiceServer).CreateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.DepositTransactionsService/CreateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionsServiceServer).CreateFee(ctx, req.(*CreateDepositFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionsService_CreateSeizure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeizureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionsServiceServer).CreateSeizure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.DepositTransactionsService/CreateSeizure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionsServiceServer).CreateSeizure(ctx, req.(*CreateSeizureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionsService_CreateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionsServiceServer).CreateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.DepositTransactionsService/CreateTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionsServiceServer).CreateTransfer(ctx, req.(*CreateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionsService_CreateWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionsServiceServer).CreateWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.DepositTransactionsService/CreateWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionsServiceServer).CreateWithdrawal(ctx, req.(*CreateWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionsService_ListDepositTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionsServiceServer).ListDepositTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.DepositTransactionsService/ListDepositTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionsServiceServer).ListDepositTransactions(ctx, req.(*ListDepositTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionsService_GetDepositTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionsServiceServer).GetDepositTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.DepositTransactionsService/GetDepositTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionsServiceServer).GetDepositTransaction(ctx, req.(*GetDepositTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionsService_Adjust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionsServiceServer).Adjust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.DepositTransactionsService/Adjust",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionsServiceServer).Adjust(ctx, req.(*AdjustDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionsService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionsServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.DepositTransactionsService/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionsServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepositTransactionsService_ServiceDesc is the grpc.ServiceDesc for DepositTransactionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepositTransactionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.transactions.DepositTransactionsService",
	HandlerType: (*DepositTransactionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBulkDeposit",
			Handler:    _DepositTransactionsService_CreateBulkDeposit_Handler,
		},
		{
			MethodName: "CreateDeposit",
			Handler:    _DepositTransactionsService_CreateDeposit_Handler,
		},
		{
			MethodName: "CreateFee",
			Handler:    _DepositTransactionsService_CreateFee_Handler,
		},
		{
			MethodName: "CreateSeizure",
			Handler:    _DepositTransactionsService_CreateSeizure_Handler,
		},
		{
			MethodName: "CreateTransfer",
			Handler:    _DepositTransactionsService_CreateTransfer_Handler,
		},
		{
			MethodName: "CreateWithdrawal",
			Handler:    _DepositTransactionsService_CreateWithdrawal_Handler,
		},
		{
			MethodName: "ListDepositTransactions",
			Handler:    _DepositTransactionsService_ListDepositTransactions_Handler,
		},
		{
			MethodName: "GetDepositTransaction",
			Handler:    _DepositTransactionsService_GetDepositTransaction_Handler,
		},
		{
			MethodName: "Adjust",
			Handler:    _DepositTransactionsService_Adjust_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DepositTransactionsService_GetDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/transactions/all.proto",
}

// LoanTransactionsServiceClient is the client API for LoanTransactionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanTransactionsServiceClient interface {
	// CreateDisbursement creates a disbursement on a loan account.
	CreateDisbursement(ctx context.Context, in *CreateDisbursementRequest, opts ...grpc.CallOption) (*LoanTransaction, error)
	// CreateFee creates a transaction that applies a fee on a loan
	// account.
	CreateFee(ctx context.Context, in *CreateLoanFeeRequest, opts ...grpc.CallOption) (*LoanTransaction, error)
	// CreatePayment creates a transaction where the user has made a
	// payment.
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*LoanTransaction, error)
	// CreateRedrawPayment creates a transaction where the user redraws a
	// payment.
	CreateRedrawPayment(ctx context.Context, in *CreateRedrawPaymentRequest, opts ...grpc.CallOption) (*LoanTransaction, error)
	// CreateRepayment creates a transaction where the user repays an
	// installment.
	CreateRepayment(ctx context.Context, in *CreateRepaymentRequest, opts ...grpc.CallOption) (*LoanTransaction, error)
	// CreateWithdrawal creates a transaction where the user withdraws their
	// balance.
	CreateWithdrawal(ctx context.Context, in *CreateWithdrawalRequest, opts ...grpc.CallOption) (*LoanTransaction, error)
	// CreateWithdrawalRedraw creates a transaction where the user withdraws
	// from their redraw balance.
	CreateWithdrawalRedraw(ctx context.Context, in *CreateWithdrawalRedrawRequest, opts ...grpc.CallOption) (*LoanTransaction, error)
	// ListLoanTransactions lists loan transactions.
	ListLoanTransactions(ctx context.Context, in *ListLoanTransactionsRequest, opts ...grpc.CallOption) (*ListLoanTransactionsResponse, error)
	// GetLoanTransaction retrieves a loan transaction.
	GetLoanTransaction(ctx context.Context, in *GetLoanTransactionRequest, opts ...grpc.CallOption) (*LoanTransaction, error)
	// Adjust adjusts a loan transaction.
	Adjust(ctx context.Context, in *AdjustLoanRequest, opts ...grpc.CallOption) (*LoanTransaction, error)
}

type loanTransactionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanTransactionsServiceClient(cc grpc.ClientConnInterface) LoanTransactionsServiceClient {
	return &loanTransactionsServiceClient{cc}
}

func (c *loanTransactionsServiceClient) CreateDisbursement(ctx context.Context, in *CreateDisbursementRequest, opts ...grpc.CallOption) (*LoanTransaction, error) {
	out := new(LoanTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.LoanTransactionsService/CreateDisbursement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionsServiceClient) CreateFee(ctx context.Context, in *CreateLoanFeeRequest, opts ...grpc.CallOption) (*LoanTransaction, error) {
	out := new(LoanTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.LoanTransactionsService/CreateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionsServiceClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*LoanTransaction, error) {
	out := new(LoanTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.LoanTransactionsService/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionsServiceClient) CreateRedrawPayment(ctx context.Context, in *CreateRedrawPaymentRequest, opts ...grpc.CallOption) (*LoanTransaction, error) {
	out := new(LoanTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.LoanTransactionsService/CreateRedrawPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionsServiceClient) CreateRepayment(ctx context.Context, in *CreateRepaymentRequest, opts ...grpc.CallOption) (*LoanTransaction, error) {
	out := new(LoanTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.LoanTransactionsService/CreateRepayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionsServiceClient) CreateWithdrawal(ctx context.Context, in *CreateWithdrawalRequest, opts ...grpc.CallOption) (*LoanTransaction, error) {
	out := new(LoanTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.LoanTransactionsService/CreateWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionsServiceClient) CreateWithdrawalRedraw(ctx context.Context, in *CreateWithdrawalRedrawRequest, opts ...grpc.CallOption) (*LoanTransaction, error) {
	out := new(LoanTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.LoanTransactionsService/CreateWithdrawalRedraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionsServiceClient) ListLoanTransactions(ctx context.Context, in *ListLoanTransactionsRequest, opts ...grpc.CallOption) (*ListLoanTransactionsResponse, error) {
	out := new(ListLoanTransactionsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.LoanTransactionsService/ListLoanTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionsServiceClient) GetLoanTransaction(ctx context.Context, in *GetLoanTransactionRequest, opts ...grpc.CallOption) (*LoanTransaction, error) {
	out := new(LoanTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.LoanTransactionsService/GetLoanTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionsServiceClient) Adjust(ctx context.Context, in *AdjustLoanRequest, opts ...grpc.CallOption) (*LoanTransaction, error) {
	out := new(LoanTransaction)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.transactions.LoanTransactionsService/Adjust", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanTransactionsServiceServer is the server API for LoanTransactionsService service.
// All implementations must embed UnimplementedLoanTransactionsServiceServer
// for forward compatibility
type LoanTransactionsServiceServer interface {
	// CreateDisbursement creates a disbursement on a loan account.
	CreateDisbursement(context.Context, *CreateDisbursementRequest) (*LoanTransaction, error)
	// CreateFee creates a transaction that applies a fee on a loan
	// account.
	CreateFee(context.Context, *CreateLoanFeeRequest) (*LoanTransaction, error)
	// CreatePayment creates a transaction where the user has made a
	// payment.
	CreatePayment(context.Context, *CreatePaymentRequest) (*LoanTransaction, error)
	// CreateRedrawPayment creates a transaction where the user redraws a
	// payment.
	CreateRedrawPayment(context.Context, *CreateRedrawPaymentRequest) (*LoanTransaction, error)
	// CreateRepayment creates a transaction where the user repays an
	// installment.
	CreateRepayment(context.Context, *CreateRepaymentRequest) (*LoanTransaction, error)
	// CreateWithdrawal creates a transaction where the user withdraws their
	// balance.
	CreateWithdrawal(context.Context, *CreateWithdrawalRequest) (*LoanTransaction, error)
	// CreateWithdrawalRedraw creates a transaction where the user withdraws
	// from their redraw balance.
	CreateWithdrawalRedraw(context.Context, *CreateWithdrawalRedrawRequest) (*LoanTransaction, error)
	// ListLoanTransactions lists loan transactions.
	ListLoanTransactions(context.Context, *ListLoanTransactionsRequest) (*ListLoanTransactionsResponse, error)
	// GetLoanTransaction retrieves a loan transaction.
	GetLoanTransaction(context.Context, *GetLoanTransactionRequest) (*LoanTransaction, error)
	// Adjust adjusts a loan transaction.
	Adjust(context.Context, *AdjustLoanRequest) (*LoanTransaction, error)
	mustEmbedUnimplementedLoanTransactionsServiceServer()
}

// UnimplementedLoanTransactionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoanTransactionsServiceServer struct{}

func (UnimplementedLoanTransactionsServiceServer) CreateDisbursement(context.Context, *CreateDisbursementRequest) (*LoanTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDisbursement not implemented")
}

func (UnimplementedLoanTransactionsServiceServer) CreateFee(context.Context, *CreateLoanFeeRequest) (*LoanTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFee not implemented")
}

func (UnimplementedLoanTransactionsServiceServer) CreatePayment(context.Context, *CreatePaymentRequest) (*LoanTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}

func (UnimplementedLoanTransactionsServiceServer) CreateRedrawPayment(context.Context, *CreateRedrawPaymentRequest) (*LoanTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRedrawPayment not implemented")
}

func (UnimplementedLoanTransactionsServiceServer) CreateRepayment(context.Context, *CreateRepaymentRequest) (*LoanTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepayment not implemented")
}

func (UnimplementedLoanTransactionsServiceServer) CreateWithdrawal(context.Context, *CreateWithdrawalRequest) (*LoanTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdrawal not implemented")
}

func (UnimplementedLoanTransactionsServiceServer) CreateWithdrawalRedraw(context.Context, *CreateWithdrawalRedrawRequest) (*LoanTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdrawalRedraw not implemented")
}

func (UnimplementedLoanTransactionsServiceServer) ListLoanTransactions(context.Context, *ListLoanTransactionsRequest) (*ListLoanTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoanTransactions not implemented")
}

func (UnimplementedLoanTransactionsServiceServer) GetLoanTransaction(context.Context, *GetLoanTransactionRequest) (*LoanTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanTransaction not implemented")
}

func (UnimplementedLoanTransactionsServiceServer) Adjust(context.Context, *AdjustLoanRequest) (*LoanTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Adjust not implemented")
}

func (UnimplementedLoanTransactionsServiceServer) mustEmbedUnimplementedLoanTransactionsServiceServer() {
}

// UnsafeLoanTransactionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanTransactionsServiceServer will
// result in compilation errors.
type UnsafeLoanTransactionsServiceServer interface {
	mustEmbedUnimplementedLoanTransactionsServiceServer()
}

func RegisterLoanTransactionsServiceServer(s grpc.ServiceRegistrar, srv LoanTransactionsServiceServer) {
	s.RegisterService(&LoanTransactionsService_ServiceDesc, srv)
}

func _LoanTransactionsService_CreateDisbursement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDisbursementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionsServiceServer).CreateDisbursement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.LoanTransactionsService/CreateDisbursement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionsServiceServer).CreateDisbursement(ctx, req.(*CreateDisbursementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionsService_CreateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionsServiceServer).CreateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.LoanTransactionsService/CreateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionsServiceServer).CreateFee(ctx, req.(*CreateLoanFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionsService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionsServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.LoanTransactionsService/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionsServiceServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionsService_CreateRedrawPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRedrawPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionsServiceServer).CreateRedrawPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.LoanTransactionsService/CreateRedrawPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionsServiceServer).CreateRedrawPayment(ctx, req.(*CreateRedrawPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionsService_CreateRepayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionsServiceServer).CreateRepayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.LoanTransactionsService/CreateRepayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionsServiceServer).CreateRepayment(ctx, req.(*CreateRepaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionsService_CreateWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionsServiceServer).CreateWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.LoanTransactionsService/CreateWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionsServiceServer).CreateWithdrawal(ctx, req.(*CreateWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionsService_CreateWithdrawalRedraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawalRedrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionsServiceServer).CreateWithdrawalRedraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.LoanTransactionsService/CreateWithdrawalRedraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionsServiceServer).CreateWithdrawalRedraw(ctx, req.(*CreateWithdrawalRedrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionsService_ListLoanTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoanTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionsServiceServer).ListLoanTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.LoanTransactionsService/ListLoanTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionsServiceServer).ListLoanTransactions(ctx, req.(*ListLoanTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionsService_GetLoanTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionsServiceServer).GetLoanTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.LoanTransactionsService/GetLoanTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionsServiceServer).GetLoanTransaction(ctx, req.(*GetLoanTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionsService_Adjust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionsServiceServer).Adjust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.transactions.LoanTransactionsService/Adjust",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionsServiceServer).Adjust(ctx, req.(*AdjustLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanTransactionsService_ServiceDesc is the grpc.ServiceDesc for LoanTransactionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanTransactionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.transactions.LoanTransactionsService",
	HandlerType: (*LoanTransactionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDisbursement",
			Handler:    _LoanTransactionsService_CreateDisbursement_Handler,
		},
		{
			MethodName: "CreateFee",
			Handler:    _LoanTransactionsService_CreateFee_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _LoanTransactionsService_CreatePayment_Handler,
		},
		{
			MethodName: "CreateRedrawPayment",
			Handler:    _LoanTransactionsService_CreateRedrawPayment_Handler,
		},
		{
			MethodName: "CreateRepayment",
			Handler:    _LoanTransactionsService_CreateRepayment_Handler,
		},
		{
			MethodName: "CreateWithdrawal",
			Handler:    _LoanTransactionsService_CreateWithdrawal_Handler,
		},
		{
			MethodName: "CreateWithdrawalRedraw",
			Handler:    _LoanTransactionsService_CreateWithdrawalRedraw_Handler,
		},
		{
			MethodName: "ListLoanTransactions",
			Handler:    _LoanTransactionsService_ListLoanTransactions_Handler,
		},
		{
			MethodName: "GetLoanTransaction",
			Handler:    _LoanTransactionsService_GetLoanTransaction_Handler,
		},
		{
			MethodName: "Adjust",
			Handler:    _LoanTransactionsService_Adjust_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/transactions/all.proto",
}
