// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: bnk.to/core/api/v1/transactions/all.proto

// Package transactions defines the API for managing transactions.

package transactions

import (
	reflect "reflect"
	sync "sync"

	v1 "bnk.to/core/api/v1"
	cards "bnk.to/core/api/v1/cards"
	deposits "bnk.to/core/api/v1/deposits"
	products "bnk.to/core/api/v1/products"
	_ "github.com/xo/ecosystem/proto/xo"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DepositType is the type of the deposit transaction.
type DepositType int32

const (
	DepositType_DepositImport                            DepositType = 0
	DepositType_DepositWriteOff                          DepositType = 1
	DepositType_DepositWriteOffAdjustment                DepositType = 2
	DepositType_DepositDeposit                           DepositType = 3
	DepositType_DepositAdjustment                        DepositType = 4
	DepositType_DepositWithdrawal                        DepositType = 5
	DepositType_DepositWithdrawalAdjustment              DepositType = 6
	DepositType_DepositCardTransactionReversal           DepositType = 7
	DepositType_DepositCardTransactionReversalAdjustment DepositType = 8
	DepositType_DepositTransfer                          DepositType = 9
	DepositType_DepositTransferAdjustment                DepositType = 10
	DepositType_DepositFeeApplied                        DepositType = 11
	DepositType_DepositFeeAdjusted                       DepositType = 12
	DepositType_DepositFeesDueReduced                    DepositType = 13
	DepositType_DepositInterestApplied                   DepositType = 14
	DepositType_DepositInterestAppliedAdjustment         DepositType = 15
	DepositType_DepositFeeReductionAdjustment            DepositType = 16
	DepositType_DepositWithholdingTax                    DepositType = 17
	DepositType_DepositWithholdingTaxAdjustment          DepositType = 18
	DepositType_DepositInterestRateChanged               DepositType = 19
	DepositType_DepositOverdraftInterestRateChanged      DepositType = 20
	DepositType_DepositOverdraftLimitChanged             DepositType = 21
	DepositType_DepositBranchChanged                     DepositType = 22
	DepositType_DepositLoanFunded                        DepositType = 23
	DepositType_DepositLoanFundedAdjustment              DepositType = 24
	DepositType_DepositLoanRepaid                        DepositType = 25
	DepositType_DepositLoanRepaidAdjustment              DepositType = 26
	DepositType_DepositLoanFractionBought                DepositType = 27
	DepositType_DepositLoanFractionBoughtAdjustment      DepositType = 28
	DepositType_DepositLoanFractionSold                  DepositType = 29
	DepositType_DepositLoanFractionSoldAdjustment        DepositType = 30
	DepositType_DepositSeizedAmount                      DepositType = 31
)

// Enum value maps for DepositType.
var (
	DepositType_name = map[int32]string{
		0:  "DepositImport",
		1:  "DepositWriteOff",
		2:  "DepositWriteOffAdjustment",
		3:  "DepositDeposit",
		4:  "DepositAdjustment",
		5:  "DepositWithdrawal",
		6:  "DepositWithdrawalAdjustment",
		7:  "DepositCardTransactionReversal",
		8:  "DepositCardTransactionReversalAdjustment",
		9:  "DepositTransfer",
		10: "DepositTransferAdjustment",
		11: "DepositFeeApplied",
		12: "DepositFeeAdjusted",
		13: "DepositFeesDueReduced",
		14: "DepositInterestApplied",
		15: "DepositInterestAppliedAdjustment",
		16: "DepositFeeReductionAdjustment",
		17: "DepositWithholdingTax",
		18: "DepositWithholdingTaxAdjustment",
		19: "DepositInterestRateChanged",
		20: "DepositOverdraftInterestRateChanged",
		21: "DepositOverdraftLimitChanged",
		22: "DepositBranchChanged",
		23: "DepositLoanFunded",
		24: "DepositLoanFundedAdjustment",
		25: "DepositLoanRepaid",
		26: "DepositLoanRepaidAdjustment",
		27: "DepositLoanFractionBought",
		28: "DepositLoanFractionBoughtAdjustment",
		29: "DepositLoanFractionSold",
		30: "DepositLoanFractionSoldAdjustment",
		31: "DepositSeizedAmount",
	}
	DepositType_value = map[string]int32{
		"DepositImport":                            0,
		"DepositWriteOff":                          1,
		"DepositWriteOffAdjustment":                2,
		"DepositDeposit":                           3,
		"DepositAdjustment":                        4,
		"DepositWithdrawal":                        5,
		"DepositWithdrawalAdjustment":              6,
		"DepositCardTransactionReversal":           7,
		"DepositCardTransactionReversalAdjustment": 8,
		"DepositTransfer":                          9,
		"DepositTransferAdjustment":                10,
		"DepositFeeApplied":                        11,
		"DepositFeeAdjusted":                       12,
		"DepositFeesDueReduced":                    13,
		"DepositInterestApplied":                   14,
		"DepositInterestAppliedAdjustment":         15,
		"DepositFeeReductionAdjustment":            16,
		"DepositWithholdingTax":                    17,
		"DepositWithholdingTaxAdjustment":          18,
		"DepositInterestRateChanged":               19,
		"DepositOverdraftInterestRateChanged":      20,
		"DepositOverdraftLimitChanged":             21,
		"DepositBranchChanged":                     22,
		"DepositLoanFunded":                        23,
		"DepositLoanFundedAdjustment":              24,
		"DepositLoanRepaid":                        25,
		"DepositLoanRepaidAdjustment":              26,
		"DepositLoanFractionBought":                27,
		"DepositLoanFractionBoughtAdjustment":      28,
		"DepositLoanFractionSold":                  29,
		"DepositLoanFractionSoldAdjustment":        30,
		"DepositSeizedAmount":                      31,
	}
)

func (x DepositType) Enum() *DepositType {
	p := new(DepositType)
	*p = x
	return p
}

func (x DepositType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepositType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_transactions_all_proto_enumTypes[0].Descriptor()
}

func (DepositType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_transactions_all_proto_enumTypes[0]
}

func (x DepositType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepositType.Descriptor instead.
func (DepositType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{0}
}

// PaymentType is the type of loan payment.
type PaymentType int32

const (
	PaymentType_PaymentPrincipal              PaymentType = 0
	PaymentType_PaymentInterest               PaymentType = 1
	PaymentType_PaymentManualFee              PaymentType = 2
	PaymentType_PaymentUpfrontDisbursementFee PaymentType = 3
	PaymentType_PaymentLateRepaymentFee       PaymentType = 4
	PaymentType_PaymentPaymentDueFee          PaymentType = 5
	PaymentType_PaymentPenalty                PaymentType = 6
)

// Enum value maps for PaymentType.
var (
	PaymentType_name = map[int32]string{
		0: "PaymentPrincipal",
		1: "PaymentInterest",
		2: "PaymentManualFee",
		3: "PaymentUpfrontDisbursementFee",
		4: "PaymentLateRepaymentFee",
		5: "PaymentPaymentDueFee",
		6: "PaymentPenalty",
	}
	PaymentType_value = map[string]int32{
		"PaymentPrincipal":              0,
		"PaymentInterest":               1,
		"PaymentManualFee":              2,
		"PaymentUpfrontDisbursementFee": 3,
		"PaymentLateRepaymentFee":       4,
		"PaymentPaymentDueFee":          5,
		"PaymentPenalty":                6,
	}
)

func (x PaymentType) Enum() *PaymentType {
	p := new(PaymentType)
	*p = x
	return p
}

func (x PaymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_transactions_all_proto_enumTypes[1].Descriptor()
}

func (PaymentType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_transactions_all_proto_enumTypes[1]
}

func (x PaymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentType.Descriptor instead.
func (PaymentType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{1}
}

// CalculationMethod is the type of calculation to be done.
type CalculationMethod int32

const (
	CalculationMethod_NoRecalculation                                 CalculationMethod = 0
	CalculationMethod_RescheduleRemainingRepayments                   CalculationMethod = 1
	CalculationMethod_RecalculateScheduleKeepSameNumberOfTerms        CalculationMethod = 2
	CalculationMethod_RecalculateScheduleKeepSamePrincipalAmount      CalculationMethod = 3
	CalculationMethod_RecalculateScheduleKeepSameTotalRepaymentAmount CalculationMethod = 4
	CalculationMethod_ReduceAmountPerInstallment                      CalculationMethod = 5
	CalculationMethod_ReduceNumberOfInstallments                      CalculationMethod = 6
	CalculationMethod_ReduceNumberOfInstallmentsNew                   CalculationMethod = 7
)

// Enum value maps for CalculationMethod.
var (
	CalculationMethod_name = map[int32]string{
		0: "NoRecalculation",
		1: "RescheduleRemainingRepayments",
		2: "RecalculateScheduleKeepSameNumberOfTerms",
		3: "RecalculateScheduleKeepSamePrincipalAmount",
		4: "RecalculateScheduleKeepSameTotalRepaymentAmount",
		5: "ReduceAmountPerInstallment",
		6: "ReduceNumberOfInstallments",
		7: "ReduceNumberOfInstallmentsNew",
	}
	CalculationMethod_value = map[string]int32{
		"NoRecalculation":                                 0,
		"RescheduleRemainingRepayments":                   1,
		"RecalculateScheduleKeepSameNumberOfTerms":        2,
		"RecalculateScheduleKeepSamePrincipalAmount":      3,
		"RecalculateScheduleKeepSameTotalRepaymentAmount": 4,
		"ReduceAmountPerInstallment":                      5,
		"ReduceNumberOfInstallments":                      6,
		"ReduceNumberOfInstallmentsNew":                   7,
	}
)

func (x CalculationMethod) Enum() *CalculationMethod {
	p := new(CalculationMethod)
	*p = x
	return p
}

func (x CalculationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalculationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_transactions_all_proto_enumTypes[2].Descriptor()
}

func (CalculationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_transactions_all_proto_enumTypes[2]
}

func (x CalculationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CalculationMethod.Descriptor instead.
func (CalculationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{2}
}

// LoanType is the type of loan.
type LoanType int32

const (
	LoanType_LoanImport                            LoanType = 0
	LoanType_LoanDisbursement                      LoanType = 1
	LoanType_LoanDisbursementAdjustment            LoanType = 2
	LoanType_LoanWriteOff                          LoanType = 3
	LoanType_LoanWriteOffAdjustment                LoanType = 4
	LoanType_LoanRepayment                         LoanType = 5
	LoanType_LoanPaymentMade                       LoanType = 6
	LoanType_LoanWithdrawalRedraw                  LoanType = 7
	LoanType_LoanWithdrawalRedrawAdjustment        LoanType = 8
	LoanType_LoanFeeApplied                        LoanType = 9
	LoanType_LoanFeeCharged                        LoanType = 10
	LoanType_LoanFeesDueReduced                    LoanType = 11
	LoanType_LoanFeeAdjustment                     LoanType = 12
	LoanType_LoanPenaltyApplied                    LoanType = 13
	LoanType_LoanPenaltyAdjustment                 LoanType = 14
	LoanType_LoanPenaltiesDueReduced               LoanType = 15
	LoanType_LoanRepaymentAdjustment               LoanType = 16
	LoanType_LoanPaymentMadeAdjustment             LoanType = 17
	LoanType_LoanInterestRateChanged               LoanType = 18
	LoanType_LoanTaxRateChanged                    LoanType = 19
	LoanType_LoanPenaltyRateChanged                LoanType = 20
	LoanType_LoanInterestApplied                   LoanType = 21
	LoanType_LoanInterestAppliedAdjustment         LoanType = 22
	LoanType_LoanInterestDueReduced                LoanType = 23
	LoanType_LoanPenaltyReductionAdjustment        LoanType = 24
	LoanType_LoanFeeReductionAdjustment            LoanType = 25
	LoanType_LoanInterestReductionAdjustment       LoanType = 26
	LoanType_LoanDeferredInterestApplied           LoanType = 27
	LoanType_LoanDeferredInterestAppliedAdjustment LoanType = 28
	LoanType_LoanDeferredInterestPaid              LoanType = 29
	LoanType_LoanDeferredInterestPaidAdjustment    LoanType = 30
	LoanType_LoanRedrawTransfer                    LoanType = 31
	LoanType_LoanRedrawRepayment                   LoanType = 32
	LoanType_LoanRedrawTransferAdjustment          LoanType = 33
	LoanType_LoanRedrawRepaymentAdjustment         LoanType = 34
	LoanType_LoanTransfer                          LoanType = 35
	LoanType_LoanTransferAdjustment                LoanType = 36
	LoanType_LoanBranchChanged                     LoanType = 37
	LoanType_LoanTermsChanged                      LoanType = 38
	LoanType_LoanCardTransactionReversal           LoanType = 39
	LoanType_LoanCardTransactionReversalAdjustment LoanType = 40
	LoanType_LoanDueDateChanged                    LoanType = 41
	LoanType_LoanDueDateChangedAdjustment          LoanType = 42
	LoanType_LoanAccountTerminated                 LoanType = 43
	LoanType_LoanAccountTerminatedAdjustment       LoanType = 44
)

// Enum value maps for LoanType.
var (
	LoanType_name = map[int32]string{
		0:  "LoanImport",
		1:  "LoanDisbursement",
		2:  "LoanDisbursementAdjustment",
		3:  "LoanWriteOff",
		4:  "LoanWriteOffAdjustment",
		5:  "LoanRepayment",
		6:  "LoanPaymentMade",
		7:  "LoanWithdrawalRedraw",
		8:  "LoanWithdrawalRedrawAdjustment",
		9:  "LoanFeeApplied",
		10: "LoanFeeCharged",
		11: "LoanFeesDueReduced",
		12: "LoanFeeAdjustment",
		13: "LoanPenaltyApplied",
		14: "LoanPenaltyAdjustment",
		15: "LoanPenaltiesDueReduced",
		16: "LoanRepaymentAdjustment",
		17: "LoanPaymentMadeAdjustment",
		18: "LoanInterestRateChanged",
		19: "LoanTaxRateChanged",
		20: "LoanPenaltyRateChanged",
		21: "LoanInterestApplied",
		22: "LoanInterestAppliedAdjustment",
		23: "LoanInterestDueReduced",
		24: "LoanPenaltyReductionAdjustment",
		25: "LoanFeeReductionAdjustment",
		26: "LoanInterestReductionAdjustment",
		27: "LoanDeferredInterestApplied",
		28: "LoanDeferredInterestAppliedAdjustment",
		29: "LoanDeferredInterestPaid",
		30: "LoanDeferredInterestPaidAdjustment",
		31: "LoanRedrawTransfer",
		32: "LoanRedrawRepayment",
		33: "LoanRedrawTransferAdjustment",
		34: "LoanRedrawRepaymentAdjustment",
		35: "LoanTransfer",
		36: "LoanTransferAdjustment",
		37: "LoanBranchChanged",
		38: "LoanTermsChanged",
		39: "LoanCardTransactionReversal",
		40: "LoanCardTransactionReversalAdjustment",
		41: "LoanDueDateChanged",
		42: "LoanDueDateChangedAdjustment",
		43: "LoanAccountTerminated",
		44: "LoanAccountTerminatedAdjustment",
	}
	LoanType_value = map[string]int32{
		"LoanImport":                            0,
		"LoanDisbursement":                      1,
		"LoanDisbursementAdjustment":            2,
		"LoanWriteOff":                          3,
		"LoanWriteOffAdjustment":                4,
		"LoanRepayment":                         5,
		"LoanPaymentMade":                       6,
		"LoanWithdrawalRedraw":                  7,
		"LoanWithdrawalRedrawAdjustment":        8,
		"LoanFeeApplied":                        9,
		"LoanFeeCharged":                        10,
		"LoanFeesDueReduced":                    11,
		"LoanFeeAdjustment":                     12,
		"LoanPenaltyApplied":                    13,
		"LoanPenaltyAdjustment":                 14,
		"LoanPenaltiesDueReduced":               15,
		"LoanRepaymentAdjustment":               16,
		"LoanPaymentMadeAdjustment":             17,
		"LoanInterestRateChanged":               18,
		"LoanTaxRateChanged":                    19,
		"LoanPenaltyRateChanged":                20,
		"LoanInterestApplied":                   21,
		"LoanInterestAppliedAdjustment":         22,
		"LoanInterestDueReduced":                23,
		"LoanPenaltyReductionAdjustment":        24,
		"LoanFeeReductionAdjustment":            25,
		"LoanInterestReductionAdjustment":       26,
		"LoanDeferredInterestApplied":           27,
		"LoanDeferredInterestAppliedAdjustment": 28,
		"LoanDeferredInterestPaid":              29,
		"LoanDeferredInterestPaidAdjustment":    30,
		"LoanRedrawTransfer":                    31,
		"LoanRedrawRepayment":                   32,
		"LoanRedrawTransferAdjustment":          33,
		"LoanRedrawRepaymentAdjustment":         34,
		"LoanTransfer":                          35,
		"LoanTransferAdjustment":                36,
		"LoanBranchChanged":                     37,
		"LoanTermsChanged":                      38,
		"LoanCardTransactionReversal":           39,
		"LoanCardTransactionReversalAdjustment": 40,
		"LoanDueDateChanged":                    41,
		"LoanDueDateChangedAdjustment":          42,
		"LoanAccountTerminated":                 43,
		"LoanAccountTerminatedAdjustment":       44,
	}
)

func (x LoanType) Enum() *LoanType {
	p := new(LoanType)
	*p = x
	return p
}

func (x LoanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoanType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_transactions_all_proto_enumTypes[3].Descriptor()
}

func (LoanType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_transactions_all_proto_enumTypes[3]
}

func (x LoanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoanType.Descriptor instead.
func (LoanType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{3}
}

// AffectedAmounts is the amounts affected by the transaction broken down.
type AffectedAmounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fees is the amount of fees in the transaction.
	Fees *v1.Amount `protobuf:"bytes,1,opt,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// Fraction is the fraction amount bought from another investor in the case
	// of LOAN_FRACTION_BOUGHT.
	Fraction float64 `protobuf:"fixed64,2,opt,name=Fraction,json=fraction,proto3" json:"fraction,omitempty"`
	// Funds is the amount of balance change involved in a transaction that
	// affects an account with positive balance.
	Funds *v1.Amount `protobuf:"bytes,3,opt,name=Funds,json=funds,proto3" json:"funds,omitempty"`
	// Interest is the amount of interest involved in a transaction that
	// affects an account with positive balance.
	Interest *v1.Amount `protobuf:"bytes,4,opt,name=Interest,json=interest,proto3" json:"interest,omitempty"`
	// Overdraft is the amount of money that was added/subtracted from the
	// account by this transaction as overdraft.
	Overdraft *v1.Amount `protobuf:"bytes,5,opt,name=Overdraft,json=overdraft,proto3" json:"overdraft,omitempty"`
	// OverdraftFees is the amount of fees in the transaction due to an
	// overdraft.
	OverdraftFees *v1.Amount `protobuf:"bytes,6,opt,name=OverdraftFees,json=overdraft_fees,proto3" json:"overdraft_fees,omitempty"`
	// OverdraftInterest is the amount of interest in the transaction due to an
	// overdraft.
	OverdraftInterest *v1.Amount `protobuf:"bytes,7,opt,name=OverdraftInterest,json=overdraft_interest,proto3" json:"overdraft_interest,omitempty"`
	// TechnicalOverdraft is the amount of money that was added/subtracted as
	// technical overdraft.
	TechnicalOverdraft *v1.Amount `protobuf:"bytes,8,opt,name=TechnicalOverdraft,json=technical_overdraft,proto3" json:"technical_overdraft,omitempty"`
	// TechnicalOverdraftInterest is the amount of money that was
	// added/subtracted as technical overdraft interest.
	TechnicalOverdraftInterest *v1.Amount `protobuf:"bytes,9,opt,name=TechnicalOverdraftInterest,json=technical_overdraft_interest,proto3" json:"technical_overdraft_interest,omitempty"`
}

func (x *AffectedAmounts) Reset() {
	*x = AffectedAmounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffectedAmounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffectedAmounts) ProtoMessage() {}

func (x *AffectedAmounts) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffectedAmounts.ProtoReflect.Descriptor instead.
func (*AffectedAmounts) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{0}
}

func (x *AffectedAmounts) GetFees() *v1.Amount {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *AffectedAmounts) GetFraction() float64 {
	if x != nil {
		return x.Fraction
	}
	return 0
}

func (x *AffectedAmounts) GetFunds() *v1.Amount {
	if x != nil {
		return x.Funds
	}
	return nil
}

func (x *AffectedAmounts) GetInterest() *v1.Amount {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *AffectedAmounts) GetOverdraft() *v1.Amount {
	if x != nil {
		return x.Overdraft
	}
	return nil
}

func (x *AffectedAmounts) GetOverdraftFees() *v1.Amount {
	if x != nil {
		return x.OverdraftFees
	}
	return nil
}

func (x *AffectedAmounts) GetOverdraftInterest() *v1.Amount {
	if x != nil {
		return x.OverdraftInterest
	}
	return nil
}

func (x *AffectedAmounts) GetTechnicalOverdraft() *v1.Amount {
	if x != nil {
		return x.TechnicalOverdraft
	}
	return nil
}

func (x *AffectedAmounts) GetTechnicalOverdraftInterest() *v1.Amount {
	if x != nil {
		return x.TechnicalOverdraftInterest
	}
	return nil
}

// InterestAccruedAmounts is the amount of accrued interest for an Interest
// Applied deposit transaction.
type InterestAccruedAmounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Accrued is the amount of positive interest accrued since last interest
	// application/activation date and applied.
	Accrued *v1.Amount `protobuf:"bytes,1,opt,name=Accrued,json=accrued,proto3" json:"accrued,omitempty"`
	// NegativeAccrued is the amount of negative interest accrued since last
	// interest application/activation date and applied.
	NegativeAccrued *v1.Amount `protobuf:"bytes,2,opt,name=NegativeAccrued,json=negative_accrued,proto3" json:"negative_accrued,omitempty"`
	// OverdraftAccrued is the amount of overdraft interest accrued since last
	// interest application/activation date and applied.
	OverdraftAccrued *v1.Amount `protobuf:"bytes,3,opt,name=OverdraftAccrued,json=overdraft_accrued,proto3" json:"overdraft_accrued,omitempty"`
	// TechnicalOverdraftAccrued is the amount of technical overdraft interest
	// accrued since last interest application/activation date and applied.
	TechnicalOverdraftAccrued *v1.Amount `protobuf:"bytes,4,opt,name=TechnicalOverdraftAccrued,json=technical_overdraft_accrued,proto3" json:"technical_overdraft_accrued,omitempty"`
}

func (x *InterestAccruedAmounts) Reset() {
	*x = InterestAccruedAmounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterestAccruedAmounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterestAccruedAmounts) ProtoMessage() {}

func (x *InterestAccruedAmounts) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterestAccruedAmounts.ProtoReflect.Descriptor instead.
func (*InterestAccruedAmounts) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{1}
}

func (x *InterestAccruedAmounts) GetAccrued() *v1.Amount {
	if x != nil {
		return x.Accrued
	}
	return nil
}

func (x *InterestAccruedAmounts) GetNegativeAccrued() *v1.Amount {
	if x != nil {
		return x.NegativeAccrued
	}
	return nil
}

func (x *InterestAccruedAmounts) GetOverdraftAccrued() *v1.Amount {
	if x != nil {
		return x.OverdraftAccrued
	}
	return nil
}

func (x *InterestAccruedAmounts) GetTechnicalOverdraftAccrued() *v1.Amount {
	if x != nil {
		return x.TechnicalOverdraftAccrued
	}
	return nil
}

// DepositTerm is the terms of the deposit transaction.
type DepositTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InterestRate is the interest rate that was set or changed in this
	// transaction.
	InterestRate float64 `protobuf:"fixed64,1,opt,name=InterestRate,json=interest_rate,proto3" json:"interest_rate,omitempty"`
	// IndexInterestRate is the index interest rate that was set or changed in
	// this transaction.
	IndexInterestRate float64 `protobuf:"fixed64,2,opt,name=IndexInterestRate,json=index_interest_rate,proto3" json:"index_interest_rate,omitempty"`
	// OverdraftLimit is the deposit overdraft limit.
	OverdraftLimit *v1.Amount `protobuf:"bytes,3,opt,name=OverdraftLimit,json=overdraft_limit,proto3" json:"overdraft_limit,omitempty"`
}

func (x *DepositTerm) Reset() {
	*x = DepositTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositTerm) ProtoMessage() {}

func (x *DepositTerm) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositTerm.ProtoReflect.Descriptor instead.
func (*DepositTerm) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{2}
}

func (x *DepositTerm) GetInterestRate() float64 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

func (x *DepositTerm) GetIndexInterestRate() float64 {
	if x != nil {
		return x.IndexInterestRate
	}
	return 0
}

func (x *DepositTerm) GetOverdraftLimit() *v1.Amount {
	if x != nil {
		return x.OverdraftLimit
	}
	return nil
}

// DepositTransaction is a transaction performed on a deposit account.
type DepositTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransactionID is the ID of the deposit transaction.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// UserID is the ID of the user performing the transaction.
	UserID string `protobuf:"bytes,2,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	// TotalChange is the total amount of balance changed in the transaction.
	TotalChange *v1.Amount `protobuf:"bytes,3,opt,name=TotalChange,json=total_change,proto3" json:"total_change,omitempty"`
	// AffectedAmounts is the amount of money affected by the transaction.
	AffectedAmounts *AffectedAmounts `protobuf:"bytes,4,opt,name=AffectedAmounts,json=affected_amounts,proto3" json:"affected_amounts,omitempty"`
	// AdjustmentTransactionID is the ID of the associated adjustment
	// transaction (if any adjustment was involved).
	AdjustmentTransactionID string `protobuf:"bytes,5,opt,name=AdjustmentTransactionID,json=adjustment_transaction_id,proto3" json:"adjustment_transaction_id,omitempty"`
	// BlockID is the ID of the block fund associated with the transaction.
	// TODO: Which table does this have a reference to.
	BlockID string `protobuf:"bytes,6,opt,name=BlockID,json=block_id,proto3" json:"block_id,omitempty"`
	// BranchID is the ID of the branch the transaction occurred at.
	BranchID string `protobuf:"bytes,7,opt,name=BranchID,json=branch_id,proto3" json:"branch_id,omitempty"`
	// CentreID is the ID of the centre the transaction occurred at.
	CentreID string `protobuf:"bytes,8,opt,name=CentreID,json=centre_id,proto3" json:"centre_id,omitempty"`
	// CardTransaction is the details of card transaction associated with the
	// transaction, if applicable.
	CardTransaction *cards.Transaction `protobuf:"bytes,9,opt,name=CardTransaction,json=card_transaction,proto3" json:"card_transaction,omitempty"`
	// ParentAccountID is the ID of the parent deposit account.
	ParentAccountID string `protobuf:"bytes,10,opt,name=ParentAccountID,json=parent_account_id,proto3" json:"parent_account_id,omitempty"`
	// Fees are all the fees that have been applied or paid within this
	// transaction.
	Fees []*TransactionFee `protobuf:"bytes,11,rep,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// InterestAccruedAmounts is the amount of interest accrued for Interest
	// Applied transactions.
	InterestAccruedAmounts *InterestAccruedAmounts `protobuf:"bytes,12,opt,name=InterestAccruedAmounts,json=interest_accrued_amounts,proto3" json:"interest_accrued_amounts,omitempty"`
	// MigrationEventID is the ID of the migration event associated with the
	// deposit account if it's imported.
	// TODO: Which table does this have a reference to.
	MigrationEventID string `protobuf:"bytes,13,opt,name=MigrationEventID,json=migration_event_id,proto3" json:"migration_event_id,omitempty"`
	// Notes is the extra human-readable notes for the transaction.
	Notes string `protobuf:"bytes,14,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// OriginalTransactionID is the ID of the transaction adjusted if this is
	// an adjustment transaction.
	OriginalTransactionID string `protobuf:"bytes,15,opt,name=OriginalTransactionID,json=original_transaction_id,proto3" json:"original_transaction_id,omitempty"`
	// Payment is the information of the account debited and credited.
	Payment *deposits.Payment `protobuf:"bytes,16,opt,name=Payment,json=payment,proto3" json:"payment,omitempty"`
	// OrderID is the ID of the payment order.
	// TODO: Which table does this have a reference to.
	OrderID string `protobuf:"bytes,17,opt,name=OrderID,json=order_id,proto3" json:"order_id,omitempty"`
	// TaxRate is the rate of tax applied to the transaction.
	TaxRate float64 `protobuf:"fixed64,18,opt,name=TaxRate,json=tax_rate,proto3" json:"tax_rate,omitempty"`
	// Terms is the terms of the transaction.
	Terms *DepositTerm `protobuf:"bytes,19,opt,name=Terms,json=terms,proto3" json:"terms,omitempty"`
	// TillID is the ID of the till associated with this transaction.
	// TODO: Which table does this have a reference to.
	TillID string `protobuf:"bytes,20,opt,name=TillID,json=till_id,proto3" json:"till_id,omitempty"`
	// ChannelID is the ID of the associated transaction channel.
	ChannelID string `protobuf:"bytes,21,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
	// TransferDetails is the details of the transfer.
	TransferDetails *TransferDetails `protobuf:"bytes,22,opt,name=TransferDetails,json=transfer_details,proto3" json:"transfer_details,omitempty"`
	// Type is the type of deposit transaction.
	Type DepositType `protobuf:"varint,23,opt,name=Type,json=type,proto3,enum=openbank.core.v1.transactions.DepositType" json:"type,omitempty"`
	// CreateTime is the time of creation of the transaction.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// ValueTime is the time when the transaction is executed.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
}

func (x *DepositTransaction) Reset() {
	*x = DepositTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositTransaction) ProtoMessage() {}

func (x *DepositTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositTransaction.ProtoReflect.Descriptor instead.
func (*DepositTransaction) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{3}
}

func (x *DepositTransaction) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *DepositTransaction) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DepositTransaction) GetTotalChange() *v1.Amount {
	if x != nil {
		return x.TotalChange
	}
	return nil
}

func (x *DepositTransaction) GetAffectedAmounts() *AffectedAmounts {
	if x != nil {
		return x.AffectedAmounts
	}
	return nil
}

func (x *DepositTransaction) GetAdjustmentTransactionID() string {
	if x != nil {
		return x.AdjustmentTransactionID
	}
	return ""
}

func (x *DepositTransaction) GetBlockID() string {
	if x != nil {
		return x.BlockID
	}
	return ""
}

func (x *DepositTransaction) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *DepositTransaction) GetCentreID() string {
	if x != nil {
		return x.CentreID
	}
	return ""
}

func (x *DepositTransaction) GetCardTransaction() *cards.Transaction {
	if x != nil {
		return x.CardTransaction
	}
	return nil
}

func (x *DepositTransaction) GetParentAccountID() string {
	if x != nil {
		return x.ParentAccountID
	}
	return ""
}

func (x *DepositTransaction) GetFees() []*TransactionFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *DepositTransaction) GetInterestAccruedAmounts() *InterestAccruedAmounts {
	if x != nil {
		return x.InterestAccruedAmounts
	}
	return nil
}

func (x *DepositTransaction) GetMigrationEventID() string {
	if x != nil {
		return x.MigrationEventID
	}
	return ""
}

func (x *DepositTransaction) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *DepositTransaction) GetOriginalTransactionID() string {
	if x != nil {
		return x.OriginalTransactionID
	}
	return ""
}

func (x *DepositTransaction) GetPayment() *deposits.Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *DepositTransaction) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *DepositTransaction) GetTaxRate() float64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

func (x *DepositTransaction) GetTerms() *DepositTerm {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *DepositTransaction) GetTillID() string {
	if x != nil {
		return x.TillID
	}
	return ""
}

func (x *DepositTransaction) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *DepositTransaction) GetTransferDetails() *TransferDetails {
	if x != nil {
		return x.TransferDetails
	}
	return nil
}

func (x *DepositTransaction) GetType() DepositType {
	if x != nil {
		return x.Type
	}
	return DepositType_DepositImport
}

func (x *DepositTransaction) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DepositTransaction) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *DepositTransaction) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

// BulkDepositTransaction is a transaction in a bulk operation.
type BulkDepositTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransactionID is the ID of the transaction.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// AccountID is the ID of the account.
	AccountID string `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Amount is the amount to deposit.
	Amount *v1.Amount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Notes is the extra human-readable notes for the transaction.
	Notes string `protobuf:"bytes,4,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// Payment is the information of the account debited and credited.
	Payment *deposits.Payment `protobuf:"bytes,5,opt,name=Payment,json=payment,proto3" json:"payment,omitempty"`
	// OrderID is the ID of the payment order.
	OrderID string `protobuf:"bytes,6,opt,name=OrderID,json=order_id,proto3" json:"order_id,omitempty"`
	// SkipValidation is a flag that disables maximum balance checks.
	SkipValidation bool `protobuf:"varint,7,opt,name=SkipValidation,json=skip_validation,proto3" json:"skip_validation,omitempty"`
	// ChannelID is the ID of the transaction channel.
	ChannelID string `protobuf:"bytes,8,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
}

func (x *BulkDepositTransaction) Reset() {
	*x = BulkDepositTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDepositTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDepositTransaction) ProtoMessage() {}

func (x *BulkDepositTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDepositTransaction.ProtoReflect.Descriptor instead.
func (*BulkDepositTransaction) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{4}
}

func (x *BulkDepositTransaction) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *BulkDepositTransaction) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *BulkDepositTransaction) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *BulkDepositTransaction) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *BulkDepositTransaction) GetPayment() *deposits.Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *BulkDepositTransaction) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *BulkDepositTransaction) GetSkipValidation() bool {
	if x != nil {
		return x.SkipValidation
	}
	return false
}

func (x *BulkDepositTransaction) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

// BulkDepositTransactions is a list of bulk deposit transactions.
type BulkDepositTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transactions is a list of bulk deposit transactions.
	Transactions []*BulkDepositTransaction `protobuf:"bytes,1,rep,name=Transactions,json=transactions,proto3" json:"transactions,omitempty"`
}

func (x *BulkDepositTransactions) Reset() {
	*x = BulkDepositTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDepositTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDepositTransactions) ProtoMessage() {}

func (x *BulkDepositTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDepositTransactions.ProtoReflect.Descriptor instead.
func (*BulkDepositTransactions) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{5}
}

func (x *BulkDepositTransactions) GetTransactions() []*BulkDepositTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// CreateBulkDepositRequest is a request to create a bulk deposit.
type CreateBulkDepositRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the list of deposit transactions to create.
	Body *BulkDepositTransactions `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateBulkDepositRequest) Reset() {
	*x = CreateBulkDepositRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBulkDepositRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBulkDepositRequest) ProtoMessage() {}

func (x *CreateBulkDepositRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBulkDepositRequest.ProtoReflect.Descriptor instead.
func (*CreateBulkDepositRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{6}
}

func (x *CreateBulkDepositRequest) GetBody() *BulkDepositTransactions {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewDepositTransaction is the data of a new deposit transaction.
type NewDepositTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransactionID is the ID of the transaction.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// Amount is the amount deposited.
	Amount *v1.Amount `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Notes is the extra human-readable notes for the transaction.
	Notes string `protobuf:"bytes,3,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// Payment is the information of the account debited and credited.
	Payment *deposits.Payment `protobuf:"bytes,4,opt,name=Payment,json=payment,proto3" json:"payment,omitempty"`
	// OrderID is the ID of the payment order.
	OrderID string `protobuf:"bytes,5,opt,name=OrderID,json=order_id,proto3" json:"order_id,omitempty"`
	// SkipValidation is a flag that disables maximum balance checks.
	SkipValidation bool `protobuf:"varint,6,opt,name=SkipValidation,json=skip_validation,proto3" json:"skip_validation,omitempty"`
	// ChannelID is the ID of the transaction channel.
	ChannelID string `protobuf:"bytes,7,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// ValueTime is the time when the transaction is executed.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
}

func (x *NewDepositTransaction) Reset() {
	*x = NewDepositTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDepositTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDepositTransaction) ProtoMessage() {}

func (x *NewDepositTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDepositTransaction.ProtoReflect.Descriptor instead.
func (*NewDepositTransaction) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{7}
}

func (x *NewDepositTransaction) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *NewDepositTransaction) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewDepositTransaction) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *NewDepositTransaction) GetPayment() *deposits.Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *NewDepositTransaction) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *NewDepositTransaction) GetSkipValidation() bool {
	if x != nil {
		return x.SkipValidation
	}
	return false
}

func (x *NewDepositTransaction) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *NewDepositTransaction) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *NewDepositTransaction) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

// CreateDepositRequest is a request to create a deposit.
type CreateDepositRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to create the transaction for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the deposit transaction to create.
	Body *NewDepositTransaction `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateDepositRequest) Reset() {
	*x = CreateDepositRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDepositRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDepositRequest) ProtoMessage() {}

func (x *CreateDepositRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDepositRequest.ProtoReflect.Descriptor instead.
func (*CreateDepositRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{8}
}

func (x *CreateDepositRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateDepositRequest) GetBody() *NewDepositTransaction {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewDepositAdjustment is the details of the deposit adjustment to make.
type NewDepositAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// Notes is the extra human-readable notes for the adjustment.
	Notes string `protobuf:"bytes,2,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
}

func (x *NewDepositAdjustment) Reset() {
	*x = NewDepositAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDepositAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDepositAdjustment) ProtoMessage() {}

func (x *NewDepositAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDepositAdjustment.ProtoReflect.Descriptor instead.
func (*NewDepositAdjustment) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{9}
}

func (x *NewDepositAdjustment) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *NewDepositAdjustment) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// AdjustDepositRequest is the request to adjust a deposit transaction.
type AdjustDepositRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to adjust the transaction for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// TransactionID is the ID of the transaction to adjust.
	TransactionID string `protobuf:"bytes,2,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// Body is the details for the adjustment.
	Body *NewDepositAdjustment `protobuf:"bytes,3,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *AdjustDepositRequest) Reset() {
	*x = AdjustDepositRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustDepositRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustDepositRequest) ProtoMessage() {}

func (x *AdjustDepositRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustDepositRequest.ProtoReflect.Descriptor instead.
func (*AdjustDepositRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{10}
}

func (x *AdjustDepositRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *AdjustDepositRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *AdjustDepositRequest) GetBody() *NewDepositAdjustment {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewDepositFee is the data of a new fee transaction.
type NewDepositFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransactionID is the ID of the transaction.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// FeeID is the ID of the fee that was predefined that this transaction is
	// based on.
	FeeID string `protobuf:"bytes,2,opt,name=FeeID,json=fee_id,proto3" json:"fee_id,omitempty"`
	// Amount is the value of the transaction.
	Amount *v1.Amount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Notes is extra user-readable details about the current transaction.
	Notes string `protobuf:"bytes,4,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
}

func (x *NewDepositFee) Reset() {
	*x = NewDepositFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDepositFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDepositFee) ProtoMessage() {}

func (x *NewDepositFee) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDepositFee.ProtoReflect.Descriptor instead.
func (*NewDepositFee) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{11}
}

func (x *NewDepositFee) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *NewDepositFee) GetFeeID() string {
	if x != nil {
		return x.FeeID
	}
	return ""
}

func (x *NewDepositFee) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewDepositFee) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *NewDepositFee) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

// CreateDepositFeeRequest is the request to create a transaction of type
// FEE_APPLIED.
type CreateDepositFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to create the transaction for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the fee transaction to create.
	Body *NewDepositFee `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateDepositFeeRequest) Reset() {
	*x = CreateDepositFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDepositFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDepositFeeRequest) ProtoMessage() {}

func (x *CreateDepositFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDepositFeeRequest.ProtoReflect.Descriptor instead.
func (*CreateDepositFeeRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{12}
}

func (x *CreateDepositFeeRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateDepositFeeRequest) GetBody() *NewDepositFee {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewSeizeBlock is the data of a new seize block.
type NewSeizeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SeizeID is the ID of the seize block.
	SeizeID string `protobuf:"bytes,1,opt,name=SeizeID,json=seize_id,proto3" json:"seize_id,omitempty"`
	// BlockID is the ID of the block fund to seize.
	BlockID string `protobuf:"bytes,2,opt,name=BlockID,json=block_id,proto3" json:"block_id,omitempty"`
	// ChannelID is the ID of the transaction channel.
	ChannelID string `protobuf:"bytes,3,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
	// Amount is the amount to seize.
	Amount *v1.Amount `protobuf:"bytes,4,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Notes is the extra human-readable notes for the seize.
	Notes string `protobuf:"bytes,5,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
}

func (x *NewSeizeBlock) Reset() {
	*x = NewSeizeBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSeizeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSeizeBlock) ProtoMessage() {}

func (x *NewSeizeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSeizeBlock.ProtoReflect.Descriptor instead.
func (*NewSeizeBlock) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{13}
}

func (x *NewSeizeBlock) GetSeizeID() string {
	if x != nil {
		return x.SeizeID
	}
	return ""
}

func (x *NewSeizeBlock) GetBlockID() string {
	if x != nil {
		return x.BlockID
	}
	return ""
}

func (x *NewSeizeBlock) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *NewSeizeBlock) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewSeizeBlock) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// CreateSeizureRequest is a request to create a new seizure block.
type CreateSeizureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to create the seizure block for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the new seize block to create.
	Body *NewSeizeBlock `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateSeizureRequest) Reset() {
	*x = CreateSeizureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeizureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeizureRequest) ProtoMessage() {}

func (x *CreateSeizureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeizureRequest.ProtoReflect.Descriptor instead.
func (*CreateSeizureRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{14}
}

func (x *CreateSeizureRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateSeizureRequest) GetBody() *NewSeizeBlock {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewTransferTransaction is the data of a new transfer transaction.
type NewTransferTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransactionID is the ID of the transaction.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// Amount is the amount to transfer.
	Amount *v1.Amount `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Notes is the extra human-readable notes for the transaction.
	Notes string `protobuf:"bytes,3,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// Payment is the information of the account debited and credited.
	Payment *deposits.Payment `protobuf:"bytes,4,opt,name=Payment,json=payment,proto3" json:"payment,omitempty"`
	// OrderID is the ID of the payment order.
	OrderID string `protobuf:"bytes,5,opt,name=OrderID,json=order_id,proto3" json:"order_id,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// ValueTime is the time when the transaction is executed.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
}

func (x *NewTransferTransaction) Reset() {
	*x = NewTransferTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTransferTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTransferTransaction) ProtoMessage() {}

func (x *NewTransferTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTransferTransaction.ProtoReflect.Descriptor instead.
func (*NewTransferTransaction) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{15}
}

func (x *NewTransferTransaction) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *NewTransferTransaction) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewTransferTransaction) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *NewTransferTransaction) GetPayment() *deposits.Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *NewTransferTransaction) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *NewTransferTransaction) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *NewTransferTransaction) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

// CreateTransferRequest is a request to create a transfer transaction.
type CreateTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to create the transaction for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the transfer transaction to create.
	Body *NewTransferTransaction `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateTransferRequest) Reset() {
	*x = CreateTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferRequest) ProtoMessage() {}

func (x *CreateTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferRequest.ProtoReflect.Descriptor instead.
func (*CreateTransferRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{16}
}

func (x *CreateTransferRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateTransferRequest) GetBody() *NewTransferTransaction {
	if x != nil {
		return x.Body
	}
	return nil
}

// GetDocumentRequest is a request to retrieve a document.
type GetDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to retrieve the document for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// TransactionID is the ID of the transaction.
	TransactionID string `protobuf:"bytes,2,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// TemplateID is the ID of the template to use to generate the document.
	TemplateID string `protobuf:"bytes,3,opt,name=TemplateID,json=template_id,proto3" json:"template_id,omitempty"`
}

func (x *GetDocumentRequest) Reset() {
	*x = GetDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentRequest) ProtoMessage() {}

func (x *GetDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{17}
}

func (x *GetDocumentRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetDocumentRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *GetDocumentRequest) GetTemplateID() string {
	if x != nil {
		return x.TemplateID
	}
	return ""
}

// ListDepositTransactionsRequest is a request to retrieve a list of deposit
// transactions.
type ListDepositTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to retrieve the transactions for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// PageToken is the page token to use for the next page.
	PageToken string `protobuf:"bytes,2,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of accounts to return.
	PageSize int32 `protobuf:"varint,3,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// Filter is the filter to apply to the list.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
	// OrderBy is the field to order the list by.
	OrderBy string `protobuf:"bytes,5,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
}

func (x *ListDepositTransactionsRequest) Reset() {
	*x = ListDepositTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDepositTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDepositTransactionsRequest) ProtoMessage() {}

func (x *ListDepositTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDepositTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListDepositTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{18}
}

func (x *ListDepositTransactionsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListDepositTransactionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDepositTransactionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDepositTransactionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDepositTransactionsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListDepositTransactionsResponse is the response to retrieving a list of
// deposit transactions.
type ListDepositTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of deposit transactions matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of deposit transactions remaining in the list,
	// including the deposit transactions in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Transactions is the list of deposit transactions retrieved.
	Transactions []*DepositTransaction `protobuf:"bytes,3,rep,name=Transactions,json=transactions,proto3" json:"transactions,omitempty"`
	// NextPageToken is the page token for the next page.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDepositTransactionsResponse) Reset() {
	*x = ListDepositTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDepositTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDepositTransactionsResponse) ProtoMessage() {}

func (x *ListDepositTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDepositTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListDepositTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{19}
}

func (x *ListDepositTransactionsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListDepositTransactionsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListDepositTransactionsResponse) GetTransactions() []*DepositTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ListDepositTransactionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetDepositTransactionRequest is a request to retrieve a list of deposit
// transactions.
type GetDepositTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to retrieve the transaction for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// TransactionID is the id of deposit transaction to retrieve.
	TransactionID string `protobuf:"bytes,2,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
}

func (x *GetDepositTransactionRequest) Reset() {
	*x = GetDepositTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDepositTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDepositTransactionRequest) ProtoMessage() {}

func (x *GetDepositTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDepositTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetDepositTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{20}
}

func (x *GetDepositTransactionRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetDepositTransactionRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

// TransactionBalances is the balances changed in the loan transaction.
type TransactionBalances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AdvancePosition is the advance (prepaid) amount.
	AdvancePosition *v1.Amount `protobuf:"bytes,1,opt,name=AdvancePosition,json=advance_position,proto3" json:"advance_position,omitempty"`
	// ArrearsPosition is the arrears position amount for the account in
	// arrears.
	ArrearsPosition *v1.Amount `protobuf:"bytes,2,opt,name=ArrearsPosition,json=arrears_position,proto3" json:"arrears_position,omitempty"`
	// ExpectedPrincipalRedraw is the difference between principal balance and
	// redraw balance after each transaction performed on the loan account.
	ExpectedPrincipalRedraw *v1.Amount `protobuf:"bytes,3,opt,name=ExpectedPrincipalRedraw,json=expected_principal_redraw,proto3" json:"expected_principal_redraw,omitempty"`
	// Principal is the account redraw balance after the transaction.
	Principal *v1.Amount `protobuf:"bytes,4,opt,name=Principal,json=principal,proto3" json:"principal,omitempty"`
	// Redraw is the account redraw balance after the transaction
	// update.
	Redraw *v1.Amount `protobuf:"bytes,5,opt,name=Redraw,json=redraw,proto3" json:"redraw,omitempty"`
	// Total is the running balance still owed for the loan.
	Total *v1.Amount `protobuf:"bytes,6,opt,name=Total,json=total,proto3" json:"total,omitempty"`
}

func (x *TransactionBalances) Reset() {
	*x = TransactionBalances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBalances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBalances) ProtoMessage() {}

func (x *TransactionBalances) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBalances.ProtoReflect.Descriptor instead.
func (*TransactionBalances) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{21}
}

func (x *TransactionBalances) GetAdvancePosition() *v1.Amount {
	if x != nil {
		return x.AdvancePosition
	}
	return nil
}

func (x *TransactionBalances) GetArrearsPosition() *v1.Amount {
	if x != nil {
		return x.ArrearsPosition
	}
	return nil
}

func (x *TransactionBalances) GetExpectedPrincipalRedraw() *v1.Amount {
	if x != nil {
		return x.ExpectedPrincipalRedraw
	}
	return nil
}

func (x *TransactionBalances) GetPrincipal() *v1.Amount {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *TransactionBalances) GetRedraw() *v1.Amount {
	if x != nil {
		return x.Redraw
	}
	return nil
}

func (x *TransactionBalances) GetTotal() *v1.Amount {
	if x != nil {
		return x.Total
	}
	return nil
}

// LoanAffectedAmounts is a collection of amounts affected by the loan transaction.
type LoanAffectedAmounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DeferredInterest is the amount of pre-paid interest added/removed.
	DeferredInterest *v1.Amount `protobuf:"bytes,1,opt,name=DeferredInterest,json=deferred_interest,proto3" json:"deferred_interest,omitempty"`
	// Fees is the amount of fees added/removed.
	Fees *v1.Amount `protobuf:"bytes,2,opt,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// FundersInterest is the amount of interest given to investors, in
	// P2P products.
	FundersInterest *v1.Amount `protobuf:"bytes,3,opt,name=FundersInterest,json=funders_interest,proto3" json:"funders_interest,omitempty"`
	// OrganizationCommission is the amount of interest paid to the
	// organization, in P2P products.
	OrganizationCommission *v1.Amount `protobuf:"bytes,4,opt,name=OrganizationCommission,json=organization_commission,proto3" json:"organization_commission,omitempty"`
	// Interest is the amount of interest added/removed. Taxes and
	// DeferredInterest is included.
	Interest *v1.Amount `protobuf:"bytes,5,opt,name=Interest,json=interest,proto3" json:"interest,omitempty"`
	// InterestFromArrears is the amount of interest from arrears.
	InterestFromArrears *v1.Amount `protobuf:"bytes,6,opt,name=InterestFromArrears,json=interest_from_arrears,proto3" json:"interest_from_arrears,omitempty"`
	// PaymentHolidaysInterest is the amount of Payment Holidays interest was added/removed in account.
	PaymentHolidaysInterest *v1.Amount `protobuf:"bytes,7,opt,name=PaymentHolidaysInterest,json=payment_holidays_interest,proto3" json:"payment_holidays_interest,omitempty"`
	// Penalty is the amount of penalties added/removed from the account.
	Penalty *v1.Amount `protobuf:"bytes,8,opt,name=Penalty,json=penalty,proto3" json:"penalty,omitempty"`
	// Principal is the amount of principal added/removed.
	Principal *v1.Amount `protobuf:"bytes,9,opt,name=Principal,json=principal,proto3" json:"principal,omitempty"`
}

func (x *LoanAffectedAmounts) Reset() {
	*x = LoanAffectedAmounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoanAffectedAmounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoanAffectedAmounts) ProtoMessage() {}

func (x *LoanAffectedAmounts) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoanAffectedAmounts.ProtoReflect.Descriptor instead.
func (*LoanAffectedAmounts) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{22}
}

func (x *LoanAffectedAmounts) GetDeferredInterest() *v1.Amount {
	if x != nil {
		return x.DeferredInterest
	}
	return nil
}

func (x *LoanAffectedAmounts) GetFees() *v1.Amount {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *LoanAffectedAmounts) GetFundersInterest() *v1.Amount {
	if x != nil {
		return x.FundersInterest
	}
	return nil
}

func (x *LoanAffectedAmounts) GetOrganizationCommission() *v1.Amount {
	if x != nil {
		return x.OrganizationCommission
	}
	return nil
}

func (x *LoanAffectedAmounts) GetInterest() *v1.Amount {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *LoanAffectedAmounts) GetInterestFromArrears() *v1.Amount {
	if x != nil {
		return x.InterestFromArrears
	}
	return nil
}

func (x *LoanAffectedAmounts) GetPaymentHolidaysInterest() *v1.Amount {
	if x != nil {
		return x.PaymentHolidaysInterest
	}
	return nil
}

func (x *LoanAffectedAmounts) GetPenalty() *v1.Amount {
	if x != nil {
		return x.Penalty
	}
	return nil
}

func (x *LoanAffectedAmounts) GetPrincipal() *v1.Amount {
	if x != nil {
		return x.Principal
	}
	return nil
}

// CustomPaymentAmount is one instance of custom payment.
type CustomPaymentAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the type of the payment.
	Type PaymentType `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=openbank.core.v1.transactions.PaymentType" json:"type,omitempty"`
	// FeeID is the ID of the predefined fee.
	FeeID string `protobuf:"bytes,2,opt,name=FeeID,json=fee_id,proto3" json:"fee_id,omitempty"`
	// Amount is the amount of payment paid in the transaction.
	Amount *v1.Amount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// TaxOnAmount is the amount of taxes paid in the transaction.
	TaxOnAmount *v1.Amount `protobuf:"bytes,4,opt,name=TaxOnAmount,json=tax_on_amount,proto3" json:"tax_on_amount,omitempty"`
}

func (x *CustomPaymentAmount) Reset() {
	*x = CustomPaymentAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPaymentAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPaymentAmount) ProtoMessage() {}

func (x *CustomPaymentAmount) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPaymentAmount.ProtoReflect.Descriptor instead.
func (*CustomPaymentAmount) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{23}
}

func (x *CustomPaymentAmount) GetType() PaymentType {
	if x != nil {
		return x.Type
	}
	return PaymentType_PaymentPrincipal
}

func (x *CustomPaymentAmount) GetFeeID() string {
	if x != nil {
		return x.FeeID
	}
	return ""
}

func (x *CustomPaymentAmount) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *CustomPaymentAmount) GetTaxOnAmount() *v1.Amount {
	if x != nil {
		return x.TaxOnAmount
	}
	return nil
}

// Taxes is the taxes applied within a transaction.
type Taxes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DeferredTaxOnInterestAmount is the amount of taxes on the interest that
	// was pre-paid were added/removed in account. It includes deferred tax.
	DeferredTaxOnInterestAmount *v1.Amount `protobuf:"bytes,1,opt,name=DeferredTaxOnInterestAmount,json=deferred_tax_on_interest_amount,proto3" json:"deferred_tax_on_interest_amount,omitempty"`
	// TaxOnFeesAmount is the amount of taxes on the fees that were paid in
	// this transaction.
	TaxOnFeesAmount *v1.Amount `protobuf:"bytes,2,opt,name=TaxOnFeesAmount,json=tax_on_fees_amount,proto3" json:"tax_on_fees_amount,omitempty"`
	// TaxOnInterestAmount is the amount of taxes on the interest that was paid
	// in this transaction.
	TaxOnInterestAmount *v1.Amount `protobuf:"bytes,3,opt,name=TaxOnInterestAmount,json=tax_on_interest_amount,proto3" json:"tax_on_interest_amount,omitempty"`
	// TaxOnInterestFromArrearsAmount is the amount of taxes on the interest
	// from arrears.
	TaxOnInterestFromArrearsAmount *v1.Amount `protobuf:"bytes,4,opt,name=TaxOnInterestFromArrearsAmount,json=tax_on_interest_from_arrears_amount,proto3" json:"tax_on_interest_from_arrears_amount,omitempty"`
	// TaxOnPaymentHolidaysInterest is the amount of taxes on the Payment
	// Holidays interest.
	TaxOnPaymentHolidaysInterest *v1.Amount `protobuf:"bytes,5,opt,name=TaxOnPaymentHolidaysInterest,json=tax_on_payment_holidays_interest,proto3" json:"tax_on_payment_holidays_interest,omitempty"`
	// TaxOnPenaltyAmount is the amount of taxes on the penalties.
	TaxOnPenaltyAmount *v1.Amount `protobuf:"bytes,6,opt,name=TaxOnPenaltyAmount,json=tax_on_penalty_amount,proto3" json:"tax_on_penalty_amount,omitempty"`
	// TaxRate is the new tax rate on the transaction if it has been changed.
	TaxRate float64 `protobuf:"fixed64,7,opt,name=TaxRate,json=tax_rate,proto3" json:"tax_rate,omitempty"`
}

func (x *Taxes) Reset() {
	*x = Taxes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taxes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taxes) ProtoMessage() {}

func (x *Taxes) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taxes.ProtoReflect.Descriptor instead.
func (*Taxes) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{24}
}

func (x *Taxes) GetDeferredTaxOnInterestAmount() *v1.Amount {
	if x != nil {
		return x.DeferredTaxOnInterestAmount
	}
	return nil
}

func (x *Taxes) GetTaxOnFeesAmount() *v1.Amount {
	if x != nil {
		return x.TaxOnFeesAmount
	}
	return nil
}

func (x *Taxes) GetTaxOnInterestAmount() *v1.Amount {
	if x != nil {
		return x.TaxOnInterestAmount
	}
	return nil
}

func (x *Taxes) GetTaxOnInterestFromArrearsAmount() *v1.Amount {
	if x != nil {
		return x.TaxOnInterestFromArrearsAmount
	}
	return nil
}

func (x *Taxes) GetTaxOnPaymentHolidaysInterest() *v1.Amount {
	if x != nil {
		return x.TaxOnPaymentHolidaysInterest
	}
	return nil
}

func (x *Taxes) GetTaxOnPenaltyAmount() *v1.Amount {
	if x != nil {
		return x.TaxOnPenaltyAmount
	}
	return nil
}

func (x *Taxes) GetTaxRate() float64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

// TransactionInterestSettings is the settings for the interests and holds all
// the properties regarding interests.
type TransactionInterestSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IndexInterestRate is the rate of index interest.
	IndexInterestRate float64 `protobuf:"fixed64,1,opt,name=IndexInterestRate,json=index_interest_rate,proto3" json:"index_interest_rate,omitempty"`
	// InterestRate is the rate of interest.
	// The interest on loans is accrued on a daily basis, which allows charging
	// the clients only for the days they actually used the loan amount.
	InterestRate float64 `protobuf:"fixed64,2,opt,name=InterestRate,json=interest_rate,proto3" json:"interest_rate,omitempty"`
}

func (x *TransactionInterestSettings) Reset() {
	*x = TransactionInterestSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInterestSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInterestSettings) ProtoMessage() {}

func (x *TransactionInterestSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInterestSettings.ProtoReflect.Descriptor instead.
func (*TransactionInterestSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{25}
}

func (x *TransactionInterestSettings) GetIndexInterestRate() float64 {
	if x != nil {
		return x.IndexInterestRate
	}
	return 0
}

func (x *TransactionInterestSettings) GetInterestRate() float64 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

// LoanTerm is the terms of the loan.
type LoanTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InterestSettings is the settings for the interests and holds all the
	// properties regarding interests.
	InterestSettings *TransactionInterestSettings `protobuf:"bytes,1,opt,name=InterestSettings,json=interest_settings,proto3" json:"interest_settings,omitempty"`
	// PeriodicPayment is the last known periodic payment value.
	PeriodicPayment *v1.Amount `protobuf:"bytes,2,opt,name=PeriodicPayment,json=periodic_payment,proto3" json:"periodic_payment,omitempty"`
	// PrincipalPaymentAmount is the last known principal payment flat amount.
	PrincipalPaymentAmount *v1.Amount `protobuf:"bytes,3,opt,name=PrincipalPaymentAmount,json=principal_payment_amount,proto3" json:"principal_payment_amount,omitempty"`
	// PrincipalPaymentPercentage is the last known principal payment
	// percentage.
	PrincipalPaymentPercentage float64 `protobuf:"fixed64,4,opt,name=PrincipalPaymentPercentage,json=principal_payment_percentage,proto3" json:"principal_payment_percentage,omitempty"`
}

func (x *LoanTerm) Reset() {
	*x = LoanTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoanTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoanTerm) ProtoMessage() {}

func (x *LoanTerm) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoanTerm.ProtoReflect.Descriptor instead.
func (*LoanTerm) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{26}
}

func (x *LoanTerm) GetInterestSettings() *TransactionInterestSettings {
	if x != nil {
		return x.InterestSettings
	}
	return nil
}

func (x *LoanTerm) GetPeriodicPayment() *v1.Amount {
	if x != nil {
		return x.PeriodicPayment
	}
	return nil
}

func (x *LoanTerm) GetPrincipalPaymentAmount() *v1.Amount {
	if x != nil {
		return x.PrincipalPaymentAmount
	}
	return nil
}

func (x *LoanTerm) GetPrincipalPaymentPercentage() float64 {
	if x != nil {
		return x.PrincipalPaymentPercentage
	}
	return 0
}

// LoanTransaction is a transaction on a loan account.
type LoanTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransactionID is the ID of the transaction.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// UserID is the ID of the user performing the transaction.
	UserID string `protobuf:"bytes,2,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	// Type is the type of loan transaction.
	Type LoanType `protobuf:"varint,3,opt,name=Type,json=type,proto3,enum=openbank.core.v1.transactions.LoanType" json:"type,omitempty"`
	// AccountBalances is the balances changed by the transaction.
	AccountBalances *TransactionBalances `protobuf:"bytes,4,opt,name=AccountBalances,json=account_balances,proto3" json:"account_balances,omitempty"`
	// AdjustmentTransactionID is the ID of the transaction adjusted.
	AdjustmentTransactionID string `protobuf:"bytes,5,opt,name=AdjustmentTransactionID,json=adjustment_transaction_id,proto3" json:"adjustment_transaction_id,omitempty"`
	// AffectedAmounts is the amount of money affected by the transaction.
	AffectedAmounts *LoanAffectedAmounts `protobuf:"bytes,6,opt,name=AffectedAmounts,json=affected_amounts,proto3" json:"affected_amounts,omitempty"`
	// Amount is the amount of money affected by the transaction.
	Amount *v1.Amount `protobuf:"bytes,7,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// CardTransaction is the card transaction that is associated with the
	// transaction.
	CardTransaction *cards.Transaction `protobuf:"bytes,8,opt,name=CardTransaction,json=card_transaction,proto3" json:"card_transaction,omitempty"`
	// BranchID is the ID of the branch the transaction occurred at.
	BranchID string `protobuf:"bytes,9,opt,name=BranchID,json=branch_id,proto3" json:"branch_id,omitempty"`
	// CentreID is the ID of the centre the transaction occurred at.
	CentreID string `protobuf:"bytes,10,opt,name=CentreID,json=centre_id,proto3" json:"centre_id,omitempty"`
	// CustomPaymentAmounts is the list of custom payments made by the user.
	CustomPaymentAmounts []*CustomPaymentAmount `protobuf:"bytes,11,rep,name=CustomPaymentAmounts,json=custom_payment_amounts,proto3" json:"custom_payment_amounts,omitempty"`
	// Fees are all the fees that have been applied or paid within this
	// transaction.
	Fees []*TransactionFee `protobuf:"bytes,12,rep,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// InstallmentID is the ID of the installment the transaction is for.
	// TODO: Which table does this have a reference to.
	InstallmentID string `protobuf:"bytes,13,opt,name=InstallmentID,json=installment_id,proto3" json:"installment_id,omitempty"`
	// MigrationEventID is the ID of the migration event associated with the
	// deposit account if it's imported.
	// TODO: Which table does this have a reference to.
	MigrationEventID string `protobuf:"bytes,14,opt,name=MigrationEventID,json=migration_event_id,proto3" json:"migration_event_id,omitempty"`
	// Notes is the extra human-readable notes for the transaction.
	Notes string `protobuf:"bytes,15,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// OriginalAmount is the original amount of money when it was posted in a
	// foreign currency.
	OriginalAmount *v1.Amount `protobuf:"bytes,16,opt,name=OriginalAmount,json=original_amount,proto3" json:"original_amount,omitempty"`
	// OriginalTransactionID is the ID of the transaction adjusted if this is
	// an adjustment transaciton.
	OriginalTransactionID string `protobuf:"bytes,17,opt,name=OriginalTransactionID,json=original_transaction_id,proto3" json:"original_transaction_id,omitempty"`
	// ParentAccountID is the ID of the parent loan account.
	ParentAccountID string `protobuf:"bytes,18,opt,name=ParentAccountID,json=parent_account_id,proto3" json:"parent_account_id,omitempty"`
	// ParentLoanTransactionID is the ID of the parent loan transaction.
	ParentLoanTransactionID string `protobuf:"bytes,19,opt,name=ParentLoanTransactionID,json=parent_loan_transaction_id,proto3" json:"parent_loan_transaction_id,omitempty"`
	// RecalculationMethod is the method prepayment recalculation is done.
	RecalculationMethod CalculationMethod `protobuf:"varint,20,opt,name=RecalculationMethod,json=recalculation_method,proto3,enum=openbank.core.v1.transactions.CalculationMethod" json:"recalculation_method,omitempty"`
	// Taxes is the amount of taxes applied to the transaction.
	Taxes *Taxes `protobuf:"bytes,21,opt,name=Taxes,json=taxes,proto3" json:"taxes,omitempty"`
	// Terms is the terms of the loan.
	Terms *LoanTerm `protobuf:"bytes,22,opt,name=Terms,json=terms,proto3" json:"terms,omitempty"`
	// TillID is the ID of the till associated with this transaction.
	// TODO: Which table does this have a reference to.
	TillID string `protobuf:"bytes,23,opt,name=TillID,json=till_id,proto3" json:"till_id,omitempty"`
	// ChannelID is the ID of the associated transaction channel.
	ChannelID string `protobuf:"bytes,24,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
	// TransferDetails is the details of the transfer.
	TransferDetails *TransferDetails `protobuf:"bytes,25,opt,name=TransferDetails,json=transfer_details,proto3" json:"transfer_details,omitempty"`
	// CreateTime is the time of creation of the transaction.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// ValueTime is the time when the transaction is executed.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
}

func (x *LoanTransaction) Reset() {
	*x = LoanTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoanTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoanTransaction) ProtoMessage() {}

func (x *LoanTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoanTransaction.ProtoReflect.Descriptor instead.
func (*LoanTransaction) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{27}
}

func (x *LoanTransaction) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *LoanTransaction) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *LoanTransaction) GetType() LoanType {
	if x != nil {
		return x.Type
	}
	return LoanType_LoanImport
}

func (x *LoanTransaction) GetAccountBalances() *TransactionBalances {
	if x != nil {
		return x.AccountBalances
	}
	return nil
}

func (x *LoanTransaction) GetAdjustmentTransactionID() string {
	if x != nil {
		return x.AdjustmentTransactionID
	}
	return ""
}

func (x *LoanTransaction) GetAffectedAmounts() *LoanAffectedAmounts {
	if x != nil {
		return x.AffectedAmounts
	}
	return nil
}

func (x *LoanTransaction) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *LoanTransaction) GetCardTransaction() *cards.Transaction {
	if x != nil {
		return x.CardTransaction
	}
	return nil
}

func (x *LoanTransaction) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *LoanTransaction) GetCentreID() string {
	if x != nil {
		return x.CentreID
	}
	return ""
}

func (x *LoanTransaction) GetCustomPaymentAmounts() []*CustomPaymentAmount {
	if x != nil {
		return x.CustomPaymentAmounts
	}
	return nil
}

func (x *LoanTransaction) GetFees() []*TransactionFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *LoanTransaction) GetInstallmentID() string {
	if x != nil {
		return x.InstallmentID
	}
	return ""
}

func (x *LoanTransaction) GetMigrationEventID() string {
	if x != nil {
		return x.MigrationEventID
	}
	return ""
}

func (x *LoanTransaction) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *LoanTransaction) GetOriginalAmount() *v1.Amount {
	if x != nil {
		return x.OriginalAmount
	}
	return nil
}

func (x *LoanTransaction) GetOriginalTransactionID() string {
	if x != nil {
		return x.OriginalTransactionID
	}
	return ""
}

func (x *LoanTransaction) GetParentAccountID() string {
	if x != nil {
		return x.ParentAccountID
	}
	return ""
}

func (x *LoanTransaction) GetParentLoanTransactionID() string {
	if x != nil {
		return x.ParentLoanTransactionID
	}
	return ""
}

func (x *LoanTransaction) GetRecalculationMethod() CalculationMethod {
	if x != nil {
		return x.RecalculationMethod
	}
	return CalculationMethod_NoRecalculation
}

func (x *LoanTransaction) GetTaxes() *Taxes {
	if x != nil {
		return x.Taxes
	}
	return nil
}

func (x *LoanTransaction) GetTerms() *LoanTerm {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *LoanTransaction) GetTillID() string {
	if x != nil {
		return x.TillID
	}
	return ""
}

func (x *LoanTransaction) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *LoanTransaction) GetTransferDetails() *TransferDetails {
	if x != nil {
		return x.TransferDetails
	}
	return nil
}

func (x *LoanTransaction) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *LoanTransaction) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *LoanTransaction) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

// NewInstallment is the details of a new loan installment.
type NewInstallment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InstallmentID is the ID of the installment.
	InstallmentID string `protobuf:"bytes,1,opt,name=InstallmentID,json=installment_id,proto3" json:"installment_id,omitempty"`
	// AmountToAdd is the amount to add to the due amount.
	AmountToAdd *v1.Amount `protobuf:"bytes,2,opt,name=AmountToAdd,json=amount_to_add,proto3" json:"amount_to_add,omitempty"`
}

func (x *NewInstallment) Reset() {
	*x = NewInstallment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewInstallment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewInstallment) ProtoMessage() {}

func (x *NewInstallment) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewInstallment.ProtoReflect.Descriptor instead.
func (*NewInstallment) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{28}
}

func (x *NewInstallment) GetInstallmentID() string {
	if x != nil {
		return x.InstallmentID
	}
	return ""
}

func (x *NewInstallment) GetAmountToAdd() *v1.Amount {
	if x != nil {
		return x.AmountToAdd
	}
	return nil
}

// DisbursementFee is the amount of fees applied from a disbursement.
type DisbursementFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FeeID is the ID of the predefined fee.
	FeeID string `protobuf:"bytes,1,opt,name=FeeID,json=fee_id,proto3" json:"fee_id,omitempty"`
	// Amount is the amount of fees to apply.
	Amount *v1.Amount `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *DisbursementFee) Reset() {
	*x = DisbursementFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisbursementFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisbursementFee) ProtoMessage() {}

func (x *DisbursementFee) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisbursementFee.ProtoReflect.Descriptor instead.
func (*DisbursementFee) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{29}
}

func (x *DisbursementFee) GetFeeID() string {
	if x != nil {
		return x.FeeID
	}
	return ""
}

func (x *DisbursementFee) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// NewDisbursement is the request body to create a transaction of type
// DISBURSEMENT.
type NewDisbursement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the value of the transaction.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// ExternalID is the user-provided ID of the transaction, must be globally
	// unique.
	ExternalID string `protobuf:"bytes,2,opt,name=ExternalID,json=external_id,proto3" json:"external_id,omitempty"`
	// Fees is the list of fees associated with the transaction.
	Fees []*DisbursementFee `protobuf:"bytes,3,rep,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// Notes is extra user-readable details about the current transaction.
	Notes string `protobuf:"bytes,4,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// OriginalCurrencyCode is the code of the currency the payment is made in.
	OriginalCurrencyCode string `protobuf:"bytes,5,opt,name=OriginalCurrencyCode,json=original_currency_code,proto3" json:"original_currency_code,omitempty"`
	// ChannelID is the ID of the transaction channel.
	ChannelID string `protobuf:"bytes,6,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
	// LinkedAccountID is the ID of the account linked to the transactions.
	LinkedAccountID string `protobuf:"bytes,7,opt,name=LinkedAccountID,json=linked_account_id,proto3" json:"linked_account_id,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// ValueTime is the time where the transaction should be applied.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
	// FirstRepayTime is the time of the first repayment for the loan
	// account.
	FirstRepayTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=FirstRepayTime,json=first_repay_time,proto3" json:"first_repay_time,omitempty"`
}

func (x *NewDisbursement) Reset() {
	*x = NewDisbursement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDisbursement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDisbursement) ProtoMessage() {}

func (x *NewDisbursement) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDisbursement.ProtoReflect.Descriptor instead.
func (*NewDisbursement) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{30}
}

func (x *NewDisbursement) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewDisbursement) GetExternalID() string {
	if x != nil {
		return x.ExternalID
	}
	return ""
}

func (x *NewDisbursement) GetFees() []*DisbursementFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *NewDisbursement) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *NewDisbursement) GetOriginalCurrencyCode() string {
	if x != nil {
		return x.OriginalCurrencyCode
	}
	return ""
}

func (x *NewDisbursement) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *NewDisbursement) GetLinkedAccountID() string {
	if x != nil {
		return x.LinkedAccountID
	}
	return ""
}

func (x *NewDisbursement) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *NewDisbursement) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

func (x *NewDisbursement) GetFirstRepayTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstRepayTime
	}
	return nil
}

// CreateDisbursementRequest is a request to create a transaction of type
// DISBURSEMENT.
type CreateDisbursementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the loan account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the new transaction.
	Body *NewDisbursement `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateDisbursementRequest) Reset() {
	*x = CreateDisbursementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDisbursementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDisbursementRequest) ProtoMessage() {}

func (x *CreateDisbursementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDisbursementRequest.ProtoReflect.Descriptor instead.
func (*CreateDisbursementRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{31}
}

func (x *CreateDisbursementRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateDisbursementRequest) GetBody() *NewDisbursement {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewLoanFee is the request body to create a loan transaction of type
// FEE_APPLIED.
type NewLoanFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransactionID is the ID of the transaction.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// FeeID is the ID of the fee that was predefined that this transaction is
	// based on.
	FeeID string `protobuf:"bytes,2,opt,name=FeeID,json=fee_id,proto3" json:"fee_id,omitempty"`
	// Amount is the value of the transaction.
	Amount *v1.Amount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// InstallmentNumber is the number of the installment where the fee will be
	// applied.
	InstallmentNumber int32 `protobuf:"varint,4,opt,name=InstallmentNumber,json=installment_number,proto3" json:"installment_number,omitempty"`
	// Notes is extra user-readable details about the current transaction.
	Notes string `protobuf:"bytes,5,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// ValueTime is the time when the transaction should be applied.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
}

func (x *NewLoanFee) Reset() {
	*x = NewLoanFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewLoanFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewLoanFee) ProtoMessage() {}

func (x *NewLoanFee) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewLoanFee.ProtoReflect.Descriptor instead.
func (*NewLoanFee) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{32}
}

func (x *NewLoanFee) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *NewLoanFee) GetFeeID() string {
	if x != nil {
		return x.FeeID
	}
	return ""
}

func (x *NewLoanFee) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewLoanFee) GetInstallmentNumber() int32 {
	if x != nil {
		return x.InstallmentNumber
	}
	return 0
}

func (x *NewLoanFee) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *NewLoanFee) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *NewLoanFee) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

// CreateLoanFeeRequest is a request to create a transaction of type
// FEE_APPLIED.
type CreateLoanFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the loan account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the new transaction.
	Body *NewLoanFee `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateLoanFeeRequest) Reset() {
	*x = CreateLoanFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLoanFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoanFeeRequest) ProtoMessage() {}

func (x *CreateLoanFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoanFeeRequest.ProtoReflect.Descriptor instead.
func (*CreateLoanFeeRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{33}
}

func (x *CreateLoanFeeRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateLoanFeeRequest) GetBody() *NewLoanFee {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewPayment is the request body to create a transaction of type
// PAYMENT_MADE.
type NewPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the value of the transaction.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// ExternalID is the user-provided ID of the transaction, must be globally
	// unique.
	ExternalID string `protobuf:"bytes,2,opt,name=ExternalID,json=external_id,proto3" json:"external_id,omitempty"`
	// Notes is extra user-readable details about the current transaction.
	Notes string `protobuf:"bytes,3,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// OriginalCurrencyCode is the code of the currency the payment is made in.
	OriginalCurrencyCode string `protobuf:"bytes,4,opt,name=OriginalCurrencyCode,json=original_currency_code,proto3" json:"original_currency_code,omitempty"`
	// FeeID is the ID of the fee that was predefined that this transaction is
	// based on.
	FeeID string `protobuf:"bytes,5,opt,name=FeeID,json=fee_id,proto3" json:"fee_id,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// ValueTime is the time where the transaction should be applied.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
}

func (x *NewPayment) Reset() {
	*x = NewPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPayment) ProtoMessage() {}

func (x *NewPayment) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPayment.ProtoReflect.Descriptor instead.
func (*NewPayment) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{34}
}

func (x *NewPayment) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewPayment) GetExternalID() string {
	if x != nil {
		return x.ExternalID
	}
	return ""
}

func (x *NewPayment) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *NewPayment) GetOriginalCurrencyCode() string {
	if x != nil {
		return x.OriginalCurrencyCode
	}
	return ""
}

func (x *NewPayment) GetFeeID() string {
	if x != nil {
		return x.FeeID
	}
	return ""
}

func (x *NewPayment) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *NewPayment) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

// CreatePaymentRequest is a request to create a transaction of type
// PAYMENT_MADE.
type CreatePaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the loan account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the new transaction.
	Body *NewPayment `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreatePaymentRequest) Reset() {
	*x = CreatePaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentRequest) ProtoMessage() {}

func (x *CreatePaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{35}
}

func (x *CreatePaymentRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreatePaymentRequest) GetBody() *NewPayment {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewRedrawRepayment is the request body to create a transaction of type
// REDRAW_PAYMENT.
type NewRedrawRepayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the value of the transaction.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Notes is extra user-readable details about the current transaction.
	Notes string `protobuf:"bytes,2,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// ValueTime is the time where the transaction should be applied.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
}

func (x *NewRedrawRepayment) Reset() {
	*x = NewRedrawRepayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRedrawRepayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRedrawRepayment) ProtoMessage() {}

func (x *NewRedrawRepayment) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRedrawRepayment.ProtoReflect.Descriptor instead.
func (*NewRedrawRepayment) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{36}
}

func (x *NewRedrawRepayment) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewRedrawRepayment) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *NewRedrawRepayment) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *NewRedrawRepayment) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

// CreateRedrawPaymentRequest is a request to create a transaction of type
// REDRAW_PAYMENT.
type CreateRedrawPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the loan account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the new transaction.
	Body *NewRedrawRepayment `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateRedrawPaymentRequest) Reset() {
	*x = CreateRedrawPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRedrawPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRedrawPaymentRequest) ProtoMessage() {}

func (x *CreateRedrawPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRedrawPaymentRequest.ProtoReflect.Descriptor instead.
func (*CreateRedrawPaymentRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{37}
}

func (x *CreateRedrawPaymentRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateRedrawPaymentRequest) GetBody() *NewRedrawRepayment {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewRepayment is the request body to create a
// transaction of type REPAYMENT.
type NewRepayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the value of the transaction.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Notes is extra user-readable details about the current transaction.
	Notes string `protobuf:"bytes,2,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// CustomPaymentAmounts is a list of payments the user has made.
	CustomPaymentAmounts []*CustomPaymentAmount `protobuf:"bytes,3,rep,name=CustomPaymentAmounts,json=custom_payment_amounts,proto3" json:"custom_payment_amounts,omitempty"`
	// ExternalID is the user-provided ID of the transaction, must be globally
	// unique.
	ExternalID string `protobuf:"bytes,4,opt,name=ExternalID,json=external_id,proto3" json:"external_id,omitempty"`
	// InstallmentID is the ID of the installment associated with this transaction.
	InstallmentID string `protobuf:"bytes,5,opt,name=InstallmentID,json=installment_id,proto3" json:"installment_id,omitempty"`
	// OriginalCurrencyCode is the code of the currency the payment is made in.
	OriginalCurrencyCode string `protobuf:"bytes,6,opt,name=OriginalCurrencyCode,json=original_currency_code,proto3" json:"original_currency_code,omitempty"`
	// CalculationMethod is the method of prepayment recalculation.
	CalculationMethod CalculationMethod `protobuf:"varint,7,opt,name=CalculationMethod,json=calculation_method,proto3,enum=openbank.core.v1.transactions.CalculationMethod" json:"calculation_method,omitempty"`
	// ChannelID is the ID of the transaction channel.
	ChannelID string `protobuf:"bytes,8,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// ValueTime is the time where the transaction should be applied.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
}

func (x *NewRepayment) Reset() {
	*x = NewRepayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRepayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRepayment) ProtoMessage() {}

func (x *NewRepayment) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRepayment.ProtoReflect.Descriptor instead.
func (*NewRepayment) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{38}
}

func (x *NewRepayment) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewRepayment) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *NewRepayment) GetCustomPaymentAmounts() []*CustomPaymentAmount {
	if x != nil {
		return x.CustomPaymentAmounts
	}
	return nil
}

func (x *NewRepayment) GetExternalID() string {
	if x != nil {
		return x.ExternalID
	}
	return ""
}

func (x *NewRepayment) GetInstallmentID() string {
	if x != nil {
		return x.InstallmentID
	}
	return ""
}

func (x *NewRepayment) GetOriginalCurrencyCode() string {
	if x != nil {
		return x.OriginalCurrencyCode
	}
	return ""
}

func (x *NewRepayment) GetCalculationMethod() CalculationMethod {
	if x != nil {
		return x.CalculationMethod
	}
	return CalculationMethod_NoRecalculation
}

func (x *NewRepayment) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *NewRepayment) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *NewRepayment) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

// CreateRepaymentRequest is a request to create a transaction of type
// REPAYMENT.
type CreateRepaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the loan account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the new transaction.
	Body *NewRepayment `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateRepaymentRequest) Reset() {
	*x = CreateRepaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRepaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRepaymentRequest) ProtoMessage() {}

func (x *CreateRepaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRepaymentRequest.ProtoReflect.Descriptor instead.
func (*CreateRepaymentRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{39}
}

func (x *CreateRepaymentRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateRepaymentRequest) GetBody() *NewRepayment {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewWithdrawalRedraw is the request body to create a transaction of type
// WITHDRAWAL_REDRAW.
type NewWithdrawalRedraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the value of the transaction.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// ExternalID is the user-provided ID of the transaction, must be globally
	// unique.
	ExternalID string `protobuf:"bytes,2,opt,name=ExternalID,json=external_id,proto3" json:"external_id,omitempty"`
	// Notes is extra user-readable details about the current transaction.
	Notes string `protobuf:"bytes,3,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// OriginalCurrencyCode is the code of the currency the payment is made in.
	OriginalCurrencyCode string `protobuf:"bytes,4,opt,name=OriginalCurrencyCode,json=original_currency_code,proto3" json:"original_currency_code,omitempty"`
	// ChannelID is the ID of the transaction channel.
	ChannelID string `protobuf:"bytes,5,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// ValueTime is the time where the transaction should be applied.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
}

func (x *NewWithdrawalRedraw) Reset() {
	*x = NewWithdrawalRedraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewWithdrawalRedraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewWithdrawalRedraw) ProtoMessage() {}

func (x *NewWithdrawalRedraw) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewWithdrawalRedraw.ProtoReflect.Descriptor instead.
func (*NewWithdrawalRedraw) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{40}
}

func (x *NewWithdrawalRedraw) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewWithdrawalRedraw) GetExternalID() string {
	if x != nil {
		return x.ExternalID
	}
	return ""
}

func (x *NewWithdrawalRedraw) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *NewWithdrawalRedraw) GetOriginalCurrencyCode() string {
	if x != nil {
		return x.OriginalCurrencyCode
	}
	return ""
}

func (x *NewWithdrawalRedraw) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *NewWithdrawalRedraw) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *NewWithdrawalRedraw) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

// CreateWithdrawalRedrawRequest is a request to create a transaction of type
// WITHDRAWAL_REDRAW.
type CreateWithdrawalRedrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the loan account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the new transaction.
	Body *NewWithdrawalRedraw `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateWithdrawalRedrawRequest) Reset() {
	*x = CreateWithdrawalRedrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWithdrawalRedrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWithdrawalRedrawRequest) ProtoMessage() {}

func (x *CreateWithdrawalRedrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWithdrawalRedrawRequest.ProtoReflect.Descriptor instead.
func (*CreateWithdrawalRedrawRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{41}
}

func (x *CreateWithdrawalRedrawRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateWithdrawalRedrawRequest) GetBody() *NewWithdrawalRedraw {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListLoanTransactionsRequest is a request to retrieve a list of loan
// transactions.
type ListLoanTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to retrieve the transactions for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// PageToken is the page token to use for the next page.
	PageToken string `protobuf:"bytes,2,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of accounts to return.
	PageSize int32 `protobuf:"varint,3,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// Filter is the filter to apply to the list.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
	// OrderBy is the field to order the list by.
	OrderBy string `protobuf:"bytes,5,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
}

func (x *ListLoanTransactionsRequest) Reset() {
	*x = ListLoanTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoanTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoanTransactionsRequest) ProtoMessage() {}

func (x *ListLoanTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoanTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListLoanTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{42}
}

func (x *ListLoanTransactionsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListLoanTransactionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListLoanTransactionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLoanTransactionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListLoanTransactionsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListLoanTransactionsResponse is the response to retrieving a list of loan
// transactions.
type ListLoanTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of loan transactions matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of loan transactions remaining in the list,
	// including the loan transactions in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Transactions is the list of loan transactions retrieved.
	Transactions []*LoanTransaction `protobuf:"bytes,3,rep,name=Transactions,json=transactions,proto3" json:"transactions,omitempty"`
	// NextPageToken is the page token for the next page.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListLoanTransactionsResponse) Reset() {
	*x = ListLoanTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLoanTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLoanTransactionsResponse) ProtoMessage() {}

func (x *ListLoanTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLoanTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListLoanTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{43}
}

func (x *ListLoanTransactionsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListLoanTransactionsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListLoanTransactionsResponse) GetTransactions() []*LoanTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ListLoanTransactionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetLoanTransactionRequest is a request to retrieve a list of loan
// transactions.
type GetLoanTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to retrieve the transaction for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// TransactionID is the id of loan transaction to retrieve.
	TransactionID string `protobuf:"bytes,2,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
}

func (x *GetLoanTransactionRequest) Reset() {
	*x = GetLoanTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoanTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoanTransactionRequest) ProtoMessage() {}

func (x *GetLoanTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoanTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetLoanTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{44}
}

func (x *GetLoanTransactionRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetLoanTransactionRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

// NewLoanAdjustment is the request body to adjust a loan.
type NewLoanAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BookTime is the time when the adjustment transaction is logged into
	// accounting. Available only for REPAYMENT, PAYMENT_MADE and FEE.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// Installments is the new list of installments to be added.
	Installments []*NewInstallment `protobuf:"bytes,2,rep,name=Installments,json=installments,proto3" json:"installments,omitempty"`
	// Reason is a user-provided string that explains why a loan was adjusted.
	Reason string `protobuf:"bytes,3,opt,name=Reason,json=reason,proto3" json:"reason,omitempty"`
}

func (x *NewLoanAdjustment) Reset() {
	*x = NewLoanAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewLoanAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewLoanAdjustment) ProtoMessage() {}

func (x *NewLoanAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewLoanAdjustment.ProtoReflect.Descriptor instead.
func (*NewLoanAdjustment) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{45}
}

func (x *NewLoanAdjustment) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *NewLoanAdjustment) GetInstallments() []*NewInstallment {
	if x != nil {
		return x.Installments
	}
	return nil
}

func (x *NewLoanAdjustment) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// AdjustLoanRequest is a request to adjust a loan.
type AdjustLoanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to adjust the transaction for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// TransactionID is the ID of the transaction to adjust.
	TransactionID string `protobuf:"bytes,2,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// Body is the details for the adjustment.
	Body *NewLoanAdjustment `protobuf:"bytes,3,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *AdjustLoanRequest) Reset() {
	*x = AdjustLoanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustLoanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustLoanRequest) ProtoMessage() {}

func (x *AdjustLoanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustLoanRequest.ProtoReflect.Descriptor instead.
func (*AdjustLoanRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{46}
}

func (x *AdjustLoanRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *AdjustLoanRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *AdjustLoanRequest) GetBody() *NewLoanAdjustment {
	if x != nil {
		return x.Body
	}
	return nil
}

// TransferDetails are the details of a transfer.
type TransferDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DepositID is the ID of the associated deposit transaction.
	DepositID string `protobuf:"bytes,1,opt,name=DepositID,json=deposit_id,proto3" json:"deposit_id,omitempty"`
	// LoanID is the ID of the associated loan transaction.
	LoanID string `protobuf:"bytes,2,opt,name=LoanID,json=loan_id,proto3" json:"loan_id,omitempty"`
}

func (x *TransferDetails) Reset() {
	*x = TransferDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferDetails) ProtoMessage() {}

func (x *TransferDetails) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferDetails.ProtoReflect.Descriptor instead.
func (*TransferDetails) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{47}
}

func (x *TransferDetails) GetDepositID() string {
	if x != nil {
		return x.DepositID
	}
	return ""
}

func (x *TransferDetails) GetLoanID() string {
	if x != nil {
		return x.LoanID
	}
	return ""
}

// TransactionFee is an amount applied or paid on an account.
type TransactionFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FeeID is the ID of the fee.
	FeeID string `protobuf:"bytes,1,opt,name=FeeID,json=fee_id,proto3" json:"fee_id,omitempty"`
	// Name is the name of the fee.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// Amount is the amount of the fee.
	Amount *v1.Amount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// TaxAmount is the tax amount of the fee.
	TaxAmount *v1.Amount `protobuf:"bytes,4,opt,name=TaxAmount,json=tax_amount,proto3" json:"tax_amount,omitempty"`
	// Trigger is the cause of the creation of the fee.
	Trigger products.FeeTrigger `protobuf:"varint,5,opt,name=Trigger,json=trigger,proto3,enum=openbank.core.v1.products.FeeTrigger" json:"trigger,omitempty"`
}

func (x *TransactionFee) Reset() {
	*x = TransactionFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFee) ProtoMessage() {}

func (x *TransactionFee) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFee.ProtoReflect.Descriptor instead.
func (*TransactionFee) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{48}
}

func (x *TransactionFee) GetFeeID() string {
	if x != nil {
		return x.FeeID
	}
	return ""
}

func (x *TransactionFee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransactionFee) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransactionFee) GetTaxAmount() *v1.Amount {
	if x != nil {
		return x.TaxAmount
	}
	return nil
}

func (x *TransactionFee) GetTrigger() products.FeeTrigger {
	if x != nil {
		return x.Trigger
	}
	return products.FeeTrigger(0)
}

// NewWithdrawal is the request body to create a
// transaction of type WITHDRAWAL.
type NewWithdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the value of the transaction.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// ExternalID is the user-provided ID of the transaction, must be globally
	// unique.
	ExternalID string `protobuf:"bytes,2,opt,name=ExternalID,json=external_id,proto3" json:"external_id,omitempty"`
	// Notes is extra user-readable details about the current transaction.
	Notes string `protobuf:"bytes,3,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// Payment is the details of a payment.
	Payment *deposits.Payment `protobuf:"bytes,4,opt,name=Payment,json=payment,proto3" json:"payment,omitempty"`
	// OrderID is the ID of the payment order of the withdrawal transaction.
	OrderID string `protobuf:"bytes,5,opt,name=OrderID,json=order_id,proto3" json:"order_id,omitempty"`
	// ChannelID is the ID of the payment channel.
	ChannelID string `protobuf:"bytes,6,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
	// BookTime is the time when the transaction is logged into accounting.
	BookTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=BookTime,json=book_time,proto3" json:"book_time,omitempty"`
	// ValueTime is the time where the transaction should be applied.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
}

func (x *NewWithdrawal) Reset() {
	*x = NewWithdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewWithdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewWithdrawal) ProtoMessage() {}

func (x *NewWithdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewWithdrawal.ProtoReflect.Descriptor instead.
func (*NewWithdrawal) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{49}
}

func (x *NewWithdrawal) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewWithdrawal) GetExternalID() string {
	if x != nil {
		return x.ExternalID
	}
	return ""
}

func (x *NewWithdrawal) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *NewWithdrawal) GetPayment() *deposits.Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *NewWithdrawal) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *NewWithdrawal) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *NewWithdrawal) GetBookTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BookTime
	}
	return nil
}

func (x *NewWithdrawal) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

// CreateWithdrawalRequest is a request to create a transaction of
// type WITHDRAWAL.
type CreateWithdrawalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the loan account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the new transaction.
	Body *NewWithdrawal `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateWithdrawalRequest) Reset() {
	*x = CreateWithdrawalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWithdrawalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWithdrawalRequest) ProtoMessage() {}

func (x *CreateWithdrawalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWithdrawalRequest.ProtoReflect.Descriptor instead.
func (*CreateWithdrawalRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP(), []int{50}
}

func (x *CreateWithdrawalRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateWithdrawalRequest) GetBody() *NewWithdrawal {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_bnk_to_core_api_v1_transactions_all_proto protoreflect.FileDescriptor

var file_bnk_to_core_api_v1_transactions_all_proto_rawDesc = []byte{
	0x0a, 0x29, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0b, 0x78, 0x6f, 0x2f, 0x78,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x6e,
	0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x05, 0x0a, 0x0f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x65, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x4f,
	0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x46, 0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x11, 0x4f, 0x76, 0x65, 0x72,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a,
	0x12, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x13, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x12, 0x66, 0x0a, 0x1a, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1c,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x3a, 0x0b, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xef, 0x02, 0x0a, 0x16, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x72, 0x75, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x10, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x72, 0x75, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x19, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x41, 0x63,
	0x63, 0x72, 0x75, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x1b, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x3a, 0x0b,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x0b,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x11,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x4f, 0x76, 0x65, 0x72,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0xad, 0x0f, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47,
	0x02, 0x08, 0x02, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda,
	0x47, 0x16, 0x2a, 0x14, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x47, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x0f, 0x41, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x10, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x7d, 0x0a, 0x17, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x41, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47,
	0x34, 0x2a, 0x30, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x30, 0x01, 0x52, 0x19, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1d, 0x2a, 0x1b, 0x0a, 0x0f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x08, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x12, 0x46, 0x0a, 0x08, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x29, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47,
	0x1c, 0x2a, 0x1a, 0x0a, 0x0e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x6e,
	0x74, 0x72, 0x65, 0x12, 0x08, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x49, 0x44, 0x52, 0x09, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1f, 0x2a, 0x1d, 0x0a, 0x10,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x11, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x4d,
	0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x7b, 0x0a,
	0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x72, 0x75,
	0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x10, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0xda, 0x47, 0x34, 0x2a, 0x30, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x30, 0x01, 0x52, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x12, 0x48, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x65, 0x72, 0x6d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x54, 0x69, 0x6c, 0x6c, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1a, 0x2a, 0x18,
	0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x12, 0x65, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xb4, 0x03, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x0e, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x3a, 0x0b,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x17,
	0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x65, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x0b,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x7a, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x94, 0x04, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x9f,
	0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x54, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x8a, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x42, 0x6f, 0x6f,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xd1, 0x01,
	0x0a, 0x14, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x97, 0x02, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x46, 0x65, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x46, 0x65, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x42, 0x6f, 0x6f,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x4c, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x65, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x77,
	0x53, 0x65, 0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x07, 0x53, 0x65,
	0x69, 0x7a, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x73, 0x65, 0x69, 0x7a, 0x65, 0x5f, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01,
	0x22, 0x97, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x69, 0x7a, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb5, 0x03, 0x0a, 0x16, 0x4e,
	0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x42, 0x6f, 0x6f,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0xf2, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8c, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe4, 0x03, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x10, 0x61, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x12, 0x42, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x52,
	0x65, 0x64, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x12, 0x3a, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0xe1, 0x05, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x44, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x64, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x16, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x17,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x72, 0x65,
	0x61, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x17, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x99, 0x02, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x46, 0x65,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x54,
	0x61, 0x78, 0x4f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x5f, 0x6f, 0x6e, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0x8f, 0x05, 0x0a, 0x05, 0x54, 0x61, 0x78, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x1b,
	0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x61, 0x78, 0x4f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x54, 0x61, 0x78, 0x4f,
	0x6e, 0x46, 0x65, 0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x74, 0x61, 0x78, 0x5f, 0x6f, 0x6e, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x13, 0x54,
	0x61, 0x78, 0x4f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16,
	0x74, 0x61, 0x78, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x1e, 0x54, 0x61, 0x78, 0x4f, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x72, 0x65, 0x61,
	0x72, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x23, 0x74, 0x61, 0x78, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x72, 0x65, 0x61,
	0x72, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x1c, 0x54, 0x61, 0x78,
	0x4f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x20, 0x74, 0x61, 0x78, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x54, 0x61, 0x78, 0x4f, 0x6e,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x74, 0x61, 0x78, 0x5f, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74,
	0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x8b,
	0x03, 0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x73, 0x0a, 0x10, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x4f, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x5e, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4c, 0x0a, 0x1a, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x1c, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x3a,
	0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xeb, 0x11, 0x0a,
	0x0f, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0xda, 0x47, 0x02, 0x08, 0x02, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x16, 0x2a, 0x14, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x69, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x17, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x2f, 0x2a, 0x2d, 0x0a, 0x1c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x19, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x12, 0x69, 0x0a, 0x0f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f,
	0x61, 0x6e, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a,
	0x0f, 0x43, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1d, 0x2a, 0x1b, 0x0a, 0x0f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x08, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x12, 0x46, 0x0a, 0x08, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0xda, 0x47, 0x1c, 0x2a, 0x1a, 0x0a, 0x0e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x73, 0x2e, 0x43,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x12, 0x08, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x49, 0x44, 0x52,
	0x09, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x74, 0x0a, 0x14, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x4d, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x4d,
	0x0a, 0x0e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x74, 0x0a,
	0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x2f, 0x2a, 0x2d, 0x0a, 0x1c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x17, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1c, 0x2a, 0x1a, 0x0a, 0x0d, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x79, 0x0a, 0x17, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x2f, 0x2a, 0x2d, 0x0a, 0x1c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x6f, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x14, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x54, 0x61, 0x78, 0x65, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x61, 0x78, 0x65, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x61, 0x78, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x05, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f,
	0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x54, 0x69, 0x6c,
	0x6c, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x46,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1a,
	0x2a, 0x18, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x65, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x4e,
	0x65, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x48, 0x0a, 0x0b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x7f, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x62, 0x75,
	0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x46, 0x65,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x0b, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xfe, 0x04, 0x0a, 0x0f, 0x4e, 0x65, 0x77,
	0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x65, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x43,
	0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x4e, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4e, 0x65, 0x77, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x96, 0x03, 0x0a, 0x0a, 0x4e,
	0x65, 0x77, 0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05,
	0x46, 0x65, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x42, 0x6f,
	0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47,
	0x02, 0x10, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x61, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x65, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x97, 0x03, 0x0a, 0x0a, 0x4e,
	0x65, 0x77, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x46, 0x65, 0x65, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x42,
	0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8d, 0x02, 0x0a, 0x12,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0xb7, 0x05, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x74, 0x0a, 0x14, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x14, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x11, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x12, 0x43, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x4b, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e,
	0x65, 0x77, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa8, 0x03, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x12, 0x3c, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01,
	0x22, 0xa6, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x52, 0x0a,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xef, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x27, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x86, 0x02, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c,
	0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe8, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77,
	0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47,
	0x02, 0x10, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4c, 0x6f,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x6e, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x06, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10,
	0x01, 0x22, 0xb0, 0x02, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x46, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0xd1, 0x03, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x4c, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65,
	0x77, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0xca, 0x08, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x10,
	0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x19, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x10, 0x07, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x30, 0x0a, 0x28, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x08, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x21,
	0x0a, 0x19, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0a, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x19, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x65, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x10, 0x0b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x65, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x10, 0x0c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x46, 0x65, 0x65, 0x73, 0x44, 0x75, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x10, 0x0d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x10, 0x0e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x28, 0x0a, 0x20, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0f, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x25, 0x0a, 0x1d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x10, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x78, 0x10, 0x11, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x27, 0x0a, 0x1f, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x12, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x22, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x13,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x2b, 0x0a, 0x23, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x14, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x24, 0x0a, 0x1c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x10, 0x15, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10,
	0x16, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x17, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x23, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x46,
	0x75, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x18, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x64, 0x10, 0x19, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x23, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x1a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x67,
	0x68, 0x74, 0x10, 0x1b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2b, 0x0a, 0x23, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x75, 0x67, 0x68, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x1c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6c, 0x64,
	0x10, 0x1d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x29, 0x0a, 0x21, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6c,
	0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x1e, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x1b, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x65, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x1f, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02,
	0x18, 0x00, 0x2a, 0xdc, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x10,
	0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x25, 0x0a, 0x1d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65,
	0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65,
	0x65, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x46, 0x65, 0x65, 0x10,
	0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18,
	0x00, 0x2a, 0xe5, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x0f, 0x4e, 0x6f, 0x52, 0x65, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x25, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x30, 0x0a, 0x28, 0x52, 0x65, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65,
	0x65, 0x70, 0x53, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x32, 0x0a, 0x2a, 0x52, 0x65, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4b, 0x65, 0x65, 0x70, 0x53, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x37, 0x0a,
	0x2f, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x25,
	0x0a, 0x1d, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x65, 0x77, 0x10,
	0x07, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xba, 0x0b, 0x0a, 0x08, 0x4c, 0x6f,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x4c, 0x6f,
	0x61, 0x6e, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x4c, 0x6f, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x62,
	0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x6e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e,
	0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15,
	0x0a, 0x0d, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x64, 0x65, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c,
	0x0a, 0x14, 0x4c, 0x6f, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e,
	0x4c, 0x6f, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65,
	0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x08,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e,
	0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x10, 0x0a,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x73,
	0x44, 0x75, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x10, 0x0b, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x19, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x4c,
	0x6f, 0x61, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x10, 0x0d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x4c, 0x6f, 0x61, 0x6e, 0x50,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x0e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x44, 0x75, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x10, 0x0f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x4c, 0x6f, 0x61, 0x6e, 0x52,
	0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x10, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x4c, 0x6f, 0x61, 0x6e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x64, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x11, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x4c,
	0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x12, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12,
	0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x10, 0x13, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x6e,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x10, 0x14, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x10,
	0x15, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x25, 0x0a, 0x1d, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x16, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16,
	0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x44, 0x75, 0x65, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x10, 0x17, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e,
	0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x18,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x4c, 0x6f, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x19, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x27, 0x0a, 0x1f, 0x4c, 0x6f, 0x61, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x1a, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x23, 0x0a, 0x1b, 0x4c, 0x6f, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x10, 0x1b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2d, 0x0a, 0x25, 0x4c, 0x6f, 0x61, 0x6e, 0x44, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x1c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x4c, 0x6f, 0x61, 0x6e, 0x44, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69,
	0x64, 0x10, 0x1d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2a, 0x0a, 0x22, 0x4c, 0x6f, 0x61, 0x6e, 0x44,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x69, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x1e, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x64, 0x72, 0x61,
	0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x1f, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1b, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x20, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c,
	0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x21, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x25, 0x0a, 0x1d, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x22, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x4c, 0x6f, 0x61,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x23, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1e, 0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x24, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x19, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x10, 0x25, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x4c, 0x6f,
	0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x26,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x4c, 0x6f, 0x61, 0x6e, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x10, 0x27, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2d, 0x0a, 0x25, 0x4c, 0x6f, 0x61,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x28, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x6e,
	0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x29,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c, 0x4c, 0x6f, 0x61, 0x6e, 0x44, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x2a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x4c, 0x6f,
	0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x2b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x27, 0x0a, 0x1f, 0x4c, 0x6f, 0x61,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x2c, 0x1a, 0x02,
	0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0xe8, 0x0e, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x37, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x3a, 0x62,
	0x75, 0x6c, 0x6b, 0x28, 0x00, 0x12, 0xb1, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x34, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb1, 0x01, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x35, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x3a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x65, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12, 0xaf, 0x01,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x69, 0x7a, 0x75, 0x72, 0x65, 0x12,
	0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x69, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x1e, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x73, 0x65, 0x69, 0x7a, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12,
	0xb4, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb8, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x36, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x3a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x28, 0x00, 0x30,
	0x00, 0x12, 0xd1, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xd0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x43, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc6, 0x01, 0x0a, 0x06, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x3a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x28, 0x00, 0x30,
	0x00, 0x12, 0xb8, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x5a, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12, 0x4c, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x7d, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02,
	0x00, 0x32, 0xf1, 0x0e, 0x0a, 0x17, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb6, 0x01,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x62, 0x75,
	0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c,
	0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72,
	0x73, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x1e, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x3a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x65, 0x65, 0x28, 0x00, 0x30,
	0x00, 0x12, 0xab, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x1d, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x7d, 0x3a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12,
	0xbd, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x37, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x72, 0x65,
	0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12,
	0xb1, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x1f,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x28,
	0x00, 0x30, 0x00, 0x12, 0xb2, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x32, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f,
	0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc6, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x64,
	0x72, 0x61, 0x77, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x3a, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x72, 0x65, 0x64,
	0x72, 0x61, 0x77, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x28, 0x00, 0x30,
	0x00, 0x12, 0xc5, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x30, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc4, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00,
	0x12, 0xbd, 0x01, 0x0a, 0x06, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f,
	0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x3a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00,
	0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0xa9, 0x01, 0x0a, 0x1d, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x2c, 0x62, 0x6e, 0x6b,
	0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90,
	0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x92, 0x41,
	0x40, 0x0a, 0x03, 0x32, 0x2e, 0x30, 0x12, 0x12, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x02, 0x76, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bnk_to_core_api_v1_transactions_all_proto_rawDescOnce sync.Once
	file_bnk_to_core_api_v1_transactions_all_proto_rawDescData = file_bnk_to_core_api_v1_transactions_all_proto_rawDesc
)

func file_bnk_to_core_api_v1_transactions_all_proto_rawDescGZIP() []byte {
	file_bnk_to_core_api_v1_transactions_all_proto_rawDescOnce.Do(func() {
		file_bnk_to_core_api_v1_transactions_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_bnk_to_core_api_v1_transactions_all_proto_rawDescData)
	})
	return file_bnk_to_core_api_v1_transactions_all_proto_rawDescData
}

var (
	file_bnk_to_core_api_v1_transactions_all_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
	file_bnk_to_core_api_v1_transactions_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 51)
	file_bnk_to_core_api_v1_transactions_all_proto_goTypes   = []interface{}{
		(DepositType)(0),                        // 0: openbank.core.v1.transactions.DepositType
		(PaymentType)(0),                        // 1: openbank.core.v1.transactions.PaymentType
		(CalculationMethod)(0),                  // 2: openbank.core.v1.transactions.CalculationMethod
		(LoanType)(0),                           // 3: openbank.core.v1.transactions.LoanType
		(*AffectedAmounts)(nil),                 // 4: openbank.core.v1.transactions.AffectedAmounts
		(*InterestAccruedAmounts)(nil),          // 5: openbank.core.v1.transactions.InterestAccruedAmounts
		(*DepositTerm)(nil),                     // 6: openbank.core.v1.transactions.DepositTerm
		(*DepositTransaction)(nil),              // 7: openbank.core.v1.transactions.DepositTransaction
		(*BulkDepositTransaction)(nil),          // 8: openbank.core.v1.transactions.BulkDepositTransaction
		(*BulkDepositTransactions)(nil),         // 9: openbank.core.v1.transactions.BulkDepositTransactions
		(*CreateBulkDepositRequest)(nil),        // 10: openbank.core.v1.transactions.CreateBulkDepositRequest
		(*NewDepositTransaction)(nil),           // 11: openbank.core.v1.transactions.NewDepositTransaction
		(*CreateDepositRequest)(nil),            // 12: openbank.core.v1.transactions.CreateDepositRequest
		(*NewDepositAdjustment)(nil),            // 13: openbank.core.v1.transactions.NewDepositAdjustment
		(*AdjustDepositRequest)(nil),            // 14: openbank.core.v1.transactions.AdjustDepositRequest
		(*NewDepositFee)(nil),                   // 15: openbank.core.v1.transactions.NewDepositFee
		(*CreateDepositFeeRequest)(nil),         // 16: openbank.core.v1.transactions.CreateDepositFeeRequest
		(*NewSeizeBlock)(nil),                   // 17: openbank.core.v1.transactions.NewSeizeBlock
		(*CreateSeizureRequest)(nil),            // 18: openbank.core.v1.transactions.CreateSeizureRequest
		(*NewTransferTransaction)(nil),          // 19: openbank.core.v1.transactions.NewTransferTransaction
		(*CreateTransferRequest)(nil),           // 20: openbank.core.v1.transactions.CreateTransferRequest
		(*GetDocumentRequest)(nil),              // 21: openbank.core.v1.transactions.GetDocumentRequest
		(*ListDepositTransactionsRequest)(nil),  // 22: openbank.core.v1.transactions.ListDepositTransactionsRequest
		(*ListDepositTransactionsResponse)(nil), // 23: openbank.core.v1.transactions.ListDepositTransactionsResponse
		(*GetDepositTransactionRequest)(nil),    // 24: openbank.core.v1.transactions.GetDepositTransactionRequest
		(*TransactionBalances)(nil),             // 25: openbank.core.v1.transactions.TransactionBalances
		(*LoanAffectedAmounts)(nil),             // 26: openbank.core.v1.transactions.LoanAffectedAmounts
		(*CustomPaymentAmount)(nil),             // 27: openbank.core.v1.transactions.CustomPaymentAmount
		(*Taxes)(nil),                           // 28: openbank.core.v1.transactions.Taxes
		(*TransactionInterestSettings)(nil),     // 29: openbank.core.v1.transactions.TransactionInterestSettings
		(*LoanTerm)(nil),                        // 30: openbank.core.v1.transactions.LoanTerm
		(*LoanTransaction)(nil),                 // 31: openbank.core.v1.transactions.LoanTransaction
		(*NewInstallment)(nil),                  // 32: openbank.core.v1.transactions.NewInstallment
		(*DisbursementFee)(nil),                 // 33: openbank.core.v1.transactions.DisbursementFee
		(*NewDisbursement)(nil),                 // 34: openbank.core.v1.transactions.NewDisbursement
		(*CreateDisbursementRequest)(nil),       // 35: openbank.core.v1.transactions.CreateDisbursementRequest
		(*NewLoanFee)(nil),                      // 36: openbank.core.v1.transactions.NewLoanFee
		(*CreateLoanFeeRequest)(nil),            // 37: openbank.core.v1.transactions.CreateLoanFeeRequest
		(*NewPayment)(nil),                      // 38: openbank.core.v1.transactions.NewPayment
		(*CreatePaymentRequest)(nil),            // 39: openbank.core.v1.transactions.CreatePaymentRequest
		(*NewRedrawRepayment)(nil),              // 40: openbank.core.v1.transactions.NewRedrawRepayment
		(*CreateRedrawPaymentRequest)(nil),      // 41: openbank.core.v1.transactions.CreateRedrawPaymentRequest
		(*NewRepayment)(nil),                    // 42: openbank.core.v1.transactions.NewRepayment
		(*CreateRepaymentRequest)(nil),          // 43: openbank.core.v1.transactions.CreateRepaymentRequest
		(*NewWithdrawalRedraw)(nil),             // 44: openbank.core.v1.transactions.NewWithdrawalRedraw
		(*CreateWithdrawalRedrawRequest)(nil),   // 45: openbank.core.v1.transactions.CreateWithdrawalRedrawRequest
		(*ListLoanTransactionsRequest)(nil),     // 46: openbank.core.v1.transactions.ListLoanTransactionsRequest
		(*ListLoanTransactionsResponse)(nil),    // 47: openbank.core.v1.transactions.ListLoanTransactionsResponse
		(*GetLoanTransactionRequest)(nil),       // 48: openbank.core.v1.transactions.GetLoanTransactionRequest
		(*NewLoanAdjustment)(nil),               // 49: openbank.core.v1.transactions.NewLoanAdjustment
		(*AdjustLoanRequest)(nil),               // 50: openbank.core.v1.transactions.AdjustLoanRequest
		(*TransferDetails)(nil),                 // 51: openbank.core.v1.transactions.TransferDetails
		(*TransactionFee)(nil),                  // 52: openbank.core.v1.transactions.TransactionFee
		(*NewWithdrawal)(nil),                   // 53: openbank.core.v1.transactions.NewWithdrawal
		(*CreateWithdrawalRequest)(nil),         // 54: openbank.core.v1.transactions.CreateWithdrawalRequest
		(*v1.Amount)(nil),                       // 55: openbank.core.v1.Amount
		(*cards.Transaction)(nil),               // 56: openbank.core.v1.cards.Transaction
		(*deposits.Payment)(nil),                // 57: openbank.core.v1.deposits.Payment
		(*timestamppb.Timestamp)(nil),           // 58: google.protobuf.Timestamp
		(products.FeeTrigger)(0),                // 59: openbank.core.v1.products.FeeTrigger
		(*emptypb.Empty)(nil),                   // 60: google.protobuf.Empty
		(*v1.File)(nil),                         // 61: openbank.core.v1.File
	}
)

var file_bnk_to_core_api_v1_transactions_all_proto_depIdxs = []int32{
	55,  // 0: openbank.core.v1.transactions.AffectedAmounts.Fees:type_name -> openbank.core.v1.Amount
	55,  // 1: openbank.core.v1.transactions.AffectedAmounts.Funds:type_name -> openbank.core.v1.Amount
	55,  // 2: openbank.core.v1.transactions.AffectedAmounts.Interest:type_name -> openbank.core.v1.Amount
	55,  // 3: openbank.core.v1.transactions.AffectedAmounts.Overdraft:type_name -> openbank.core.v1.Amount
	55,  // 4: openbank.core.v1.transactions.AffectedAmounts.OverdraftFees:type_name -> openbank.core.v1.Amount
	55,  // 5: openbank.core.v1.transactions.AffectedAmounts.OverdraftInterest:type_name -> openbank.core.v1.Amount
	55,  // 6: openbank.core.v1.transactions.AffectedAmounts.TechnicalOverdraft:type_name -> openbank.core.v1.Amount
	55,  // 7: openbank.core.v1.transactions.AffectedAmounts.TechnicalOverdraftInterest:type_name -> openbank.core.v1.Amount
	55,  // 8: openbank.core.v1.transactions.InterestAccruedAmounts.Accrued:type_name -> openbank.core.v1.Amount
	55,  // 9: openbank.core.v1.transactions.InterestAccruedAmounts.NegativeAccrued:type_name -> openbank.core.v1.Amount
	55,  // 10: openbank.core.v1.transactions.InterestAccruedAmounts.OverdraftAccrued:type_name -> openbank.core.v1.Amount
	55,  // 11: openbank.core.v1.transactions.InterestAccruedAmounts.TechnicalOverdraftAccrued:type_name -> openbank.core.v1.Amount
	55,  // 12: openbank.core.v1.transactions.DepositTerm.OverdraftLimit:type_name -> openbank.core.v1.Amount
	55,  // 13: openbank.core.v1.transactions.DepositTransaction.TotalChange:type_name -> openbank.core.v1.Amount
	4,   // 14: openbank.core.v1.transactions.DepositTransaction.AffectedAmounts:type_name -> openbank.core.v1.transactions.AffectedAmounts
	56,  // 15: openbank.core.v1.transactions.DepositTransaction.CardTransaction:type_name -> openbank.core.v1.cards.Transaction
	52,  // 16: openbank.core.v1.transactions.DepositTransaction.Fees:type_name -> openbank.core.v1.transactions.TransactionFee
	5,   // 17: openbank.core.v1.transactions.DepositTransaction.InterestAccruedAmounts:type_name -> openbank.core.v1.transactions.InterestAccruedAmounts
	57,  // 18: openbank.core.v1.transactions.DepositTransaction.Payment:type_name -> openbank.core.v1.deposits.Payment
	6,   // 19: openbank.core.v1.transactions.DepositTransaction.Terms:type_name -> openbank.core.v1.transactions.DepositTerm
	51,  // 20: openbank.core.v1.transactions.DepositTransaction.TransferDetails:type_name -> openbank.core.v1.transactions.TransferDetails
	0,   // 21: openbank.core.v1.transactions.DepositTransaction.Type:type_name -> openbank.core.v1.transactions.DepositType
	58,  // 22: openbank.core.v1.transactions.DepositTransaction.CreateTime:type_name -> google.protobuf.Timestamp
	58,  // 23: openbank.core.v1.transactions.DepositTransaction.BookTime:type_name -> google.protobuf.Timestamp
	58,  // 24: openbank.core.v1.transactions.DepositTransaction.ValueTime:type_name -> google.protobuf.Timestamp
	55,  // 25: openbank.core.v1.transactions.BulkDepositTransaction.Amount:type_name -> openbank.core.v1.Amount
	57,  // 26: openbank.core.v1.transactions.BulkDepositTransaction.Payment:type_name -> openbank.core.v1.deposits.Payment
	8,   // 27: openbank.core.v1.transactions.BulkDepositTransactions.Transactions:type_name -> openbank.core.v1.transactions.BulkDepositTransaction
	9,   // 28: openbank.core.v1.transactions.CreateBulkDepositRequest.Body:type_name -> openbank.core.v1.transactions.BulkDepositTransactions
	55,  // 29: openbank.core.v1.transactions.NewDepositTransaction.Amount:type_name -> openbank.core.v1.Amount
	57,  // 30: openbank.core.v1.transactions.NewDepositTransaction.Payment:type_name -> openbank.core.v1.deposits.Payment
	58,  // 31: openbank.core.v1.transactions.NewDepositTransaction.BookTime:type_name -> google.protobuf.Timestamp
	58,  // 32: openbank.core.v1.transactions.NewDepositTransaction.ValueTime:type_name -> google.protobuf.Timestamp
	11,  // 33: openbank.core.v1.transactions.CreateDepositRequest.Body:type_name -> openbank.core.v1.transactions.NewDepositTransaction
	58,  // 34: openbank.core.v1.transactions.NewDepositAdjustment.BookTime:type_name -> google.protobuf.Timestamp
	13,  // 35: openbank.core.v1.transactions.AdjustDepositRequest.Body:type_name -> openbank.core.v1.transactions.NewDepositAdjustment
	55,  // 36: openbank.core.v1.transactions.NewDepositFee.Amount:type_name -> openbank.core.v1.Amount
	58,  // 37: openbank.core.v1.transactions.NewDepositFee.BookTime:type_name -> google.protobuf.Timestamp
	15,  // 38: openbank.core.v1.transactions.CreateDepositFeeRequest.Body:type_name -> openbank.core.v1.transactions.NewDepositFee
	55,  // 39: openbank.core.v1.transactions.NewSeizeBlock.Amount:type_name -> openbank.core.v1.Amount
	17,  // 40: openbank.core.v1.transactions.CreateSeizureRequest.Body:type_name -> openbank.core.v1.transactions.NewSeizeBlock
	55,  // 41: openbank.core.v1.transactions.NewTransferTransaction.Amount:type_name -> openbank.core.v1.Amount
	57,  // 42: openbank.core.v1.transactions.NewTransferTransaction.Payment:type_name -> openbank.core.v1.deposits.Payment
	58,  // 43: openbank.core.v1.transactions.NewTransferTransaction.BookTime:type_name -> google.protobuf.Timestamp
	58,  // 44: openbank.core.v1.transactions.NewTransferTransaction.ValueTime:type_name -> google.protobuf.Timestamp
	19,  // 45: openbank.core.v1.transactions.CreateTransferRequest.Body:type_name -> openbank.core.v1.transactions.NewTransferTransaction
	7,   // 46: openbank.core.v1.transactions.ListDepositTransactionsResponse.Transactions:type_name -> openbank.core.v1.transactions.DepositTransaction
	55,  // 47: openbank.core.v1.transactions.TransactionBalances.AdvancePosition:type_name -> openbank.core.v1.Amount
	55,  // 48: openbank.core.v1.transactions.TransactionBalances.ArrearsPosition:type_name -> openbank.core.v1.Amount
	55,  // 49: openbank.core.v1.transactions.TransactionBalances.ExpectedPrincipalRedraw:type_name -> openbank.core.v1.Amount
	55,  // 50: openbank.core.v1.transactions.TransactionBalances.Principal:type_name -> openbank.core.v1.Amount
	55,  // 51: openbank.core.v1.transactions.TransactionBalances.Redraw:type_name -> openbank.core.v1.Amount
	55,  // 52: openbank.core.v1.transactions.TransactionBalances.Total:type_name -> openbank.core.v1.Amount
	55,  // 53: openbank.core.v1.transactions.LoanAffectedAmounts.DeferredInterest:type_name -> openbank.core.v1.Amount
	55,  // 54: openbank.core.v1.transactions.LoanAffectedAmounts.Fees:type_name -> openbank.core.v1.Amount
	55,  // 55: openbank.core.v1.transactions.LoanAffectedAmounts.FundersInterest:type_name -> openbank.core.v1.Amount
	55,  // 56: openbank.core.v1.transactions.LoanAffectedAmounts.OrganizationCommission:type_name -> openbank.core.v1.Amount
	55,  // 57: openbank.core.v1.transactions.LoanAffectedAmounts.Interest:type_name -> openbank.core.v1.Amount
	55,  // 58: openbank.core.v1.transactions.LoanAffectedAmounts.InterestFromArrears:type_name -> openbank.core.v1.Amount
	55,  // 59: openbank.core.v1.transactions.LoanAffectedAmounts.PaymentHolidaysInterest:type_name -> openbank.core.v1.Amount
	55,  // 60: openbank.core.v1.transactions.LoanAffectedAmounts.Penalty:type_name -> openbank.core.v1.Amount
	55,  // 61: openbank.core.v1.transactions.LoanAffectedAmounts.Principal:type_name -> openbank.core.v1.Amount
	1,   // 62: openbank.core.v1.transactions.CustomPaymentAmount.Type:type_name -> openbank.core.v1.transactions.PaymentType
	55,  // 63: openbank.core.v1.transactions.CustomPaymentAmount.Amount:type_name -> openbank.core.v1.Amount
	55,  // 64: openbank.core.v1.transactions.CustomPaymentAmount.TaxOnAmount:type_name -> openbank.core.v1.Amount
	55,  // 65: openbank.core.v1.transactions.Taxes.DeferredTaxOnInterestAmount:type_name -> openbank.core.v1.Amount
	55,  // 66: openbank.core.v1.transactions.Taxes.TaxOnFeesAmount:type_name -> openbank.core.v1.Amount
	55,  // 67: openbank.core.v1.transactions.Taxes.TaxOnInterestAmount:type_name -> openbank.core.v1.Amount
	55,  // 68: openbank.core.v1.transactions.Taxes.TaxOnInterestFromArrearsAmount:type_name -> openbank.core.v1.Amount
	55,  // 69: openbank.core.v1.transactions.Taxes.TaxOnPaymentHolidaysInterest:type_name -> openbank.core.v1.Amount
	55,  // 70: openbank.core.v1.transactions.Taxes.TaxOnPenaltyAmount:type_name -> openbank.core.v1.Amount
	29,  // 71: openbank.core.v1.transactions.LoanTerm.InterestSettings:type_name -> openbank.core.v1.transactions.TransactionInterestSettings
	55,  // 72: openbank.core.v1.transactions.LoanTerm.PeriodicPayment:type_name -> openbank.core.v1.Amount
	55,  // 73: openbank.core.v1.transactions.LoanTerm.PrincipalPaymentAmount:type_name -> openbank.core.v1.Amount
	3,   // 74: openbank.core.v1.transactions.LoanTransaction.Type:type_name -> openbank.core.v1.transactions.LoanType
	25,  // 75: openbank.core.v1.transactions.LoanTransaction.AccountBalances:type_name -> openbank.core.v1.transactions.TransactionBalances
	26,  // 76: openbank.core.v1.transactions.LoanTransaction.AffectedAmounts:type_name -> openbank.core.v1.transactions.LoanAffectedAmounts
	55,  // 77: openbank.core.v1.transactions.LoanTransaction.Amount:type_name -> openbank.core.v1.Amount
	56,  // 78: openbank.core.v1.transactions.LoanTransaction.CardTransaction:type_name -> openbank.core.v1.cards.Transaction
	27,  // 79: openbank.core.v1.transactions.LoanTransaction.CustomPaymentAmounts:type_name -> openbank.core.v1.transactions.CustomPaymentAmount
	52,  // 80: openbank.core.v1.transactions.LoanTransaction.Fees:type_name -> openbank.core.v1.transactions.TransactionFee
	55,  // 81: openbank.core.v1.transactions.LoanTransaction.OriginalAmount:type_name -> openbank.core.v1.Amount
	2,   // 82: openbank.core.v1.transactions.LoanTransaction.RecalculationMethod:type_name -> openbank.core.v1.transactions.CalculationMethod
	28,  // 83: openbank.core.v1.transactions.LoanTransaction.Taxes:type_name -> openbank.core.v1.transactions.Taxes
	30,  // 84: openbank.core.v1.transactions.LoanTransaction.Terms:type_name -> openbank.core.v1.transactions.LoanTerm
	51,  // 85: openbank.core.v1.transactions.LoanTransaction.TransferDetails:type_name -> openbank.core.v1.transactions.TransferDetails
	58,  // 86: openbank.core.v1.transactions.LoanTransaction.CreateTime:type_name -> google.protobuf.Timestamp
	58,  // 87: openbank.core.v1.transactions.LoanTransaction.BookTime:type_name -> google.protobuf.Timestamp
	58,  // 88: openbank.core.v1.transactions.LoanTransaction.ValueTime:type_name -> google.protobuf.Timestamp
	55,  // 89: openbank.core.v1.transactions.NewInstallment.AmountToAdd:type_name -> openbank.core.v1.Amount
	55,  // 90: openbank.core.v1.transactions.DisbursementFee.Amount:type_name -> openbank.core.v1.Amount
	55,  // 91: openbank.core.v1.transactions.NewDisbursement.Amount:type_name -> openbank.core.v1.Amount
	33,  // 92: openbank.core.v1.transactions.NewDisbursement.Fees:type_name -> openbank.core.v1.transactions.DisbursementFee
	58,  // 93: openbank.core.v1.transactions.NewDisbursement.BookTime:type_name -> google.protobuf.Timestamp
	58,  // 94: openbank.core.v1.transactions.NewDisbursement.ValueTime:type_name -> google.protobuf.Timestamp
	58,  // 95: openbank.core.v1.transactions.NewDisbursement.FirstRepayTime:type_name -> google.protobuf.Timestamp
	34,  // 96: openbank.core.v1.transactions.CreateDisbursementRequest.Body:type_name -> openbank.core.v1.transactions.NewDisbursement
	55,  // 97: openbank.core.v1.transactions.NewLoanFee.Amount:type_name -> openbank.core.v1.Amount
	58,  // 98: openbank.core.v1.transactions.NewLoanFee.BookTime:type_name -> google.protobuf.Timestamp
	58,  // 99: openbank.core.v1.transactions.NewLoanFee.ValueTime:type_name -> google.protobuf.Timestamp
	36,  // 100: openbank.core.v1.transactions.CreateLoanFeeRequest.Body:type_name -> openbank.core.v1.transactions.NewLoanFee
	55,  // 101: openbank.core.v1.transactions.NewPayment.Amount:type_name -> openbank.core.v1.Amount
	58,  // 102: openbank.core.v1.transactions.NewPayment.BookTime:type_name -> google.protobuf.Timestamp
	58,  // 103: openbank.core.v1.transactions.NewPayment.ValueTime:type_name -> google.protobuf.Timestamp
	38,  // 104: openbank.core.v1.transactions.CreatePaymentRequest.Body:type_name -> openbank.core.v1.transactions.NewPayment
	55,  // 105: openbank.core.v1.transactions.NewRedrawRepayment.Amount:type_name -> openbank.core.v1.Amount
	58,  // 106: openbank.core.v1.transactions.NewRedrawRepayment.BookTime:type_name -> google.protobuf.Timestamp
	58,  // 107: openbank.core.v1.transactions.NewRedrawRepayment.ValueTime:type_name -> google.protobuf.Timestamp
	40,  // 108: openbank.core.v1.transactions.CreateRedrawPaymentRequest.Body:type_name -> openbank.core.v1.transactions.NewRedrawRepayment
	55,  // 109: openbank.core.v1.transactions.NewRepayment.Amount:type_name -> openbank.core.v1.Amount
	27,  // 110: openbank.core.v1.transactions.NewRepayment.CustomPaymentAmounts:type_name -> openbank.core.v1.transactions.CustomPaymentAmount
	2,   // 111: openbank.core.v1.transactions.NewRepayment.CalculationMethod:type_name -> openbank.core.v1.transactions.CalculationMethod
	58,  // 112: openbank.core.v1.transactions.NewRepayment.BookTime:type_name -> google.protobuf.Timestamp
	58,  // 113: openbank.core.v1.transactions.NewRepayment.ValueTime:type_name -> google.protobuf.Timestamp
	42,  // 114: openbank.core.v1.transactions.CreateRepaymentRequest.Body:type_name -> openbank.core.v1.transactions.NewRepayment
	55,  // 115: openbank.core.v1.transactions.NewWithdrawalRedraw.Amount:type_name -> openbank.core.v1.Amount
	58,  // 116: openbank.core.v1.transactions.NewWithdrawalRedraw.BookTime:type_name -> google.protobuf.Timestamp
	58,  // 117: openbank.core.v1.transactions.NewWithdrawalRedraw.ValueTime:type_name -> google.protobuf.Timestamp
	44,  // 118: openbank.core.v1.transactions.CreateWithdrawalRedrawRequest.Body:type_name -> openbank.core.v1.transactions.NewWithdrawalRedraw
	31,  // 119: openbank.core.v1.transactions.ListLoanTransactionsResponse.Transactions:type_name -> openbank.core.v1.transactions.LoanTransaction
	58,  // 120: openbank.core.v1.transactions.NewLoanAdjustment.BookTime:type_name -> google.protobuf.Timestamp
	32,  // 121: openbank.core.v1.transactions.NewLoanAdjustment.Installments:type_name -> openbank.core.v1.transactions.NewInstallment
	49,  // 122: openbank.core.v1.transactions.AdjustLoanRequest.Body:type_name -> openbank.core.v1.transactions.NewLoanAdjustment
	55,  // 123: openbank.core.v1.transactions.TransactionFee.Amount:type_name -> openbank.core.v1.Amount
	55,  // 124: openbank.core.v1.transactions.TransactionFee.TaxAmount:type_name -> openbank.core.v1.Amount
	59,  // 125: openbank.core.v1.transactions.TransactionFee.Trigger:type_name -> openbank.core.v1.products.FeeTrigger
	55,  // 126: openbank.core.v1.transactions.NewWithdrawal.Amount:type_name -> openbank.core.v1.Amount
	57,  // 127: openbank.core.v1.transactions.NewWithdrawal.Payment:type_name -> openbank.core.v1.deposits.Payment
	58,  // 128: openbank.core.v1.transactions.NewWithdrawal.BookTime:type_name -> google.protobuf.Timestamp
	58,  // 129: openbank.core.v1.transactions.NewWithdrawal.ValueTime:type_name -> google.protobuf.Timestamp
	53,  // 130: openbank.core.v1.transactions.CreateWithdrawalRequest.Body:type_name -> openbank.core.v1.transactions.NewWithdrawal
	10,  // 131: openbank.core.v1.transactions.DepositTransactionsService.CreateBulkDeposit:input_type -> openbank.core.v1.transactions.CreateBulkDepositRequest
	12,  // 132: openbank.core.v1.transactions.DepositTransactionsService.CreateDeposit:input_type -> openbank.core.v1.transactions.CreateDepositRequest
	16,  // 133: openbank.core.v1.transactions.DepositTransactionsService.CreateFee:input_type -> openbank.core.v1.transactions.CreateDepositFeeRequest
	18,  // 134: openbank.core.v1.transactions.DepositTransactionsService.CreateSeizure:input_type -> openbank.core.v1.transactions.CreateSeizureRequest
	20,  // 135: openbank.core.v1.transactions.DepositTransactionsService.CreateTransfer:input_type -> openbank.core.v1.transactions.CreateTransferRequest
	54,  // 136: openbank.core.v1.transactions.DepositTransactionsService.CreateWithdrawal:input_type -> openbank.core.v1.transactions.CreateWithdrawalRequest
	22,  // 137: openbank.core.v1.transactions.DepositTransactionsService.ListDepositTransactions:input_type -> openbank.core.v1.transactions.ListDepositTransactionsRequest
	24,  // 138: openbank.core.v1.transactions.DepositTransactionsService.GetDepositTransaction:input_type -> openbank.core.v1.transactions.GetDepositTransactionRequest
	14,  // 139: openbank.core.v1.transactions.DepositTransactionsService.Adjust:input_type -> openbank.core.v1.transactions.AdjustDepositRequest
	21,  // 140: openbank.core.v1.transactions.DepositTransactionsService.GetDocument:input_type -> openbank.core.v1.transactions.GetDocumentRequest
	35,  // 141: openbank.core.v1.transactions.LoanTransactionsService.CreateDisbursement:input_type -> openbank.core.v1.transactions.CreateDisbursementRequest
	37,  // 142: openbank.core.v1.transactions.LoanTransactionsService.CreateFee:input_type -> openbank.core.v1.transactions.CreateLoanFeeRequest
	39,  // 143: openbank.core.v1.transactions.LoanTransactionsService.CreatePayment:input_type -> openbank.core.v1.transactions.CreatePaymentRequest
	41,  // 144: openbank.core.v1.transactions.LoanTransactionsService.CreateRedrawPayment:input_type -> openbank.core.v1.transactions.CreateRedrawPaymentRequest
	43,  // 145: openbank.core.v1.transactions.LoanTransactionsService.CreateRepayment:input_type -> openbank.core.v1.transactions.CreateRepaymentRequest
	54,  // 146: openbank.core.v1.transactions.LoanTransactionsService.CreateWithdrawal:input_type -> openbank.core.v1.transactions.CreateWithdrawalRequest
	45,  // 147: openbank.core.v1.transactions.LoanTransactionsService.CreateWithdrawalRedraw:input_type -> openbank.core.v1.transactions.CreateWithdrawalRedrawRequest
	46,  // 148: openbank.core.v1.transactions.LoanTransactionsService.ListLoanTransactions:input_type -> openbank.core.v1.transactions.ListLoanTransactionsRequest
	48,  // 149: openbank.core.v1.transactions.LoanTransactionsService.GetLoanTransaction:input_type -> openbank.core.v1.transactions.GetLoanTransactionRequest
	50,  // 150: openbank.core.v1.transactions.LoanTransactionsService.Adjust:input_type -> openbank.core.v1.transactions.AdjustLoanRequest
	60,  // 151: openbank.core.v1.transactions.DepositTransactionsService.CreateBulkDeposit:output_type -> google.protobuf.Empty
	7,   // 152: openbank.core.v1.transactions.DepositTransactionsService.CreateDeposit:output_type -> openbank.core.v1.transactions.DepositTransaction
	7,   // 153: openbank.core.v1.transactions.DepositTransactionsService.CreateFee:output_type -> openbank.core.v1.transactions.DepositTransaction
	7,   // 154: openbank.core.v1.transactions.DepositTransactionsService.CreateSeizure:output_type -> openbank.core.v1.transactions.DepositTransaction
	7,   // 155: openbank.core.v1.transactions.DepositTransactionsService.CreateTransfer:output_type -> openbank.core.v1.transactions.DepositTransaction
	7,   // 156: openbank.core.v1.transactions.DepositTransactionsService.CreateWithdrawal:output_type -> openbank.core.v1.transactions.DepositTransaction
	23,  // 157: openbank.core.v1.transactions.DepositTransactionsService.ListDepositTransactions:output_type -> openbank.core.v1.transactions.ListDepositTransactionsResponse
	7,   // 158: openbank.core.v1.transactions.DepositTransactionsService.GetDepositTransaction:output_type -> openbank.core.v1.transactions.DepositTransaction
	7,   // 159: openbank.core.v1.transactions.DepositTransactionsService.Adjust:output_type -> openbank.core.v1.transactions.DepositTransaction
	61,  // 160: openbank.core.v1.transactions.DepositTransactionsService.GetDocument:output_type -> openbank.core.v1.File
	31,  // 161: openbank.core.v1.transactions.LoanTransactionsService.CreateDisbursement:output_type -> openbank.core.v1.transactions.LoanTransaction
	31,  // 162: openbank.core.v1.transactions.LoanTransactionsService.CreateFee:output_type -> openbank.core.v1.transactions.LoanTransaction
	31,  // 163: openbank.core.v1.transactions.LoanTransactionsService.CreatePayment:output_type -> openbank.core.v1.transactions.LoanTransaction
	31,  // 164: openbank.core.v1.transactions.LoanTransactionsService.CreateRedrawPayment:output_type -> openbank.core.v1.transactions.LoanTransaction
	31,  // 165: openbank.core.v1.transactions.LoanTransactionsService.CreateRepayment:output_type -> openbank.core.v1.transactions.LoanTransaction
	31,  // 166: openbank.core.v1.transactions.LoanTransactionsService.CreateWithdrawal:output_type -> openbank.core.v1.transactions.LoanTransaction
	31,  // 167: openbank.core.v1.transactions.LoanTransactionsService.CreateWithdrawalRedraw:output_type -> openbank.core.v1.transactions.LoanTransaction
	47,  // 168: openbank.core.v1.transactions.LoanTransactionsService.ListLoanTransactions:output_type -> openbank.core.v1.transactions.ListLoanTransactionsResponse
	31,  // 169: openbank.core.v1.transactions.LoanTransactionsService.GetLoanTransaction:output_type -> openbank.core.v1.transactions.LoanTransaction
	31,  // 170: openbank.core.v1.transactions.LoanTransactionsService.Adjust:output_type -> openbank.core.v1.transactions.LoanTransaction
	151, // [151:171] is the sub-list for method output_type
	131, // [131:151] is the sub-list for method input_type
	131, // [131:131] is the sub-list for extension type_name
	131, // [131:131] is the sub-list for extension extendee
	0,   // [0:131] is the sub-list for field type_name
}

func init() { file_bnk_to_core_api_v1_transactions_all_proto_init() }
func file_bnk_to_core_api_v1_transactions_all_proto_init() {
	if File_bnk_to_core_api_v1_transactions_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffectedAmounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterestAccruedAmounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDepositTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDepositTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBulkDepositRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDepositTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDepositRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDepositAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustDepositRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDepositFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDepositFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSeizeBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeizureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTransferTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDepositTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDepositTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDepositTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBalances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoanAffectedAmounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPaymentAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taxes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInterestSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoanTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoanTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewInstallment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisbursementFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDisbursement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDisbursementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewLoanFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLoanFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRedrawRepayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRedrawPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRepayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRepaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewWithdrawalRedraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWithdrawalRedrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoanTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLoanTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoanTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewLoanAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustLoanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewWithdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_transactions_all_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWithdrawalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bnk_to_core_api_v1_transactions_all_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_bnk_to_core_api_v1_transactions_all_proto_goTypes,
		DependencyIndexes: file_bnk_to_core_api_v1_transactions_all_proto_depIdxs,
		EnumInfos:         file_bnk_to_core_api_v1_transactions_all_proto_enumTypes,
		MessageInfos:      file_bnk_to_core_api_v1_transactions_all_proto_msgTypes,
	}.Build()
	File_bnk_to_core_api_v1_transactions_all_proto = out.File
	file_bnk_to_core_api_v1_transactions_all_proto_rawDesc = nil
	file_bnk_to_core_api_v1_transactions_all_proto_goTypes = nil
	file_bnk_to_core_api_v1_transactions_all_proto_depIdxs = nil
}
