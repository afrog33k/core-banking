// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bnk.to/core/api/v1/documents/all.proto

package documents

import (
	context "context"

	v1 "bnk.to/core/api/v1"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocumentsServiceClient is the client API for DocumentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentsServiceClient interface {
	// CreateDocument creates a new document.
	CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	// ListDocuments lists document metadatas for the specified owner.
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
	// GetDocument retrieves the metadata of the specified document.
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	// GetFile returns the document for the specified document id.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*v1.File, error)
	// DeleteDocument deletes the document with the specified document id.
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type documentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentsServiceClient(cc grpc.ClientConnInterface) DocumentsServiceClient {
	return &documentsServiceClient{cc}
}

func (c *documentsServiceClient) CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.documents.DocumentsService/CreateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.documents.DocumentsService/ListDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.documents.DocumentsService/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*v1.File, error) {
	out := new(v1.File)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.documents.DocumentsService/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.documents.DocumentsService/DeleteDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentsServiceServer is the server API for DocumentsService service.
// All implementations must embed UnimplementedDocumentsServiceServer
// for forward compatibility
type DocumentsServiceServer interface {
	// CreateDocument creates a new document.
	CreateDocument(context.Context, *CreateDocumentRequest) (*Document, error)
	// ListDocuments lists document metadatas for the specified owner.
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	// GetDocument retrieves the metadata of the specified document.
	GetDocument(context.Context, *GetDocumentRequest) (*Document, error)
	// GetFile returns the document for the specified document id.
	GetFile(context.Context, *GetFileRequest) (*v1.File, error)
	// DeleteDocument deletes the document with the specified document id.
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDocumentsServiceServer()
}

// UnimplementedDocumentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentsServiceServer struct{}

func (UnimplementedDocumentsServiceServer) CreateDocument(context.Context, *CreateDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocument not implemented")
}

func (UnimplementedDocumentsServiceServer) ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}

func (UnimplementedDocumentsServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}

func (UnimplementedDocumentsServiceServer) GetFile(context.Context, *GetFileRequest) (*v1.File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}

func (UnimplementedDocumentsServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedDocumentsServiceServer) mustEmbedUnimplementedDocumentsServiceServer() {}

// UnsafeDocumentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentsServiceServer will
// result in compilation errors.
type UnsafeDocumentsServiceServer interface {
	mustEmbedUnimplementedDocumentsServiceServer()
}

func RegisterDocumentsServiceServer(s grpc.ServiceRegistrar, srv DocumentsServiceServer) {
	s.RegisterService(&DocumentsService_ServiceDesc, srv)
}

func _DocumentsService_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.documents.DocumentsService/CreateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).CreateDocument(ctx, req.(*CreateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.documents.DocumentsService/ListDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.documents.DocumentsService/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.documents.DocumentsService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.documents.DocumentsService/DeleteDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentsService_ServiceDesc is the grpc.ServiceDesc for DocumentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.documents.DocumentsService",
	HandlerType: (*DocumentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDocument",
			Handler:    _DocumentsService_CreateDocument_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _DocumentsService_ListDocuments_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DocumentsService_GetDocument_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _DocumentsService_GetFile_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _DocumentsService_DeleteDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/documents/all.proto",
}
