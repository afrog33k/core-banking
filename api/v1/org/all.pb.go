// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: bnk.to/core/api/v1/org/all.proto

// Package org allows retrieving and managing the organization's configuration.

package org

import (
	reflect "reflect"
	sync "sync"

	v1 "bnk.to/core/api/v1"
	_ "github.com/xo/ecosystem/proto/xo"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChannelConstraintCriteria is a criteria for the constraints in a transaction
// channel.
type ChannelConstraintCriteria int32

const (
	ChannelConstraintCriteria_ChannelConstraintAmount  ChannelConstraintCriteria = 0
	ChannelConstraintCriteria_ChannelConstraintType    ChannelConstraintCriteria = 1
	ChannelConstraintCriteria_ChannelConstraintProduct ChannelConstraintCriteria = 2
)

// Enum value maps for ChannelConstraintCriteria.
var (
	ChannelConstraintCriteria_name = map[int32]string{
		0: "ChannelConstraintAmount",
		1: "ChannelConstraintType",
		2: "ChannelConstraintProduct",
	}
	ChannelConstraintCriteria_value = map[string]int32{
		"ChannelConstraintAmount":  0,
		"ChannelConstraintType":    1,
		"ChannelConstraintProduct": 2,
	}
)

func (x ChannelConstraintCriteria) Enum() *ChannelConstraintCriteria {
	p := new(ChannelConstraintCriteria)
	*p = x
	return p
}

func (x ChannelConstraintCriteria) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelConstraintCriteria) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[0].Descriptor()
}

func (ChannelConstraintCriteria) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[0]
}

func (x ChannelConstraintCriteria) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelConstraintCriteria.Descriptor instead.
func (ChannelConstraintCriteria) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{0}
}

// ChannelConstraintMode is the mode the constraint runs in.
type ChannelConstraintMode int32

const (
	// ChannelConstraintMode_MatchAll is a value that prevents the transaction from occurring if all
	// constraints are violated.
	ChannelConstraintMode_MatchAll ChannelConstraintMode = 0
	// ChannelConstraintMode_MatchAny is a value that prevents the transaction from occurring if any
	// constraints are violated.
	ChannelConstraintMode_MatchAny ChannelConstraintMode = 1
)

// Enum value maps for ChannelConstraintMode.
var (
	ChannelConstraintMode_name = map[int32]string{
		0: "MatchAll",
		1: "MatchAny",
	}
	ChannelConstraintMode_value = map[string]int32{
		"MatchAll": 0,
		"MatchAny": 1,
	}
)

func (x ChannelConstraintMode) Enum() *ChannelConstraintMode {
	p := new(ChannelConstraintMode)
	*p = x
	return p
}

func (x ChannelConstraintMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelConstraintMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[1].Descriptor()
}

func (ChannelConstraintMode) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[1]
}

func (x ChannelConstraintMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelConstraintMode.Descriptor instead.
func (ChannelConstraintMode) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{1}
}

// Day is a day in the week.
type Day int32

const (
	Day_Monday    Day = 0
	Day_Tuesday   Day = 1
	Day_Wednesday Day = 2
	Day_Thursday  Day = 3
	Day_Friday    Day = 4
	Day_Saturday  Day = 5
	Day_Sunday    Day = 6
)

// Enum value maps for Day.
var (
	Day_name = map[int32]string{
		0: "Monday",
		1: "Tuesday",
		2: "Wednesday",
		3: "Thursday",
		4: "Friday",
		5: "Saturday",
		6: "Sunday",
	}
	Day_value = map[string]int32{
		"Monday":    0,
		"Tuesday":   1,
		"Wednesday": 2,
		"Thursday":  3,
		"Friday":    4,
		"Saturday":  5,
		"Sunday":    6,
	}
)

func (x Day) Enum() *Day {
	p := new(Day)
	*p = x
	return p
}

func (x Day) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Day) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[2].Descriptor()
}

func (Day) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[2]
}

func (x Day) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Day.Descriptor instead.
func (Day) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{2}
}

// AssignmentConstraint is a requirement for a field to be present in users or
// groups.
type AssignmentConstraint int32

const (
	AssignmentConstraint_ConstraintBranch        AssignmentConstraint = 0
	AssignmentConstraint_ConstraintCentre        AssignmentConstraint = 1
	AssignmentConstraint_ConstraintCreditOfficer AssignmentConstraint = 2
	AssignmentConstraint_ConstraintGroup         AssignmentConstraint = 3
)

// Enum value maps for AssignmentConstraint.
var (
	AssignmentConstraint_name = map[int32]string{
		0: "ConstraintBranch",
		1: "ConstraintCentre",
		2: "ConstraintCreditOfficer",
		3: "ConstraintGroup",
	}
	AssignmentConstraint_value = map[string]int32{
		"ConstraintBranch":        0,
		"ConstraintCentre":        1,
		"ConstraintCreditOfficer": 2,
		"ConstraintGroup":         3,
	}
)

func (x AssignmentConstraint) Enum() *AssignmentConstraint {
	p := new(AssignmentConstraint)
	*p = x
	return p
}

func (x AssignmentConstraint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssignmentConstraint) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[3].Descriptor()
}

func (AssignmentConstraint) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[3]
}

func (x AssignmentConstraint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssignmentConstraint.Descriptor instead.
func (AssignmentConstraint) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{3}
}

// AppComponent is a component that can be enabled and disabled independently.
type AppComponent int32

const (
	AppComponent_ComponentLoans          AppComponent = 0
	AppComponent_ComponentDeposits       AppComponent = 1
	AppComponent_ComponentBranches       AppComponent = 2
	AppComponent_ComponentCentres        AppComponent = 3
	AppComponent_ComponentClients        AppComponent = 4
	AppComponent_ComponentGroups         AppComponent = 5
	AppComponent_ComponentAccounting     AppComponent = 6
	AppComponent_ComponentCreditOfficers AppComponent = 7
)

// Enum value maps for AppComponent.
var (
	AppComponent_name = map[int32]string{
		0: "ComponentLoans",
		1: "ComponentDeposits",
		2: "ComponentBranches",
		3: "ComponentCentres",
		4: "ComponentClients",
		5: "ComponentGroups",
		6: "ComponentAccounting",
		7: "ComponentCreditOfficers",
	}
	AppComponent_value = map[string]int32{
		"ComponentLoans":          0,
		"ComponentDeposits":       1,
		"ComponentBranches":       2,
		"ComponentCentres":        3,
		"ComponentClients":        4,
		"ComponentGroups":         5,
		"ComponentAccounting":     6,
		"ComponentCreditOfficers": 7,
	}
)

func (x AppComponent) Enum() *AppComponent {
	p := new(AppComponent)
	*p = x
	return p
}

func (x AppComponent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppComponent) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[4].Descriptor()
}

func (AppComponent) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[4]
}

func (x AppComponent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppComponent.Descriptor instead.
func (AppComponent) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{4}
}

// DashboardComponent is a component that can be shown on the dashboard.
type DashboardComponent int32

const (
	DashboardComponent_DashboardLatestActivity     DashboardComponent = 0
	DashboardComponent_DashboardTasks              DashboardComponent = 1
	DashboardComponent_DashboardFavoriteViews      DashboardComponent = 2
	DashboardComponent_DashboardIndicators         DashboardComponent = 3
	DashboardComponent_DashboardCurrentTills       DashboardComponent = 4
	DashboardComponent_DashboardClients            DashboardComponent = 5
	DashboardComponent_DashboardUpcomingRepayments DashboardComponent = 6
	DashboardComponent_DashboardNone               DashboardComponent = 7
)

// Enum value maps for DashboardComponent.
var (
	DashboardComponent_name = map[int32]string{
		0: "DashboardLatestActivity",
		1: "DashboardTasks",
		2: "DashboardFavoriteViews",
		3: "DashboardIndicators",
		4: "DashboardCurrentTills",
		5: "DashboardClients",
		6: "DashboardUpcomingRepayments",
		7: "DashboardNone",
	}
	DashboardComponent_value = map[string]int32{
		"DashboardLatestActivity":     0,
		"DashboardTasks":              1,
		"DashboardFavoriteViews":      2,
		"DashboardIndicators":         3,
		"DashboardCurrentTills":       4,
		"DashboardClients":            5,
		"DashboardUpcomingRepayments": 6,
		"DashboardNone":               7,
	}
)

func (x DashboardComponent) Enum() *DashboardComponent {
	p := new(DashboardComponent)
	*p = x
	return p
}

func (x DashboardComponent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardComponent) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[5].Descriptor()
}

func (DashboardComponent) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[5]
}

func (x DashboardComponent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardComponent.Descriptor instead.
func (DashboardComponent) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{5}
}

// DecimalSeparator is the character used to separate integral and fractional
// values in the organization.
type DecimalSeparator int32

const (
	DecimalSeparator_Comma DecimalSeparator = 0
	DecimalSeparator_Point DecimalSeparator = 1
)

// Enum value maps for DecimalSeparator.
var (
	DecimalSeparator_name = map[int32]string{
		0: "Comma",
		1: "Point",
	}
	DecimalSeparator_value = map[string]int32{
		"Comma": 0,
		"Point": 1,
	}
)

func (x DecimalSeparator) Enum() *DecimalSeparator {
	p := new(DecimalSeparator)
	*p = x
	return p
}

func (x DecimalSeparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecimalSeparator) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[6].Descriptor()
}

func (DecimalSeparator) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[6]
}

func (x DecimalSeparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecimalSeparator.Descriptor instead.
func (DecimalSeparator) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{6}
}

// DuplicateItemType is the type of items to use to check for duplicates.
type DuplicateItemType int32

const (
	DuplicateItemType_FieldLoans                        DuplicateItemType = 0
	DuplicateItemType_FieldSavings                      DuplicateItemType = 1
	DuplicateItemType_FieldClient                       DuplicateItemType = 2
	DuplicateItemType_FieldClientRole                   DuplicateItemType = 3
	DuplicateItemType_FieldGroup                        DuplicateItemType = 4
	DuplicateItemType_FieldGroupRole                    DuplicateItemType = 5
	DuplicateItemType_FieldTransaction                  DuplicateItemType = 6
	DuplicateItemType_FieldJournalEntry                 DuplicateItemType = 7
	DuplicateItemType_FieldInterestAccrualBreakdown     DuplicateItemType = 8
	DuplicateItemType_FieldBranch                       DuplicateItemType = 9
	DuplicateItemType_FieldCentre                       DuplicateItemType = 10
	DuplicateItemType_FieldUser                         DuplicateItemType = 11
	DuplicateItemType_FieldLoanProduct                  DuplicateItemType = 12
	DuplicateItemType_FieldSavingsProduct               DuplicateItemType = 13
	DuplicateItemType_FieldNotificationMessage          DuplicateItemType = 14
	DuplicateItemType_FieldNotificationTemplate         DuplicateItemType = 15
	DuplicateItemType_FieldRepayment                    DuplicateItemType = 16
	DuplicateItemType_FieldRepaymentCollection          DuplicateItemType = 17
	DuplicateItemType_FieldActivity                     DuplicateItemType = 18
	DuplicateItemType_FieldLineOfCredit                 DuplicateItemType = 19
	DuplicateItemType_FieldIdentificationDocument       DuplicateItemType = 20
	DuplicateItemType_FieldAttachment                   DuplicateItemType = 21
	DuplicateItemType_FieldCurrency                     DuplicateItemType = 22
	DuplicateItemType_FieldProduct                      DuplicateItemType = 23
	DuplicateItemType_FieldRevenue                      DuplicateItemType = 24
	DuplicateItemType_FieldExpense                      DuplicateItemType = 25
	DuplicateItemType_FieldOutstandingPortfolioAccounts DuplicateItemType = 26
	DuplicateItemType_FieldOutstandingPortfolioAmounts  DuplicateItemType = 27
	DuplicateItemType_FieldCreatedAccounts              DuplicateItemType = 28
	DuplicateItemType_FieldWrittenOffLoans              DuplicateItemType = 29
	DuplicateItemType_FieldDisbursedLoans               DuplicateItemType = 30
	DuplicateItemType_FieldLoanGroup                    DuplicateItemType = 31
	DuplicateItemType_FieldTranche                      DuplicateItemType = 32
	DuplicateItemType_FieldDisbursementDetails          DuplicateItemType = 33
	DuplicateItemType_FieldTransactionDetails           DuplicateItemType = 34
	DuplicateItemType_FieldTransactionChannel           DuplicateItemType = 35
	DuplicateItemType_FieldCustomPredefinedFee          DuplicateItemType = 36
	DuplicateItemType_FieldCustomFieldSelection         DuplicateItemType = 37
	DuplicateItemType_FieldPredefinedFee                DuplicateItemType = 38
	DuplicateItemType_FieldLoanTransaction              DuplicateItemType = 39
	DuplicateItemType_FieldSavingsTransaction           DuplicateItemType = 40
	DuplicateItemType_FieldCardTransactionReversal      DuplicateItemType = 41
	DuplicateItemType_FieldComposedTransactions         DuplicateItemType = 42
	DuplicateItemType_FieldUnionTransactions            DuplicateItemType = 43
	DuplicateItemType_FieldInvestorFund                 DuplicateItemType = 44
	DuplicateItemType_FieldPrincipalPaymentSettings     DuplicateItemType = 45
	DuplicateItemType_FieldLoanAccountGuaranty          DuplicateItemType = 46
	DuplicateItemType_FieldTask                         DuplicateItemType = 47
	DuplicateItemType_FieldDocumentTemplate             DuplicateItemType = 48
	DuplicateItemType_FieldIndexRate                    DuplicateItemType = 49
	DuplicateItemType_FieldIndexRateSource              DuplicateItemType = 50
	DuplicateItemType_FieldInterestProductSettings      DuplicateItemType = 51
	DuplicateItemType_FieldMccExpiration                DuplicateItemType = 52
	DuplicateItemType_FieldProductArrearsSettings       DuplicateItemType = 53
	DuplicateItemType_FieldDocumentIDAndType            DuplicateItemType = 54
	DuplicateItemType_FieldHomePhone                    DuplicateItemType = 55
	DuplicateItemType_FieldMobilePhone                  DuplicateItemType = 56
	DuplicateItemType_FieldEmail                        DuplicateItemType = 57
	DuplicateItemType_FieldFullName                     DuplicateItemType = 58
	DuplicateItemType_FieldLastNameDOB                  DuplicateItemType = 59
)

// Enum value maps for DuplicateItemType.
var (
	DuplicateItemType_name = map[int32]string{
		0:  "FieldLoans",
		1:  "FieldSavings",
		2:  "FieldClient",
		3:  "FieldClientRole",
		4:  "FieldGroup",
		5:  "FieldGroupRole",
		6:  "FieldTransaction",
		7:  "FieldJournalEntry",
		8:  "FieldInterestAccrualBreakdown",
		9:  "FieldBranch",
		10: "FieldCentre",
		11: "FieldUser",
		12: "FieldLoanProduct",
		13: "FieldSavingsProduct",
		14: "FieldNotificationMessage",
		15: "FieldNotificationTemplate",
		16: "FieldRepayment",
		17: "FieldRepaymentCollection",
		18: "FieldActivity",
		19: "FieldLineOfCredit",
		20: "FieldIdentificationDocument",
		21: "FieldAttachment",
		22: "FieldCurrency",
		23: "FieldProduct",
		24: "FieldRevenue",
		25: "FieldExpense",
		26: "FieldOutstandingPortfolioAccounts",
		27: "FieldOutstandingPortfolioAmounts",
		28: "FieldCreatedAccounts",
		29: "FieldWrittenOffLoans",
		30: "FieldDisbursedLoans",
		31: "FieldLoanGroup",
		32: "FieldTranche",
		33: "FieldDisbursementDetails",
		34: "FieldTransactionDetails",
		35: "FieldTransactionChannel",
		36: "FieldCustomPredefinedFee",
		37: "FieldCustomFieldSelection",
		38: "FieldPredefinedFee",
		39: "FieldLoanTransaction",
		40: "FieldSavingsTransaction",
		41: "FieldCardTransactionReversal",
		42: "FieldComposedTransactions",
		43: "FieldUnionTransactions",
		44: "FieldInvestorFund",
		45: "FieldPrincipalPaymentSettings",
		46: "FieldLoanAccountGuaranty",
		47: "FieldTask",
		48: "FieldDocumentTemplate",
		49: "FieldIndexRate",
		50: "FieldIndexRateSource",
		51: "FieldInterestProductSettings",
		52: "FieldMccExpiration",
		53: "FieldProductArrearsSettings",
		54: "FieldDocumentIDAndType",
		55: "FieldHomePhone",
		56: "FieldMobilePhone",
		57: "FieldEmail",
		58: "FieldFullName",
		59: "FieldLastNameDOB",
	}
	DuplicateItemType_value = map[string]int32{
		"FieldLoans":                        0,
		"FieldSavings":                      1,
		"FieldClient":                       2,
		"FieldClientRole":                   3,
		"FieldGroup":                        4,
		"FieldGroupRole":                    5,
		"FieldTransaction":                  6,
		"FieldJournalEntry":                 7,
		"FieldInterestAccrualBreakdown":     8,
		"FieldBranch":                       9,
		"FieldCentre":                       10,
		"FieldUser":                         11,
		"FieldLoanProduct":                  12,
		"FieldSavingsProduct":               13,
		"FieldNotificationMessage":          14,
		"FieldNotificationTemplate":         15,
		"FieldRepayment":                    16,
		"FieldRepaymentCollection":          17,
		"FieldActivity":                     18,
		"FieldLineOfCredit":                 19,
		"FieldIdentificationDocument":       20,
		"FieldAttachment":                   21,
		"FieldCurrency":                     22,
		"FieldProduct":                      23,
		"FieldRevenue":                      24,
		"FieldExpense":                      25,
		"FieldOutstandingPortfolioAccounts": 26,
		"FieldOutstandingPortfolioAmounts":  27,
		"FieldCreatedAccounts":              28,
		"FieldWrittenOffLoans":              29,
		"FieldDisbursedLoans":               30,
		"FieldLoanGroup":                    31,
		"FieldTranche":                      32,
		"FieldDisbursementDetails":          33,
		"FieldTransactionDetails":           34,
		"FieldTransactionChannel":           35,
		"FieldCustomPredefinedFee":          36,
		"FieldCustomFieldSelection":         37,
		"FieldPredefinedFee":                38,
		"FieldLoanTransaction":              39,
		"FieldSavingsTransaction":           40,
		"FieldCardTransactionReversal":      41,
		"FieldComposedTransactions":         42,
		"FieldUnionTransactions":            43,
		"FieldInvestorFund":                 44,
		"FieldPrincipalPaymentSettings":     45,
		"FieldLoanAccountGuaranty":          46,
		"FieldTask":                         47,
		"FieldDocumentTemplate":             48,
		"FieldIndexRate":                    49,
		"FieldIndexRateSource":              50,
		"FieldInterestProductSettings":      51,
		"FieldMccExpiration":                52,
		"FieldProductArrearsSettings":       53,
		"FieldDocumentIDAndType":            54,
		"FieldHomePhone":                    55,
		"FieldMobilePhone":                  56,
		"FieldEmail":                        57,
		"FieldFullName":                     58,
		"FieldLastNameDOB":                  59,
	}
)

func (x DuplicateItemType) Enum() *DuplicateItemType {
	p := new(DuplicateItemType)
	*p = x
	return p
}

func (x DuplicateItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DuplicateItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[7].Descriptor()
}

func (DuplicateItemType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[7]
}

func (x DuplicateItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DuplicateItemType.Descriptor instead.
func (DuplicateItemType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{7}
}

// ConstraintAction is the action that should be done if a constraint is
// violated.
type ConstraintAction int32

const (
	ConstraintAction_None    ConstraintAction = 0
	ConstraintAction_Warning ConstraintAction = 1
	ConstraintAction_Error   ConstraintAction = 2
)

// Enum value maps for ConstraintAction.
var (
	ConstraintAction_name = map[int32]string{
		0: "None",
		1: "Warning",
		2: "Error",
	}
	ConstraintAction_value = map[string]int32{
		"None":    0,
		"Warning": 1,
		"Error":   2,
	}
)

func (x ConstraintAction) Enum() *ConstraintAction {
	p := new(ConstraintAction)
	*p = x
	return p
}

func (x ConstraintAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintAction) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[8].Descriptor()
}

func (ConstraintAction) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[8]
}

func (x ConstraintAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintAction.Descriptor instead.
func (ConstraintAction) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{8}
}

// EndOfDayMode is the mode end-of-day operations are ran. In auto mode, end of
// day tasks are ran automatically. In manual mode, end of day tasks must be
// triggered manually.
type EndOfDayMode int32

const (
	EndOfDayMode_EndOfDayAuto   EndOfDayMode = 0
	EndOfDayMode_EndOfDayManual EndOfDayMode = 1
)

// Enum value maps for EndOfDayMode.
var (
	EndOfDayMode_name = map[int32]string{
		0: "EndOfDayAuto",
		1: "EndOfDayManual",
	}
	EndOfDayMode_value = map[string]int32{
		"EndOfDayAuto":   0,
		"EndOfDayManual": 1,
	}
)

func (x EndOfDayMode) Enum() *EndOfDayMode {
	p := new(EndOfDayMode)
	*p = x
	return p
}

func (x EndOfDayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndOfDayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[9].Descriptor()
}

func (EndOfDayMode) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[9]
}

func (x EndOfDayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndOfDayMode.Descriptor instead.
func (EndOfDayMode) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{9}
}

// ExposureType is the hard limit on amount of loan any user can have at any
// point in time.
type ExposureType int32

const (
	ExposureType_ExposureUnlimited              ExposureType = 0
	ExposureType_ExposureSumOfLoans             ExposureType = 1
	ExposureType_ExposureSumOfLoansMinusSavings ExposureType = 2
)

// Enum value maps for ExposureType.
var (
	ExposureType_name = map[int32]string{
		0: "ExposureUnlimited",
		1: "ExposureSumOfLoans",
		2: "ExposureSumOfLoansMinusSavings",
	}
	ExposureType_value = map[string]int32{
		"ExposureUnlimited":              0,
		"ExposureSumOfLoans":             1,
		"ExposureSumOfLoansMinusSavings": 2,
	}
)

func (x ExposureType) Enum() *ExposureType {
	p := new(ExposureType)
	*p = x
	return p
}

func (x ExposureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExposureType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[10].Descriptor()
}

func (ExposureType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[10]
}

func (x ExposureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExposureType.Descriptor instead.
func (ExposureType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{10}
}

// GroupSizeLimitType is the type of group size limit that is enforced.
type GroupSizeLimitType int32

const (
	GroupSizeLimitType_LimitHard    GroupSizeLimitType = 0
	GroupSizeLimitType_LimitWarning GroupSizeLimitType = 1
	GroupSizeLimitType_LimitNone    GroupSizeLimitType = 2
)

// Enum value maps for GroupSizeLimitType.
var (
	GroupSizeLimitType_name = map[int32]string{
		0: "LimitHard",
		1: "LimitWarning",
		2: "LimitNone",
	}
	GroupSizeLimitType_value = map[string]int32{
		"LimitHard":    0,
		"LimitWarning": 1,
		"LimitNone":    2,
	}
)

func (x GroupSizeLimitType) Enum() *GroupSizeLimitType {
	p := new(GroupSizeLimitType)
	*p = x
	return p
}

func (x GroupSizeLimitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupSizeLimitType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_org_all_proto_enumTypes[11].Descriptor()
}

func (GroupSizeLimitType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_org_all_proto_enumTypes[11]
}

func (x GroupSizeLimitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupSizeLimitType.Descriptor instead.
func (GroupSizeLimitType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{11}
}

// TransferRule is a custom rule overriding the default general ledger code for
// inter-branch transactions. This rule will be applied if the transaction is
// being done between the two branches specified in the rule.
type TransferRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RuleID is the ID of the transfer rule.
	RuleID string `protobuf:"bytes,1,opt,name=RuleID,json=rule_id,proto3" json:"rule_id,omitempty"`
	// GLCode is the ID for the account to assign the inter-branch transactions
	// to.
	GLCode string `protobuf:"bytes,2,opt,name=GLCode,json=gl_code,proto3" json:"gl_code,omitempty"`
	// BranchIDs is a list of branch IDs that the rule applies to.
	BranchIDs []string `protobuf:"bytes,3,rep,name=BranchIDs,json=branch_ids,proto3" json:"branch_ids,omitempty"`
}

func (x *TransferRule) Reset() {
	*x = TransferRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRule) ProtoMessage() {}

func (x *TransferRule) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRule.ProtoReflect.Descriptor instead.
func (*TransferRule) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{0}
}

func (x *TransferRule) GetRuleID() string {
	if x != nil {
		return x.RuleID
	}
	return ""
}

func (x *TransferRule) GetGLCode() string {
	if x != nil {
		return x.GLCode
	}
	return ""
}

func (x *TransferRule) GetBranchIDs() []string {
	if x != nil {
		return x.BranchIDs
	}
	return nil
}

// AccountingConfig is the accounting rules configuration.
type AccountingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DefaultGLCode is the default GL code for processing inter-branch
	// transactions. The GL account is used to balance the accounts at the
	// branch level.
	DefaultGLCode string `protobuf:"bytes,1,opt,name=DefaultGLCode,json=default_gl_code,proto3" json:"default_gl_code,omitempty"`
	// CustomRules is inter-branch GL Account rules.
	CustomRules []*TransferRule `protobuf:"bytes,2,rep,name=CustomRules,json=custom_rules,proto3" json:"custom_rules,omitempty"`
	// ClosureInterval is the number of days between the execution of automated
	// accounting closures. A value of 0 means automated closures do not occur.
	ClosureInterval int32 `protobuf:"varint,3,opt,name=ClosureInterval,json=closure_interval,proto3" json:"closure_interval,omitempty"`
}

func (x *AccountingConfig) Reset() {
	*x = AccountingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingConfig) ProtoMessage() {}

func (x *AccountingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingConfig.ProtoReflect.Descriptor instead.
func (*AccountingConfig) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{1}
}

func (x *AccountingConfig) GetDefaultGLCode() string {
	if x != nil {
		return x.DefaultGLCode
	}
	return ""
}

func (x *AccountingConfig) GetCustomRules() []*TransferRule {
	if x != nil {
		return x.CustomRules
	}
	return nil
}

func (x *AccountingConfig) GetClosureInterval() int32 {
	if x != nil {
		return x.ClosureInterval
	}
	return 0
}

// UpdateConfigRequest is the update rules request.
type UpdateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the accounting rules configuration.
	Body *AccountingConfig `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateConfigRequest) Reset() {
	*x = UpdateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigRequest) ProtoMessage() {}

func (x *UpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateConfigRequest) GetBody() *AccountingConfig {
	if x != nil {
		return x.Body
	}
	return nil
}

// ChannelConstraint is a constraint for the transaction channel configuration.
type ChannelConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Criteria is the criteria used to apply the constraint.
	Criteria ChannelConstraintCriteria `protobuf:"varint,1,opt,name=Criteria,json=criteria,proto3,enum=openbank.core.v1.org.ChannelConstraintCriteria" json:"criteria,omitempty"`
	// Operator is the operator to apply to the criteria.
	Operator v1.Operator `protobuf:"varint,2,opt,name=Operator,json=operator,proto3,enum=openbank.core.v1.Operator" json:"operator,omitempty"`
	// Values is a list of values used in filtering.
	Values []string `protobuf:"bytes,3,rep,name=Values,json=values,proto3" json:"values,omitempty"`
}

func (x *ChannelConstraint) Reset() {
	*x = ChannelConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConstraint) ProtoMessage() {}

func (x *ChannelConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConstraint.ProtoReflect.Descriptor instead.
func (*ChannelConstraint) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelConstraint) GetCriteria() ChannelConstraintCriteria {
	if x != nil {
		return x.Criteria
	}
	return ChannelConstraintCriteria_ChannelConstraintAmount
}

func (x *ChannelConstraint) GetOperator() v1.Operator {
	if x != nil {
		return x.Operator
	}
	return v1.Operator(0)
}

func (x *ChannelConstraint) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// ChannelConstraints is the configuration for transaction channel constraints.
type ChannelConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constraints is a list of constraints applied to the channel.
	Constraints []*ChannelConstraint `protobuf:"bytes,1,rep,name=Constraints,json=constraints,proto3" json:"constraints,omitempty"`
	// Filter is the type of filter to apply to the constraints.
	Filter ChannelConstraintMode `protobuf:"varint,2,opt,name=Filter,json=filter,proto3,enum=openbank.core.v1.org.ChannelConstraintMode" json:"filter,omitempty"`
}

func (x *ChannelConstraints) Reset() {
	*x = ChannelConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConstraints) ProtoMessage() {}

func (x *ChannelConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConstraints.ProtoReflect.Descriptor instead.
func (*ChannelConstraints) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{4}
}

func (x *ChannelConstraints) GetConstraints() []*ChannelConstraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *ChannelConstraints) GetFilter() ChannelConstraintMode {
	if x != nil {
		return x.Filter
	}
	return ChannelConstraintMode_MatchAll
}

// Channel is the a channel for processing transactions.
type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChannelID is the ID of the channel.
	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
	// GLAccount is the associated GL account with the transaction channel.
	GLAccount string `protobuf:"bytes,2,opt,name=GLAccount,json=gl_account,proto3" json:"gl_account,omitempty"`
	// Name is the user-defined name of the transaction channel.
	Name string `protobuf:"bytes,3,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// LoansConstraints is the constraints of loan transactions using the
	// transaction channel.
	LoansConstraints *ChannelConstraints `protobuf:"bytes,4,opt,name=LoansConstraints,json=loans_constraints,proto3" json:"loans_constraints,omitempty"`
	// DepositConstraints is the constraints of deposit transactions using the
	// transaction channel.
	DepositConstraints *ChannelConstraints `protobuf:"bytes,5,opt,name=DepositConstraints,json=deposit_constraints,proto3" json:"deposit_constraints,omitempty"`
	// State is the current status of the transaction channel.
	State v1.State `protobuf:"varint,6,opt,name=State,json=state,proto3,enum=openbank.core.v1.State" json:"state,omitempty"`
	// Default is a flag that picks the channel by default in the UI, setting a
	// channel to default will remove the default flag from all other channels.
	Default bool `protobuf:"varint,7,opt,name=Default,json=default,proto3" json:"default,omitempty"`
	// AllowedUsers is a list of users for the transaction channel. If empty,
	// the field is visible to all users.
	AllowedUsers []string `protobuf:"bytes,8,rep,name=AllowedUsers,json=allowed_users,proto3" json:"allowed_users,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{5}
}

func (x *Channel) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *Channel) GetGLAccount() string {
	if x != nil {
		return x.GLAccount
	}
	return ""
}

func (x *Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Channel) GetLoansConstraints() *ChannelConstraints {
	if x != nil {
		return x.LoansConstraints
	}
	return nil
}

func (x *Channel) GetDepositConstraints() *ChannelConstraints {
	if x != nil {
		return x.DepositConstraints
	}
	return nil
}

func (x *Channel) GetState() v1.State {
	if x != nil {
		return x.State
	}
	return v1.State(0)
}

func (x *Channel) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *Channel) GetAllowedUsers() []string {
	if x != nil {
		return x.AllowedUsers
	}
	return nil
}

// CreateChannelRequest is the request to create a channel.
type CreateChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the channel to create.
	Body *Channel `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateChannelRequest) Reset() {
	*x = CreateChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelRequest) ProtoMessage() {}

func (x *CreateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateChannelRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{6}
}

func (x *CreateChannelRequest) GetBody() *Channel {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListChannelsRequest is the request to list channels.
type ListChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageToken is the token to use for pagination.
	PageToken string `protobuf:"bytes,1,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the size of the page.
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the field to order by.
	OrderBy string `protobuf:"bytes,3,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to apply to the results.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListChannelsRequest) Reset() {
	*x = ListChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChannelsRequest) ProtoMessage() {}

func (x *ListChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChannelsRequest.ProtoReflect.Descriptor instead.
func (*ListChannelsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{7}
}

func (x *ListChannelsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListChannelsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListChannelsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListChannelsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListChannelsResponse is the response for listing channels.
type ListChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of channels matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of channels remaining in the list, including the
	// channels in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Channels is the list of channels listed.
	Channels []*Channel `protobuf:"bytes,3,rep,name=Channels,json=channels,proto3" json:"channels,omitempty"`
	// NextPageToken is the token to use for the next page.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListChannelsResponse) Reset() {
	*x = ListChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChannelsResponse) ProtoMessage() {}

func (x *ListChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChannelsResponse.ProtoReflect.Descriptor instead.
func (*ListChannelsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{8}
}

func (x *ListChannelsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListChannelsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListChannelsResponse) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *ListChannelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetChannelRequest is the request to retrieve a channel.
type GetChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChannelID is the ID of the channel to retrieve.
	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
}

func (x *GetChannelRequest) Reset() {
	*x = GetChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelRequest) ProtoMessage() {}

func (x *GetChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelRequest.ProtoReflect.Descriptor instead.
func (*GetChannelRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{9}
}

func (x *GetChannelRequest) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

// UpdateChannelRequest is the request to update the information of a channel.
type UpdateChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChannelID is the ID of the channel to update.
	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
	// Body is the new value of the channel.
	Body *Channel `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateChannelRequest) Reset() {
	*x = UpdateChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelRequest) ProtoMessage() {}

func (x *UpdateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelRequest.ProtoReflect.Descriptor instead.
func (*UpdateChannelRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateChannelRequest) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *UpdateChannelRequest) GetBody() *Channel {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteChannelRequest is the request to delete a transaction channel.
type DeleteChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChannelID is the ID of the channel to delete.
	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
}

func (x *DeleteChannelRequest) Reset() {
	*x = DeleteChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelRequest) ProtoMessage() {}

func (x *DeleteChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelRequest.ProtoReflect.Descriptor instead.
func (*DeleteChannelRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteChannelRequest) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

// Holiday is a day where the organization is closed.
type Holiday struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HolidayID is the ID of the holiday.
	HolidayID string `protobuf:"bytes,1,opt,name=HolidayID,json=holiday_id,proto3" json:"holiday_id,omitempty"`
	// Name is the name of the holiday.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// Date is the date of the holiday.
	Date *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=Date,json=date,proto3" json:"date,omitempty"`
	// IsAnnuallyRecurring is true if the holiday is annual.
	IsAnnuallyRecurring bool `protobuf:"varint,4,opt,name=IsAnnuallyRecurring,json=is_annually_recurring,proto3" json:"is_annually_recurring,omitempty"`
	// CreateTime is the date the holiday was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
}

func (x *Holiday) Reset() {
	*x = Holiday{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holiday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holiday) ProtoMessage() {}

func (x *Holiday) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holiday.ProtoReflect.Descriptor instead.
func (*Holiday) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{12}
}

func (x *Holiday) GetHolidayID() string {
	if x != nil {
		return x.HolidayID
	}
	return ""
}

func (x *Holiday) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Holiday) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Holiday) GetIsAnnuallyRecurring() bool {
	if x != nil {
		return x.IsAnnuallyRecurring
	}
	return false
}

func (x *Holiday) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

// CreateHolidayRequest is the request to create a holiday.
type CreateHolidayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the holiday to create.
	Body *Holiday `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateHolidayRequest) Reset() {
	*x = CreateHolidayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHolidayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHolidayRequest) ProtoMessage() {}

func (x *CreateHolidayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHolidayRequest.ProtoReflect.Descriptor instead.
func (*CreateHolidayRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{13}
}

func (x *CreateHolidayRequest) GetBody() *Holiday {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListHolidaysRequest is the request to list holidays.
type ListHolidaysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageToken is the token to use for pagination.
	PageToken string `protobuf:"bytes,1,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of items to return per page.
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the field to order by.
	OrderBy string `protobuf:"bytes,3,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to apply to the results.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListHolidaysRequest) Reset() {
	*x = ListHolidaysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHolidaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHolidaysRequest) ProtoMessage() {}

func (x *ListHolidaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHolidaysRequest.ProtoReflect.Descriptor instead.
func (*ListHolidaysRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{14}
}

func (x *ListHolidaysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListHolidaysRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListHolidaysRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListHolidaysRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListHolidaysResponse is the response for listing holidays.
type ListHolidaysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of holidays matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of holidays remaining in the list, including the
	// holidays in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Holidays is the list of holidays listed.
	Holidays []*Holiday `protobuf:"bytes,3,rep,name=Holidays,json=holidays,proto3" json:"holidays,omitempty"`
	// NextPageToken is the token to use for the next page.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListHolidaysResponse) Reset() {
	*x = ListHolidaysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHolidaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHolidaysResponse) ProtoMessage() {}

func (x *ListHolidaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHolidaysResponse.ProtoReflect.Descriptor instead.
func (*ListHolidaysResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{15}
}

func (x *ListHolidaysResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListHolidaysResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListHolidaysResponse) GetHolidays() []*Holiday {
	if x != nil {
		return x.Holidays
	}
	return nil
}

func (x *ListHolidaysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetHolidayRequest is the request to retrieve holiday.
type GetHolidayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HolidayID is the ID of the holiday to retrieve.
	HolidayID string `protobuf:"bytes,1,opt,name=HolidayID,json=holiday_id,proto3" json:"holiday_id,omitempty"`
}

func (x *GetHolidayRequest) Reset() {
	*x = GetHolidayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidayRequest) ProtoMessage() {}

func (x *GetHolidayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidayRequest.ProtoReflect.Descriptor instead.
func (*GetHolidayRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{16}
}

func (x *GetHolidayRequest) GetHolidayID() string {
	if x != nil {
		return x.HolidayID
	}
	return ""
}

// UpdateHolidayRequest is the request to update a specific holiday.
type UpdateHolidayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HolidayID is the ID of the holiday to update.
	HolidayID string `protobuf:"bytes,1,opt,name=HolidayID,json=holiday_id,proto3" json:"holiday_id,omitempty"`
	// Body is the new content of the holiday.
	Body *Holiday `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateHolidayRequest) Reset() {
	*x = UpdateHolidayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHolidayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHolidayRequest) ProtoMessage() {}

func (x *UpdateHolidayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHolidayRequest.ProtoReflect.Descriptor instead.
func (*UpdateHolidayRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateHolidayRequest) GetHolidayID() string {
	if x != nil {
		return x.HolidayID
	}
	return ""
}

func (x *UpdateHolidayRequest) GetBody() *Holiday {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteHolidayRequest is the request to delete a holiday.
type DeleteHolidayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HolidayID is the ID of the holiday to delete.
	HolidayID string `protobuf:"bytes,1,opt,name=HolidayID,json=holiday_id,proto3" json:"holiday_id,omitempty"`
}

func (x *DeleteHolidayRequest) Reset() {
	*x = DeleteHolidayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHolidayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHolidayRequest) ProtoMessage() {}

func (x *DeleteHolidayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHolidayRequest.ProtoReflect.Descriptor instead.
func (*DeleteHolidayRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteHolidayRequest) GetHolidayID() string {
	if x != nil {
		return x.HolidayID
	}
	return ""
}

// NonWorkingDays is the configuration for non-working days.
type NonWorkingDays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NonWorkingDays is the days of the week that are not working days.
	NonWorkingDays []Day `protobuf:"varint,1,rep,packed,name=NonWorkingDays,json=non_working_days,proto3,enum=openbank.core.v1.org.Day" json:"non_working_days,omitempty"`
}

func (x *NonWorkingDays) Reset() {
	*x = NonWorkingDays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonWorkingDays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonWorkingDays) ProtoMessage() {}

func (x *NonWorkingDays) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonWorkingDays.ProtoReflect.Descriptor instead.
func (*NonWorkingDays) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{19}
}

func (x *NonWorkingDays) GetNonWorkingDays() []Day {
	if x != nil {
		return x.NonWorkingDays
	}
	return nil
}

// UpdateNonWorkingDaysRequest is the request to update the list of non-working
// days.
type UpdateNonWorkingDaysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the new configuration for non-working days.
	Body *NonWorkingDays `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateNonWorkingDaysRequest) Reset() {
	*x = UpdateNonWorkingDaysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNonWorkingDaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNonWorkingDaysRequest) ProtoMessage() {}

func (x *UpdateNonWorkingDaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNonWorkingDaysRequest.ProtoReflect.Descriptor instead.
func (*UpdateNonWorkingDaysRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateNonWorkingDaysRequest) GetBody() *NonWorkingDays {
	if x != nil {
		return x.Body
	}
	return nil
}

// Organization is the organization that the instance of Core Banking belongs
// to.
type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Info is the contact information for the organization.
	Info *v1.ContactInfo `protobuf:"bytes,1,opt,name=Info,json=info,proto3" json:"info,omitempty"`
	// CurrencyCode is the code of the main currency used by the organization.
	CurrencyCode string `protobuf:"bytes,2,opt,name=CurrencyCode,json=currency_code,proto3" json:"currency_code,omitempty"`
	// DateFormat is the format for date values.
	DateFormat string `protobuf:"bytes,3,opt,name=DateFormat,json=date_format,proto3" json:"date_format,omitempty"`
	// DateTimeFormat is the format for date-time values.
	DateTimeFormat string `protobuf:"bytes,4,opt,name=DateTimeFormat,json=date_time_format,proto3" json:"date_time_format,omitempty"`
	// Timezone is the timezone for the organization in the format
	// "Asia/Jakarta".
	Timezone string `protobuf:"bytes,5,opt,name=Timezone,json=timezone,proto3" json:"timezone,omitempty"`
	// CreateTime is the time the organization is setup.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
	// UpdateTime is the time the organization setup was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=UpdateTime,json=update_time,proto3" json:"update_time,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{21}
}

func (x *Organization) GetInfo() *v1.ContactInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Organization) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Organization) GetDateFormat() string {
	if x != nil {
		return x.DateFormat
	}
	return ""
}

func (x *Organization) GetDateTimeFormat() string {
	if x != nil {
		return x.DateTimeFormat
	}
	return ""
}

func (x *Organization) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Organization) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Organization) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// UpdateOrganizationRequest is the request to update the configuration of the
// organization.
type UpdateOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the new details of the organization.
	Body *Organization `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateOrganizationRequest) Reset() {
	*x = UpdateOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationRequest) ProtoMessage() {}

func (x *UpdateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateOrganizationRequest) GetBody() *Organization {
	if x != nil {
		return x.Body
	}
	return nil
}

// Defaults is a set of defaults for different aspects in the organization.
type Defaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClientRoleID is the ID of the role that a client should be assigned to by
	// default.
	ClientRoleID string `protobuf:"bytes,1,opt,name=ClientRoleID,json=client_role_id,proto3" json:"client_role_id,omitempty"`
	// ClientState is the default state the client starts in.
	ClientState v1.State `protobuf:"varint,2,opt,name=ClientState,json=client_state,proto3,enum=openbank.core.v1.State" json:"client_state,omitempty"`
	// GroupRoleID is the ID of the role that a group should be assigned to by
	// default.
	GroupRoleID string `protobuf:"bytes,3,opt,name=GroupRoleID,json=group_role_id,proto3" json:"group_role_id,omitempty"`
	// LineOfCreditState is the default state for a line of credit.
	LineOfCreditState v1.State `protobuf:"varint,4,opt,name=LineOfCreditState,json=line_of_credit_state,proto3,enum=openbank.core.v1.State" json:"line_of_credit_state,omitempty"`
	// TransactionChannelID is the ID of the default transaction channel to use.
	TransactionChannelID string `protobuf:"bytes,5,opt,name=TransactionChannelID,json=transaction_channel_id,proto3" json:"transaction_channel_id,omitempty"`
}

func (x *Defaults) Reset() {
	*x = Defaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Defaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Defaults) ProtoMessage() {}

func (x *Defaults) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Defaults.ProtoReflect.Descriptor instead.
func (*Defaults) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{23}
}

func (x *Defaults) GetClientRoleID() string {
	if x != nil {
		return x.ClientRoleID
	}
	return ""
}

func (x *Defaults) GetClientState() v1.State {
	if x != nil {
		return x.ClientState
	}
	return v1.State(0)
}

func (x *Defaults) GetGroupRoleID() string {
	if x != nil {
		return x.GroupRoleID
	}
	return ""
}

func (x *Defaults) GetLineOfCreditState() v1.State {
	if x != nil {
		return x.LineOfCreditState
	}
	return v1.State(0)
}

func (x *Defaults) GetTransactionChannelID() string {
	if x != nil {
		return x.TransactionChannelID
	}
	return ""
}

// Setup is the global configuration of the organization.
type Setup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountingCutOffTime is the time accounting is cut off everyday.
	AccountingCutOffTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=AccountingCutOffTime,json=accounting_cut_off_time,proto3" json:"accounting_cut_off_time,omitempty"`
	// ArrearsDaysBeforeWriteOff is the number of days required before an
	// account can be written off.
	ArrearsDaysBeforeWriteOff int32 `protobuf:"varint,2,opt,name=ArrearsDaysBeforeWriteOff,json=arrears_days_before_write_off,proto3" json:"arrears_days_before_write_off,omitempty"`
	// AssignmentConstraints is a list of assignments required for Clients and
	// Groups.
	AssignmentConstraints []AssignmentConstraint `protobuf:"varint,3,rep,packed,name=AssignmentConstraints,json=assignment_constraints,proto3,enum=openbank.core.v1.org.AssignmentConstraint" json:"assignment_constraints,omitempty"`
	// AutomatedAccountingClosuresInterval is the interval between the execution
	// of automated accounting closures.
	// Automated closures will not be performed if the interval is zero.
	AutomatedAccountingClosuresInterval *durationpb.Duration `protobuf:"bytes,4,opt,name=AutomatedAccountingClosuresInterval,json=automated_accounting_closures_interval,proto3" json:"automated_accounting_closures_interval,omitempty"`
	// ClientIDFormat is the format used to generate client IDs.
	ClientIDFormat string `protobuf:"bytes,5,opt,name=ClientIDFormat,json=client_id_format,proto3" json:"client_id_format,omitempty"`
	// GroupIDFormat is the format used to generate group IDs.
	GroupIDFormat string `protobuf:"bytes,6,opt,name=GroupIDFormat,json=group_id_format,proto3" json:"group_id_format,omitempty"`
	// LineOfCreditIDFormat is the format used to generate line of credit IDs.
	LineOfCreditIDFormat string `protobuf:"bytes,7,opt,name=LineOfCreditIDFormat,json=line_of_credit_id_format,proto3" json:"line_of_credit_id_format,omitempty"`
	// DateFormats is the format of date and time used in the user interface.
	DateFormats map[string]string `protobuf:"bytes,8,rep,name=DateFormats,json=date_formats,proto3" json:"date_formats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// EnabledComponents is the list of all enabled components.
	EnabledComponents []AppComponent `protobuf:"varint,9,rep,packed,name=EnabledComponents,json=enabled_components,proto3,enum=openbank.core.v1.org.AppComponent" json:"enabled_components,omitempty"`
	// DashboardComponents is the list of components in the dashboard.
	DashboardComponents []DashboardComponent `protobuf:"varint,10,rep,packed,name=DashboardComponents,json=dashboard_components,proto3,enum=openbank.core.v1.org.DashboardComponent" json:"dashboard_components,omitempty"`
	// DecimalSeparator is the symbol that marks the border between integer and
	// fraction part of a decimal number.
	DecimalSeparator DecimalSeparator `protobuf:"varint,11,opt,name=DecimalSeparator,json=decimal_separator,proto3,enum=openbank.core.v1.org.DecimalSeparator" json:"decimal_separator,omitempty"`
	// Defaults is the default values and settings for the organization.
	Defaults *Defaults `protobuf:"bytes,12,opt,name=Defaults,json=defaults,proto3" json:"defaults,omitempty"`
	// ClientChecks is a list of client-side constraints to enforce.
	ClientChecks []DuplicateItemType `protobuf:"varint,13,rep,packed,name=ClientChecks,json=client_checks,proto3,enum=openbank.core.v1.org.DuplicateItemType" json:"client_checks,omitempty"`
	// ClientConstraintAction is the action to be taken when the duplicate
	// client validation fails.
	ClientConstraintAction ConstraintAction `protobuf:"varint,14,opt,name=ClientConstraintAction,json=client_constraint_action,proto3,enum=openbank.core.v1.org.ConstraintAction" json:"client_constraint_action,omitempty"`
	// EndOfDayMode is the method end-of-day processing is done.
	EndOfDayMode EndOfDayMode `protobuf:"varint,15,opt,name=EndOfDayMode,json=end_of_day_mode,proto3,enum=openbank.core.v1.org.EndOfDayMode" json:"end_of_day_mode,omitempty"`
	// ExposureAmount is the hard cap on maximum amount of loans a client can
	// have.
	ExposureAmount *v1.Amount `protobuf:"bytes,16,opt,name=ExposureAmount,json=exposure_amount,proto3" json:"exposure_amount,omitempty"`
	// ExposureType is the type of hard cap enforced.
	ExposureType ExposureType `protobuf:"varint,17,opt,name=ExposureType,json=exposure_type,proto3,enum=openbank.core.v1.org.ExposureType" json:"exposure_type,omitempty"`
	// MinGroupSizeLimit is the minimum size of a group.
	MinGroupSizeLimit int32 `protobuf:"varint,18,opt,name=MinGroupSizeLimit,json=min_group_size_limit,proto3" json:"min_group_size_limit,omitempty"`
	// MaxGroupSizeLimit is the maximum size of a group.
	MaxGroupSizeLimit int32 `protobuf:"varint,19,opt,name=MaxGroupSizeLimit,json=max_group_size_limit,proto3" json:"max_group_size_limit,omitempty"`
	// GroupSizeLimitType is the type of group size limit enforced.
	GroupSizeLimitType GroupSizeLimitType `protobuf:"varint,20,opt,name=GroupSizeLimitType,json=group_size_limit_type,proto3,enum=openbank.core.v1.org.GroupSizeLimitType" json:"group_size_limit_type,omitempty"`
	// InterBranchTransferGLAccountID is the ID of the GL account to use for
	// inter-branch transfers.
	InterBranchTransferGLAccountID string `protobuf:"bytes,21,opt,name=InterBranchTransferGLAccountID,json=inter_branch_transfer_gl_account_id,proto3" json:"inter_branch_transfer_gl_account_id,omitempty"`
	// MaxAllowedIDDocumentAttachments is the maximum number of ID document
	// allowed.
	MaxAllowedIDDocumentAttachments int32 `protobuf:"varint,22,opt,name=MaxAllowedIDDocumentAttachments,json=max_allowed_id_document_attachments,proto3" json:"max_allowed_id_document_attachments,omitempty"`
	// MaxAllowedJournalEntryDocumentAttachments is the maximum number of
	// attachments allowed in a journal entry.
	MaxAllowedJournalEntryDocumentAttachments int32 `protobuf:"varint,23,opt,name=MaxAllowedJournalEntryDocumentAttachments,json=max_allowed_journal_entry_document_attachments,proto3" json:"max_allowed_journal_entry_document_attachments,omitempty"`
	// MaxAllowedUndoClosurePeriod is the maximum number of days that users are
	// allowed to undo closing obligations for a loan account.
	MaxAllowedUndoClosurePeriod int32 `protobuf:"varint,24,opt,name=MaxAllowedUndoClosurePeriod,json=max_allowed_undo_closure_period,proto3" json:"max_allowed_undo_closure_period,omitempty"`
	// MaxClientGroups is the maximum number of groups a client can belong to.
	MaxClientGroups int32 `protobuf:"varint,25,opt,name=MaxClientGroups,json=max_client_groups,proto3" json:"max_client_groups,omitempty"`
	// MaxLoans is the maximum number of loans.
	MaxLoans int32 `protobuf:"varint,26,opt,name=MaxLoans,json=max_loans,proto3" json:"max_loans,omitempty"`
	// AllowOtherIDDocuments is a flag to enable other types of IDs.
	AllowOtherIDDocuments bool `protobuf:"varint,27,opt,name=AllowOtherIDDocuments,json=allow_other_id_documents,proto3" json:"allow_other_id_documents,omitempty"`
	// OverdraftInterestDate is the date used when computing overdraft
	// interests.
	OverdraftInterestDate *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=OverdraftInterestDate,json=overdraft_interest_date,proto3" json:"overdraft_interest_date,omitempty"`
	// MinDisbursalApprovalRequired is the number of users required to approve a disbursal.
	MinDisbursalApprovalRequired int32 `protobuf:"varint,29,opt,name=MinDisbursalApprovalRequired,json=min_disbursal_approval_required,proto3" json:"min_disbursal_approval_required,omitempty"`
	// MinLoanApprovalRequired is the number of users required to create and approve a loan account.
	MinLoanApprovalRequired int32 `protobuf:"varint,30,opt,name=MinLoanApprovalRequired,json=min_loan_approval_required,proto3" json:"min_loan_approval_required,omitempty"`
}

func (x *Setup) Reset() {
	*x = Setup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setup) ProtoMessage() {}

func (x *Setup) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setup.ProtoReflect.Descriptor instead.
func (*Setup) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{24}
}

func (x *Setup) GetAccountingCutOffTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AccountingCutOffTime
	}
	return nil
}

func (x *Setup) GetArrearsDaysBeforeWriteOff() int32 {
	if x != nil {
		return x.ArrearsDaysBeforeWriteOff
	}
	return 0
}

func (x *Setup) GetAssignmentConstraints() []AssignmentConstraint {
	if x != nil {
		return x.AssignmentConstraints
	}
	return nil
}

func (x *Setup) GetAutomatedAccountingClosuresInterval() *durationpb.Duration {
	if x != nil {
		return x.AutomatedAccountingClosuresInterval
	}
	return nil
}

func (x *Setup) GetClientIDFormat() string {
	if x != nil {
		return x.ClientIDFormat
	}
	return ""
}

func (x *Setup) GetGroupIDFormat() string {
	if x != nil {
		return x.GroupIDFormat
	}
	return ""
}

func (x *Setup) GetLineOfCreditIDFormat() string {
	if x != nil {
		return x.LineOfCreditIDFormat
	}
	return ""
}

func (x *Setup) GetDateFormats() map[string]string {
	if x != nil {
		return x.DateFormats
	}
	return nil
}

func (x *Setup) GetEnabledComponents() []AppComponent {
	if x != nil {
		return x.EnabledComponents
	}
	return nil
}

func (x *Setup) GetDashboardComponents() []DashboardComponent {
	if x != nil {
		return x.DashboardComponents
	}
	return nil
}

func (x *Setup) GetDecimalSeparator() DecimalSeparator {
	if x != nil {
		return x.DecimalSeparator
	}
	return DecimalSeparator_Comma
}

func (x *Setup) GetDefaults() *Defaults {
	if x != nil {
		return x.Defaults
	}
	return nil
}

func (x *Setup) GetClientChecks() []DuplicateItemType {
	if x != nil {
		return x.ClientChecks
	}
	return nil
}

func (x *Setup) GetClientConstraintAction() ConstraintAction {
	if x != nil {
		return x.ClientConstraintAction
	}
	return ConstraintAction_None
}

func (x *Setup) GetEndOfDayMode() EndOfDayMode {
	if x != nil {
		return x.EndOfDayMode
	}
	return EndOfDayMode_EndOfDayAuto
}

func (x *Setup) GetExposureAmount() *v1.Amount {
	if x != nil {
		return x.ExposureAmount
	}
	return nil
}

func (x *Setup) GetExposureType() ExposureType {
	if x != nil {
		return x.ExposureType
	}
	return ExposureType_ExposureUnlimited
}

func (x *Setup) GetMinGroupSizeLimit() int32 {
	if x != nil {
		return x.MinGroupSizeLimit
	}
	return 0
}

func (x *Setup) GetMaxGroupSizeLimit() int32 {
	if x != nil {
		return x.MaxGroupSizeLimit
	}
	return 0
}

func (x *Setup) GetGroupSizeLimitType() GroupSizeLimitType {
	if x != nil {
		return x.GroupSizeLimitType
	}
	return GroupSizeLimitType_LimitHard
}

func (x *Setup) GetInterBranchTransferGLAccountID() string {
	if x != nil {
		return x.InterBranchTransferGLAccountID
	}
	return ""
}

func (x *Setup) GetMaxAllowedIDDocumentAttachments() int32 {
	if x != nil {
		return x.MaxAllowedIDDocumentAttachments
	}
	return 0
}

func (x *Setup) GetMaxAllowedJournalEntryDocumentAttachments() int32 {
	if x != nil {
		return x.MaxAllowedJournalEntryDocumentAttachments
	}
	return 0
}

func (x *Setup) GetMaxAllowedUndoClosurePeriod() int32 {
	if x != nil {
		return x.MaxAllowedUndoClosurePeriod
	}
	return 0
}

func (x *Setup) GetMaxClientGroups() int32 {
	if x != nil {
		return x.MaxClientGroups
	}
	return 0
}

func (x *Setup) GetMaxLoans() int32 {
	if x != nil {
		return x.MaxLoans
	}
	return 0
}

func (x *Setup) GetAllowOtherIDDocuments() bool {
	if x != nil {
		return x.AllowOtherIDDocuments
	}
	return false
}

func (x *Setup) GetOverdraftInterestDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OverdraftInterestDate
	}
	return nil
}

func (x *Setup) GetMinDisbursalApprovalRequired() int32 {
	if x != nil {
		return x.MinDisbursalApprovalRequired
	}
	return 0
}

func (x *Setup) GetMinLoanApprovalRequired() int32 {
	if x != nil {
		return x.MinLoanApprovalRequired
	}
	return 0
}

// UpdateSetupRequest is the request to update the setup of the system.
type UpdateSetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the setup to update to.
	Body *Setup `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateSetupRequest) Reset() {
	*x = UpdateSetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSetupRequest) ProtoMessage() {}

func (x *UpdateSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_org_all_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSetupRequest.ProtoReflect.Descriptor instead.
func (*UpdateSetupRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateSetupRequest) GetBody() *Setup {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_bnk_to_core_api_v1_org_all_proto protoreflect.FileDescriptor

var file_bnk_to_core_api_v1_org_all_proto_rawDesc = []byte{
	0x0a, 0x20, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x1a, 0x0b, 0x78, 0x6f, 0x2f, 0x78, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x90, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x06, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x47, 0x4c, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x67, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x47, 0x4c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x67, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0x65, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe1, 0x01, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x57, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x42, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xc9, 0x01,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x0b, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xe8, 0x03, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x02, 0x08, 0x02, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x47, 0x4c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x67, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x61, 0x0a, 0x10, 0x4c, 0x6f, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x11, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0x5d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xe5, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a,
	0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x32,
	0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x49, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa6, 0x02, 0x0a, 0x07, 0x48, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0xda, 0x47, 0x02, 0x08, 0x02, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x13, 0x49, 0x73, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x69, 0x73, 0x5f, 0x61, 0x6e,
	0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x5d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x48,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0xbc, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0xe5, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x08, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x68, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x88, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x49, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x69, 0x0a, 0x0e, 0x4e, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x4e, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x44, 0x61, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x6b, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4e, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xc3, 0x03,
	0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda,
	0x47, 0x1d, 0x2a, 0x1b, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b,
	0x0a, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x10, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x26, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x67, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb0, 0x03, 0x0a,
	0x08, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1e, 0x2a, 0x1a,
	0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x30, 0x01, 0x52, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x19, 0x2a, 0x15, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x30,
	0x01, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x12, 0x54, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x14, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0xda, 0x47, 0x1c, 0x2a, 0x18, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x30, 0x01, 0x52,
	0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x93, 0x14, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x5d, 0x0a, 0x14, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x74, 0x5f,
	0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x19, 0x41, 0x72, 0x72, 0x65,
	0x61, 0x72, 0x73, 0x44, 0x61, 0x79, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1d, 0x61, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x12, 0x6d, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x23, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x26, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x34, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x42, 0x0a, 0x14, 0x4c,
	0x69, 0x6e, 0x65, 0x4f, 0x66, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x44, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x5b, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x11,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x13, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x53,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x11, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x58, 0x0a,
	0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x6c, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x65, 0x6e, 0x64,
	0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x0e,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a,
	0x11, 0x4d, 0x61, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x4c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x67,
	0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x1f,
	0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x44, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x23, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x29, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x2e, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x1b, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x55, 0x6e, 0x64, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x27, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x61, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x44, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a,
	0x15, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a,
	0x1c, 0x4d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61, 0x6c, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x1f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x47, 0x0a, 0x17, 0x4d, 0x69, 0x6e, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x32, 0x0a, 0x10, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x59, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x2a, 0x81, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x1f,
	0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1d, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20,
	0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00,
	0x1a, 0x02, 0x18, 0x00, 0x2a, 0x3f, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x10, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x79, 0x10, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x81, 0x01, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x12, 0x0e, 0x0a,
	0x06, 0x4d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a,
	0x07, 0x54, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11,
	0x0a, 0x09, 0x57, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x10, 0x02, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x10, 0x0a, 0x08, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x10, 0x03, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x10, 0x04, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x53, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x10,
	0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x10,
	0x06, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x88, 0x01, 0x0a, 0x14, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65,
	0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x72, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00,
	0x1a, 0x02, 0x18, 0x00, 0x2a, 0xeb, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a,
	0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x73, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a,
	0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x1b, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a,
	0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x73, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02,
	0x18, 0x00, 0x2a, 0x83, 0x02, 0x0a, 0x12, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x17, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x10, 0x01, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73, 0x10, 0x02, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1d, 0x0a, 0x15, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6c, 0x6c, 0x73, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18,
	0x0a, 0x10, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a,
	0x0d, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x07,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x34, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0d, 0x0a, 0x05,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xc6,
	0x0d, 0x0a, 0x11, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x6f, 0x61,
	0x6e, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13,
	0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x16, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f,
	0x6c, 0x65, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x25, 0x0a,
	0x1d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x72, 0x75, 0x61, 0x6c, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x08,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x10, 0x0a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11,
	0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x10, 0x0b, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x18, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x0c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x10, 0x0d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x10, 0x0e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x0f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a,
	0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x10, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x11, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x12, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19,
	0x0a, 0x11, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x10, 0x13, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x14, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17,
	0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x15, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x16, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14,
	0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x17,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x10, 0x18, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x10, 0x19, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x29, 0x0a, 0x21, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x1a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x28, 0x0a, 0x20, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10,
	0x1b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x10, 0x1c, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x72, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x4c, 0x6f, 0x61, 0x6e, 0x73, 0x10, 0x1d, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x1b, 0x0a, 0x13, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72,
	0x73, 0x65, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x73, 0x10, 0x1e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16,
	0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x10, 0x1f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x10, 0x20, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x10, 0x21, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f,
	0x0a, 0x17, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x10, 0x22, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1f, 0x0a, 0x17, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x23, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x20, 0x0a, 0x18, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50,
	0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x65, 0x65, 0x10, 0x24, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x25, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
	0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x65, 0x65, 0x10, 0x26, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x1c, 0x0a, 0x14, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x27, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1f, 0x0a, 0x17, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x28, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x24, 0x0a, 0x1c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x10, 0x29, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x10, 0x2a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x10, 0x2b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x10, 0x2c,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x25, 0x0a, 0x1d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x2d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47,
	0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x79, 0x10, 0x2e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a,
	0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x2f, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x1d, 0x0a, 0x15, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x30, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x16, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x74,
	0x65, 0x10, 0x31, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10,
	0x32, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x33, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x63, 0x63, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x34, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x35, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x41,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0x36, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x37,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x38, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12,
	0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x39, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x10, 0x3a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x4f, 0x42, 0x10, 0x3b, 0x1a,
	0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x44, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x40, 0x0a,
	0x0c, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x0c, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x00, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a,
	0x71, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x4f, 0x66, 0x4c, 0x6f, 0x61, 0x6e, 0x73,
	0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x6d, 0x4f, 0x66, 0x4c, 0x6f, 0x61, 0x6e, 0x73, 0x4d, 0x69, 0x6e, 0x75,
	0x73, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02,
	0x18, 0x00, 0x2a, 0x54, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x11, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x02,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0xab, 0x02, 0x0a, 0x11, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x29, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x30, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2f, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x1a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x28, 0x00, 0x30,
	0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x32, 0xf4, 0x05, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2d, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x19, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x27, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12,
	0x8d, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x33, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12,
	0x99, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x39, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x1a, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x33, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a,
	0x25, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x32, 0xde, 0x08,
	0x0a, 0x0f, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x95, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x22, 0x35,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x28, 0x00, 0x30, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2f, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x28, 0x00, 0x30, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x22, 0x3b, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x7b,
	0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa1,
	0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x22, 0x41, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x1a,
	0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x2f, 0x7b, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49, 0x44, 0x7d, 0x28, 0x00,
	0x30, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3b, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2f, 0x7b, 0x48, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4e, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x22, 0x36, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x73, 0x2f, 0x6e, 0x6f, 0x6e, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x64,
	0x61, 0x79, 0x73, 0x30, 0x00, 0x12, 0xb1, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x12, 0x31,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4e, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x22, 0x3c, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x28, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x2f, 0x6e, 0x6f, 0x6e, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x64, 0x61, 0x79, 0x73, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x32, 0xa1,
	0x02, 0x0a, 0x13, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x24, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88,
	0x02, 0x00, 0x32, 0x83, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x22, 0x24, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x30, 0x00, 0x12, 0x84, 0x01, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x22, 0x2a, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x28,
	0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x8e, 0x01, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72,
	0x67, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x1a, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x3b, 0x6f, 0x72,
	0x67, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00,
	0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x92, 0x41, 0x40, 0x0a, 0x03, 0x32, 0x2e, 0x30, 0x12, 0x12,
	0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x02,
	0x76, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_bnk_to_core_api_v1_org_all_proto_rawDescOnce sync.Once
	file_bnk_to_core_api_v1_org_all_proto_rawDescData = file_bnk_to_core_api_v1_org_all_proto_rawDesc
)

func file_bnk_to_core_api_v1_org_all_proto_rawDescGZIP() []byte {
	file_bnk_to_core_api_v1_org_all_proto_rawDescOnce.Do(func() {
		file_bnk_to_core_api_v1_org_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_bnk_to_core_api_v1_org_all_proto_rawDescData)
	})
	return file_bnk_to_core_api_v1_org_all_proto_rawDescData
}

var (
	file_bnk_to_core_api_v1_org_all_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
	file_bnk_to_core_api_v1_org_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 27)
	file_bnk_to_core_api_v1_org_all_proto_goTypes   = []interface{}{
		(ChannelConstraintCriteria)(0),      // 0: openbank.core.v1.org.ChannelConstraintCriteria
		(ChannelConstraintMode)(0),          // 1: openbank.core.v1.org.ChannelConstraintMode
		(Day)(0),                            // 2: openbank.core.v1.org.Day
		(AssignmentConstraint)(0),           // 3: openbank.core.v1.org.AssignmentConstraint
		(AppComponent)(0),                   // 4: openbank.core.v1.org.AppComponent
		(DashboardComponent)(0),             // 5: openbank.core.v1.org.DashboardComponent
		(DecimalSeparator)(0),               // 6: openbank.core.v1.org.DecimalSeparator
		(DuplicateItemType)(0),              // 7: openbank.core.v1.org.DuplicateItemType
		(ConstraintAction)(0),               // 8: openbank.core.v1.org.ConstraintAction
		(EndOfDayMode)(0),                   // 9: openbank.core.v1.org.EndOfDayMode
		(ExposureType)(0),                   // 10: openbank.core.v1.org.ExposureType
		(GroupSizeLimitType)(0),             // 11: openbank.core.v1.org.GroupSizeLimitType
		(*TransferRule)(nil),                // 12: openbank.core.v1.org.TransferRule
		(*AccountingConfig)(nil),            // 13: openbank.core.v1.org.AccountingConfig
		(*UpdateConfigRequest)(nil),         // 14: openbank.core.v1.org.UpdateConfigRequest
		(*ChannelConstraint)(nil),           // 15: openbank.core.v1.org.ChannelConstraint
		(*ChannelConstraints)(nil),          // 16: openbank.core.v1.org.ChannelConstraints
		(*Channel)(nil),                     // 17: openbank.core.v1.org.Channel
		(*CreateChannelRequest)(nil),        // 18: openbank.core.v1.org.CreateChannelRequest
		(*ListChannelsRequest)(nil),         // 19: openbank.core.v1.org.ListChannelsRequest
		(*ListChannelsResponse)(nil),        // 20: openbank.core.v1.org.ListChannelsResponse
		(*GetChannelRequest)(nil),           // 21: openbank.core.v1.org.GetChannelRequest
		(*UpdateChannelRequest)(nil),        // 22: openbank.core.v1.org.UpdateChannelRequest
		(*DeleteChannelRequest)(nil),        // 23: openbank.core.v1.org.DeleteChannelRequest
		(*Holiday)(nil),                     // 24: openbank.core.v1.org.Holiday
		(*CreateHolidayRequest)(nil),        // 25: openbank.core.v1.org.CreateHolidayRequest
		(*ListHolidaysRequest)(nil),         // 26: openbank.core.v1.org.ListHolidaysRequest
		(*ListHolidaysResponse)(nil),        // 27: openbank.core.v1.org.ListHolidaysResponse
		(*GetHolidayRequest)(nil),           // 28: openbank.core.v1.org.GetHolidayRequest
		(*UpdateHolidayRequest)(nil),        // 29: openbank.core.v1.org.UpdateHolidayRequest
		(*DeleteHolidayRequest)(nil),        // 30: openbank.core.v1.org.DeleteHolidayRequest
		(*NonWorkingDays)(nil),              // 31: openbank.core.v1.org.NonWorkingDays
		(*UpdateNonWorkingDaysRequest)(nil), // 32: openbank.core.v1.org.UpdateNonWorkingDaysRequest
		(*Organization)(nil),                // 33: openbank.core.v1.org.Organization
		(*UpdateOrganizationRequest)(nil),   // 34: openbank.core.v1.org.UpdateOrganizationRequest
		(*Defaults)(nil),                    // 35: openbank.core.v1.org.Defaults
		(*Setup)(nil),                       // 36: openbank.core.v1.org.Setup
		(*UpdateSetupRequest)(nil),          // 37: openbank.core.v1.org.UpdateSetupRequest
		nil,                                 // 38: openbank.core.v1.org.Setup.DateFormatsEntry
		(v1.Operator)(0),                    // 39: openbank.core.v1.Operator
		(v1.State)(0),                       // 40: openbank.core.v1.State
		(*timestamppb.Timestamp)(nil),       // 41: google.protobuf.Timestamp
		(*v1.ContactInfo)(nil),              // 42: openbank.core.v1.ContactInfo
		(*durationpb.Duration)(nil),         // 43: google.protobuf.Duration
		(*v1.Amount)(nil),                   // 44: openbank.core.v1.Amount
		(*emptypb.Empty)(nil),               // 45: google.protobuf.Empty
	}
)

var file_bnk_to_core_api_v1_org_all_proto_depIdxs = []int32{
	12, // 0: openbank.core.v1.org.AccountingConfig.CustomRules:type_name -> openbank.core.v1.org.TransferRule
	13, // 1: openbank.core.v1.org.UpdateConfigRequest.Body:type_name -> openbank.core.v1.org.AccountingConfig
	0,  // 2: openbank.core.v1.org.ChannelConstraint.Criteria:type_name -> openbank.core.v1.org.ChannelConstraintCriteria
	39, // 3: openbank.core.v1.org.ChannelConstraint.Operator:type_name -> openbank.core.v1.Operator
	15, // 4: openbank.core.v1.org.ChannelConstraints.Constraints:type_name -> openbank.core.v1.org.ChannelConstraint
	1,  // 5: openbank.core.v1.org.ChannelConstraints.Filter:type_name -> openbank.core.v1.org.ChannelConstraintMode
	16, // 6: openbank.core.v1.org.Channel.LoansConstraints:type_name -> openbank.core.v1.org.ChannelConstraints
	16, // 7: openbank.core.v1.org.Channel.DepositConstraints:type_name -> openbank.core.v1.org.ChannelConstraints
	40, // 8: openbank.core.v1.org.Channel.State:type_name -> openbank.core.v1.State
	17, // 9: openbank.core.v1.org.CreateChannelRequest.Body:type_name -> openbank.core.v1.org.Channel
	17, // 10: openbank.core.v1.org.ListChannelsResponse.Channels:type_name -> openbank.core.v1.org.Channel
	17, // 11: openbank.core.v1.org.UpdateChannelRequest.Body:type_name -> openbank.core.v1.org.Channel
	41, // 12: openbank.core.v1.org.Holiday.Date:type_name -> google.protobuf.Timestamp
	41, // 13: openbank.core.v1.org.Holiday.CreateTime:type_name -> google.protobuf.Timestamp
	24, // 14: openbank.core.v1.org.CreateHolidayRequest.Body:type_name -> openbank.core.v1.org.Holiday
	24, // 15: openbank.core.v1.org.ListHolidaysResponse.Holidays:type_name -> openbank.core.v1.org.Holiday
	24, // 16: openbank.core.v1.org.UpdateHolidayRequest.Body:type_name -> openbank.core.v1.org.Holiday
	2,  // 17: openbank.core.v1.org.NonWorkingDays.NonWorkingDays:type_name -> openbank.core.v1.org.Day
	31, // 18: openbank.core.v1.org.UpdateNonWorkingDaysRequest.Body:type_name -> openbank.core.v1.org.NonWorkingDays
	42, // 19: openbank.core.v1.org.Organization.Info:type_name -> openbank.core.v1.ContactInfo
	41, // 20: openbank.core.v1.org.Organization.CreateTime:type_name -> google.protobuf.Timestamp
	41, // 21: openbank.core.v1.org.Organization.UpdateTime:type_name -> google.protobuf.Timestamp
	33, // 22: openbank.core.v1.org.UpdateOrganizationRequest.Body:type_name -> openbank.core.v1.org.Organization
	40, // 23: openbank.core.v1.org.Defaults.ClientState:type_name -> openbank.core.v1.State
	40, // 24: openbank.core.v1.org.Defaults.LineOfCreditState:type_name -> openbank.core.v1.State
	41, // 25: openbank.core.v1.org.Setup.AccountingCutOffTime:type_name -> google.protobuf.Timestamp
	3,  // 26: openbank.core.v1.org.Setup.AssignmentConstraints:type_name -> openbank.core.v1.org.AssignmentConstraint
	43, // 27: openbank.core.v1.org.Setup.AutomatedAccountingClosuresInterval:type_name -> google.protobuf.Duration
	38, // 28: openbank.core.v1.org.Setup.DateFormats:type_name -> openbank.core.v1.org.Setup.DateFormatsEntry
	4,  // 29: openbank.core.v1.org.Setup.EnabledComponents:type_name -> openbank.core.v1.org.AppComponent
	5,  // 30: openbank.core.v1.org.Setup.DashboardComponents:type_name -> openbank.core.v1.org.DashboardComponent
	6,  // 31: openbank.core.v1.org.Setup.DecimalSeparator:type_name -> openbank.core.v1.org.DecimalSeparator
	35, // 32: openbank.core.v1.org.Setup.Defaults:type_name -> openbank.core.v1.org.Defaults
	7,  // 33: openbank.core.v1.org.Setup.ClientChecks:type_name -> openbank.core.v1.org.DuplicateItemType
	8,  // 34: openbank.core.v1.org.Setup.ClientConstraintAction:type_name -> openbank.core.v1.org.ConstraintAction
	9,  // 35: openbank.core.v1.org.Setup.EndOfDayMode:type_name -> openbank.core.v1.org.EndOfDayMode
	44, // 36: openbank.core.v1.org.Setup.ExposureAmount:type_name -> openbank.core.v1.Amount
	10, // 37: openbank.core.v1.org.Setup.ExposureType:type_name -> openbank.core.v1.org.ExposureType
	11, // 38: openbank.core.v1.org.Setup.GroupSizeLimitType:type_name -> openbank.core.v1.org.GroupSizeLimitType
	41, // 39: openbank.core.v1.org.Setup.OverdraftInterestDate:type_name -> google.protobuf.Timestamp
	36, // 40: openbank.core.v1.org.UpdateSetupRequest.Body:type_name -> openbank.core.v1.org.Setup
	45, // 41: openbank.core.v1.org.AccountingService.GetConfig:input_type -> google.protobuf.Empty
	14, // 42: openbank.core.v1.org.AccountingService.UpdateConfig:input_type -> openbank.core.v1.org.UpdateConfigRequest
	18, // 43: openbank.core.v1.org.ChannelsService.CreateChannel:input_type -> openbank.core.v1.org.CreateChannelRequest
	19, // 44: openbank.core.v1.org.ChannelsService.ListChannels:input_type -> openbank.core.v1.org.ListChannelsRequest
	21, // 45: openbank.core.v1.org.ChannelsService.GetChannel:input_type -> openbank.core.v1.org.GetChannelRequest
	22, // 46: openbank.core.v1.org.ChannelsService.UpdateChannel:input_type -> openbank.core.v1.org.UpdateChannelRequest
	23, // 47: openbank.core.v1.org.ChannelsService.DeleteChannel:input_type -> openbank.core.v1.org.DeleteChannelRequest
	25, // 48: openbank.core.v1.org.HolidaysService.CreateHoliday:input_type -> openbank.core.v1.org.CreateHolidayRequest
	26, // 49: openbank.core.v1.org.HolidaysService.ListHolidays:input_type -> openbank.core.v1.org.ListHolidaysRequest
	28, // 50: openbank.core.v1.org.HolidaysService.GetHoliday:input_type -> openbank.core.v1.org.GetHolidayRequest
	29, // 51: openbank.core.v1.org.HolidaysService.UpdateHoliday:input_type -> openbank.core.v1.org.UpdateHolidayRequest
	30, // 52: openbank.core.v1.org.HolidaysService.DeleteHoliday:input_type -> openbank.core.v1.org.DeleteHolidayRequest
	45, // 53: openbank.core.v1.org.HolidaysService.GetNonWorkingDays:input_type -> google.protobuf.Empty
	32, // 54: openbank.core.v1.org.HolidaysService.UpdateNonWorkingDays:input_type -> openbank.core.v1.org.UpdateNonWorkingDaysRequest
	45, // 55: openbank.core.v1.org.OrganizationService.GetOrganization:input_type -> google.protobuf.Empty
	34, // 56: openbank.core.v1.org.OrganizationService.UpdateOrganization:input_type -> openbank.core.v1.org.UpdateOrganizationRequest
	45, // 57: openbank.core.v1.org.SetupService.GetSetup:input_type -> google.protobuf.Empty
	37, // 58: openbank.core.v1.org.SetupService.UpdateSetup:input_type -> openbank.core.v1.org.UpdateSetupRequest
	13, // 59: openbank.core.v1.org.AccountingService.GetConfig:output_type -> openbank.core.v1.org.AccountingConfig
	13, // 60: openbank.core.v1.org.AccountingService.UpdateConfig:output_type -> openbank.core.v1.org.AccountingConfig
	17, // 61: openbank.core.v1.org.ChannelsService.CreateChannel:output_type -> openbank.core.v1.org.Channel
	20, // 62: openbank.core.v1.org.ChannelsService.ListChannels:output_type -> openbank.core.v1.org.ListChannelsResponse
	17, // 63: openbank.core.v1.org.ChannelsService.GetChannel:output_type -> openbank.core.v1.org.Channel
	17, // 64: openbank.core.v1.org.ChannelsService.UpdateChannel:output_type -> openbank.core.v1.org.Channel
	45, // 65: openbank.core.v1.org.ChannelsService.DeleteChannel:output_type -> google.protobuf.Empty
	24, // 66: openbank.core.v1.org.HolidaysService.CreateHoliday:output_type -> openbank.core.v1.org.Holiday
	27, // 67: openbank.core.v1.org.HolidaysService.ListHolidays:output_type -> openbank.core.v1.org.ListHolidaysResponse
	24, // 68: openbank.core.v1.org.HolidaysService.GetHoliday:output_type -> openbank.core.v1.org.Holiday
	24, // 69: openbank.core.v1.org.HolidaysService.UpdateHoliday:output_type -> openbank.core.v1.org.Holiday
	45, // 70: openbank.core.v1.org.HolidaysService.DeleteHoliday:output_type -> google.protobuf.Empty
	31, // 71: openbank.core.v1.org.HolidaysService.GetNonWorkingDays:output_type -> openbank.core.v1.org.NonWorkingDays
	31, // 72: openbank.core.v1.org.HolidaysService.UpdateNonWorkingDays:output_type -> openbank.core.v1.org.NonWorkingDays
	33, // 73: openbank.core.v1.org.OrganizationService.GetOrganization:output_type -> openbank.core.v1.org.Organization
	33, // 74: openbank.core.v1.org.OrganizationService.UpdateOrganization:output_type -> openbank.core.v1.org.Organization
	36, // 75: openbank.core.v1.org.SetupService.GetSetup:output_type -> openbank.core.v1.org.Setup
	36, // 76: openbank.core.v1.org.SetupService.UpdateSetup:output_type -> openbank.core.v1.org.Setup
	59, // [59:77] is the sub-list for method output_type
	41, // [41:59] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_bnk_to_core_api_v1_org_all_proto_init() }
func file_bnk_to_core_api_v1_org_all_proto_init() {
	if File_bnk_to_core_api_v1_org_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holiday); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHolidayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHolidaysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHolidaysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHolidayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHolidayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonWorkingDays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNonWorkingDaysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Defaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_org_all_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bnk_to_core_api_v1_org_all_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_bnk_to_core_api_v1_org_all_proto_goTypes,
		DependencyIndexes: file_bnk_to_core_api_v1_org_all_proto_depIdxs,
		EnumInfos:         file_bnk_to_core_api_v1_org_all_proto_enumTypes,
		MessageInfos:      file_bnk_to_core_api_v1_org_all_proto_msgTypes,
	}.Build()
	File_bnk_to_core_api_v1_org_all_proto = out.File
	file_bnk_to_core_api_v1_org_all_proto_rawDesc = nil
	file_bnk_to_core_api_v1_org_all_proto_goTypes = nil
	file_bnk_to_core_api_v1_org_all_proto_depIdxs = nil
}
