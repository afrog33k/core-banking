// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: bnk.to/core/api/v1/cards/all.proto

// Package cards defines services for managing card authorization holds, card
// transactions, and retrieving information about card account balances.
// It does not manage the creation and deletion of cards. To do so, use the
// applicable account services (loan accounts/deposit accounts).

package cards

import (
	reflect "reflect"
	sync "sync"

	v1 "bnk.to/core/api/v1"
	_ "github.com/xo/ecosystem/proto/xo"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type is the types of a card.
//
// TODO: Not well defined.
type Type int32

const (
	Type_Debit  Type = 0
	Type_Credit Type = 1
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "Debit",
		1: "Credit",
	}
	Type_value = map[string]int32{
		"Debit":  0,
		"Credit": 1,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_cards_all_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_cards_all_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{0}
}

// HoldSource is where the authorization hold is issued from.
type HoldSource int32

const (
	HoldSource_CardSource    HoldSource = 0
	HoldSource_AccountSource HoldSource = 1
)

// Enum value maps for HoldSource.
var (
	HoldSource_name = map[int32]string{
		0: "CardSource",
		1: "AccountSource",
	}
	HoldSource_value = map[string]int32{
		"CardSource":    0,
		"AccountSource": 1,
	}
)

func (x HoldSource) Enum() *HoldSource {
	p := new(HoldSource)
	*p = x
	return p
}

func (x HoldSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HoldSource) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_cards_all_proto_enumTypes[1].Descriptor()
}

func (HoldSource) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_cards_all_proto_enumTypes[1]
}

func (x HoldSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HoldSource.Descriptor instead.
func (HoldSource) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{1}
}

// HoldStatus is the status of an authorization hold.
type HoldStatus int32

const (
	HoldStatus_HoldPending  HoldStatus = 0
	HoldStatus_HoldReversed HoldStatus = 1
	HoldStatus_HoldSettled  HoldStatus = 2
	HoldStatus_HoldExpired  HoldStatus = 3
)

// Enum value maps for HoldStatus.
var (
	HoldStatus_name = map[int32]string{
		0: "HoldPending",
		1: "HoldReversed",
		2: "HoldSettled",
		3: "HoldExpired",
	}
	HoldStatus_value = map[string]int32{
		"HoldPending":  0,
		"HoldReversed": 1,
		"HoldSettled":  2,
		"HoldExpired":  3,
	}
)

func (x HoldStatus) Enum() *HoldStatus {
	p := new(HoldStatus)
	*p = x
	return p
}

func (x HoldStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HoldStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_cards_all_proto_enumTypes[2].Descriptor()
}

func (HoldStatus) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_cards_all_proto_enumTypes[2]
}

func (x HoldStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HoldStatus.Descriptor instead.
func (HoldStatus) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{2}
}

// Card is a card associated with an account (deposit/loan). It can be managed
// with the CardsService but can only be created or deleted with the respective
// AccountsService.
type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CardID is the ID of the card.
	CardID string `protobuf:"bytes,1,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
	// Type is the type of the card.
	Type Type `protobuf:"varint,2,opt,name=Type,json=type,proto3,enum=openbank.core.v1.cards.Type" json:"type,omitempty"`
	// AccountID is the ID of the account associated with the card.
	AccountID string `protobuf:"bytes,3,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *Card) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_Debit
}

func (x *Card) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

// Transaction is a transaction involving a card.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransactionID is the ID of the transaction.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// Advice is true if the request should be accepted without balance
	// validation.
	Advice bool `protobuf:"varint,2,opt,name=Advice,json=advice,proto3" json:"advice,omitempty"`
	// Amount is the amount of money to to be withdrawn in the financial
	// transaction.
	Amount *v1.Amount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Acceptor is the card acceptor processing the transaction.
	Acceptor *Acceptor `protobuf:"bytes,4,opt,name=Acceptor,json=acceptor,proto3" json:"acceptor,omitempty"`
	// CardID is the ID of the card used to make the transaction.
	CardID string `protobuf:"bytes,5,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
	// AuthorizationID is the ID of the authorization hold.
	AuthorizationID string `protobuf:"bytes,6,opt,name=AuthorizationID,json=authorization_id,proto3" json:"authorization_id,omitempty"`
	// TransactionTime is the time of the transaction.
	TransactionTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=TransactionTime,json=transaction_time,proto3" json:"transaction_time,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *Transaction) GetAdvice() bool {
	if x != nil {
		return x.Advice
	}
	return false
}

func (x *Transaction) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Transaction) GetAcceptor() *Acceptor {
	if x != nil {
		return x.Acceptor
	}
	return nil
}

func (x *Transaction) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *Transaction) GetAuthorizationID() string {
	if x != nil {
		return x.AuthorizationID
	}
	return ""
}

func (x *Transaction) GetTransactionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionTime
	}
	return nil
}

// Acceptor is the details and names of a card acceptor (merchant) in a
// transaction.
type Acceptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the card acceptor.
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// MCC is the Merchant Category Code of the card acceptor.
	MCC int32 `protobuf:"varint,2,opt,name=MCC,json=m_c_c,proto3" json:"m_c_c,omitempty"`
	// Address is the address of the card acceptor.
	Address *v1.Address `protobuf:"bytes,3,opt,name=Address,json=address,proto3" json:"address,omitempty"`
}

func (x *Acceptor) Reset() {
	*x = Acceptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acceptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acceptor) ProtoMessage() {}

func (x *Acceptor) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acceptor.ProtoReflect.Descriptor instead.
func (*Acceptor) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{2}
}

func (x *Acceptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Acceptor) GetMCC() int32 {
	if x != nil {
		return x.MCC
	}
	return 0
}

func (x *Acceptor) GetAddress() *v1.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

// AccountBalance is a representation of a card account balance.
// It is presented to inquirers such as card processor.
type AccountBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Available is the amount of balance available in a deposit or credit
	// account.
	Available *v1.Amount `protobuf:"bytes,2,opt,name=Available,json=available,proto3" json:"available,omitempty"`
	// Total is the current balance of a deposit account or principal balance
	// of a revolving credit.
	Total *v1.Amount `protobuf:"bytes,3,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// CreditLimit is the overdraft limit of a deposit account or the loan
	// amount in case of a credit account.
	CreditLimit *v1.Amount `protobuf:"bytes,4,opt,name=CreditLimit,json=credit_limit,proto3" json:"credit_limit,omitempty"`
	// CardType is the tyoe of card of the account.
	CardType Type `protobuf:"varint,5,opt,name=CardType,json=card_type,proto3,enum=openbank.core.v1.cards.Type" json:"card_type,omitempty"`
}

func (x *AccountBalance) Reset() {
	*x = AccountBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalance) ProtoMessage() {}

func (x *AccountBalance) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalance.ProtoReflect.Descriptor instead.
func (*AccountBalance) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{3}
}

func (x *AccountBalance) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *AccountBalance) GetAvailable() *v1.Amount {
	if x != nil {
		return x.Available
	}
	return nil
}

func (x *AccountBalance) GetTotal() *v1.Amount {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *AccountBalance) GetCreditLimit() *v1.Amount {
	if x != nil {
		return x.CreditLimit
	}
	return nil
}

func (x *AccountBalance) GetCardType() Type {
	if x != nil {
		return x.CardType
	}
	return Type_Debit
}

// GetAccountBalanceRequest is a request to retrieve the account balance of a
// card.
type GetAccountBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CardID is the ID of the card to retrieve balances for.
	CardID string `protobuf:"bytes,1,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
}

func (x *GetAccountBalanceRequest) Reset() {
	*x = GetAccountBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountBalanceRequest) ProtoMessage() {}

func (x *GetAccountBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetAccountBalanceRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{4}
}

func (x *GetAccountBalanceRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

// Hold is a card authorization hold to a card token.
type Hold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HoldID is the ID of the authorization hold.
	HoldID string `protobuf:"bytes,1,opt,name=HoldID,json=hold_id,proto3" json:"hold_id,omitempty"`
	// AccountID is the ID of the account linked with the authorization hold.
	// TODO: Which table does this have a reference to.
	AccountID string `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Advice is true if the request should be accepted without balance
	// validation.
	Advice bool `protobuf:"varint,3,opt,name=Advice,json=advice,proto3" json:"advice,omitempty"`
	// Amount is the amount of money to be held.
	Amount *v1.Amount `protobuf:"bytes,4,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// OriginalAmount is the original amount of money to be held.
	OriginalAmount *v1.Amount `protobuf:"bytes,5,opt,name=OriginalAmount,json=original_amount,proto3" json:"original_amount,omitempty"`
	// CardAcceptor is the details of the card acceptor.
	CardAcceptor *Acceptor `protobuf:"bytes,6,opt,name=CardAcceptor,json=card_acceptor,proto3" json:"card_acceptor,omitempty"`
	// ExchangeRate is the exchange rate for the original currency.
	ExchangeRate float64 `protobuf:"fixed64,7,opt,name=ExchangeRate,json=exchange_rate,proto3" json:"exchange_rate,omitempty"`
	// CardID is the ID of the card.
	CardID string `protobuf:"bytes,8,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
	// Type is the type of the card for the authorization hold.
	Type Type `protobuf:"varint,9,opt,name=Type,json=type,proto3,enum=openbank.core.v1.cards.Type" json:"type,omitempty"`
	// Source is the monetary source of the authorization hold.
	Source HoldSource `protobuf:"varint,10,opt,name=Source,json=source,proto3,enum=openbank.core.v1.cards.HoldSource" json:"source,omitempty"`
	// Status is the status of the authorization hold.
	Status HoldStatus `protobuf:"varint,11,opt,name=Status,json=status,proto3,enum=openbank.core.v1.cards.HoldStatus" json:"status,omitempty"`
	// UserTransactionTime is the time at which the user made the authorization
	// hold.
	UserTransactionTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=UserTransactionTime,json=user_transaction_time,proto3" json:"user_transaction_time,omitempty"`
}

func (x *Hold) Reset() {
	*x = Hold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hold) ProtoMessage() {}

func (x *Hold) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hold.ProtoReflect.Descriptor instead.
func (*Hold) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{5}
}

func (x *Hold) GetHoldID() string {
	if x != nil {
		return x.HoldID
	}
	return ""
}

func (x *Hold) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *Hold) GetAdvice() bool {
	if x != nil {
		return x.Advice
	}
	return false
}

func (x *Hold) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Hold) GetOriginalAmount() *v1.Amount {
	if x != nil {
		return x.OriginalAmount
	}
	return nil
}

func (x *Hold) GetCardAcceptor() *Acceptor {
	if x != nil {
		return x.CardAcceptor
	}
	return nil
}

func (x *Hold) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *Hold) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *Hold) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_Debit
}

func (x *Hold) GetSource() HoldSource {
	if x != nil {
		return x.Source
	}
	return HoldSource_CardSource
}

func (x *Hold) GetStatus() HoldStatus {
	if x != nil {
		return x.Status
	}
	return HoldStatus_HoldPending
}

func (x *Hold) GetUserTransactionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UserTransactionTime
	}
	return nil
}

// GetHoldRequest is the request to get an authorization hold.
type GetHoldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CardID is the ID of the card.
	CardID string `protobuf:"bytes,1,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
	// HoldID is the reference ID of the authorization hold.
	HoldID string `protobuf:"bytes,2,opt,name=HoldID,json=hold_id,proto3" json:"hold_id,omitempty"`
}

func (x *GetHoldRequest) Reset() {
	*x = GetHoldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHoldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoldRequest) ProtoMessage() {}

func (x *GetHoldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoldRequest.ProtoReflect.Descriptor instead.
func (*GetHoldRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{6}
}

func (x *GetHoldRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *GetHoldRequest) GetHoldID() string {
	if x != nil {
		return x.HoldID
	}
	return ""
}

// CreateHoldRequest is the create hold request.
type CreateHoldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CardID is the ID of the card to create a hold for.
	CardID string `protobuf:"bytes,1,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
	// Body is the information for the authorization hold to be created.
	Body *Hold `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateHoldRequest) Reset() {
	*x = CreateHoldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHoldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHoldRequest) ProtoMessage() {}

func (x *CreateHoldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHoldRequest.ProtoReflect.Descriptor instead.
func (*CreateHoldRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{7}
}

func (x *CreateHoldRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *CreateHoldRequest) GetBody() *Hold {
	if x != nil {
		return x.Body
	}
	return nil
}

// HoldAdjustment is the data to decrease/increase the amount of an
// authorization hold.
type HoldAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AdjustmentID is the ID of the decrease/increase request. The ID is not
	// the same as the hold ID of the authorization hold.
	AdjustmentID string `protobuf:"bytes,1,opt,name=AdjustmentID,json=adjustment_id,proto3" json:"adjustment_id,omitempty"`
	// Advice is true if the request should be accepted without balance
	// validation.
	Advice bool `protobuf:"varint,2,opt,name=Advice,json=advice,proto3" json:"advice,omitempty"`
	// Change is the money to be subtracted/added to the authorization hold
	// amount. When subtracting, change should be negative.
	//
	// If the resulting amount is negative, the authorization hold is reversed.
	Change *v1.Amount `protobuf:"bytes,3,opt,name=Change,json=change,proto3" json:"change,omitempty"`
}

func (x *HoldAdjustment) Reset() {
	*x = HoldAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldAdjustment) ProtoMessage() {}

func (x *HoldAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldAdjustment.ProtoReflect.Descriptor instead.
func (*HoldAdjustment) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{8}
}

func (x *HoldAdjustment) GetAdjustmentID() string {
	if x != nil {
		return x.AdjustmentID
	}
	return ""
}

func (x *HoldAdjustment) GetAdvice() bool {
	if x != nil {
		return x.Advice
	}
	return false
}

func (x *HoldAdjustment) GetChange() *v1.Amount {
	if x != nil {
		return x.Change
	}
	return nil
}

// AdjustHoldRequest is the request to adjust a authorization hold.
type AdjustHoldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CardID is the ID of the card of authorization.
	CardID string `protobuf:"bytes,1,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
	// HoldID is the reference ID of the authorization hold.
	HoldID string `protobuf:"bytes,2,opt,name=HoldID,json=hold_id,proto3" json:"hold_id,omitempty"`
	// Body is the information to adjust the authorization hold.
	Body *HoldAdjustment `protobuf:"bytes,3,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *AdjustHoldRequest) Reset() {
	*x = AdjustHoldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustHoldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustHoldRequest) ProtoMessage() {}

func (x *AdjustHoldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustHoldRequest.ProtoReflect.Descriptor instead.
func (*AdjustHoldRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{9}
}

func (x *AdjustHoldRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *AdjustHoldRequest) GetHoldID() string {
	if x != nil {
		return x.HoldID
	}
	return ""
}

func (x *AdjustHoldRequest) GetBody() *HoldAdjustment {
	if x != nil {
		return x.Body
	}
	return nil
}

// UpdateHoldRequest is the request to update an authorization hold.
type UpdateHoldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CardID is the ID of the card of authorization.
	CardID string `protobuf:"bytes,1,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
	// HoldID is the reference ID of the authorization hold.
	HoldID string `protobuf:"bytes,2,opt,name=HoldID,json=hold_id,proto3" json:"hold_id,omitempty"`
	// Body is the information to update the authorization hold.
	Body *Hold `protobuf:"bytes,3,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateHoldRequest) Reset() {
	*x = UpdateHoldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHoldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHoldRequest) ProtoMessage() {}

func (x *UpdateHoldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHoldRequest.ProtoReflect.Descriptor instead.
func (*UpdateHoldRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateHoldRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *UpdateHoldRequest) GetHoldID() string {
	if x != nil {
		return x.HoldID
	}
	return ""
}

func (x *UpdateHoldRequest) GetBody() *Hold {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteHoldRequest is the delete hold request.
type DeleteHoldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HoldID is the hold ID of the authorization hold.
	HoldID string `protobuf:"bytes,1,opt,name=HoldID,json=hold_id,proto3" json:"hold_id,omitempty"`
	// CardID is the reference of the card.
	CardID string `protobuf:"bytes,2,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
}

func (x *DeleteHoldRequest) Reset() {
	*x = DeleteHoldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHoldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHoldRequest) ProtoMessage() {}

func (x *DeleteHoldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHoldRequest.ProtoReflect.Descriptor instead.
func (*DeleteHoldRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteHoldRequest) GetHoldID() string {
	if x != nil {
		return x.HoldID
	}
	return ""
}

func (x *DeleteHoldRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

// HoldConfig is a configuration for an authorization hold.
type HoldConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MerchantCode is the code of the merchant to create a merchant
	// authorization hold for.
	MerchantCode string `protobuf:"bytes,1,opt,name=MerchantCode,json=merchant_code,proto3" json:"merchant_code,omitempty"`
	// Duration is the duration before the hold expires.
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=Duration,json=duration,proto3" json:"duration,omitempty"`
	// Description is the description of the authorization hold.
	Description string `protobuf:"bytes,3,opt,name=Description,json=description,proto3" json:"description,omitempty"`
}

func (x *HoldConfig) Reset() {
	*x = HoldConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldConfig) ProtoMessage() {}

func (x *HoldConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldConfig.ProtoReflect.Descriptor instead.
func (*HoldConfig) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{12}
}

func (x *HoldConfig) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *HoldConfig) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *HoldConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// CreateHoldConfigRequest is the request to create a merchant-specific
// authorization hold.
type CreateHoldConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the value of the new merchant authorization hold.
	Body *HoldConfig `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateHoldConfigRequest) Reset() {
	*x = CreateHoldConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHoldConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHoldConfigRequest) ProtoMessage() {}

func (x *CreateHoldConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHoldConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateHoldConfigRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{13}
}

func (x *CreateHoldConfigRequest) GetBody() *HoldConfig {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListHoldConfigsRequest is the request to list merchant-specific authorization
// holds.
type ListHoldConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageToken is the token to use for pagination.
	PageToken string `protobuf:"bytes,1,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of holds to return per page.
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the field to order holds by.
	OrderBy string `protobuf:"bytes,3,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to apply to the holds.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListHoldConfigsRequest) Reset() {
	*x = ListHoldConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHoldConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHoldConfigsRequest) ProtoMessage() {}

func (x *ListHoldConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHoldConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListHoldConfigsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{14}
}

func (x *ListHoldConfigsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListHoldConfigsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListHoldConfigsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListHoldConfigsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListHoldConfigsResponse is the response for listing merchant-specific
// authorization holds.
type ListHoldConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of configs matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of configs remaining in the list, including the
	// configs in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Configs is the list of merchant-specific authorization hold
	// configurations.
	Configs []*HoldConfig `protobuf:"bytes,3,rep,name=Configs,json=configs,proto3" json:"configs,omitempty"`
	// NextPageToken is the token to use for pagination.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListHoldConfigsResponse) Reset() {
	*x = ListHoldConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHoldConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHoldConfigsResponse) ProtoMessage() {}

func (x *ListHoldConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHoldConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListHoldConfigsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{15}
}

func (x *ListHoldConfigsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListHoldConfigsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListHoldConfigsResponse) GetConfigs() []*HoldConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *ListHoldConfigsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetHoldConfigRequest is the request to retrieve a merchant-specific or
// default authorization hold.
type GetHoldConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MerchantCode is the code of the merchant to retrieve.
	MerchantCode string `protobuf:"bytes,1,opt,name=MerchantCode,json=merchant_code,proto3" json:"merchant_code,omitempty"`
}

func (x *GetHoldConfigRequest) Reset() {
	*x = GetHoldConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHoldConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHoldConfigRequest) ProtoMessage() {}

func (x *GetHoldConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHoldConfigRequest.ProtoReflect.Descriptor instead.
func (*GetHoldConfigRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{16}
}

func (x *GetHoldConfigRequest) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

// UpdateHoldConfigRequest is the request to update a merchant-specific or default
// authorization hold.
type UpdateHoldConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MerchantCode is the code of the merchant to update.
	MerchantCode string `protobuf:"bytes,1,opt,name=MerchantCode,json=merchant_code,proto3" json:"merchant_code,omitempty"`
	// Body is the value of the new authorization hold.
	Body *HoldConfig `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateHoldConfigRequest) Reset() {
	*x = UpdateHoldConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHoldConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHoldConfigRequest) ProtoMessage() {}

func (x *UpdateHoldConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHoldConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateHoldConfigRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateHoldConfigRequest) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

func (x *UpdateHoldConfigRequest) GetBody() *HoldConfig {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteHoldConfigRequest is the request to delete a merchant-specific authorization
// hold.
type DeleteHoldConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MerchantCode is the code of the merchant to delete.
	MerchantCode string `protobuf:"bytes,1,opt,name=MerchantCode,json=merchant_code,proto3" json:"merchant_code,omitempty"`
}

func (x *DeleteHoldConfigRequest) Reset() {
	*x = DeleteHoldConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHoldConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHoldConfigRequest) ProtoMessage() {}

func (x *DeleteHoldConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHoldConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteHoldConfigRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteHoldConfigRequest) GetMerchantCode() string {
	if x != nil {
		return x.MerchantCode
	}
	return ""
}

// NewTransaction is information for a new card transaction.
type NewTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction is the transaction to create.
	Transaction *Transaction `protobuf:"bytes,1,opt,name=Transaction,json=transaction,proto3" json:"transaction,omitempty"`
	// FirstRepayTime is the first time repayment should be done for a loan
	// transaction.
	FirstRepayTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=FirstRepayTime,json=first_repay_time,proto3" json:"first_repay_time,omitempty"`
	// IncreaseAmountIfNeeded is a flag indicating that the loan account limit
	// should be increased if the loan account had insufficient balances.
	IncreaseAmountIfNeeded bool `protobuf:"varint,3,opt,name=IncreaseAmountIfNeeded,json=increase_amount_if_needed,proto3" json:"increase_amount_if_needed,omitempty"`
	// TransactionChannelID is the ID of the channel through which the payment
	// is done.
	TransactionChannelID string `protobuf:"bytes,4,opt,name=TransactionChannelID,json=transaction_channel_id,proto3" json:"transaction_channel_id,omitempty"`
}

func (x *NewTransaction) Reset() {
	*x = NewTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTransaction) ProtoMessage() {}

func (x *NewTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTransaction.ProtoReflect.Descriptor instead.
func (*NewTransaction) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{19}
}

func (x *NewTransaction) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *NewTransaction) GetFirstRepayTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstRepayTime
	}
	return nil
}

func (x *NewTransaction) GetIncreaseAmountIfNeeded() bool {
	if x != nil {
		return x.IncreaseAmountIfNeeded
	}
	return false
}

func (x *NewTransaction) GetTransactionChannelID() string {
	if x != nil {
		return x.TransactionChannelID
	}
	return ""
}

// CreateTransactionRequest is the request to create a new card transaction.
type CreateTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CardID is the ID of the card to create the transaction for.
	CardID string `protobuf:"bytes,1,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
	// Body is the data to create the transaction.
	Body *NewTransaction `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateTransactionRequest) Reset() {
	*x = CreateTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionRequest) ProtoMessage() {}

func (x *CreateTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{20}
}

func (x *CreateTransactionRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *CreateTransactionRequest) GetBody() *NewTransaction {
	if x != nil {
		return x.Body
	}
	return nil
}

// TransactionReversal is a struct containing information to reverse a card
// transaction.
type TransactionReversal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the amount to be credited to client from original transaction.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// TransactionChannelID is the ID of the channel through which the payment
	// is done.
	//
	// If not provided, the value from the source card transaction is used.
	TransactionChannelID string `protobuf:"bytes,2,opt,name=TransactionChannelID,json=transaction_channel_id,proto3" json:"transaction_channel_id,omitempty"`
}

func (x *TransactionReversal) Reset() {
	*x = TransactionReversal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReversal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReversal) ProtoMessage() {}

func (x *TransactionReversal) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReversal.ProtoReflect.Descriptor instead.
func (*TransactionReversal) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{21}
}

func (x *TransactionReversal) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransactionReversal) GetTransactionChannelID() string {
	if x != nil {
		return x.TransactionChannelID
	}
	return ""
}

// ReverseTransactionRequest is the request to reverse a card transaction.
type ReverseTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CardID is the ID of the card to reverse the transaction for.
	CardID string `protobuf:"bytes,1,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
	// RefID is the reference ID of the card transaction to reverse.
	RefID string `protobuf:"bytes,2,opt,name=RefID,json=ref_id,proto3" json:"ref_id,omitempty"`
	// Body is the information to reverse the transaction.
	Body *TransactionReversal `protobuf:"bytes,3,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *ReverseTransactionRequest) Reset() {
	*x = ReverseTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseTransactionRequest) ProtoMessage() {}

func (x *ReverseTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_cards_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseTransactionRequest.ProtoReflect.Descriptor instead.
func (*ReverseTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP(), []int{22}
}

func (x *ReverseTransactionRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

func (x *ReverseTransactionRequest) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

func (x *ReverseTransactionRequest) GetBody() *TransactionReversal {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_bnk_to_core_api_v1_cards_all_proto protoreflect.FileDescriptor

var file_bnk_to_core_api_v1_cards_all_proto_rawDesc = []byte{
	0x0a, 0x22, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x0b, 0x78, 0x6f,
	0x2f, 0x78, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x06,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x02, 0x08, 0x02, 0x52, 0x07, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47,
	0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xbc, 0x03, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x06, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x48, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x16, 0x2a, 0x14, 0x0a, 0x0a, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x12, 0x51, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x98, 0x01, 0x0a, 0x08,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x4d, 0x43, 0x43, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x6d, 0x5f, 0x63, 0x5f, 0x63, 0x12, 0x3f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xd8, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x45, 0x0a,
	0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10,
	0x01, 0x22, 0x47, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x80, 0x06, 0x0a, 0x04, 0x48,
	0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda,
	0x47, 0x02, 0x08, 0x02, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x64, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x61, 0x72,
	0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f,
	0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x0c,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x16, 0x2a, 0x14, 0x0a, 0x0a,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x06, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x62, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x7e, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x48,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x65, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x34, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0xda, 0x47, 0x02, 0x08, 0x02, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x65, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xbf, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08,
	0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xeb, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x48, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x4f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x52, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xcb, 0x02, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0e, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x16,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x66,
	0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xa2, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x3a, 0x0b, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x19, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x05,
	0x52, 0x65, 0x66, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x12,
	0x4b, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x2a, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x05,
	0x44, 0x65, 0x62, 0x69, 0x74, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a,
	0x3b, 0x0a, 0x0a, 0x48, 0x6f, 0x6c, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x0a, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x15, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x65, 0x0a, 0x0a,
	0x48, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0b, 0x48, 0x6f,
	0x6c, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x14, 0x0a, 0x0c, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x10,
	0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x48, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x48, 0x6f,
	0x6c, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x1a,
	0x02, 0x18, 0x00, 0x32, 0xd3, 0x09, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x28, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x28,
	0x00, 0x30, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f,
	0x6c, 0x64, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x22, 0x2c, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x7d, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0x84, 0x01,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x22,
	0x2f, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x7d, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x48, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x7d,
	0x28, 0x00, 0x30, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x6c, 0x64, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x22, 0x35, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x1a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x44, 0x7d, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x48, 0x6f, 0x6c, 0x64,
	0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x22,
	0x3c, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x48,
	0x6f, 0x6c, 0x64, 0x49, 0x44, 0x7d, 0x3a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x28, 0x00, 0x30,
	0x00, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64,
	0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2f, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x48, 0x6f, 0x6c,
	0x64, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x33, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x7b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb5, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x52, 0x65, 0x66, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x32, 0xfe, 0x05, 0x0a, 0x11, 0x48, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x8a, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1d, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x09, 0x2f,
	0x76, 0x31, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0x8f, 0x01, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x17, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12,
	0x09, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x26, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xac,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3f, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x5a, 0x20, 0x3a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x1a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x2f,
	0x7b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x1a, 0x09,
	0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0x85, 0x01,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x2f, 0x7b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x7d, 0x28, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x8d, 0x01, 0x0a, 0x16, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x1e, 0x62, 0x6e, 0x6b, 0x2e, 0x74,
	0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x3b, 0x63, 0x61, 0x72, 0x64, 0x73, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90,
	0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x92, 0x41,
	0x39, 0x0a, 0x03, 0x32, 0x2e, 0x30, 0x12, 0x0b, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x32,
	0x02, 0x76, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bnk_to_core_api_v1_cards_all_proto_rawDescOnce sync.Once
	file_bnk_to_core_api_v1_cards_all_proto_rawDescData = file_bnk_to_core_api_v1_cards_all_proto_rawDesc
)

func file_bnk_to_core_api_v1_cards_all_proto_rawDescGZIP() []byte {
	file_bnk_to_core_api_v1_cards_all_proto_rawDescOnce.Do(func() {
		file_bnk_to_core_api_v1_cards_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_bnk_to_core_api_v1_cards_all_proto_rawDescData)
	})
	return file_bnk_to_core_api_v1_cards_all_proto_rawDescData
}

var (
	file_bnk_to_core_api_v1_cards_all_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
	file_bnk_to_core_api_v1_cards_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 23)
	file_bnk_to_core_api_v1_cards_all_proto_goTypes   = []interface{}{
		(Type)(0),                         // 0: openbank.core.v1.cards.Type
		(HoldSource)(0),                   // 1: openbank.core.v1.cards.HoldSource
		(HoldStatus)(0),                   // 2: openbank.core.v1.cards.HoldStatus
		(*Card)(nil),                      // 3: openbank.core.v1.cards.Card
		(*Transaction)(nil),               // 4: openbank.core.v1.cards.Transaction
		(*Acceptor)(nil),                  // 5: openbank.core.v1.cards.Acceptor
		(*AccountBalance)(nil),            // 6: openbank.core.v1.cards.AccountBalance
		(*GetAccountBalanceRequest)(nil),  // 7: openbank.core.v1.cards.GetAccountBalanceRequest
		(*Hold)(nil),                      // 8: openbank.core.v1.cards.Hold
		(*GetHoldRequest)(nil),            // 9: openbank.core.v1.cards.GetHoldRequest
		(*CreateHoldRequest)(nil),         // 10: openbank.core.v1.cards.CreateHoldRequest
		(*HoldAdjustment)(nil),            // 11: openbank.core.v1.cards.HoldAdjustment
		(*AdjustHoldRequest)(nil),         // 12: openbank.core.v1.cards.AdjustHoldRequest
		(*UpdateHoldRequest)(nil),         // 13: openbank.core.v1.cards.UpdateHoldRequest
		(*DeleteHoldRequest)(nil),         // 14: openbank.core.v1.cards.DeleteHoldRequest
		(*HoldConfig)(nil),                // 15: openbank.core.v1.cards.HoldConfig
		(*CreateHoldConfigRequest)(nil),   // 16: openbank.core.v1.cards.CreateHoldConfigRequest
		(*ListHoldConfigsRequest)(nil),    // 17: openbank.core.v1.cards.ListHoldConfigsRequest
		(*ListHoldConfigsResponse)(nil),   // 18: openbank.core.v1.cards.ListHoldConfigsResponse
		(*GetHoldConfigRequest)(nil),      // 19: openbank.core.v1.cards.GetHoldConfigRequest
		(*UpdateHoldConfigRequest)(nil),   // 20: openbank.core.v1.cards.UpdateHoldConfigRequest
		(*DeleteHoldConfigRequest)(nil),   // 21: openbank.core.v1.cards.DeleteHoldConfigRequest
		(*NewTransaction)(nil),            // 22: openbank.core.v1.cards.NewTransaction
		(*CreateTransactionRequest)(nil),  // 23: openbank.core.v1.cards.CreateTransactionRequest
		(*TransactionReversal)(nil),       // 24: openbank.core.v1.cards.TransactionReversal
		(*ReverseTransactionRequest)(nil), // 25: openbank.core.v1.cards.ReverseTransactionRequest
		(*v1.Amount)(nil),                 // 26: openbank.core.v1.Amount
		(*timestamppb.Timestamp)(nil),     // 27: google.protobuf.Timestamp
		(*v1.Address)(nil),                // 28: openbank.core.v1.Address
		(*durationpb.Duration)(nil),       // 29: google.protobuf.Duration
		(*emptypb.Empty)(nil),             // 30: google.protobuf.Empty
	}
)

var file_bnk_to_core_api_v1_cards_all_proto_depIdxs = []int32{
	0,  // 0: openbank.core.v1.cards.Card.Type:type_name -> openbank.core.v1.cards.Type
	26, // 1: openbank.core.v1.cards.Transaction.Amount:type_name -> openbank.core.v1.Amount
	5,  // 2: openbank.core.v1.cards.Transaction.Acceptor:type_name -> openbank.core.v1.cards.Acceptor
	27, // 3: openbank.core.v1.cards.Transaction.TransactionTime:type_name -> google.protobuf.Timestamp
	28, // 4: openbank.core.v1.cards.Acceptor.Address:type_name -> openbank.core.v1.Address
	26, // 5: openbank.core.v1.cards.AccountBalance.Available:type_name -> openbank.core.v1.Amount
	26, // 6: openbank.core.v1.cards.AccountBalance.Total:type_name -> openbank.core.v1.Amount
	26, // 7: openbank.core.v1.cards.AccountBalance.CreditLimit:type_name -> openbank.core.v1.Amount
	0,  // 8: openbank.core.v1.cards.AccountBalance.CardType:type_name -> openbank.core.v1.cards.Type
	26, // 9: openbank.core.v1.cards.Hold.Amount:type_name -> openbank.core.v1.Amount
	26, // 10: openbank.core.v1.cards.Hold.OriginalAmount:type_name -> openbank.core.v1.Amount
	5,  // 11: openbank.core.v1.cards.Hold.CardAcceptor:type_name -> openbank.core.v1.cards.Acceptor
	0,  // 12: openbank.core.v1.cards.Hold.Type:type_name -> openbank.core.v1.cards.Type
	1,  // 13: openbank.core.v1.cards.Hold.Source:type_name -> openbank.core.v1.cards.HoldSource
	2,  // 14: openbank.core.v1.cards.Hold.Status:type_name -> openbank.core.v1.cards.HoldStatus
	27, // 15: openbank.core.v1.cards.Hold.UserTransactionTime:type_name -> google.protobuf.Timestamp
	8,  // 16: openbank.core.v1.cards.CreateHoldRequest.Body:type_name -> openbank.core.v1.cards.Hold
	26, // 17: openbank.core.v1.cards.HoldAdjustment.Change:type_name -> openbank.core.v1.Amount
	11, // 18: openbank.core.v1.cards.AdjustHoldRequest.Body:type_name -> openbank.core.v1.cards.HoldAdjustment
	8,  // 19: openbank.core.v1.cards.UpdateHoldRequest.Body:type_name -> openbank.core.v1.cards.Hold
	29, // 20: openbank.core.v1.cards.HoldConfig.Duration:type_name -> google.protobuf.Duration
	15, // 21: openbank.core.v1.cards.CreateHoldConfigRequest.Body:type_name -> openbank.core.v1.cards.HoldConfig
	15, // 22: openbank.core.v1.cards.ListHoldConfigsResponse.Configs:type_name -> openbank.core.v1.cards.HoldConfig
	15, // 23: openbank.core.v1.cards.UpdateHoldConfigRequest.Body:type_name -> openbank.core.v1.cards.HoldConfig
	4,  // 24: openbank.core.v1.cards.NewTransaction.Transaction:type_name -> openbank.core.v1.cards.Transaction
	27, // 25: openbank.core.v1.cards.NewTransaction.FirstRepayTime:type_name -> google.protobuf.Timestamp
	22, // 26: openbank.core.v1.cards.CreateTransactionRequest.Body:type_name -> openbank.core.v1.cards.NewTransaction
	26, // 27: openbank.core.v1.cards.TransactionReversal.Amount:type_name -> openbank.core.v1.Amount
	24, // 28: openbank.core.v1.cards.ReverseTransactionRequest.Body:type_name -> openbank.core.v1.cards.TransactionReversal
	7,  // 29: openbank.core.v1.cards.CardsService.GetAccountBalances:input_type -> openbank.core.v1.cards.GetAccountBalanceRequest
	10, // 30: openbank.core.v1.cards.CardsService.CreateHold:input_type -> openbank.core.v1.cards.CreateHoldRequest
	9,  // 31: openbank.core.v1.cards.CardsService.GetHold:input_type -> openbank.core.v1.cards.GetHoldRequest
	13, // 32: openbank.core.v1.cards.CardsService.UpdateHold:input_type -> openbank.core.v1.cards.UpdateHoldRequest
	12, // 33: openbank.core.v1.cards.CardsService.AdjustHold:input_type -> openbank.core.v1.cards.AdjustHoldRequest
	14, // 34: openbank.core.v1.cards.CardsService.DeleteHold:input_type -> openbank.core.v1.cards.DeleteHoldRequest
	23, // 35: openbank.core.v1.cards.CardsService.CreateTransaction:input_type -> openbank.core.v1.cards.CreateTransactionRequest
	25, // 36: openbank.core.v1.cards.CardsService.ReverseTransaction:input_type -> openbank.core.v1.cards.ReverseTransactionRequest
	16, // 37: openbank.core.v1.cards.HoldConfigService.CreateHoldConfig:input_type -> openbank.core.v1.cards.CreateHoldConfigRequest
	17, // 38: openbank.core.v1.cards.HoldConfigService.ListHoldConfigs:input_type -> openbank.core.v1.cards.ListHoldConfigsRequest
	19, // 39: openbank.core.v1.cards.HoldConfigService.GetHoldConfig:input_type -> openbank.core.v1.cards.GetHoldConfigRequest
	20, // 40: openbank.core.v1.cards.HoldConfigService.UpdateHoldConfig:input_type -> openbank.core.v1.cards.UpdateHoldConfigRequest
	21, // 41: openbank.core.v1.cards.HoldConfigService.DeleteHoldConfig:input_type -> openbank.core.v1.cards.DeleteHoldConfigRequest
	6,  // 42: openbank.core.v1.cards.CardsService.GetAccountBalances:output_type -> openbank.core.v1.cards.AccountBalance
	8,  // 43: openbank.core.v1.cards.CardsService.CreateHold:output_type -> openbank.core.v1.cards.Hold
	8,  // 44: openbank.core.v1.cards.CardsService.GetHold:output_type -> openbank.core.v1.cards.Hold
	8,  // 45: openbank.core.v1.cards.CardsService.UpdateHold:output_type -> openbank.core.v1.cards.Hold
	8,  // 46: openbank.core.v1.cards.CardsService.AdjustHold:output_type -> openbank.core.v1.cards.Hold
	30, // 47: openbank.core.v1.cards.CardsService.DeleteHold:output_type -> google.protobuf.Empty
	4,  // 48: openbank.core.v1.cards.CardsService.CreateTransaction:output_type -> openbank.core.v1.cards.Transaction
	4,  // 49: openbank.core.v1.cards.CardsService.ReverseTransaction:output_type -> openbank.core.v1.cards.Transaction
	15, // 50: openbank.core.v1.cards.HoldConfigService.CreateHoldConfig:output_type -> openbank.core.v1.cards.HoldConfig
	18, // 51: openbank.core.v1.cards.HoldConfigService.ListHoldConfigs:output_type -> openbank.core.v1.cards.ListHoldConfigsResponse
	15, // 52: openbank.core.v1.cards.HoldConfigService.GetHoldConfig:output_type -> openbank.core.v1.cards.HoldConfig
	15, // 53: openbank.core.v1.cards.HoldConfigService.UpdateHoldConfig:output_type -> openbank.core.v1.cards.HoldConfig
	30, // 54: openbank.core.v1.cards.HoldConfigService.DeleteHoldConfig:output_type -> google.protobuf.Empty
	42, // [42:55] is the sub-list for method output_type
	29, // [29:42] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_bnk_to_core_api_v1_cards_all_proto_init() }
func file_bnk_to_core_api_v1_cards_all_proto_init() {
	if File_bnk_to_core_api_v1_cards_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acceptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHoldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHoldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustHoldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHoldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHoldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHoldConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHoldConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHoldConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHoldConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHoldConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHoldConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReversal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_cards_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bnk_to_core_api_v1_cards_all_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_bnk_to_core_api_v1_cards_all_proto_goTypes,
		DependencyIndexes: file_bnk_to_core_api_v1_cards_all_proto_depIdxs,
		EnumInfos:         file_bnk_to_core_api_v1_cards_all_proto_enumTypes,
		MessageInfos:      file_bnk_to_core_api_v1_cards_all_proto_msgTypes,
	}.Build()
	File_bnk_to_core_api_v1_cards_all_proto = out.File
	file_bnk_to_core_api_v1_cards_all_proto_rawDesc = nil
	file_bnk_to_core_api_v1_cards_all_proto_goTypes = nil
	file_bnk_to_core_api_v1_cards_all_proto_depIdxs = nil
}
