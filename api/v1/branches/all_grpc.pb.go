// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bnk.to/core/api/v1/branches/all.proto

package branches

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BranchesServiceClient is the client API for BranchesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BranchesServiceClient interface {
	// CreateBranch creates a branch.
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*Branch, error)
	// ListBranches lists branches.
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error)
	// GetBranch returns the branch with the specified BranchID.
	GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*Branch, error)
	// UpdateBranch updates the specified branch.
	UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*Branch, error)
	// DeleteBranch deletes the specified branch.
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// AddBranchHolidays adds the specified holidays to a branch.
	AddBranchHolidays(ctx context.Context, in *AddBranchHolidaysRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListBranchHolidays lists the holidays of a branch.
	ListBranchHolidays(ctx context.Context, in *ListBranchHolidaysRequest, opts ...grpc.CallOption) (*ListBranchHolidaysResponse, error)
	// RemoveBranchHolidays removes the specified holidays to a branch.
	RemoveBranchHolidays(ctx context.Context, in *RemoveBranchHolidaysRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type branchesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBranchesServiceClient(cc grpc.ClientConnInterface) BranchesServiceClient {
	return &branchesServiceClient{cc}
}

func (c *branchesServiceClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*Branch, error) {
	out := new(Branch)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.branches.BranchesService/CreateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchesServiceClient) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error) {
	out := new(ListBranchesResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.branches.BranchesService/ListBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchesServiceClient) GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*Branch, error) {
	out := new(Branch)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.branches.BranchesService/GetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchesServiceClient) UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*Branch, error) {
	out := new(Branch)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.branches.BranchesService/UpdateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchesServiceClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.branches.BranchesService/DeleteBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchesServiceClient) AddBranchHolidays(ctx context.Context, in *AddBranchHolidaysRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.branches.BranchesService/AddBranchHolidays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchesServiceClient) ListBranchHolidays(ctx context.Context, in *ListBranchHolidaysRequest, opts ...grpc.CallOption) (*ListBranchHolidaysResponse, error) {
	out := new(ListBranchHolidaysResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.branches.BranchesService/ListBranchHolidays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchesServiceClient) RemoveBranchHolidays(ctx context.Context, in *RemoveBranchHolidaysRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.branches.BranchesService/RemoveBranchHolidays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranchesServiceServer is the server API for BranchesService service.
// All implementations must embed UnimplementedBranchesServiceServer
// for forward compatibility
type BranchesServiceServer interface {
	// CreateBranch creates a branch.
	CreateBranch(context.Context, *CreateBranchRequest) (*Branch, error)
	// ListBranches lists branches.
	ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error)
	// GetBranch returns the branch with the specified BranchID.
	GetBranch(context.Context, *GetBranchRequest) (*Branch, error)
	// UpdateBranch updates the specified branch.
	UpdateBranch(context.Context, *UpdateBranchRequest) (*Branch, error)
	// DeleteBranch deletes the specified branch.
	DeleteBranch(context.Context, *DeleteBranchRequest) (*emptypb.Empty, error)
	// AddBranchHolidays adds the specified holidays to a branch.
	AddBranchHolidays(context.Context, *AddBranchHolidaysRequest) (*emptypb.Empty, error)
	// ListBranchHolidays lists the holidays of a branch.
	ListBranchHolidays(context.Context, *ListBranchHolidaysRequest) (*ListBranchHolidaysResponse, error)
	// RemoveBranchHolidays removes the specified holidays to a branch.
	RemoveBranchHolidays(context.Context, *RemoveBranchHolidaysRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBranchesServiceServer()
}

// UnimplementedBranchesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBranchesServiceServer struct{}

func (UnimplementedBranchesServiceServer) CreateBranch(context.Context, *CreateBranchRequest) (*Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}

func (UnimplementedBranchesServiceServer) ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranches not implemented")
}

func (UnimplementedBranchesServiceServer) GetBranch(context.Context, *GetBranchRequest) (*Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}

func (UnimplementedBranchesServiceServer) UpdateBranch(context.Context, *UpdateBranchRequest) (*Branch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranch not implemented")
}

func (UnimplementedBranchesServiceServer) DeleteBranch(context.Context, *DeleteBranchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}

func (UnimplementedBranchesServiceServer) AddBranchHolidays(context.Context, *AddBranchHolidaysRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBranchHolidays not implemented")
}

func (UnimplementedBranchesServiceServer) ListBranchHolidays(context.Context, *ListBranchHolidaysRequest) (*ListBranchHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranchHolidays not implemented")
}

func (UnimplementedBranchesServiceServer) RemoveBranchHolidays(context.Context, *RemoveBranchHolidaysRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBranchHolidays not implemented")
}
func (UnimplementedBranchesServiceServer) mustEmbedUnimplementedBranchesServiceServer() {}

// UnsafeBranchesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BranchesServiceServer will
// result in compilation errors.
type UnsafeBranchesServiceServer interface {
	mustEmbedUnimplementedBranchesServiceServer()
}

func RegisterBranchesServiceServer(s grpc.ServiceRegistrar, srv BranchesServiceServer) {
	s.RegisterService(&BranchesService_ServiceDesc, srv)
}

func _BranchesService_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchesServiceServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.branches.BranchesService/CreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchesServiceServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchesService_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchesServiceServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.branches.BranchesService/ListBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchesServiceServer).ListBranches(ctx, req.(*ListBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchesService_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchesServiceServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.branches.BranchesService/GetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchesServiceServer).GetBranch(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchesService_UpdateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchesServiceServer).UpdateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.branches.BranchesService/UpdateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchesServiceServer).UpdateBranch(ctx, req.(*UpdateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchesService_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchesServiceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.branches.BranchesService/DeleteBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchesServiceServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchesService_AddBranchHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBranchHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchesServiceServer).AddBranchHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.branches.BranchesService/AddBranchHolidays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchesServiceServer).AddBranchHolidays(ctx, req.(*AddBranchHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchesService_ListBranchHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchesServiceServer).ListBranchHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.branches.BranchesService/ListBranchHolidays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchesServiceServer).ListBranchHolidays(ctx, req.(*ListBranchHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchesService_RemoveBranchHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBranchHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchesServiceServer).RemoveBranchHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.branches.BranchesService/RemoveBranchHolidays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchesServiceServer).RemoveBranchHolidays(ctx, req.(*RemoveBranchHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BranchesService_ServiceDesc is the grpc.ServiceDesc for BranchesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BranchesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.branches.BranchesService",
	HandlerType: (*BranchesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBranch",
			Handler:    _BranchesService_CreateBranch_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _BranchesService_ListBranches_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _BranchesService_GetBranch_Handler,
		},
		{
			MethodName: "UpdateBranch",
			Handler:    _BranchesService_UpdateBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _BranchesService_DeleteBranch_Handler,
		},
		{
			MethodName: "AddBranchHolidays",
			Handler:    _BranchesService_AddBranchHolidays_Handler,
		},
		{
			MethodName: "ListBranchHolidays",
			Handler:    _BranchesService_ListBranchHolidays_Handler,
		},
		{
			MethodName: "RemoveBranchHolidays",
			Handler:    _BranchesService_RemoveBranchHolidays_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/branches/all.proto",
}
