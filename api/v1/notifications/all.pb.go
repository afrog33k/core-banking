// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: bnk.to/core/api/v1/notifications/all.proto

// Package notifications is the internal notification service.

package notifications

import (
	reflect "reflect"
	sync "sync"

	v1 "bnk.to/core/api/v1"
	_ "github.com/xo/ecosystem/proto/xo"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event is the event that triggered the notification.
type Event int32

const (
	Event_EventManual                                Event = 0
	Event_EventClientCreated                         Event = 1
	Event_EventClientApproved                        Event = 2
	Event_EventGroupActivity                         Event = 3
	Event_EventGroupCreated                          Event = 4
	Event_EventLoanCreated                           Event = 5
	Event_EventInterestRateChanged                   Event = 6
	Event_EventClientRejected                        Event = 7
	Event_EventClientActivity                        Event = 8
	Event_EventLoanRepayment                         Event = 9
	Event_EventLoanRepaymentReversal                 Event = 10
	Event_EventFeeApplied                            Event = 11
	Event_EventFeeAdjusted                           Event = 12
	Event_EventFeeCharged                            Event = 13
	Event_EventLoanApproval                          Event = 14
	Event_EventLoanAccountClosure                    Event = 15
	Event_EventLoanAccountWriteOff                   Event = 16
	Event_EventLoanAccountRejection                  Event = 17
	Event_EventLoanAccountRescheduled                Event = 18
	Event_EventLoanAccountRefinanced                 Event = 19
	Event_EventRepaymentReminder                     Event = 20
	Event_EventAccountInArrears                      Event = 21
	Event_EventLoanDisbursement                      Event = 22
	Event_EventLoanDisbursementReversal              Event = 23
	Event_EventLoanAccountActivity                   Event = 24
	Event_EventLoanAnticipatedDisbursement           Event = 25
	Event_EventSavingsCreated                        Event = 26
	Event_EventSavingsDeposit                        Event = 27
	Event_EventSavingsDepositReversal                Event = 28
	Event_EventSavingsApproval                       Event = 29
	Event_EventSavingsAccountActivated               Event = 30
	Event_EventSavingsAccountClosure                 Event = 31
	Event_EventSavingsAccountRejection               Event = 32
	Event_EventSavingsWithdrawal                     Event = 33
	Event_EventSavingsWithdrawalReversal             Event = 34
	Event_EventSavingsAccountActivity                Event = 35
	Event_EventAccountAuthorizationHoldCreated       Event = 36
	Event_EventCardsAuthorizationHoldCreated         Event = 37
	Event_EventCardsAuthorizationHoldSettled         Event = 38
	Event_EventCardsAuthorizationHoldAmountDecreased Event = 39
	Event_EventCardsAuthorizationHoldAmountIncreased Event = 40
	Event_EventCardsAuthorizationHoldExpired         Event = 41
	Event_EventCardsAuthorizationHoldReversed        Event = 42
	Event_EventPortalActivated                       Event = 43
	Event_EventPortalPasswordReset                   Event = 44
	Event_EventEndOfDayProcessingCompleted           Event = 45
	Event_EventDataAccessStateChanged                Event = 46
	Event_EventRevolvingAccountCreated               Event = 47
	Event_EventRevolvingAccountClosed                Event = 48
	Event_EventRevolvingAccountApproved              Event = 49
	Event_EventRevolvingAccountRejected              Event = 50
	Event_EventRevolvingAccountWithdrawn             Event = 51
	Event_EventRevolvingAccountDeleted               Event = 52
	Event_EventRevolvingAccountAdded                 Event = 53
	Event_EventRevolvingAccountRemoved               Event = 54
	Event_EventRevolvingAccountEdited                Event = 55
	Event_EventPaymentOrderActivity                  Event = 56
	Event_EventCollectionOrderActivity               Event = 57
	Event_EventJournalEntryAdded                     Event = 58
	Event_EventJournalEntryAdjusted                  Event = 59
)

// Enum value maps for Event.
var (
	Event_name = map[int32]string{
		0:  "EventManual",
		1:  "EventClientCreated",
		2:  "EventClientApproved",
		3:  "EventGroupActivity",
		4:  "EventGroupCreated",
		5:  "EventLoanCreated",
		6:  "EventInterestRateChanged",
		7:  "EventClientRejected",
		8:  "EventClientActivity",
		9:  "EventLoanRepayment",
		10: "EventLoanRepaymentReversal",
		11: "EventFeeApplied",
		12: "EventFeeAdjusted",
		13: "EventFeeCharged",
		14: "EventLoanApproval",
		15: "EventLoanAccountClosure",
		16: "EventLoanAccountWriteOff",
		17: "EventLoanAccountRejection",
		18: "EventLoanAccountRescheduled",
		19: "EventLoanAccountRefinanced",
		20: "EventRepaymentReminder",
		21: "EventAccountInArrears",
		22: "EventLoanDisbursement",
		23: "EventLoanDisbursementReversal",
		24: "EventLoanAccountActivity",
		25: "EventLoanAnticipatedDisbursement",
		26: "EventSavingsCreated",
		27: "EventSavingsDeposit",
		28: "EventSavingsDepositReversal",
		29: "EventSavingsApproval",
		30: "EventSavingsAccountActivated",
		31: "EventSavingsAccountClosure",
		32: "EventSavingsAccountRejection",
		33: "EventSavingsWithdrawal",
		34: "EventSavingsWithdrawalReversal",
		35: "EventSavingsAccountActivity",
		36: "EventAccountAuthorizationHoldCreated",
		37: "EventCardsAuthorizationHoldCreated",
		38: "EventCardsAuthorizationHoldSettled",
		39: "EventCardsAuthorizationHoldAmountDecreased",
		40: "EventCardsAuthorizationHoldAmountIncreased",
		41: "EventCardsAuthorizationHoldExpired",
		42: "EventCardsAuthorizationHoldReversed",
		43: "EventPortalActivated",
		44: "EventPortalPasswordReset",
		45: "EventEndOfDayProcessingCompleted",
		46: "EventDataAccessStateChanged",
		47: "EventRevolvingAccountCreated",
		48: "EventRevolvingAccountClosed",
		49: "EventRevolvingAccountApproved",
		50: "EventRevolvingAccountRejected",
		51: "EventRevolvingAccountWithdrawn",
		52: "EventRevolvingAccountDeleted",
		53: "EventRevolvingAccountAdded",
		54: "EventRevolvingAccountRemoved",
		55: "EventRevolvingAccountEdited",
		56: "EventPaymentOrderActivity",
		57: "EventCollectionOrderActivity",
		58: "EventJournalEntryAdded",
		59: "EventJournalEntryAdjusted",
	}
	Event_value = map[string]int32{
		"EventManual":                                0,
		"EventClientCreated":                         1,
		"EventClientApproved":                        2,
		"EventGroupActivity":                         3,
		"EventGroupCreated":                          4,
		"EventLoanCreated":                           5,
		"EventInterestRateChanged":                   6,
		"EventClientRejected":                        7,
		"EventClientActivity":                        8,
		"EventLoanRepayment":                         9,
		"EventLoanRepaymentReversal":                 10,
		"EventFeeApplied":                            11,
		"EventFeeAdjusted":                           12,
		"EventFeeCharged":                            13,
		"EventLoanApproval":                          14,
		"EventLoanAccountClosure":                    15,
		"EventLoanAccountWriteOff":                   16,
		"EventLoanAccountRejection":                  17,
		"EventLoanAccountRescheduled":                18,
		"EventLoanAccountRefinanced":                 19,
		"EventRepaymentReminder":                     20,
		"EventAccountInArrears":                      21,
		"EventLoanDisbursement":                      22,
		"EventLoanDisbursementReversal":              23,
		"EventLoanAccountActivity":                   24,
		"EventLoanAnticipatedDisbursement":           25,
		"EventSavingsCreated":                        26,
		"EventSavingsDeposit":                        27,
		"EventSavingsDepositReversal":                28,
		"EventSavingsApproval":                       29,
		"EventSavingsAccountActivated":               30,
		"EventSavingsAccountClosure":                 31,
		"EventSavingsAccountRejection":               32,
		"EventSavingsWithdrawal":                     33,
		"EventSavingsWithdrawalReversal":             34,
		"EventSavingsAccountActivity":                35,
		"EventAccountAuthorizationHoldCreated":       36,
		"EventCardsAuthorizationHoldCreated":         37,
		"EventCardsAuthorizationHoldSettled":         38,
		"EventCardsAuthorizationHoldAmountDecreased": 39,
		"EventCardsAuthorizationHoldAmountIncreased": 40,
		"EventCardsAuthorizationHoldExpired":         41,
		"EventCardsAuthorizationHoldReversed":        42,
		"EventPortalActivated":                       43,
		"EventPortalPasswordReset":                   44,
		"EventEndOfDayProcessingCompleted":           45,
		"EventDataAccessStateChanged":                46,
		"EventRevolvingAccountCreated":               47,
		"EventRevolvingAccountClosed":                48,
		"EventRevolvingAccountApproved":              49,
		"EventRevolvingAccountRejected":              50,
		"EventRevolvingAccountWithdrawn":             51,
		"EventRevolvingAccountDeleted":               52,
		"EventRevolvingAccountAdded":                 53,
		"EventRevolvingAccountRemoved":               54,
		"EventRevolvingAccountEdited":                55,
		"EventPaymentOrderActivity":                  56,
		"EventCollectionOrderActivity":               57,
		"EventJournalEntryAdded":                     58,
		"EventJournalEntryAdjusted":                  59,
	}
)

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}

func (x Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_notifications_all_proto_enumTypes[0].Descriptor()
}

func (Event) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_notifications_all_proto_enumTypes[0]
}

func (x Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event.Descriptor instead.
func (Event) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP(), []int{0}
}

// FailureReason is the reason of failure while dispatching the notification.
type FailureReason int32

const (
	FailureReason_ReasonUnsupportedEncoding          FailureReason = 0
	FailureReason_ReasonEmailServiceNotEnabled       FailureReason = 1
	FailureReason_ReasonSMSTooLong                   FailureReason = 2
	FailureReason_ReasonSMSServiceNotEnabled         FailureReason = 3
	FailureReason_ReasonSMSNotSent                   FailureReason = 4
	FailureReason_ReasonSMSServiceError              FailureReason = 5
	FailureReason_ReasonSMSConnectionException       FailureReason = 6
	FailureReason_ReasonWebhookNotificationsDisabled FailureReason = 7
	FailureReason_ReasonInvalidHTTPResponse          FailureReason = 8
	FailureReason_ReasonHTTPErrorWhileSending        FailureReason = 9
	FailureReason_ReasonInvalidJSONBodySyntax        FailureReason = 10
	FailureReason_ReasonMissingTemplateID            FailureReason = 11
	FailureReason_ReasonUndefinedDestination         FailureReason = 12
	FailureReason_ReasonBlacklistedURL               FailureReason = 13
	FailureReason_ReasonInvalidSMSGatewayCredentials FailureReason = 14
	FailureReason_ReasonMissingSMSRecipient          FailureReason = 15
	FailureReason_ReasonSMSGatewayError              FailureReason = 16
	FailureReason_ReasonMissingEmailRecipientAddress FailureReason = 17
	FailureReason_ReasonOther                        FailureReason = 18
)

// Enum value maps for FailureReason.
var (
	FailureReason_name = map[int32]string{
		0:  "ReasonUnsupportedEncoding",
		1:  "ReasonEmailServiceNotEnabled",
		2:  "ReasonSMSTooLong",
		3:  "ReasonSMSServiceNotEnabled",
		4:  "ReasonSMSNotSent",
		5:  "ReasonSMSServiceError",
		6:  "ReasonSMSConnectionException",
		7:  "ReasonWebhookNotificationsDisabled",
		8:  "ReasonInvalidHTTPResponse",
		9:  "ReasonHTTPErrorWhileSending",
		10: "ReasonInvalidJSONBodySyntax",
		11: "ReasonMissingTemplateID",
		12: "ReasonUndefinedDestination",
		13: "ReasonBlacklistedURL",
		14: "ReasonInvalidSMSGatewayCredentials",
		15: "ReasonMissingSMSRecipient",
		16: "ReasonSMSGatewayError",
		17: "ReasonMissingEmailRecipientAddress",
		18: "ReasonOther",
	}
	FailureReason_value = map[string]int32{
		"ReasonUnsupportedEncoding":          0,
		"ReasonEmailServiceNotEnabled":       1,
		"ReasonSMSTooLong":                   2,
		"ReasonSMSServiceNotEnabled":         3,
		"ReasonSMSNotSent":                   4,
		"ReasonSMSServiceError":              5,
		"ReasonSMSConnectionException":       6,
		"ReasonWebhookNotificationsDisabled": 7,
		"ReasonInvalidHTTPResponse":          8,
		"ReasonHTTPErrorWhileSending":        9,
		"ReasonInvalidJSONBodySyntax":        10,
		"ReasonMissingTemplateID":            11,
		"ReasonUndefinedDestination":         12,
		"ReasonBlacklistedURL":               13,
		"ReasonInvalidSMSGatewayCredentials": 14,
		"ReasonMissingSMSRecipient":          15,
		"ReasonSMSGatewayError":              16,
		"ReasonMissingEmailRecipientAddress": 17,
		"ReasonOther":                        18,
	}
)

func (x FailureReason) Enum() *FailureReason {
	p := new(FailureReason)
	*p = x
	return p
}

func (x FailureReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureReason) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_notifications_all_proto_enumTypes[1].Descriptor()
}

func (FailureReason) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_notifications_all_proto_enumTypes[1]
}

func (x FailureReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailureReason.Descriptor instead.
func (FailureReason) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP(), []int{1}
}

// Type is the type of a notification.
type Type int32

const (
	Type_Email       Type = 0
	Type_SMS         Type = 1
	Type_Webhook     Type = 2
	Type_EventStream Type = 3
	Type_Task        Type = 4
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "Email",
		1: "SMS",
		2: "Webhook",
		3: "EventStream",
		4: "Task",
	}
	Type_value = map[string]int32{
		"Email":       0,
		"SMS":         1,
		"Webhook":     2,
		"EventStream": 3,
		"Task":        4,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_notifications_all_proto_enumTypes[2].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_notifications_all_proto_enumTypes[2]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP(), []int{2}
}

// Notification is a message that is being sent.
// TODO: determine better structure for this datatype before setting up proper
// references and nullability.
type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NotificationID is the ID of the notification.
	NotificationID string `protobuf:"bytes,1,opt,name=NotificationID,json=notification_id,proto3" json:"notification_id,omitempty"`
	// UserID is the ID of the user the message was sent to.
	UserID string `protobuf:"bytes,2,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	// ClientID is the ID of the client the message was sent to.
	ClientID string `protobuf:"bytes,3,opt,name=ClientID,json=client_id,proto3" json:"client_id,omitempty"`
	// GroupID is the ID of the group the message was sent to.
	GroupID string `protobuf:"bytes,4,opt,name=GroupID,json=group_id,proto3" json:"group_id,omitempty"`
	// DepositAccountID is the ID of the deposit account the message is related
	// to.
	DepositAccountID string `protobuf:"bytes,5,opt,name=DepositAccountID,json=deposit_account_id,proto3" json:"deposit_account_id,omitempty"`
	// LoanAccountID is the ID of the loan account the message is related to.
	LoanAccountID string `protobuf:"bytes,6,opt,name=LoanAccountID,json=loan_account_id,proto3" json:"loan_account_id,omitempty"`
	// RepaymentID is the ID of the repayment about which the message was sent.
	RepaymentID string `protobuf:"bytes,7,opt,name=RepaymentID,json=repayment_id,proto3" json:"repayment_id,omitempty"`
	// Type is the type of the notification.
	Type Type `protobuf:"varint,8,opt,name=Type,json=type,proto3,enum=openbank.core.v1.notifications.Type" json:"type,omitempty"`
	// Event is the event that triggered the notification.
	Event Event `protobuf:"varint,9,opt,name=Event,json=event,proto3,enum=openbank.core.v1.notifications.Event" json:"event,omitempty"`
	// Status is the status of the notification.
	Status v1.Status `protobuf:"varint,10,opt,name=Status,json=status,proto3,enum=openbank.core.v1.Status" json:"status,omitempty"`
	// TemplateID is the ID of the template used to generate the message.
	TemplateID string `protobuf:"bytes,11,opt,name=TemplateID,json=template_id,proto3" json:"template_id,omitempty"`
	// Destination is the destination of the notification such as the email,
	// phone number (SMS) or the webhook URL.
	Destination string `protobuf:"bytes,12,opt,name=Destination,json=destination,proto3" json:"destination,omitempty"`
	// SenderID is the ID of the sender.
	SenderID string `protobuf:"bytes,13,opt,name=SenderID,json=sender_id,proto3" json:"sender_id,omitempty"`
	// Subject is the subject of the message.
	Subject string `protobuf:"bytes,14,opt,name=Subject,json=subject,proto3" json:"subject,omitempty"`
	// Body is the message content.
	Body []byte `protobuf:"bytes,15,opt,name=Body,json=body,proto3" json:"body,omitempty"`
	// NumRetries is the number of retries to send the message.
	NumRetries int32 `protobuf:"varint,16,opt,name=NumRetries,json=num_retries,proto3" json:"num_retries,omitempty"`
	// CreateTime is the time the notification was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
	// SendTime is the time the notificaiton was sent.
	SendTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=SendTime,json=send_time,proto3" json:"send_time,omitempty"`
	// FailureReason is the reason the message failed to send.
	FailureReason FailureReason `protobuf:"varint,19,opt,name=FailureReason,json=failure_reason,proto3,enum=openbank.core.v1.notifications.FailureReason" json:"failure_reason,omitempty"`
	// FailureCause is the cause of the failure.
	FailureCause string `protobuf:"bytes,20,opt,name=FailureCause,json=failure_cause,proto3" json:"failure_cause,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP(), []int{0}
}

func (x *Notification) GetNotificationID() string {
	if x != nil {
		return x.NotificationID
	}
	return ""
}

func (x *Notification) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Notification) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *Notification) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *Notification) GetDepositAccountID() string {
	if x != nil {
		return x.DepositAccountID
	}
	return ""
}

func (x *Notification) GetLoanAccountID() string {
	if x != nil {
		return x.LoanAccountID
	}
	return ""
}

func (x *Notification) GetRepaymentID() string {
	if x != nil {
		return x.RepaymentID
	}
	return ""
}

func (x *Notification) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_Email
}

func (x *Notification) GetEvent() Event {
	if x != nil {
		return x.Event
	}
	return Event_EventManual
}

func (x *Notification) GetStatus() v1.Status {
	if x != nil {
		return x.Status
	}
	return v1.Status(0)
}

func (x *Notification) GetTemplateID() string {
	if x != nil {
		return x.TemplateID
	}
	return ""
}

func (x *Notification) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Notification) GetSenderID() string {
	if x != nil {
		return x.SenderID
	}
	return ""
}

func (x *Notification) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Notification) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Notification) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

func (x *Notification) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Notification) GetSendTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SendTime
	}
	return nil
}

func (x *Notification) GetFailureReason() FailureReason {
	if x != nil {
		return x.FailureReason
	}
	return FailureReason_ReasonUnsupportedEncoding
}

func (x *Notification) GetFailureCause() string {
	if x != nil {
		return x.FailureCause
	}
	return ""
}

// CreateNotificationRequest is the request to create a notification.
type CreateNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the notification to create.
	Body *Notification `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateNotificationRequest) Reset() {
	*x = CreateNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotificationRequest) ProtoMessage() {}

func (x *CreateNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotificationRequest.ProtoReflect.Descriptor instead.
func (*CreateNotificationRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNotificationRequest) GetBody() *Notification {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListNotificationsRequest is the request to list notifications.
type ListNotificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageToken is the token of the page to return.
	PageToken string `protobuf:"bytes,1,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of notifications to return.
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the field to order notifications by.
	OrderBy string `protobuf:"bytes,3,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to apply to the notifications.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListNotificationsRequest) Reset() {
	*x = ListNotificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotificationsRequest) ProtoMessage() {}

func (x *ListNotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotificationsRequest.ProtoReflect.Descriptor instead.
func (*ListNotificationsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP(), []int{2}
}

func (x *ListNotificationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListNotificationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNotificationsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListNotificationsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListNotificationsResponse is the response for listing notifications.
type ListNotificationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of notifications matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of notifications remaining in the list, including
	// the notifications in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Notifications is the list of notifications.
	Notifications []*Notification `protobuf:"bytes,3,rep,name=Notifications,json=notifications,proto3" json:"notifications,omitempty"`
	// NextPageToken is the token of the next page.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNotificationsResponse) Reset() {
	*x = ListNotificationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNotificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotificationsResponse) ProtoMessage() {}

func (x *ListNotificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotificationsResponse.ProtoReflect.Descriptor instead.
func (*ListNotificationsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP(), []int{3}
}

func (x *ListNotificationsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListNotificationsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListNotificationsResponse) GetNotifications() []*Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *ListNotificationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetNotificationRequest is the request to retrieve a notification.
type GetNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NotificationID is the ID of the notification to retrieve.
	NotificationID string `protobuf:"bytes,1,opt,name=NotificationID,json=notification_id,proto3" json:"notification_id,omitempty"`
}

func (x *GetNotificationRequest) Reset() {
	*x = GetNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationRequest) ProtoMessage() {}

func (x *GetNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationRequest.ProtoReflect.Descriptor instead.
func (*GetNotificationRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP(), []int{4}
}

func (x *GetNotificationRequest) GetNotificationID() string {
	if x != nil {
		return x.NotificationID
	}
	return ""
}

// ResendDateFilter is an time interval from which notifications will be resent.
type ResendDateFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types is the types of notifications to resent.
	Types []Type `protobuf:"varint,1,rep,packed,name=Types,json=types,proto3,enum=openbank.core.v1.notifications.Type" json:"types,omitempty"`
	// StartTime is the starting time for the filter.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=StartTime,json=start_time,proto3" json:"start_time,omitempty"`
	// EndTime is the ending time for the filter.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=EndTime,json=end_time,proto3" json:"end_time,omitempty"`
}

func (x *ResendDateFilter) Reset() {
	*x = ResendDateFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendDateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendDateFilter) ProtoMessage() {}

func (x *ResendDateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendDateFilter.ProtoReflect.Descriptor instead.
func (*ResendDateFilter) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP(), []int{5}
}

func (x *ResendDateFilter) GetTypes() []Type {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ResendDateFilter) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ResendDateFilter) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// ResendByDateRequest is the resend by date request.
type ResendByDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is a filter that specifies the time interval from which messages will be resent.
	Body *ResendDateFilter `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *ResendByDateRequest) Reset() {
	*x = ResendByDateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendByDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendByDateRequest) ProtoMessage() {}

func (x *ResendByDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendByDateRequest.ProtoReflect.Descriptor instead.
func (*ResendByDateRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP(), []int{6}
}

func (x *ResendByDateRequest) GetBody() *ResendDateFilter {
	if x != nil {
		return x.Body
	}
	return nil
}

// ResendNotificationRequest is the request to resend the specified
// notification.
type ResendNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NotificationID is the ID of the notification to resend.
	NotificationID string `protobuf:"bytes,1,opt,name=NotificationID,json=notification_id,proto3" json:"notification_id,omitempty"`
}

func (x *ResendNotificationRequest) Reset() {
	*x = ResendNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendNotificationRequest) ProtoMessage() {}

func (x *ResendNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendNotificationRequest.ProtoReflect.Descriptor instead.
func (*ResendNotificationRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP(), []int{7}
}

func (x *ResendNotificationRequest) GetNotificationID() string {
	if x != nil {
		return x.NotificationID
	}
	return ""
}

var File_bnk_to_core_api_v1_notifications_all_proto protoreflect.FileDescriptor

var file_bnk_to_core_api_v1_notifications_all_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0b, 0x78, 0x6f,
	0x2f, 0x78, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x08, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x02, 0x08, 0x02, 0x52, 0x0f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x0d, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x44, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a,
	0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x2b, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x71, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0xc1, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0x83, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x5e,
	0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32,
	0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x55, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xf1, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x6f, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x42,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x58, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x2a, 0xbf, 0x10, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x0b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1a, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x03,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x18, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10,
	0x08, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x61, 0x6e, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x09, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x22, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x10,
	0x0a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x65,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x10, 0x0b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18,
	0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x10, 0x0c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x65, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x10, 0x0d, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x19, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x10, 0x0e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x10, 0x0f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a,
	0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x10, 0x10, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x21, 0x0a, 0x19, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x11, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x10, 0x12, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x10, 0x13, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x10, 0x14, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x41, 0x72, 0x72,
	0x65, 0x61, 0x72, 0x73, 0x10, 0x15, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x16, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x25, 0x0a, 0x1d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x10, 0x17, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x20, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x18, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x28, 0x0a, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41,
	0x6e, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x19, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x1a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x10, 0x1b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x6c, 0x10, 0x1c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x10, 0x1d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x1e, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x22, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x10, 0x1f, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x20, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x10, 0x21, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x10, 0x22, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x23, 0x0a, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x10, 0x23, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2c, 0x0a, 0x24, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x24,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x2a, 0x0a, 0x22, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x25, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x2a, 0x0a, 0x22, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x10, 0x26, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x32, 0x0a, 0x2a,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x10, 0x27, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x32, 0x0a, 0x2a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x10, 0x28,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x2a, 0x0a, 0x22, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x29, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x2b, 0x0a, 0x23, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x10, 0x2a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a,
	0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x2b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x2c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x28, 0x0a,
	0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x10, 0x2d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x2e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x2f, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6c,
	0x76, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x10, 0x30, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x25, 0x0a, 0x1d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x31, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x25,
	0x0a, 0x1d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10,
	0x32, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x26, 0x0a, 0x1e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x10, 0x33, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a,
	0x1c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x34, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f,
	0x6c, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x10, 0x35, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x36, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a,
	0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x10, 0x37, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10,
	0x38, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x39, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e, 0x0a, 0x16, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x64, 0x64, 0x65, 0x64, 0x10, 0x3a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x10, 0x3b, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02,
	0x18, 0x00, 0x2a, 0xa4, 0x05, 0x0a, 0x0d, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x55, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a,
	0x10, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x4d, 0x53, 0x54, 0x6f, 0x6f, 0x4c, 0x6f, 0x6e,
	0x67, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x53, 0x4d, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x4d, 0x53, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x10,
	0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53,
	0x4d, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x05,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x24, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x4d,
	0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2a, 0x0a, 0x22, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x08, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x57, 0x68, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23,
	0x0a, 0x1b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4a,
	0x53, 0x4f, 0x4e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x10, 0x0a, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x10, 0x0b,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x0c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x55, 0x52, 0x4c,
	0x10, 0x0d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x2a, 0x0a, 0x22, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x4d, 0x53, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x10, 0x0e, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x10,
	0x0f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53,
	0x4d, 0x53, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x10,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x2a, 0x0a, 0x22, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x11, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x13, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10,
	0x12, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x5a, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0b, 0x0a, 0x03, 0x53, 0x4d, 0x53, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a,
	0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13,
	0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x03, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x04, 0x1a, 0x02, 0x08,
	0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0xdd, 0x06, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa8,
	0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x25,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xad, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xad, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x30, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x1c, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x28, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2b, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x3a, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x28, 0x00,
	0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0xad, 0x01, 0x0a, 0x1e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x2e, 0x62, 0x6e,
	0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3b, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x80, 0x01, 0x00, 0x88,
	0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02,
	0x00, 0x92, 0x41, 0x41, 0x0a, 0x03, 0x32, 0x2e, 0x30, 0x12, 0x13, 0x0a, 0x0d, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x02, 0x76, 0x31, 0x2a, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bnk_to_core_api_v1_notifications_all_proto_rawDescOnce sync.Once
	file_bnk_to_core_api_v1_notifications_all_proto_rawDescData = file_bnk_to_core_api_v1_notifications_all_proto_rawDesc
)

func file_bnk_to_core_api_v1_notifications_all_proto_rawDescGZIP() []byte {
	file_bnk_to_core_api_v1_notifications_all_proto_rawDescOnce.Do(func() {
		file_bnk_to_core_api_v1_notifications_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_bnk_to_core_api_v1_notifications_all_proto_rawDescData)
	})
	return file_bnk_to_core_api_v1_notifications_all_proto_rawDescData
}

var (
	file_bnk_to_core_api_v1_notifications_all_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
	file_bnk_to_core_api_v1_notifications_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 8)
	file_bnk_to_core_api_v1_notifications_all_proto_goTypes   = []interface{}{
		(Event)(0),                        // 0: openbank.core.v1.notifications.Event
		(FailureReason)(0),                // 1: openbank.core.v1.notifications.FailureReason
		(Type)(0),                         // 2: openbank.core.v1.notifications.Type
		(*Notification)(nil),              // 3: openbank.core.v1.notifications.Notification
		(*CreateNotificationRequest)(nil), // 4: openbank.core.v1.notifications.CreateNotificationRequest
		(*ListNotificationsRequest)(nil),  // 5: openbank.core.v1.notifications.ListNotificationsRequest
		(*ListNotificationsResponse)(nil), // 6: openbank.core.v1.notifications.ListNotificationsResponse
		(*GetNotificationRequest)(nil),    // 7: openbank.core.v1.notifications.GetNotificationRequest
		(*ResendDateFilter)(nil),          // 8: openbank.core.v1.notifications.ResendDateFilter
		(*ResendByDateRequest)(nil),       // 9: openbank.core.v1.notifications.ResendByDateRequest
		(*ResendNotificationRequest)(nil), // 10: openbank.core.v1.notifications.ResendNotificationRequest
		(v1.Status)(0),                    // 11: openbank.core.v1.Status
		(*timestamppb.Timestamp)(nil),     // 12: google.protobuf.Timestamp
		(*emptypb.Empty)(nil),             // 13: google.protobuf.Empty
	}
)

var file_bnk_to_core_api_v1_notifications_all_proto_depIdxs = []int32{
	2,  // 0: openbank.core.v1.notifications.Notification.Type:type_name -> openbank.core.v1.notifications.Type
	0,  // 1: openbank.core.v1.notifications.Notification.Event:type_name -> openbank.core.v1.notifications.Event
	11, // 2: openbank.core.v1.notifications.Notification.Status:type_name -> openbank.core.v1.Status
	12, // 3: openbank.core.v1.notifications.Notification.CreateTime:type_name -> google.protobuf.Timestamp
	12, // 4: openbank.core.v1.notifications.Notification.SendTime:type_name -> google.protobuf.Timestamp
	1,  // 5: openbank.core.v1.notifications.Notification.FailureReason:type_name -> openbank.core.v1.notifications.FailureReason
	3,  // 6: openbank.core.v1.notifications.CreateNotificationRequest.Body:type_name -> openbank.core.v1.notifications.Notification
	3,  // 7: openbank.core.v1.notifications.ListNotificationsResponse.Notifications:type_name -> openbank.core.v1.notifications.Notification
	2,  // 8: openbank.core.v1.notifications.ResendDateFilter.Types:type_name -> openbank.core.v1.notifications.Type
	12, // 9: openbank.core.v1.notifications.ResendDateFilter.StartTime:type_name -> google.protobuf.Timestamp
	12, // 10: openbank.core.v1.notifications.ResendDateFilter.EndTime:type_name -> google.protobuf.Timestamp
	8,  // 11: openbank.core.v1.notifications.ResendByDateRequest.Body:type_name -> openbank.core.v1.notifications.ResendDateFilter
	4,  // 12: openbank.core.v1.notifications.NotificationsService.CreateNotification:input_type -> openbank.core.v1.notifications.CreateNotificationRequest
	5,  // 13: openbank.core.v1.notifications.NotificationsService.ListNotifications:input_type -> openbank.core.v1.notifications.ListNotificationsRequest
	7,  // 14: openbank.core.v1.notifications.NotificationsService.GetNotification:input_type -> openbank.core.v1.notifications.GetNotificationRequest
	9,  // 15: openbank.core.v1.notifications.NotificationsService.ResendByDate:input_type -> openbank.core.v1.notifications.ResendByDateRequest
	10, // 16: openbank.core.v1.notifications.NotificationsService.ResendNotification:input_type -> openbank.core.v1.notifications.ResendNotificationRequest
	3,  // 17: openbank.core.v1.notifications.NotificationsService.CreateNotification:output_type -> openbank.core.v1.notifications.Notification
	6,  // 18: openbank.core.v1.notifications.NotificationsService.ListNotifications:output_type -> openbank.core.v1.notifications.ListNotificationsResponse
	3,  // 19: openbank.core.v1.notifications.NotificationsService.GetNotification:output_type -> openbank.core.v1.notifications.Notification
	13, // 20: openbank.core.v1.notifications.NotificationsService.ResendByDate:output_type -> google.protobuf.Empty
	13, // 21: openbank.core.v1.notifications.NotificationsService.ResendNotification:output_type -> google.protobuf.Empty
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_bnk_to_core_api_v1_notifications_all_proto_init() }
func file_bnk_to_core_api_v1_notifications_all_proto_init() {
	if File_bnk_to_core_api_v1_notifications_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNotificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNotificationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendDateFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendByDateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_notifications_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bnk_to_core_api_v1_notifications_all_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bnk_to_core_api_v1_notifications_all_proto_goTypes,
		DependencyIndexes: file_bnk_to_core_api_v1_notifications_all_proto_depIdxs,
		EnumInfos:         file_bnk_to_core_api_v1_notifications_all_proto_enumTypes,
		MessageInfos:      file_bnk_to_core_api_v1_notifications_all_proto_msgTypes,
	}.Build()
	File_bnk_to_core_api_v1_notifications_all_proto = out.File
	file_bnk_to_core_api_v1_notifications_all_proto_rawDesc = nil
	file_bnk_to_core_api_v1_notifications_all_proto_goTypes = nil
	file_bnk_to_core_api_v1_notifications_all_proto_depIdxs = nil
}
