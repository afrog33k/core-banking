// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bnk.to/core/api/v1/rates/all.proto

package rates

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RatesServiceClient is the client API for RatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatesServiceClient interface {
	// CreateSource creates a new index rate source.
	CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*Source, error)
	// ListSources lists index rate sources.
	ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error)
	// GetSource retrieves the specified index rate source.
	GetSource(ctx context.Context, in *GetSourceRequest, opts ...grpc.CallOption) (*Source, error)
	// UpdateSource updates the specified index rate source.
	UpdateSource(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*Source, error)
	// DeleteSource deletes the specified index rate source.
	DeleteSource(ctx context.Context, in *DeleteSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateIndexRate creates a new index rate.
	CreateIndexRate(ctx context.Context, in *CreateIndexRateRequest, opts ...grpc.CallOption) (*IndexRate, error)
	// ListIndexRates lists index rates.
	ListIndexRates(ctx context.Context, in *ListIndexRatesRequest, opts ...grpc.CallOption) (*ListIndexRatesResponse, error)
	// GetIndexRate retrieves the specified index rate.
	GetIndexRate(ctx context.Context, in *GetIndexRateRequest, opts ...grpc.CallOption) (*IndexRate, error)
	// UpdateIndexRate updates the specified index rate.
	UpdateIndexRate(ctx context.Context, in *UpdateIndexRateRequest, opts ...grpc.CallOption) (*IndexRate, error)
	// DeleteIndexRate deletes the specified index rate.
	DeleteIndexRate(ctx context.Context, in *DeleteIndexRateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ratesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatesServiceClient(cc grpc.ClientConnInterface) RatesServiceClient {
	return &ratesServiceClient{cc}
}

func (c *ratesServiceClient) CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.rates.RatesService/CreateSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratesServiceClient) ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error) {
	out := new(ListSourcesResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.rates.RatesService/ListSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratesServiceClient) GetSource(ctx context.Context, in *GetSourceRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.rates.RatesService/GetSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratesServiceClient) UpdateSource(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.rates.RatesService/UpdateSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratesServiceClient) DeleteSource(ctx context.Context, in *DeleteSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.rates.RatesService/DeleteSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratesServiceClient) CreateIndexRate(ctx context.Context, in *CreateIndexRateRequest, opts ...grpc.CallOption) (*IndexRate, error) {
	out := new(IndexRate)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.rates.RatesService/CreateIndexRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratesServiceClient) ListIndexRates(ctx context.Context, in *ListIndexRatesRequest, opts ...grpc.CallOption) (*ListIndexRatesResponse, error) {
	out := new(ListIndexRatesResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.rates.RatesService/ListIndexRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratesServiceClient) GetIndexRate(ctx context.Context, in *GetIndexRateRequest, opts ...grpc.CallOption) (*IndexRate, error) {
	out := new(IndexRate)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.rates.RatesService/GetIndexRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratesServiceClient) UpdateIndexRate(ctx context.Context, in *UpdateIndexRateRequest, opts ...grpc.CallOption) (*IndexRate, error) {
	out := new(IndexRate)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.rates.RatesService/UpdateIndexRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratesServiceClient) DeleteIndexRate(ctx context.Context, in *DeleteIndexRateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.rates.RatesService/DeleteIndexRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatesServiceServer is the server API for RatesService service.
// All implementations must embed UnimplementedRatesServiceServer
// for forward compatibility
type RatesServiceServer interface {
	// CreateSource creates a new index rate source.
	CreateSource(context.Context, *CreateSourceRequest) (*Source, error)
	// ListSources lists index rate sources.
	ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error)
	// GetSource retrieves the specified index rate source.
	GetSource(context.Context, *GetSourceRequest) (*Source, error)
	// UpdateSource updates the specified index rate source.
	UpdateSource(context.Context, *UpdateSourceRequest) (*Source, error)
	// DeleteSource deletes the specified index rate source.
	DeleteSource(context.Context, *DeleteSourceRequest) (*emptypb.Empty, error)
	// CreateIndexRate creates a new index rate.
	CreateIndexRate(context.Context, *CreateIndexRateRequest) (*IndexRate, error)
	// ListIndexRates lists index rates.
	ListIndexRates(context.Context, *ListIndexRatesRequest) (*ListIndexRatesResponse, error)
	// GetIndexRate retrieves the specified index rate.
	GetIndexRate(context.Context, *GetIndexRateRequest) (*IndexRate, error)
	// UpdateIndexRate updates the specified index rate.
	UpdateIndexRate(context.Context, *UpdateIndexRateRequest) (*IndexRate, error)
	// DeleteIndexRate deletes the specified index rate.
	DeleteIndexRate(context.Context, *DeleteIndexRateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRatesServiceServer()
}

// UnimplementedRatesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRatesServiceServer struct{}

func (UnimplementedRatesServiceServer) CreateSource(context.Context, *CreateSourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSource not implemented")
}

func (UnimplementedRatesServiceServer) ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSources not implemented")
}

func (UnimplementedRatesServiceServer) GetSource(context.Context, *GetSourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSource not implemented")
}

func (UnimplementedRatesServiceServer) UpdateSource(context.Context, *UpdateSourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSource not implemented")
}

func (UnimplementedRatesServiceServer) DeleteSource(context.Context, *DeleteSourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSource not implemented")
}

func (UnimplementedRatesServiceServer) CreateIndexRate(context.Context, *CreateIndexRateRequest) (*IndexRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndexRate not implemented")
}

func (UnimplementedRatesServiceServer) ListIndexRates(context.Context, *ListIndexRatesRequest) (*ListIndexRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexRates not implemented")
}

func (UnimplementedRatesServiceServer) GetIndexRate(context.Context, *GetIndexRateRequest) (*IndexRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexRate not implemented")
}

func (UnimplementedRatesServiceServer) UpdateIndexRate(context.Context, *UpdateIndexRateRequest) (*IndexRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIndexRate not implemented")
}

func (UnimplementedRatesServiceServer) DeleteIndexRate(context.Context, *DeleteIndexRateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndexRate not implemented")
}
func (UnimplementedRatesServiceServer) mustEmbedUnimplementedRatesServiceServer() {}

// UnsafeRatesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatesServiceServer will
// result in compilation errors.
type UnsafeRatesServiceServer interface {
	mustEmbedUnimplementedRatesServiceServer()
}

func RegisterRatesServiceServer(s grpc.ServiceRegistrar, srv RatesServiceServer) {
	s.RegisterService(&RatesService_ServiceDesc, srv)
}

func _RatesService_CreateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatesServiceServer).CreateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.rates.RatesService/CreateSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatesServiceServer).CreateSource(ctx, req.(*CreateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatesService_ListSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatesServiceServer).ListSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.rates.RatesService/ListSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatesServiceServer).ListSources(ctx, req.(*ListSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatesService_GetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatesServiceServer).GetSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.rates.RatesService/GetSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatesServiceServer).GetSource(ctx, req.(*GetSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatesService_UpdateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatesServiceServer).UpdateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.rates.RatesService/UpdateSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatesServiceServer).UpdateSource(ctx, req.(*UpdateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatesService_DeleteSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatesServiceServer).DeleteSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.rates.RatesService/DeleteSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatesServiceServer).DeleteSource(ctx, req.(*DeleteSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatesService_CreateIndexRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatesServiceServer).CreateIndexRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.rates.RatesService/CreateIndexRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatesServiceServer).CreateIndexRate(ctx, req.(*CreateIndexRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatesService_ListIndexRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIndexRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatesServiceServer).ListIndexRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.rates.RatesService/ListIndexRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatesServiceServer).ListIndexRates(ctx, req.(*ListIndexRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatesService_GetIndexRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatesServiceServer).GetIndexRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.rates.RatesService/GetIndexRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatesServiceServer).GetIndexRate(ctx, req.(*GetIndexRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatesService_UpdateIndexRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIndexRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatesServiceServer).UpdateIndexRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.rates.RatesService/UpdateIndexRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatesServiceServer).UpdateIndexRate(ctx, req.(*UpdateIndexRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatesService_DeleteIndexRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatesServiceServer).DeleteIndexRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.rates.RatesService/DeleteIndexRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatesServiceServer).DeleteIndexRate(ctx, req.(*DeleteIndexRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RatesService_ServiceDesc is the grpc.ServiceDesc for RatesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.rates.RatesService",
	HandlerType: (*RatesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSource",
			Handler:    _RatesService_CreateSource_Handler,
		},
		{
			MethodName: "ListSources",
			Handler:    _RatesService_ListSources_Handler,
		},
		{
			MethodName: "GetSource",
			Handler:    _RatesService_GetSource_Handler,
		},
		{
			MethodName: "UpdateSource",
			Handler:    _RatesService_UpdateSource_Handler,
		},
		{
			MethodName: "DeleteSource",
			Handler:    _RatesService_DeleteSource_Handler,
		},
		{
			MethodName: "CreateIndexRate",
			Handler:    _RatesService_CreateIndexRate_Handler,
		},
		{
			MethodName: "ListIndexRates",
			Handler:    _RatesService_ListIndexRates_Handler,
		},
		{
			MethodName: "GetIndexRate",
			Handler:    _RatesService_GetIndexRate_Handler,
		},
		{
			MethodName: "UpdateIndexRate",
			Handler:    _RatesService_UpdateIndexRate_Handler,
		},
		{
			MethodName: "DeleteIndexRate",
			Handler:    _RatesService_DeleteIndexRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/rates/all.proto",
}
