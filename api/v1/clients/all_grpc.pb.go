// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bnk.to/core/api/v1/clients/all.proto

package clients

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientsServiceClient is the client API for ClientsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientsServiceClient interface {
	// CreateClient creates a new client.
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*Client, error)
	// ListClients lists clients.
	ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error)
	// GetClient returns the clients with the specified ids.
	GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error)
	// UpdateClient modifies an existing client.
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*Client, error)
	// DeleteClient deletes a client.
	DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// AddClientDocuments adds the specified documents to a client.
	AddClientDocuments(ctx context.Context, in *AddClientDocumentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RemoveClientDocuments removes the specified documents from the client.
	RemoveClientDocuments(ctx context.Context, in *RemoveClientDocumentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListClientDocuments lists the documents of a client.
	ListClientDocuments(ctx context.Context, in *ListClientDocumentsRequest, opts ...grpc.CallOption) (*ListClientDocumentsResponse, error)
	// ListClientGroups lists the groups of a client.
	ListClientGroups(ctx context.Context, in *ListClientGroupsRequest, opts ...grpc.CallOption) (*ListClientGroupsResponse, error)
}

type clientsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientsServiceClient(cc grpc.ClientConnInterface) ClientsServiceClient {
	return &clientsServiceClient{cc}
}

func (c *clientsServiceClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.clients.ClientsService/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	out := new(ListClientsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.clients.ClientsService/ListClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.clients.ClientsService/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.clients.ClientsService/UpdateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.clients.ClientsService/DeleteClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) AddClientDocuments(ctx context.Context, in *AddClientDocumentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.clients.ClientsService/AddClientDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) RemoveClientDocuments(ctx context.Context, in *RemoveClientDocumentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.clients.ClientsService/RemoveClientDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ListClientDocuments(ctx context.Context, in *ListClientDocumentsRequest, opts ...grpc.CallOption) (*ListClientDocumentsResponse, error) {
	out := new(ListClientDocumentsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.clients.ClientsService/ListClientDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ListClientGroups(ctx context.Context, in *ListClientGroupsRequest, opts ...grpc.CallOption) (*ListClientGroupsResponse, error) {
	out := new(ListClientGroupsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.clients.ClientsService/ListClientGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientsServiceServer is the server API for ClientsService service.
// All implementations must embed UnimplementedClientsServiceServer
// for forward compatibility
type ClientsServiceServer interface {
	// CreateClient creates a new client.
	CreateClient(context.Context, *CreateClientRequest) (*Client, error)
	// ListClients lists clients.
	ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error)
	// GetClient returns the clients with the specified ids.
	GetClient(context.Context, *GetClientRequest) (*Client, error)
	// UpdateClient modifies an existing client.
	UpdateClient(context.Context, *UpdateClientRequest) (*Client, error)
	// DeleteClient deletes a client.
	DeleteClient(context.Context, *DeleteClientRequest) (*emptypb.Empty, error)
	// AddClientDocuments adds the specified documents to a client.
	AddClientDocuments(context.Context, *AddClientDocumentsRequest) (*emptypb.Empty, error)
	// RemoveClientDocuments removes the specified documents from the client.
	RemoveClientDocuments(context.Context, *RemoveClientDocumentsRequest) (*emptypb.Empty, error)
	// ListClientDocuments lists the documents of a client.
	ListClientDocuments(context.Context, *ListClientDocumentsRequest) (*ListClientDocumentsResponse, error)
	// ListClientGroups lists the groups of a client.
	ListClientGroups(context.Context, *ListClientGroupsRequest) (*ListClientGroupsResponse, error)
	mustEmbedUnimplementedClientsServiceServer()
}

// UnimplementedClientsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientsServiceServer struct{}

func (UnimplementedClientsServiceServer) CreateClient(context.Context, *CreateClientRequest) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}

func (UnimplementedClientsServiceServer) ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}

func (UnimplementedClientsServiceServer) GetClient(context.Context, *GetClientRequest) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}

func (UnimplementedClientsServiceServer) UpdateClient(context.Context, *UpdateClientRequest) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}

func (UnimplementedClientsServiceServer) DeleteClient(context.Context, *DeleteClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}

func (UnimplementedClientsServiceServer) AddClientDocuments(context.Context, *AddClientDocumentsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClientDocuments not implemented")
}

func (UnimplementedClientsServiceServer) RemoveClientDocuments(context.Context, *RemoveClientDocumentsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClientDocuments not implemented")
}

func (UnimplementedClientsServiceServer) ListClientDocuments(context.Context, *ListClientDocumentsRequest) (*ListClientDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientDocuments not implemented")
}

func (UnimplementedClientsServiceServer) ListClientGroups(context.Context, *ListClientGroupsRequest) (*ListClientGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientGroups not implemented")
}
func (UnimplementedClientsServiceServer) mustEmbedUnimplementedClientsServiceServer() {}

// UnsafeClientsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientsServiceServer will
// result in compilation errors.
type UnsafeClientsServiceServer interface {
	mustEmbedUnimplementedClientsServiceServer()
}

func RegisterClientsServiceServer(s grpc.ServiceRegistrar, srv ClientsServiceServer) {
	s.RegisterService(&ClientsService_ServiceDesc, srv)
}

func _ClientsService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.clients.ClientsService/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.clients.ClientsService/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).ListClients(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.clients.ClientsService/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).GetClient(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.clients.ClientsService/UpdateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.clients.ClientsService/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).DeleteClient(ctx, req.(*DeleteClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_AddClientDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClientDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).AddClientDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.clients.ClientsService/AddClientDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).AddClientDocuments(ctx, req.(*AddClientDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_RemoveClientDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClientDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).RemoveClientDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.clients.ClientsService/RemoveClientDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).RemoveClientDocuments(ctx, req.(*RemoveClientDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_ListClientDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).ListClientDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.clients.ClientsService/ListClientDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).ListClientDocuments(ctx, req.(*ListClientDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_ListClientGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).ListClientGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.clients.ClientsService/ListClientGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).ListClientGroups(ctx, req.(*ListClientGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientsService_ServiceDesc is the grpc.ServiceDesc for ClientsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.clients.ClientsService",
	HandlerType: (*ClientsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _ClientsService_CreateClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _ClientsService_ListClients_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _ClientsService_GetClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _ClientsService_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _ClientsService_DeleteClient_Handler,
		},
		{
			MethodName: "AddClientDocuments",
			Handler:    _ClientsService_AddClientDocuments_Handler,
		},
		{
			MethodName: "RemoveClientDocuments",
			Handler:    _ClientsService_RemoveClientDocuments_Handler,
		},
		{
			MethodName: "ListClientDocuments",
			Handler:    _ClientsService_ListClientDocuments_Handler,
		},
		{
			MethodName: "ListClientGroups",
			Handler:    _ClientsService_ListClientGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/clients/all.proto",
}
