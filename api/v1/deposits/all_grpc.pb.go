// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bnk.to/core/api/v1/deposits/all.proto

package deposits

import (
	context "context"

	v1 "bnk.to/core/api/v1"
	cards "bnk.to/core/api/v1/cards"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepositsServiceClient is the client API for DepositsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepositsServiceClient interface {
	// CreateAccount creates a new deposit account.
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// ListAccounts lists a list of deposit accounts.
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// GetAccount retrieves a specified deposit account.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// UpdateAccount updates a deposit account.
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// DeleteAccount deletes the deposit account.
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateFundBlock creates a new block fund for the deposit acount.
	CreateFundBlock(ctx context.Context, in *CreateFundBlockRequest, opts ...grpc.CallOption) (*FundBlock, error)
	// ListFundBlocks lists the fund blocks for the deposit account.
	ListFundBlocks(ctx context.Context, in *ListFundBlocksRequest, opts ...grpc.CallOption) (*ListFundBlocksResponse, error)
	// GetFundBlock retrieves a specified fund block.
	GetFundBlock(ctx context.Context, in *GetFundBlockRequest, opts ...grpc.CallOption) (*FundBlock, error)
	// UpdateFundBlock updates a fund block.
	UpdateFundBlock(ctx context.Context, in *UpdateFundBlockRequest, opts ...grpc.CallOption) (*FundBlock, error)
	// DeleteFundBlock unblocks a previously blocked fund on a deposit account.
	DeleteFundBlock(ctx context.Context, in *DeleteFundBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateCard creates a new card for the deposit account.
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*cards.Card, error)
	// ListCards lists the cards for the deposit account.
	ListCards(ctx context.Context, in *ListCardsRequest, opts ...grpc.CallOption) (*ListCardsResponse, error)
	// GetCard retrieves a specified card.
	// To retrieve other information on the card, use the cards package under
	// the Services section.
	GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*cards.Card, error)
	// DeleteCard deletes the card for the deposit account.
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetDocument generates a document for the deposit account with the
	// specified template.
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*v1.File, error)
	// GetFundedAccounts retrieves the loan accounts which are funded by the
	// deposit account.
	GetFundedAccounts(ctx context.Context, in *GetLoanAccountsRequest, opts ...grpc.CallOption) (*GetLoanAccountsResponse, error)
	// ApplyInterest applies the accrued interest to the deposit account.
	ApplyInterest(ctx context.Context, in *ApplyInterestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ReopenAccount reopens a previously closed deposit account.
	ReopenAccount(ctx context.Context, in *ReopenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Mature starts the maturity period for the deposit account.
	Mature(ctx context.Context, in *MatureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UndoMaturity undos the maturity period on a deposit account.
	UndoMaturity(ctx context.Context, in *UndoMaturityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type depositsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepositsServiceClient(cc grpc.ClientConnInterface) DepositsServiceClient {
	return &depositsServiceClient{cc}
}

func (c *depositsServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) CreateFundBlock(ctx context.Context, in *CreateFundBlockRequest, opts ...grpc.CallOption) (*FundBlock, error) {
	out := new(FundBlock)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/CreateFundBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) ListFundBlocks(ctx context.Context, in *ListFundBlocksRequest, opts ...grpc.CallOption) (*ListFundBlocksResponse, error) {
	out := new(ListFundBlocksResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/ListFundBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) GetFundBlock(ctx context.Context, in *GetFundBlockRequest, opts ...grpc.CallOption) (*FundBlock, error) {
	out := new(FundBlock)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/GetFundBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) UpdateFundBlock(ctx context.Context, in *UpdateFundBlockRequest, opts ...grpc.CallOption) (*FundBlock, error) {
	out := new(FundBlock)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/UpdateFundBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) DeleteFundBlock(ctx context.Context, in *DeleteFundBlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/DeleteFundBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*cards.Card, error) {
	out := new(cards.Card)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) ListCards(ctx context.Context, in *ListCardsRequest, opts ...grpc.CallOption) (*ListCardsResponse, error) {
	out := new(ListCardsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/ListCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*cards.Card, error) {
	out := new(cards.Card)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/GetCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*v1.File, error) {
	out := new(v1.File)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) GetFundedAccounts(ctx context.Context, in *GetLoanAccountsRequest, opts ...grpc.CallOption) (*GetLoanAccountsResponse, error) {
	out := new(GetLoanAccountsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/GetFundedAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) ApplyInterest(ctx context.Context, in *ApplyInterestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/ApplyInterest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) ReopenAccount(ctx context.Context, in *ReopenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/ReopenAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) Mature(ctx context.Context, in *MatureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/Mature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositsServiceClient) UndoMaturity(ctx context.Context, in *UndoMaturityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.deposits.DepositsService/UndoMaturity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepositsServiceServer is the server API for DepositsService service.
// All implementations must embed UnimplementedDepositsServiceServer
// for forward compatibility
type DepositsServiceServer interface {
	// CreateAccount creates a new deposit account.
	CreateAccount(context.Context, *CreateAccountRequest) (*Account, error)
	// ListAccounts lists a list of deposit accounts.
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// GetAccount retrieves a specified deposit account.
	GetAccount(context.Context, *GetAccountRequest) (*Account, error)
	// UpdateAccount updates a deposit account.
	UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error)
	// DeleteAccount deletes the deposit account.
	DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error)
	// CreateFundBlock creates a new block fund for the deposit acount.
	CreateFundBlock(context.Context, *CreateFundBlockRequest) (*FundBlock, error)
	// ListFundBlocks lists the fund blocks for the deposit account.
	ListFundBlocks(context.Context, *ListFundBlocksRequest) (*ListFundBlocksResponse, error)
	// GetFundBlock retrieves a specified fund block.
	GetFundBlock(context.Context, *GetFundBlockRequest) (*FundBlock, error)
	// UpdateFundBlock updates a fund block.
	UpdateFundBlock(context.Context, *UpdateFundBlockRequest) (*FundBlock, error)
	// DeleteFundBlock unblocks a previously blocked fund on a deposit account.
	DeleteFundBlock(context.Context, *DeleteFundBlockRequest) (*emptypb.Empty, error)
	// CreateCard creates a new card for the deposit account.
	CreateCard(context.Context, *CreateCardRequest) (*cards.Card, error)
	// ListCards lists the cards for the deposit account.
	ListCards(context.Context, *ListCardsRequest) (*ListCardsResponse, error)
	// GetCard retrieves a specified card.
	// To retrieve other information on the card, use the cards package under
	// the Services section.
	GetCard(context.Context, *GetCardRequest) (*cards.Card, error)
	// DeleteCard deletes the card for the deposit account.
	DeleteCard(context.Context, *DeleteCardRequest) (*emptypb.Empty, error)
	// GetDocument generates a document for the deposit account with the
	// specified template.
	GetDocument(context.Context, *GetDocumentRequest) (*v1.File, error)
	// GetFundedAccounts retrieves the loan accounts which are funded by the
	// deposit account.
	GetFundedAccounts(context.Context, *GetLoanAccountsRequest) (*GetLoanAccountsResponse, error)
	// ApplyInterest applies the accrued interest to the deposit account.
	ApplyInterest(context.Context, *ApplyInterestRequest) (*emptypb.Empty, error)
	// ReopenAccount reopens a previously closed deposit account.
	ReopenAccount(context.Context, *ReopenRequest) (*emptypb.Empty, error)
	// Mature starts the maturity period for the deposit account.
	Mature(context.Context, *MatureRequest) (*emptypb.Empty, error)
	// UndoMaturity undos the maturity period on a deposit account.
	UndoMaturity(context.Context, *UndoMaturityRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDepositsServiceServer()
}

// UnimplementedDepositsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDepositsServiceServer struct{}

func (UnimplementedDepositsServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}

func (UnimplementedDepositsServiceServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}

func (UnimplementedDepositsServiceServer) GetAccount(context.Context, *GetAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}

func (UnimplementedDepositsServiceServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}

func (UnimplementedDepositsServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}

func (UnimplementedDepositsServiceServer) CreateFundBlock(context.Context, *CreateFundBlockRequest) (*FundBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFundBlock not implemented")
}

func (UnimplementedDepositsServiceServer) ListFundBlocks(context.Context, *ListFundBlocksRequest) (*ListFundBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFundBlocks not implemented")
}

func (UnimplementedDepositsServiceServer) GetFundBlock(context.Context, *GetFundBlockRequest) (*FundBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFundBlock not implemented")
}

func (UnimplementedDepositsServiceServer) UpdateFundBlock(context.Context, *UpdateFundBlockRequest) (*FundBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFundBlock not implemented")
}

func (UnimplementedDepositsServiceServer) DeleteFundBlock(context.Context, *DeleteFundBlockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFundBlock not implemented")
}

func (UnimplementedDepositsServiceServer) CreateCard(context.Context, *CreateCardRequest) (*cards.Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}

func (UnimplementedDepositsServiceServer) ListCards(context.Context, *ListCardsRequest) (*ListCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCards not implemented")
}

func (UnimplementedDepositsServiceServer) GetCard(context.Context, *GetCardRequest) (*cards.Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}

func (UnimplementedDepositsServiceServer) DeleteCard(context.Context, *DeleteCardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}

func (UnimplementedDepositsServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*v1.File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}

func (UnimplementedDepositsServiceServer) GetFundedAccounts(context.Context, *GetLoanAccountsRequest) (*GetLoanAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFundedAccounts not implemented")
}

func (UnimplementedDepositsServiceServer) ApplyInterest(context.Context, *ApplyInterestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyInterest not implemented")
}

func (UnimplementedDepositsServiceServer) ReopenAccount(context.Context, *ReopenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReopenAccount not implemented")
}

func (UnimplementedDepositsServiceServer) Mature(context.Context, *MatureRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mature not implemented")
}

func (UnimplementedDepositsServiceServer) UndoMaturity(context.Context, *UndoMaturityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoMaturity not implemented")
}
func (UnimplementedDepositsServiceServer) mustEmbedUnimplementedDepositsServiceServer() {}

// UnsafeDepositsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepositsServiceServer will
// result in compilation errors.
type UnsafeDepositsServiceServer interface {
	mustEmbedUnimplementedDepositsServiceServer()
}

func RegisterDepositsServiceServer(s grpc.ServiceRegistrar, srv DepositsServiceServer) {
	s.RegisterService(&DepositsService_ServiceDesc, srv)
}

func _DepositsService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_CreateFundBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFundBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).CreateFundBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/CreateFundBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).CreateFundBlock(ctx, req.(*CreateFundBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_ListFundBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFundBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).ListFundBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/ListFundBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).ListFundBlocks(ctx, req.(*ListFundBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_GetFundBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFundBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).GetFundBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/GetFundBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).GetFundBlock(ctx, req.(*GetFundBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_UpdateFundBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFundBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).UpdateFundBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/UpdateFundBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).UpdateFundBlock(ctx, req.(*UpdateFundBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_DeleteFundBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFundBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).DeleteFundBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/DeleteFundBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).DeleteFundBlock(ctx, req.(*DeleteFundBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_ListCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).ListCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/ListCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).ListCards(ctx, req.(*ListCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/GetCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).GetCard(ctx, req.(*GetCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_GetFundedAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).GetFundedAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/GetFundedAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).GetFundedAccounts(ctx, req.(*GetLoanAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_ApplyInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).ApplyInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/ApplyInterest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).ApplyInterest(ctx, req.(*ApplyInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_ReopenAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReopenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).ReopenAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/ReopenAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).ReopenAccount(ctx, req.(*ReopenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_Mature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).Mature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/Mature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).Mature(ctx, req.(*MatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositsService_UndoMaturity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoMaturityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositsServiceServer).UndoMaturity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.deposits.DepositsService/UndoMaturity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositsServiceServer).UndoMaturity(ctx, req.(*UndoMaturityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepositsService_ServiceDesc is the grpc.ServiceDesc for DepositsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepositsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.deposits.DepositsService",
	HandlerType: (*DepositsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _DepositsService_CreateAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _DepositsService_ListAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _DepositsService_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _DepositsService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _DepositsService_DeleteAccount_Handler,
		},
		{
			MethodName: "CreateFundBlock",
			Handler:    _DepositsService_CreateFundBlock_Handler,
		},
		{
			MethodName: "ListFundBlocks",
			Handler:    _DepositsService_ListFundBlocks_Handler,
		},
		{
			MethodName: "GetFundBlock",
			Handler:    _DepositsService_GetFundBlock_Handler,
		},
		{
			MethodName: "UpdateFundBlock",
			Handler:    _DepositsService_UpdateFundBlock_Handler,
		},
		{
			MethodName: "DeleteFundBlock",
			Handler:    _DepositsService_DeleteFundBlock_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _DepositsService_CreateCard_Handler,
		},
		{
			MethodName: "ListCards",
			Handler:    _DepositsService_ListCards_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _DepositsService_GetCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _DepositsService_DeleteCard_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DepositsService_GetDocument_Handler,
		},
		{
			MethodName: "GetFundedAccounts",
			Handler:    _DepositsService_GetFundedAccounts_Handler,
		},
		{
			MethodName: "ApplyInterest",
			Handler:    _DepositsService_ApplyInterest_Handler,
		},
		{
			MethodName: "ReopenAccount",
			Handler:    _DepositsService_ReopenAccount_Handler,
		},
		{
			MethodName: "Mature",
			Handler:    _DepositsService_Mature_Handler,
		},
		{
			MethodName: "UndoMaturity",
			Handler:    _DepositsService_UndoMaturity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/deposits/all.proto",
}
