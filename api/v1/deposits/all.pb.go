// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: bnk.to/core/api/v1/deposits/all.proto

// Package deposits.

package deposits

import (
	reflect "reflect"
	sync "sync"

	v1 "bnk.to/core/api/v1"
	cards "bnk.to/core/api/v1/cards"
	products "bnk.to/core/api/v1/products"
	_ "github.com/xo/ecosystem/proto/xo"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccountState is the state of a deposit account.
type AccountState int32

const (
	AccountState_PendingApproval  AccountState = 0
	AccountState_Approved         AccountState = 1
	AccountState_Active           AccountState = 2
	AccountState_ActiveInArrears  AccountState = 3
	AccountState_Matured          AccountState = 4
	AccountState_Locked           AccountState = 5
	AccountState_Dormant          AccountState = 6
	AccountState_Closed           AccountState = 7
	AccountState_ClosedWrittenOff AccountState = 8
	AccountState_Withdrawn        AccountState = 9
	AccountState_ClosedRejected   AccountState = 10
)

// Enum value maps for AccountState.
var (
	AccountState_name = map[int32]string{
		0:  "PendingApproval",
		1:  "Approved",
		2:  "Active",
		3:  "ActiveInArrears",
		4:  "Matured",
		5:  "Locked",
		6:  "Dormant",
		7:  "Closed",
		8:  "ClosedWrittenOff",
		9:  "Withdrawn",
		10: "ClosedRejected",
	}
	AccountState_value = map[string]int32{
		"PendingApproval":  0,
		"Approved":         1,
		"Active":           2,
		"ActiveInArrears":  3,
		"Matured":          4,
		"Locked":           5,
		"Dormant":          6,
		"Closed":           7,
		"ClosedWrittenOff": 8,
		"Withdrawn":        9,
		"ClosedRejected":   10,
	}
)

func (x AccountState) Enum() *AccountState {
	p := new(AccountState)
	*p = x
	return p
}

func (x AccountState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountState) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_deposits_all_proto_enumTypes[0].Descriptor()
}

func (AccountState) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_deposits_all_proto_enumTypes[0]
}

func (x AccountState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountState.Descriptor instead.
func (AccountState) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{0}
}

// AccountType is the type of a deposit account.
type AccountType int32

const (
	AccountType_CurrentAccount  AccountType = 0
	AccountType_RegularSavings  AccountType = 1
	AccountType_FixedDeposit    AccountType = 2
	AccountType_SavingsPlan     AccountType = 3
	AccountType_InvestorAccount AccountType = 4
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "CurrentAccount",
		1: "RegularSavings",
		2: "FixedDeposit",
		3: "SavingsPlan",
		4: "InvestorAccount",
	}
	AccountType_value = map[string]int32{
		"CurrentAccount":  0,
		"RegularSavings":  1,
		"FixedDeposit":    2,
		"SavingsPlan":     3,
		"InvestorAccount": 4,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_deposits_all_proto_enumTypes[1].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_deposits_all_proto_enumTypes[1]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{1}
}

// InterestRateType is the type of interest rates on a deposit account.
type InterestRateType int32

const (
	InterestRateType_FixedRate InterestRateType = 0
	InterestRateType_IndexRate InterestRateType = 1
)

// Enum value maps for InterestRateType.
var (
	InterestRateType_name = map[int32]string{
		0: "FixedRate",
		1: "IndexRate",
	}
	InterestRateType_value = map[string]int32{
		"FixedRate": 0,
		"IndexRate": 1,
	}
)

func (x InterestRateType) Enum() *InterestRateType {
	p := new(InterestRateType)
	*p = x
	return p
}

func (x InterestRateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterestRateType) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_deposits_all_proto_enumTypes[2].Descriptor()
}

func (InterestRateType) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_deposits_all_proto_enumTypes[2]
}

func (x InterestRateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterestRateType.Descriptor instead.
func (InterestRateType) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{2}
}

// BlockState is the current status of a fund block.
type BlockState int32

const (
	BlockState_Pending         BlockState = 0
	BlockState_Seized          BlockState = 1
	BlockState_Removed         BlockState = 2
	BlockState_PartiallySeized BlockState = 3
)

// Enum value maps for BlockState.
var (
	BlockState_name = map[int32]string{
		0: "Pending",
		1: "Seized",
		2: "Removed",
		3: "PartiallySeized",
	}
	BlockState_value = map[string]int32{
		"Pending":         0,
		"Seized":          1,
		"Removed":         2,
		"PartiallySeized": 3,
	}
)

func (x BlockState) Enum() *BlockState {
	p := new(BlockState)
	*p = x
	return p
}

func (x BlockState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockState) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_deposits_all_proto_enumTypes[3].Descriptor()
}

func (BlockState) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_deposits_all_proto_enumTypes[3]
}

func (x BlockState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockState.Descriptor instead.
func (BlockState) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{3}
}

// AccruedAmounts is the accrued amounts of a deposit account.
type AccruedAmounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interest is the amount of positive interest that has been accrued in the
	// account.
	Interest *v1.Amount `protobuf:"bytes,1,opt,name=Interest,json=interest,proto3" json:"interest,omitempty"`
	// NegativeInterest is the amount of negative interest that has been accrued
	// in the account.
	NegativeInterest *v1.Amount `protobuf:"bytes,2,opt,name=NegativeInterest,json=negative_interest,proto3" json:"negative_interest,omitempty"`
	// OverdraftInterest is the amount of overdraft interest that has been
	// accrued in the account.
	OverdraftInterest *v1.Amount `protobuf:"bytes,3,opt,name=OverdraftInterest,json=overdraft_interest,proto3" json:"overdraft_interest,omitempty"`
	// TechnicalOverdraftInterest is the amount of technical overdraft interest
	// that has been accrued in the account.
	TechnicalOverdraftInterest *v1.Amount `protobuf:"bytes,4,opt,name=TechnicalOverdraftInterest,json=technical_overdraft_interest,proto3" json:"technical_overdraft_interest,omitempty"`
}

func (x *AccruedAmounts) Reset() {
	*x = AccruedAmounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccruedAmounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccruedAmounts) ProtoMessage() {}

func (x *AccruedAmounts) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccruedAmounts.ProtoReflect.Descriptor instead.
func (*AccruedAmounts) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{0}
}

func (x *AccruedAmounts) GetInterest() *v1.Amount {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *AccruedAmounts) GetNegativeInterest() *v1.Amount {
	if x != nil {
		return x.NegativeInterest
	}
	return nil
}

func (x *AccruedAmounts) GetOverdraftInterest() *v1.Amount {
	if x != nil {
		return x.OverdraftInterest
	}
	return nil
}

func (x *AccruedAmounts) GetTechnicalOverdraftInterest() *v1.Amount {
	if x != nil {
		return x.TechnicalOverdraftInterest
	}
	return nil
}

// Balances is the balances of a deposit account.
type Balances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the current balance of the account.
	Total *v1.Amount `protobuf:"bytes,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Available is the available balance of the account.
	Available *v1.Amount `protobuf:"bytes,2,opt,name=Available,json=available,proto3" json:"available,omitempty"`
	// Locked is the amount of balance that is locked and cannot be modified.
	Locked *v1.Amount `protobuf:"bytes,3,opt,name=Locked,json=locked,proto3" json:"locked,omitempty"`
	// Blocked is the sum of all blocked balances of the account.
	Blocked *v1.Amount `protobuf:"bytes,4,opt,name=Blocked,json=blocked,proto3" json:"blocked,omitempty"`
	// FeesDue is the amount of fees due to be paid on the account.
	FeesDue *v1.Amount `protobuf:"bytes,5,opt,name=FeesDue,json=fees_due,proto3" json:"fees_due,omitempty"`
	// ForwardAvailable is the sum of all authorization hold that have credit
	// referencing this account.
	ForwardAvailable *v1.Amount `protobuf:"bytes,6,opt,name=ForwardAvailable,json=forward_available,proto3" json:"forward_available,omitempty"`
	// Hold is the sum of all authorization hold that have debit referencing
	// this account.
	Hold *v1.Amount `protobuf:"bytes,7,opt,name=Hold,json=hold,proto3" json:"hold,omitempty"`
	// OverdraftAmount is the amount of money that has been taken out as
	// overdraft.
	OverdraftAmount *v1.Amount `protobuf:"bytes,8,opt,name=OverdraftAmount,json=overdraft_amount,proto3" json:"overdraft_amount,omitempty"`
	// OverdraftInterestDue is the amount of interest due to be paid on the
	// account.
	OverdraftInterestDue *v1.Amount `protobuf:"bytes,9,opt,name=OverdraftInterestDue,json=overdraft_interest_due,proto3" json:"overdraft_interest_due,omitempty"`
	// TechnicalOverdraftAmount is the amount of money that has been taken out
	// as unplanned overdraft.
	TechnicalOverdraftAmount *v1.Amount `protobuf:"bytes,10,opt,name=TechnicalOverdraftAmount,json=technical_overdraft_amount,proto3" json:"technical_overdraft_amount,omitempty"`
	// TechnicalOverdraftInterestDue is the amount of interest due to be paid
	// on the account as a result of technical overdraft.
	TechnicalOverdraftInterestDue *v1.Amount `protobuf:"bytes,11,opt,name=TechnicalOverdraftInterestDue,json=technical_overdraft_interest_due,proto3" json:"technical_overdraft_interest_due,omitempty"`
}

func (x *Balances) Reset() {
	*x = Balances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances) ProtoMessage() {}

func (x *Balances) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances.ProtoReflect.Descriptor instead.
func (*Balances) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{1}
}

func (x *Balances) GetTotal() *v1.Amount {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Balances) GetAvailable() *v1.Amount {
	if x != nil {
		return x.Available
	}
	return nil
}

func (x *Balances) GetLocked() *v1.Amount {
	if x != nil {
		return x.Locked
	}
	return nil
}

func (x *Balances) GetBlocked() *v1.Amount {
	if x != nil {
		return x.Blocked
	}
	return nil
}

func (x *Balances) GetFeesDue() *v1.Amount {
	if x != nil {
		return x.FeesDue
	}
	return nil
}

func (x *Balances) GetForwardAvailable() *v1.Amount {
	if x != nil {
		return x.ForwardAvailable
	}
	return nil
}

func (x *Balances) GetHold() *v1.Amount {
	if x != nil {
		return x.Hold
	}
	return nil
}

func (x *Balances) GetOverdraftAmount() *v1.Amount {
	if x != nil {
		return x.OverdraftAmount
	}
	return nil
}

func (x *Balances) GetOverdraftInterestDue() *v1.Amount {
	if x != nil {
		return x.OverdraftInterestDue
	}
	return nil
}

func (x *Balances) GetTechnicalOverdraftAmount() *v1.Amount {
	if x != nil {
		return x.TechnicalOverdraftAmount
	}
	return nil
}

func (x *Balances) GetTechnicalOverdraftInterestDue() *v1.Amount {
	if x != nil {
		return x.TechnicalOverdraftInterestDue
	}
	return nil
}

// InternalControls is the internal controls of a deposit account.
type InternalControls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MaxDepositBalance is the maximum deposit balance of the account.
	MaxDepositBalance *v1.Amount `protobuf:"bytes,1,opt,name=MaxDepositBalance,json=max_deposit_balance,proto3" json:"max_deposit_balance,omitempty"`
	// MaxWithdrawalAmount is the maximum amount that can be involved in a
	// withdrawal.
	MaxWithdrawalAmount *v1.Amount `protobuf:"bytes,2,opt,name=MaxWithdrawalAmount,json=max_withdrawal_amount,proto3" json:"max_withdrawal_amount,omitempty"`
	// RecommendedDepositAmount is the recommended deposit amount for the
	// account.
	RecommendedDepositAmount *v1.Amount `protobuf:"bytes,3,opt,name=RecommendedDepositAmount,json=recommended_deposit_amount,proto3" json:"recommended_deposit_amount,omitempty"`
	// TargetAmount is the target amount for the account.
	TargetAmount *v1.Amount `protobuf:"bytes,4,opt,name=TargetAmount,json=target_amount,proto3" json:"target_amount,omitempty"`
}

func (x *InternalControls) Reset() {
	*x = InternalControls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalControls) ProtoMessage() {}

func (x *InternalControls) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalControls.ProtoReflect.Descriptor instead.
func (*InternalControls) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{2}
}

func (x *InternalControls) GetMaxDepositBalance() *v1.Amount {
	if x != nil {
		return x.MaxDepositBalance
	}
	return nil
}

func (x *InternalControls) GetMaxWithdrawalAmount() *v1.Amount {
	if x != nil {
		return x.MaxWithdrawalAmount
	}
	return nil
}

func (x *InternalControls) GetRecommendedDepositAmount() *v1.Amount {
	if x != nil {
		return x.RecommendedDepositAmount
	}
	return nil
}

func (x *InternalControls) GetTargetAmount() *v1.Amount {
	if x != nil {
		return x.TargetAmount
	}
	return nil
}

// OverdraftRateSettings is the settings for overdraft rates on a deposit
// account.
type OverdraftRateSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency is the amount of time between interest charges to the account.
	Frequency *durationpb.Duration `protobuf:"bytes,1,opt,name=Frequency,json=frequency,proto3" json:"frequency,omitempty"`
	// PaymentDates is the list of all dates interest is paid to the account.
	PaymentDates []*timestamppb.Timestamp `protobuf:"bytes,2,rep,name=PaymentDates,json=payment_dates,proto3" json:"payment_dates,omitempty"`
	// Terms is the terms for interest rate computation.
	Terms products.InterestRateTerms `protobuf:"varint,3,opt,name=Terms,json=terms,proto3,enum=openbank.core.v1.products.InterestRateTerms" json:"terms,omitempty"`
	// Tiers is a list of tiers of interest rates.
	Tiers []*products.InterestRateTier `protobuf:"bytes,4,rep,name=Tiers,json=tiers,proto3" json:"tiers,omitempty"`
	// InterestRate is the interest rate for the account.
	InterestRate float64 `protobuf:"fixed64,5,opt,name=InterestRate,json=interest_rate,proto3" json:"interest_rate,omitempty"`
	// ReviewFrequency is the frequency of interest rate review.
	ReviewFrequency *durationpb.Duration `protobuf:"bytes,6,opt,name=ReviewFrequency,json=review_frequency,proto3" json:"review_frequency,omitempty"`
	// RateType is the method of calculation of interest.
	RateType InterestRateType `protobuf:"varint,7,opt,name=RateType,json=rate_type,proto3,enum=openbank.core.v1.deposits.InterestRateType" json:"rate_type,omitempty"`
	// SpreadRate is the rate based on interest accrued and applied for
	// accounts with an interest rate type of IndexRate.
	SpreadRate float64 `protobuf:"fixed64,8,opt,name=SpreadRate,json=spread_rate,proto3" json:"spread_rate,omitempty"`
}

func (x *OverdraftRateSettings) Reset() {
	*x = OverdraftRateSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverdraftRateSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverdraftRateSettings) ProtoMessage() {}

func (x *OverdraftRateSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverdraftRateSettings.ProtoReflect.Descriptor instead.
func (*OverdraftRateSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{3}
}

func (x *OverdraftRateSettings) GetFrequency() *durationpb.Duration {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *OverdraftRateSettings) GetPaymentDates() []*timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDates
	}
	return nil
}

func (x *OverdraftRateSettings) GetTerms() products.InterestRateTerms {
	if x != nil {
		return x.Terms
	}
	return products.InterestRateTerms(0)
}

func (x *OverdraftRateSettings) GetTiers() []*products.InterestRateTier {
	if x != nil {
		return x.Tiers
	}
	return nil
}

func (x *OverdraftRateSettings) GetInterestRate() float64 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

func (x *OverdraftRateSettings) GetReviewFrequency() *durationpb.Duration {
	if x != nil {
		return x.ReviewFrequency
	}
	return nil
}

func (x *OverdraftRateSettings) GetRateType() InterestRateType {
	if x != nil {
		return x.RateType
	}
	return InterestRateType_FixedRate
}

func (x *OverdraftRateSettings) GetSpreadRate() float64 {
	if x != nil {
		return x.SpreadRate
	}
	return 0
}

// OverdraftSettings is the overdraft settings for a deposit account.
type OverdraftSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allow is a flag for enabling overdraft settings.
	Allow bool `protobuf:"varint,1,opt,name=Allow,json=allow,proto3" json:"allow,omitempty"`
	// ExpireTime is the expiration time of the overdraft.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ExpireTime,json=expire_time,proto3" json:"expire_time,omitempty"`
	// Limit is the maximum amount of overdraft allowed.
	Limit *v1.Amount `protobuf:"bytes,3,opt,name=Limit,json=limit,proto3" json:"limit,omitempty"`
}

func (x *OverdraftSettings) Reset() {
	*x = OverdraftSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverdraftSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverdraftSettings) ProtoMessage() {}

func (x *OverdraftSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverdraftSettings.ProtoReflect.Descriptor instead.
func (*OverdraftSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{4}
}

func (x *OverdraftSettings) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

func (x *OverdraftSettings) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *OverdraftSettings) GetLimit() *v1.Amount {
	if x != nil {
		return x.Limit
	}
	return nil
}

// Account is a deposit account where a customer holds his savings.
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Name is the name of the account.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// Notes is extra notes on the account.
	Notes string `protobuf:"bytes,3,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// HolderID is the ID of the entity that holds the account.
	// TODO: Which table does this have a reference to.
	HolderID string `protobuf:"bytes,4,opt,name=HolderID,json=holder_id,proto3" json:"holder_id,omitempty"`
	// HolderType is the type of the entity that holds the account.
	HolderType v1.Entity `protobuf:"varint,5,opt,name=HolderType,json=holder_type,proto3,enum=openbank.core.v1.Entity" json:"holder_type,omitempty"`
	// State is the state of the account.
	State AccountState `protobuf:"varint,6,opt,name=State,json=state,proto3,enum=openbank.core.v1.deposits.AccountState" json:"state,omitempty"`
	// Type is the type of the deposit account.
	Type AccountType `protobuf:"varint,7,opt,name=Type,json=type,proto3,enum=openbank.core.v1.deposits.AccountType" json:"type,omitempty"`
	// AccruedAmounts is details related to a deposit account's accrued amounts.
	AccruedAmounts *AccruedAmounts `protobuf:"bytes,8,opt,name=AccruedAmounts,json=accrued_amounts,proto3" json:"accrued_amounts,omitempty"`
	// AssignedBranchID is the ID of the branch the account is assigned to.
	AssignedBranchID string `protobuf:"bytes,9,opt,name=AssignedBranchID,json=assigned_branch_id,proto3" json:"assigned_branch_id,omitempty"`
	// AssignedCentreID is the ID of the centre the account is assigned to.
	AssignedCentreID string `protobuf:"bytes,10,opt,name=AssignedCentreID,json=assigned_centre_id,proto3" json:"assigned_centre_id,omitempty"`
	// AssignedUserID is the ID of the user the account is assigned to.
	AssignedUserID string `protobuf:"bytes,11,opt,name=AssignedUserID,json=assigned_user_id,proto3" json:"assigned_user_id,omitempty"`
	// Balances is the account's balances.
	Balances *Balances `protobuf:"bytes,12,opt,name=Balances,json=balances,proto3" json:"balances,omitempty"`
	// RevolvingAccountID is the ID of the revolving account the account is
	// register to.
	RevolvingAccountID string `protobuf:"bytes,13,opt,name=RevolvingAccountID,json=revolving_account_id,proto3" json:"revolving_account_id,omitempty"`
	// CurrencyCode is the currency code of the account.
	CurrencyCode string `protobuf:"bytes,14,opt,name=CurrencyCode,json=currency_code,proto3" json:"currency_code,omitempty"`
	// InterestSettings is the account's interest settings.
	InterestSettings *products.DepositInterestSettings `protobuf:"bytes,15,opt,name=InterestSettings,json=interest_settings,proto3" json:"interest_settings,omitempty"`
	// InternalControls is internal controls related to the account.
	InternalControls *InternalControls `protobuf:"bytes,16,opt,name=InternalControls,json=internal_controls,proto3" json:"internal_controls,omitempty"`
	// SettlementAccountIDs is the IDs of the list of settlement accounts the account is
	// linked to.
	SettlementAccountIDs []string `protobuf:"bytes,17,rep,name=SettlementAccountIDs,json=settlement_account_ids,proto3" json:"settlement_account_ids,omitempty"`
	// MigrationEventID is the ID of the migration event the account is
	// imported from.
	// TODO: Which table does this have a reference to.
	MigrationEventID string `protobuf:"bytes,18,opt,name=MigrationEventID,json=migration_event_id,proto3" json:"migration_event_id,omitempty"`
	// OverdraftRateSettings is the account's overdraft interest rate settings.
	OverdraftRateSettings *OverdraftRateSettings `protobuf:"bytes,19,opt,name=OverdraftRateSettings,json=overdraft_rate_settings,proto3" json:"overdraft_rate_settings,omitempty"`
	// OverdraftSettings is the account's overdraft settings.
	OverdraftSettings *OverdraftSettings `protobuf:"bytes,20,opt,name=OverdraftSettings,json=overdraft_settings,proto3" json:"overdraft_settings,omitempty"`
	// ProductID is the ID of the product the account is created from.
	ProductID string `protobuf:"bytes,21,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
	// WithholdingTaxSourceID is the ID of the withholding tax source.
	WithholdingTaxSourceID string `protobuf:"bytes,22,opt,name=WithholdingTaxSourceID,json=withholding_tax_source_id,proto3" json:"withholding_tax_source_id,omitempty"`
	// CreateTime is the time the account was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
	// ApproveTime is the time the account was approved.
	ApproveTime *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=ApproveTime,json=approve_time,proto3" json:"approve_time,omitempty"`
	// ActivateTime is the time the account was activated.
	ActivateTime *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=ActivateTime,json=activate_time,proto3" json:"activate_time,omitempty"`
	// UpdateTime is the time the account was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=UpdateTime,json=update_time,proto3" json:"update_time,omitempty"`
	// CloseTime is the time the account was closed.
	CloseTime *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=CloseTime,json=close_time,proto3" json:"close_time,omitempty"`
	// AppraiseTime is the time the account was last evaluated for interest
	// calculations/maturity.
	AppraiseTime *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=AppraiseTime,json=appraise_time,proto3" json:"appraise_time,omitempty"`
	// InterestCalculateTime is the time the account last had its interest
	// calculated.
	InterestCalculateTime *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=InterestCalculateTime,json=interest_calculate_time,proto3" json:"interest_calculate_time,omitempty"`
	// InterestStoreTime is the time the account last had its interest applied
	// (stored to balance).
	InterestStoreTime *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=InterestStoreTime,json=interest_store_time,proto3" json:"interest_store_time,omitempty"`
	// OverdraftInterestReviewTime is the time the account was last reviewed for
	// overdraft interest.
	OverdraftInterestReviewTime *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=OverdraftInterestReviewTime,json=overdraft_interest_review_time,proto3" json:"overdraft_interest_review_time,omitempty"`
	// ArrearsSetTime is the time the account was set to In Arrears state, or
	// null if the account is not In Arrears state.
	ArrearsSetTime *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=ArrearsSetTime,json=arrears_set_time,proto3" json:"arrears_set_time,omitempty"`
	// LockTime is the time the account was locked.
	LockTime *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=LockTime,json=lock_time,proto3" json:"lock_time,omitempty"`
	// MatureTime is the time the account matures for fixed or compulsory
	// savings plans.
	MatureTime *timestamppb.Timestamp `protobuf:"bytes,34,opt,name=MatureTime,json=mature_time,proto3" json:"mature_time,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{5}
}

func (x *Account) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Account) GetHolderID() string {
	if x != nil {
		return x.HolderID
	}
	return ""
}

func (x *Account) GetHolderType() v1.Entity {
	if x != nil {
		return x.HolderType
	}
	return v1.Entity(0)
}

func (x *Account) GetState() AccountState {
	if x != nil {
		return x.State
	}
	return AccountState_PendingApproval
}

func (x *Account) GetType() AccountType {
	if x != nil {
		return x.Type
	}
	return AccountType_CurrentAccount
}

func (x *Account) GetAccruedAmounts() *AccruedAmounts {
	if x != nil {
		return x.AccruedAmounts
	}
	return nil
}

func (x *Account) GetAssignedBranchID() string {
	if x != nil {
		return x.AssignedBranchID
	}
	return ""
}

func (x *Account) GetAssignedCentreID() string {
	if x != nil {
		return x.AssignedCentreID
	}
	return ""
}

func (x *Account) GetAssignedUserID() string {
	if x != nil {
		return x.AssignedUserID
	}
	return ""
}

func (x *Account) GetBalances() *Balances {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *Account) GetRevolvingAccountID() string {
	if x != nil {
		return x.RevolvingAccountID
	}
	return ""
}

func (x *Account) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Account) GetInterestSettings() *products.DepositInterestSettings {
	if x != nil {
		return x.InterestSettings
	}
	return nil
}

func (x *Account) GetInternalControls() *InternalControls {
	if x != nil {
		return x.InternalControls
	}
	return nil
}

func (x *Account) GetSettlementAccountIDs() []string {
	if x != nil {
		return x.SettlementAccountIDs
	}
	return nil
}

func (x *Account) GetMigrationEventID() string {
	if x != nil {
		return x.MigrationEventID
	}
	return ""
}

func (x *Account) GetOverdraftRateSettings() *OverdraftRateSettings {
	if x != nil {
		return x.OverdraftRateSettings
	}
	return nil
}

func (x *Account) GetOverdraftSettings() *OverdraftSettings {
	if x != nil {
		return x.OverdraftSettings
	}
	return nil
}

func (x *Account) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *Account) GetWithholdingTaxSourceID() string {
	if x != nil {
		return x.WithholdingTaxSourceID
	}
	return ""
}

func (x *Account) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Account) GetApproveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveTime
	}
	return nil
}

func (x *Account) GetActivateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivateTime
	}
	return nil
}

func (x *Account) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Account) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *Account) GetAppraiseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AppraiseTime
	}
	return nil
}

func (x *Account) GetInterestCalculateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InterestCalculateTime
	}
	return nil
}

func (x *Account) GetInterestStoreTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InterestStoreTime
	}
	return nil
}

func (x *Account) GetOverdraftInterestReviewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OverdraftInterestReviewTime
	}
	return nil
}

func (x *Account) GetArrearsSetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ArrearsSetTime
	}
	return nil
}

func (x *Account) GetLockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LockTime
	}
	return nil
}

func (x *Account) GetMatureTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MatureTime
	}
	return nil
}

// FundBlock is a block of funds on a deposit account.
// These sends can then later be seized.
type FundBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BlockID is the ID of the fund block.
	BlockID string `protobuf:"bytes,1,opt,name=BlockID,json=block_id,proto3" json:"block_id,omitempty"`
	// AccountID is the ID of the deposit account associated with the blocked
	// funds.
	AccountID string `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Amount is the amount of funds that are blocked.
	Amount *v1.Amount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// SeizedAmount is the amount of the blocked funds that have been seized.
	SeizedAmount *v1.Amount `protobuf:"bytes,4,opt,name=SeizedAmount,json=seized_amount,proto3" json:"seized_amount,omitempty"`
	// State is the state of the block fund.
	State BlockState `protobuf:"varint,5,opt,name=State,json=state,proto3,enum=openbank.core.v1.deposits.BlockState" json:"state,omitempty"`
	// Notes is extra human-readable notes about the block fund.
	Notes string `protobuf:"bytes,6,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// CreateTime is the time when the block fund was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
	// UpdateTime is the time when the block fund was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=UpdateTime,json=update_time,proto3" json:"update_time,omitempty"`
}

func (x *FundBlock) Reset() {
	*x = FundBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundBlock) ProtoMessage() {}

func (x *FundBlock) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundBlock.ProtoReflect.Descriptor instead.
func (*FundBlock) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{6}
}

func (x *FundBlock) GetBlockID() string {
	if x != nil {
		return x.BlockID
	}
	return ""
}

func (x *FundBlock) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *FundBlock) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *FundBlock) GetSeizedAmount() *v1.Amount {
	if x != nil {
		return x.SeizedAmount
	}
	return nil
}

func (x *FundBlock) GetState() BlockState {
	if x != nil {
		return x.State
	}
	return BlockState_Pending
}

func (x *FundBlock) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *FundBlock) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *FundBlock) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// CreateAccountRequest is the request for creating a new deposit account.
type CreateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the deposit account to create.
	Body *Account `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateAccountRequest) Reset() {
	*x = CreateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequest) ProtoMessage() {}

func (x *CreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{7}
}

func (x *CreateAccountRequest) GetBody() *Account {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListAccountsRequest is the request for listing deposit accounts.
type ListAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageToken is the page token of the page to retrieve.
	PageToken string `protobuf:"bytes,1,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of accounts to retrieve per page.
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the field to order the results by.
	OrderBy string `protobuf:"bytes,3,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to apply to the list.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListAccountsRequest) Reset() {
	*x = ListAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsRequest) ProtoMessage() {}

func (x *ListAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{8}
}

func (x *ListAccountsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAccountsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAccountsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListAccountsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListAccountsResponse is the response for listing deposit accounts.
type ListAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of accounts matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of accounts remaining in the list, including the
	// accounts in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Accounts is the list of deposit accounts retrieved.
	Accounts []*Account `protobuf:"bytes,3,rep,name=Accounts,json=accounts,proto3" json:"accounts,omitempty"`
	// NextPageToken is the page token of the next page of results.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAccountsResponse) Reset() {
	*x = ListAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsResponse) ProtoMessage() {}

func (x *ListAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{9}
}

func (x *ListAccountsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListAccountsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListAccountsResponse) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *ListAccountsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetAccountRequest is the request for retrieving a deposit account.
type GetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to retrieve.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{10}
}

func (x *GetAccountRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

// UpdateAccountRequest is the request for updating a deposit account.
type UpdateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to update.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the updated deposit account.
	Body *Account `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateAccountRequest) Reset() {
	*x = UpdateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountRequest) ProtoMessage() {}

func (x *UpdateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateAccountRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *UpdateAccountRequest) GetBody() *Account {
	if x != nil {
		return x.Body
	}
	return nil
}

// CreateFundBlockRequest is the request for creating a new fund block.
type CreateFundBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to create the block fund for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the block fund to create.
	Body *FundBlock `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateFundBlockRequest) Reset() {
	*x = CreateFundBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFundBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFundBlockRequest) ProtoMessage() {}

func (x *CreateFundBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFundBlockRequest.ProtoReflect.Descriptor instead.
func (*CreateFundBlockRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{12}
}

func (x *CreateFundBlockRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateFundBlockRequest) GetBody() *FundBlock {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListFundBlocksRequest is the request for listing fund blocks.
type ListFundBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to list the block funds for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// PageToken is the page token of the page to retrieve.
	PageToken string `protobuf:"bytes,2,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of fund blocks to retrieve per page.
	PageSize int32 `protobuf:"varint,3,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the field to order the results by.
	OrderBy string `protobuf:"bytes,4,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to apply to the list.
	Filter string `protobuf:"bytes,5,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListFundBlocksRequest) Reset() {
	*x = ListFundBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFundBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFundBlocksRequest) ProtoMessage() {}

func (x *ListFundBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFundBlocksRequest.ProtoReflect.Descriptor instead.
func (*ListFundBlocksRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{13}
}

func (x *ListFundBlocksRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListFundBlocksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListFundBlocksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFundBlocksRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListFundBlocksRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// UpdateFundBlockRequest is the request for updating a fund block.
type UpdateFundBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to update the fund block for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// BlockID is the ID of the fund block to update.
	BlockID string `protobuf:"bytes,2,opt,name=BlockID,json=block_id,proto3" json:"block_id,omitempty"`
	// Body is the updated fund block.
	Body *FundBlock `protobuf:"bytes,3,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateFundBlockRequest) Reset() {
	*x = UpdateFundBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFundBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFundBlockRequest) ProtoMessage() {}

func (x *UpdateFundBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFundBlockRequest.ProtoReflect.Descriptor instead.
func (*UpdateFundBlockRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateFundBlockRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *UpdateFundBlockRequest) GetBlockID() string {
	if x != nil {
		return x.BlockID
	}
	return ""
}

func (x *UpdateFundBlockRequest) GetBody() *FundBlock {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteFundBlockRequest is the request to unblock funds from a deposit
// account.
type DeleteFundBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to unblock funds from.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// BlockID is the ID of the blocked fund to unblock.
	BlockID string `protobuf:"bytes,2,opt,name=BlockID,json=block_id,proto3" json:"block_id,omitempty"`
}

func (x *DeleteFundBlockRequest) Reset() {
	*x = DeleteFundBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFundBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFundBlockRequest) ProtoMessage() {}

func (x *DeleteFundBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFundBlockRequest.ProtoReflect.Descriptor instead.
func (*DeleteFundBlockRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteFundBlockRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *DeleteFundBlockRequest) GetBlockID() string {
	if x != nil {
		return x.BlockID
	}
	return ""
}

// ListFundBlocksResponse is the response for listing fund blocks.
type ListFundBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of blocks matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of blocks remaining in the list, including the
	// blocks in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Blocks is the list of fund blocks retrieved.
	Blocks []*FundBlock `protobuf:"bytes,3,rep,name=Blocks,json=blocks,proto3" json:"blocks,omitempty"`
	// NextPageToken is the page token of the next page of results.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFundBlocksResponse) Reset() {
	*x = ListFundBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFundBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFundBlocksResponse) ProtoMessage() {}

func (x *ListFundBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFundBlocksResponse.ProtoReflect.Descriptor instead.
func (*ListFundBlocksResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{16}
}

func (x *ListFundBlocksResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListFundBlocksResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListFundBlocksResponse) GetBlocks() []*FundBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *ListFundBlocksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetFundBlockRequest is the request for retrieving the specified block funds.
type GetFundBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to retrieve block funds for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// BlockID is the ID of the fund block to retrieve.
	BlockID string `protobuf:"bytes,2,opt,name=BlockID,json=block_id,proto3" json:"block_id,omitempty"`
}

func (x *GetFundBlockRequest) Reset() {
	*x = GetFundBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFundBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFundBlockRequest) ProtoMessage() {}

func (x *GetFundBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFundBlockRequest.ProtoReflect.Descriptor instead.
func (*GetFundBlockRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{17}
}

func (x *GetFundBlockRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetFundBlockRequest) GetBlockID() string {
	if x != nil {
		return x.BlockID
	}
	return ""
}

// CreateCardRequest is the request for creating a new card.
type CreateCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to create a card for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the card to create.
	Body *cards.Card `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateCardRequest) Reset() {
	*x = CreateCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCardRequest) ProtoMessage() {}

func (x *CreateCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCardRequest.ProtoReflect.Descriptor instead.
func (*CreateCardRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{18}
}

func (x *CreateCardRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateCardRequest) GetBody() *cards.Card {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListCardsRequest is the request for listing cards.
type ListCardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to list cards for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// PageToken is the page token of the page to retrieve.
	PageToken string `protobuf:"bytes,2,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of cards to retrieve per page.
	PageSize int32 `protobuf:"varint,3,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// OrderBy is the field to order the results by.
	OrderBy string `protobuf:"bytes,4,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
	// Filter is the filter to apply to the list.
	Filter string `protobuf:"bytes,5,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
}

func (x *ListCardsRequest) Reset() {
	*x = ListCardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCardsRequest) ProtoMessage() {}

func (x *ListCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCardsRequest.ProtoReflect.Descriptor instead.
func (*ListCardsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{19}
}

func (x *ListCardsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCardsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCardsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCardsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListCardsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ListCardsResponse is the response for listing cards.
type ListCardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of cards matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of cards remaining in the list, including the
	// cards in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Cards is the list of cards retrieved.
	Cards []*cards.Card `protobuf:"bytes,3,rep,name=Cards,json=cards,proto3" json:"cards,omitempty"`
	// NextPageToken is the page token of the next page of results.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListCardsResponse) Reset() {
	*x = ListCardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCardsResponse) ProtoMessage() {}

func (x *ListCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCardsResponse.ProtoReflect.Descriptor instead.
func (*ListCardsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{20}
}

func (x *ListCardsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCardsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListCardsResponse) GetCards() []*cards.Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *ListCardsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetCardRequest is the request for retrieving a card.
type GetCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to retrieve a card for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// CardID is the ID of the card to retrieve.
	CardID string `protobuf:"bytes,2,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
}

func (x *GetCardRequest) Reset() {
	*x = GetCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardRequest) ProtoMessage() {}

func (x *GetCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardRequest.ProtoReflect.Descriptor instead.
func (*GetCardRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{21}
}

func (x *GetCardRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetCardRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

// DeleteCardRequest is the request for deleting a card.
type DeleteCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to delete the card from.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// CardID is the ID of the card to delete.
	CardID string `protobuf:"bytes,2,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
}

func (x *DeleteCardRequest) Reset() {
	*x = DeleteCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCardRequest) ProtoMessage() {}

func (x *DeleteCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCardRequest.ProtoReflect.Descriptor instead.
func (*DeleteCardRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteCardRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *DeleteCardRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

// GetDocumentRequest is the request for retrieving the deposit account as a
// document.
type GetDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// TemplateID is the ID of the template to use for the document.
	TemplateID string `protobuf:"bytes,2,opt,name=TemplateID,json=template_id,proto3" json:"template_id,omitempty"`
	// StartTime is the start time of the transactions to generate transaction
	// history for.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=StartTime,json=start_time,proto3" json:"start_time,omitempty"`
	// EndTime is the end time of the transactions to generate transaction
	// history for.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=EndTime,json=end_time,proto3" json:"end_time,omitempty"`
}

func (x *GetDocumentRequest) Reset() {
	*x = GetDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentRequest) ProtoMessage() {}

func (x *GetDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{23}
}

func (x *GetDocumentRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetDocumentRequest) GetTemplateID() string {
	if x != nil {
		return x.TemplateID
	}
	return ""
}

func (x *GetDocumentRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetDocumentRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// GetLoanAccountsRequest is the request for retrieving loans for a deposit account.
type GetLoanAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to retrieve the loans for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *GetLoanAccountsRequest) Reset() {
	*x = GetLoanAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoanAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoanAccountsRequest) ProtoMessage() {}

func (x *GetLoanAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoanAccountsRequest.ProtoReflect.Descriptor instead.
func (*GetLoanAccountsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{24}
}

func (x *GetLoanAccountsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

// GetLoanAccountsResponse is the response for retrieving loans for a deposit account.
type GetLoanAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountIDs is the list of IDs of associated loan accounts.
	AccountIDs []string `protobuf:"bytes,1,rep,name=AccountIDs,json=account_ids,proto3" json:"account_ids,omitempty"`
}

func (x *GetLoanAccountsResponse) Reset() {
	*x = GetLoanAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoanAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoanAccountsResponse) ProtoMessage() {}

func (x *GetLoanAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoanAccountsResponse.ProtoReflect.Descriptor instead.
func (*GetLoanAccountsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{25}
}

func (x *GetLoanAccountsResponse) GetAccountIDs() []string {
	if x != nil {
		return x.AccountIDs
	}
	return nil
}

// AccruedInterest is the accrued interest information.
type AccruedInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IsPaymentHolidays is the flag to indicate that the interest accrues
	// on payment holidays.
	IsPaymentHolidays bool `protobuf:"varint,1,opt,name=IsPaymentHolidays,json=is_payment_holidays,proto3" json:"is_payment_holidays,omitempty"`
	// PaymentHolidaysRate is the amount of the Payment Holidays interest to
	// apply.
	PaymentHolidaysRate float64 `protobuf:"fixed64,2,opt,name=PaymentHolidaysRate,json=payment_holidays_rate,proto3" json:"payment_holidays_rate,omitempty"`
	// Notes is the extra notes on the accrued interest.
	Notes string `protobuf:"bytes,3,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// StartTime is the time when the interest begins to accrue.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=StartTime,json=start_time,proto3" json:"start_time,omitempty"`
}

func (x *AccruedInterest) Reset() {
	*x = AccruedInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccruedInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccruedInterest) ProtoMessage() {}

func (x *AccruedInterest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccruedInterest.ProtoReflect.Descriptor instead.
func (*AccruedInterest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{26}
}

func (x *AccruedInterest) GetIsPaymentHolidays() bool {
	if x != nil {
		return x.IsPaymentHolidays
	}
	return false
}

func (x *AccruedInterest) GetPaymentHolidaysRate() float64 {
	if x != nil {
		return x.PaymentHolidaysRate
	}
	return 0
}

func (x *AccruedInterest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *AccruedInterest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// ApplyInterestRequest is the request for applying a accrued interest to a
// deposit account.
type ApplyInterestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to apply interest to.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the applied interest information.
	Body *AccruedInterest `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *ApplyInterestRequest) Reset() {
	*x = ApplyInterestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyInterestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyInterestRequest) ProtoMessage() {}

func (x *ApplyInterestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyInterestRequest.ProtoReflect.Descriptor instead.
func (*ApplyInterestRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{27}
}

func (x *ApplyInterestRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ApplyInterestRequest) GetBody() *AccruedInterest {
	if x != nil {
		return x.Body
	}
	return nil
}

// ReopenDetails is the details for reopening a deposit account.
type ReopenDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Notes is the extra notes on the reopening.
	Notes string `protobuf:"bytes,1,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
}

func (x *ReopenDetails) Reset() {
	*x = ReopenDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReopenDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReopenDetails) ProtoMessage() {}

func (x *ReopenDetails) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReopenDetails.ProtoReflect.Descriptor instead.
func (*ReopenDetails) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{28}
}

func (x *ReopenDetails) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// ReopenRequest is the request for reopening a deposit account.
type ReopenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to reopen.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details for reopening the deposit account.
	Body *ReopenDetails `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *ReopenRequest) Reset() {
	*x = ReopenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReopenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReopenRequest) ProtoMessage() {}

func (x *ReopenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReopenRequest.ProtoReflect.Descriptor instead.
func (*ReopenRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{29}
}

func (x *ReopenRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ReopenRequest) GetBody() *ReopenDetails {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewMaturity is the information for a new deposit account maturity.
type NewMaturity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MatureTime is the time when the deposit account will begin.
	MatureTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=MatureTime,json=mature_time,proto3" json:"mature_time,omitempty"`
	// Notes is the extra notes on the maturity.
	Notes string `protobuf:"bytes,2,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
}

func (x *NewMaturity) Reset() {
	*x = NewMaturity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMaturity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMaturity) ProtoMessage() {}

func (x *NewMaturity) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMaturity.ProtoReflect.Descriptor instead.
func (*NewMaturity) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{30}
}

func (x *NewMaturity) GetMatureTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MatureTime
	}
	return nil
}

func (x *NewMaturity) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// MatureRequest is the request for starting the maturity period of a
// deposit account.
type MatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the information for the new maturity.
	Body *NewMaturity `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *MatureRequest) Reset() {
	*x = MatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatureRequest) ProtoMessage() {}

func (x *MatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatureRequest.ProtoReflect.Descriptor instead.
func (*MatureRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{31}
}

func (x *MatureRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *MatureRequest) GetBody() *NewMaturity {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteAccountRequest is the request for deleting a deposit account.
type DeleteAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to delete.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *DeleteAccountRequest) Reset() {
	*x = DeleteAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountRequest) ProtoMessage() {}

func (x *DeleteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteAccountRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

// UndoMaturityRequest is the request for undoing the maturity of a deposit
// account.
type UndoMaturityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the deposit account to undo the maturity for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *UndoMaturityRequest) Reset() {
	*x = UndoMaturityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoMaturityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoMaturityRequest) ProtoMessage() {}

func (x *UndoMaturityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoMaturityRequest.ProtoReflect.Descriptor instead.
func (*UndoMaturityRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{33}
}

func (x *UndoMaturityRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

// AccountDetails is the information of the account involved in a transaction.
type AccountDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the account ID details for the transaction.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// IDType is the type of the account ID.
	IDType string `protobuf:"bytes,2,opt,name=IDType,json=id_type,proto3" json:"id_type,omitempty"`
	// Name is the name of the account.
	Name string `protobuf:"bytes,3,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// CurrencyCode is the ISO3 currency code of the currency being used by the
	// account.
	CurrencyCode string `protobuf:"bytes,4,opt,name=CurrencyCode,json=currency_code,proto3" json:"currency_code,omitempty"`
	// Bic is the business identification code of the financial institution
	// servicing the transaction.
	Bic string `protobuf:"bytes,5,opt,name=Bic,json=bic,proto3" json:"bic,omitempty"`
}

func (x *AccountDetails) Reset() {
	*x = AccountDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDetails) ProtoMessage() {}

func (x *AccountDetails) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDetails.ProtoReflect.Descriptor instead.
func (*AccountDetails) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{34}
}

func (x *AccountDetails) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *AccountDetails) GetIDType() string {
	if x != nil {
		return x.IDType
	}
	return ""
}

func (x *AccountDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountDetails) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *AccountDetails) GetBic() string {
	if x != nil {
		return x.Bic
	}
	return ""
}

// PaymentIdentification is the payment identification details.
type PaymentIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EndToEndID is the ID assigned by the initiating party of the
	// transaction.
	EndToEndID string `protobuf:"bytes,1,opt,name=EndToEndID,json=end_to_end_id,proto3" json:"end_to_end_id,omitempty"`
	// InstructionID is the ID of the payment instruction.
	InstructionID string `protobuf:"bytes,2,opt,name=InstructionID,json=instruction_id,proto3" json:"instruction_id,omitempty"`
	// TransactionID is the ID assigned by the initiating party for the
	// transaction.
	TransactionID string `protobuf:"bytes,3,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
}

func (x *PaymentIdentification) Reset() {
	*x = PaymentIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIdentification) ProtoMessage() {}

func (x *PaymentIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIdentification.ProtoReflect.Descriptor instead.
func (*PaymentIdentification) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{35}
}

func (x *PaymentIdentification) GetEndToEndID() string {
	if x != nil {
		return x.EndToEndID
	}
	return ""
}

func (x *PaymentIdentification) GetInstructionID() string {
	if x != nil {
		return x.InstructionID
	}
	return ""
}

func (x *PaymentIdentification) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

// RemittanceInformation is information specifying the payment items intended
// to esttle.
type RemittanceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference is the reference of the creditor's underlying documents.
	Reference string `protobuf:"bytes,1,opt,name=Reference,json=reference,proto3" json:"reference,omitempty"`
	// ReferenceIssuer is the entity that assigns the reference type.
	ReferenceIssuer string `protobuf:"bytes,2,opt,name=ReferenceIssuer,json=reference_issuer,proto3" json:"reference_issuer,omitempty"`
	// ReferenceType is the type of the creditor reference.
	ReferenceType string `protobuf:"bytes,3,opt,name=ReferenceType,json=reference_type,proto3" json:"reference_type,omitempty"`
	// Other is other, unstructured informatino about the payment.
	Other string `protobuf:"bytes,4,opt,name=Other,json=other,proto3" json:"other,omitempty"`
}

func (x *RemittanceInformation) Reset() {
	*x = RemittanceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemittanceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemittanceInformation) ProtoMessage() {}

func (x *RemittanceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemittanceInformation.ProtoReflect.Descriptor instead.
func (*RemittanceInformation) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{36}
}

func (x *RemittanceInformation) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *RemittanceInformation) GetReferenceIssuer() string {
	if x != nil {
		return x.ReferenceIssuer
	}
	return ""
}

func (x *RemittanceInformation) GetReferenceType() string {
	if x != nil {
		return x.ReferenceType
	}
	return ""
}

func (x *RemittanceInformation) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

// Payment is the payment information and account identification details.
type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creditor is the payment creditor.
	Creditor *AccountDetails `protobuf:"bytes,1,opt,name=Creditor,json=creditor,proto3" json:"creditor,omitempty"`
	// Debtor is the payment debtor.
	Debtor *AccountDetails `protobuf:"bytes,2,opt,name=Debtor,json=debtor,proto3" json:"debtor,omitempty"`
	// Identification is the identifiers for the payment.
	Identification *PaymentIdentification `protobuf:"bytes,3,opt,name=Identification,json=identification,proto3" json:"identification,omitempty"`
	// ServiceLevel is the service level under which the transaction should be
	// processed.
	ServiceLevel string `protobuf:"bytes,4,opt,name=ServiceLevel,json=service_level,proto3" json:"service_level,omitempty"`
	// Remittance is information about the payment items that are intended to
	// match the items of the payment.
	Remittance *RemittanceInformation `protobuf:"bytes,5,opt,name=Remittance,json=remittance,proto3" json:"remittance,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP(), []int{37}
}

func (x *Payment) GetCreditor() *AccountDetails {
	if x != nil {
		return x.Creditor
	}
	return nil
}

func (x *Payment) GetDebtor() *AccountDetails {
	if x != nil {
		return x.Debtor
	}
	return nil
}

func (x *Payment) GetIdentification() *PaymentIdentification {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *Payment) GetServiceLevel() string {
	if x != nil {
		return x.ServiceLevel
	}
	return ""
}

func (x *Payment) GetRemittance() *RemittanceInformation {
	if x != nil {
		return x.Remittance
	}
	return nil
}

var File_bnk_to_core_api_v1_deposits_all_proto protoreflect.FileDescriptor

var file_bnk_to_core_api_v1_deposits_all_proto_rawDesc = []byte{
	0x0a, 0x25, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x6c,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x1a, 0x0b, 0x78, 0x6f, 0x2f, 0x78, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6e, 0x6b,
	0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x6e, 0x6b, 0x2e, 0x74,
	0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x4e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11,
	0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x6f,
	0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x12, 0x66, 0x0a, 0x1a, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x76,
	0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1c, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xe3, 0x06, 0x0a, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x42, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x3e, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x73, 0x44, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x64,
	0x75, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x48, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x4f, 0x0a, 0x0f, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10,
	0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x5a, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x44, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x12, 0x62, 0x0a, 0x18,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x6d, 0x0a, 0x1d, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x76, 0x65,
	0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x44, 0x75,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x20, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x3a,
	0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xfe, 0x02, 0x0a,
	0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x12, 0x54, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x62, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xdb, 0x04,
	0x0a, 0x15, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x0c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x05, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x54, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x54, 0x0a, 0x08, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0b, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x0b,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x11,
	0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x20, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x12, 0x47, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x92, 0x15, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0xda, 0x47, 0x02, 0x08, 0x02, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0a,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x72, 0x75,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1d, 0x2a,
	0x1b, 0x0a, 0x0f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x52, 0x12, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x12, 0x57, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x65, 0x6e, 0x74,
	0x72, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1c, 0x2a, 0x1a, 0x0a, 0x0e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x12, 0x08, 0x43, 0x65, 0x6e,
	0x74, 0x72, 0x65, 0x49, 0x44, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x16,
	0x2a, 0x14, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x08, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x20,
	0x2a, 0x1e, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x52, 0x14, 0x72, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1d, 0x2a, 0x1b, 0x0a, 0x13, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x64, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x10,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x74, 0x0a, 0x15, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x67, 0x0a, 0x11,
	0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x26, 0x2a, 0x24, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x64, 0x0a, 0x16, 0x57, 0x69, 0x74,
	0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1c, 0x2a, 0x18, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x30, 0x01, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x12,
	0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x4b, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a,
	0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a,
	0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x1b, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x1e, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x53, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x10, 0x61, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x4d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x92, 0x04, 0x0a, 0x09, 0x46,
	0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x02, 0x08, 0x02, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0xda, 0x47, 0x1f, 0x2a, 0x1d, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x49, 0x0a, 0x0c, 0x53, 0x65, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x62, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a,
	0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe9, 0x01, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x46,
	0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x72, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xea, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a,
	0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x6f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe4, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x68, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x6b, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x4e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x83, 0x02, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x11, 0x49, 0x73, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x13, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x73, 0x12, 0x3e, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x14,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x4a, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x3e, 0x0a, 0x0d, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47,
	0x02, 0x10, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x48, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6f, 0x70, 0x65,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x47, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x3a, 0x0b, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x4d,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x73, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x49, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x48, 0x0a, 0x13, 0x55, 0x6e, 0x64, 0x6f, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xdc, 0x01, 0x0a,
	0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x49, 0x44,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x03, 0x42, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x62, 0x69, 0x63, 0x3a, 0x0b,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x15,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x54, 0x6f, 0x45, 0x6e,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0xad, 0x03, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x51, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x06, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x64, 0x65, 0x62, 0x74,
	0x6f, 0x72, 0x12, 0x64, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5c, 0x0a, 0x0a, 0x52, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x2a, 0xed, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x0f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10,
	0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0e, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x17, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x41, 0x72, 0x72, 0x65,
	0x61, 0x72, 0x73, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x4d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x44, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x74, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x10,
	0x08, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x6e, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x0a, 0x1a, 0x02, 0x08, 0x00,
	0x1a, 0x02, 0x18, 0x00, 0x2a, 0x85, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x01,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x53, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x17, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x3c, 0x0a, 0x10,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x09, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x10, 0x00, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x74, 0x65,
	0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x5b, 0x0a, 0x0a, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x53, 0x65, 0x69,
	0x7a, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x53, 0x65, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x03, 0x1a,
	0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x32, 0x9c, 0x19, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x29, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x28, 0x00, 0x30,
	0x00, 0x12, 0x98, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0x93, 0x01, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2f, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00,
	0x30, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x35, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x21, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x28, 0x00, 0x30, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x2f, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x28, 0x00, 0x12, 0xac, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x3c, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x28, 0x00, 0x30,
	0x00, 0x12, 0xb1, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x40, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x7d, 0x28, 0x00,
	0x30, 0x00, 0x12, 0xb6, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x46, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x1a, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x40, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f,
	0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0x99,
	0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x22, 0x3b, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x27, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa1, 0x01, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x35, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0x96,
	0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x22, 0x3e, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3e, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0x9a,
	0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x40, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x64, 0x6f, 0x63, 0x2f, 0x7b, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb7, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x28, 0x00, 0x30, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x43, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x28, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6f, 0x70,
	0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3c, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0x28, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x7d, 0x3a, 0x72, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x28, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x06,
	0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3c, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x28, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x28, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x55, 0x6e, 0x64,
	0x6f, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x3c, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x2a,
	0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x7d, 0x3a, 0x75, 0x6e, 0x64, 0x6f, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x28,
	0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0x99, 0x01, 0x0a, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x24, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x3b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x80, 0x01,
	0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01,
	0xd0, 0x02, 0x00, 0x92, 0x41, 0x3c, 0x0a, 0x03, 0x32, 0x2e, 0x30, 0x12, 0x0e, 0x0a, 0x08, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x32, 0x02, 0x76, 0x31, 0x2a, 0x01, 0x02, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bnk_to_core_api_v1_deposits_all_proto_rawDescOnce sync.Once
	file_bnk_to_core_api_v1_deposits_all_proto_rawDescData = file_bnk_to_core_api_v1_deposits_all_proto_rawDesc
)

func file_bnk_to_core_api_v1_deposits_all_proto_rawDescGZIP() []byte {
	file_bnk_to_core_api_v1_deposits_all_proto_rawDescOnce.Do(func() {
		file_bnk_to_core_api_v1_deposits_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_bnk_to_core_api_v1_deposits_all_proto_rawDescData)
	})
	return file_bnk_to_core_api_v1_deposits_all_proto_rawDescData
}

var (
	file_bnk_to_core_api_v1_deposits_all_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
	file_bnk_to_core_api_v1_deposits_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 38)
	file_bnk_to_core_api_v1_deposits_all_proto_goTypes   = []interface{}{
		(AccountState)(0),                        // 0: openbank.core.v1.deposits.AccountState
		(AccountType)(0),                         // 1: openbank.core.v1.deposits.AccountType
		(InterestRateType)(0),                    // 2: openbank.core.v1.deposits.InterestRateType
		(BlockState)(0),                          // 3: openbank.core.v1.deposits.BlockState
		(*AccruedAmounts)(nil),                   // 4: openbank.core.v1.deposits.AccruedAmounts
		(*Balances)(nil),                         // 5: openbank.core.v1.deposits.Balances
		(*InternalControls)(nil),                 // 6: openbank.core.v1.deposits.InternalControls
		(*OverdraftRateSettings)(nil),            // 7: openbank.core.v1.deposits.OverdraftRateSettings
		(*OverdraftSettings)(nil),                // 8: openbank.core.v1.deposits.OverdraftSettings
		(*Account)(nil),                          // 9: openbank.core.v1.deposits.Account
		(*FundBlock)(nil),                        // 10: openbank.core.v1.deposits.FundBlock
		(*CreateAccountRequest)(nil),             // 11: openbank.core.v1.deposits.CreateAccountRequest
		(*ListAccountsRequest)(nil),              // 12: openbank.core.v1.deposits.ListAccountsRequest
		(*ListAccountsResponse)(nil),             // 13: openbank.core.v1.deposits.ListAccountsResponse
		(*GetAccountRequest)(nil),                // 14: openbank.core.v1.deposits.GetAccountRequest
		(*UpdateAccountRequest)(nil),             // 15: openbank.core.v1.deposits.UpdateAccountRequest
		(*CreateFundBlockRequest)(nil),           // 16: openbank.core.v1.deposits.CreateFundBlockRequest
		(*ListFundBlocksRequest)(nil),            // 17: openbank.core.v1.deposits.ListFundBlocksRequest
		(*UpdateFundBlockRequest)(nil),           // 18: openbank.core.v1.deposits.UpdateFundBlockRequest
		(*DeleteFundBlockRequest)(nil),           // 19: openbank.core.v1.deposits.DeleteFundBlockRequest
		(*ListFundBlocksResponse)(nil),           // 20: openbank.core.v1.deposits.ListFundBlocksResponse
		(*GetFundBlockRequest)(nil),              // 21: openbank.core.v1.deposits.GetFundBlockRequest
		(*CreateCardRequest)(nil),                // 22: openbank.core.v1.deposits.CreateCardRequest
		(*ListCardsRequest)(nil),                 // 23: openbank.core.v1.deposits.ListCardsRequest
		(*ListCardsResponse)(nil),                // 24: openbank.core.v1.deposits.ListCardsResponse
		(*GetCardRequest)(nil),                   // 25: openbank.core.v1.deposits.GetCardRequest
		(*DeleteCardRequest)(nil),                // 26: openbank.core.v1.deposits.DeleteCardRequest
		(*GetDocumentRequest)(nil),               // 27: openbank.core.v1.deposits.GetDocumentRequest
		(*GetLoanAccountsRequest)(nil),           // 28: openbank.core.v1.deposits.GetLoanAccountsRequest
		(*GetLoanAccountsResponse)(nil),          // 29: openbank.core.v1.deposits.GetLoanAccountsResponse
		(*AccruedInterest)(nil),                  // 30: openbank.core.v1.deposits.AccruedInterest
		(*ApplyInterestRequest)(nil),             // 31: openbank.core.v1.deposits.ApplyInterestRequest
		(*ReopenDetails)(nil),                    // 32: openbank.core.v1.deposits.ReopenDetails
		(*ReopenRequest)(nil),                    // 33: openbank.core.v1.deposits.ReopenRequest
		(*NewMaturity)(nil),                      // 34: openbank.core.v1.deposits.NewMaturity
		(*MatureRequest)(nil),                    // 35: openbank.core.v1.deposits.MatureRequest
		(*DeleteAccountRequest)(nil),             // 36: openbank.core.v1.deposits.DeleteAccountRequest
		(*UndoMaturityRequest)(nil),              // 37: openbank.core.v1.deposits.UndoMaturityRequest
		(*AccountDetails)(nil),                   // 38: openbank.core.v1.deposits.AccountDetails
		(*PaymentIdentification)(nil),            // 39: openbank.core.v1.deposits.PaymentIdentification
		(*RemittanceInformation)(nil),            // 40: openbank.core.v1.deposits.RemittanceInformation
		(*Payment)(nil),                          // 41: openbank.core.v1.deposits.Payment
		(*v1.Amount)(nil),                        // 42: openbank.core.v1.Amount
		(*durationpb.Duration)(nil),              // 43: google.protobuf.Duration
		(*timestamppb.Timestamp)(nil),            // 44: google.protobuf.Timestamp
		(products.InterestRateTerms)(0),          // 45: openbank.core.v1.products.InterestRateTerms
		(*products.InterestRateTier)(nil),        // 46: openbank.core.v1.products.InterestRateTier
		(v1.Entity)(0),                           // 47: openbank.core.v1.Entity
		(*products.DepositInterestSettings)(nil), // 48: openbank.core.v1.products.DepositInterestSettings
		(*cards.Card)(nil),                       // 49: openbank.core.v1.cards.Card
		(*emptypb.Empty)(nil),                    // 50: google.protobuf.Empty
		(*v1.File)(nil),                          // 51: openbank.core.v1.File
	}
)

var file_bnk_to_core_api_v1_deposits_all_proto_depIdxs = []int32{
	42, // 0: openbank.core.v1.deposits.AccruedAmounts.Interest:type_name -> openbank.core.v1.Amount
	42, // 1: openbank.core.v1.deposits.AccruedAmounts.NegativeInterest:type_name -> openbank.core.v1.Amount
	42, // 2: openbank.core.v1.deposits.AccruedAmounts.OverdraftInterest:type_name -> openbank.core.v1.Amount
	42, // 3: openbank.core.v1.deposits.AccruedAmounts.TechnicalOverdraftInterest:type_name -> openbank.core.v1.Amount
	42, // 4: openbank.core.v1.deposits.Balances.Total:type_name -> openbank.core.v1.Amount
	42, // 5: openbank.core.v1.deposits.Balances.Available:type_name -> openbank.core.v1.Amount
	42, // 6: openbank.core.v1.deposits.Balances.Locked:type_name -> openbank.core.v1.Amount
	42, // 7: openbank.core.v1.deposits.Balances.Blocked:type_name -> openbank.core.v1.Amount
	42, // 8: openbank.core.v1.deposits.Balances.FeesDue:type_name -> openbank.core.v1.Amount
	42, // 9: openbank.core.v1.deposits.Balances.ForwardAvailable:type_name -> openbank.core.v1.Amount
	42, // 10: openbank.core.v1.deposits.Balances.Hold:type_name -> openbank.core.v1.Amount
	42, // 11: openbank.core.v1.deposits.Balances.OverdraftAmount:type_name -> openbank.core.v1.Amount
	42, // 12: openbank.core.v1.deposits.Balances.OverdraftInterestDue:type_name -> openbank.core.v1.Amount
	42, // 13: openbank.core.v1.deposits.Balances.TechnicalOverdraftAmount:type_name -> openbank.core.v1.Amount
	42, // 14: openbank.core.v1.deposits.Balances.TechnicalOverdraftInterestDue:type_name -> openbank.core.v1.Amount
	42, // 15: openbank.core.v1.deposits.InternalControls.MaxDepositBalance:type_name -> openbank.core.v1.Amount
	42, // 16: openbank.core.v1.deposits.InternalControls.MaxWithdrawalAmount:type_name -> openbank.core.v1.Amount
	42, // 17: openbank.core.v1.deposits.InternalControls.RecommendedDepositAmount:type_name -> openbank.core.v1.Amount
	42, // 18: openbank.core.v1.deposits.InternalControls.TargetAmount:type_name -> openbank.core.v1.Amount
	43, // 19: openbank.core.v1.deposits.OverdraftRateSettings.Frequency:type_name -> google.protobuf.Duration
	44, // 20: openbank.core.v1.deposits.OverdraftRateSettings.PaymentDates:type_name -> google.protobuf.Timestamp
	45, // 21: openbank.core.v1.deposits.OverdraftRateSettings.Terms:type_name -> openbank.core.v1.products.InterestRateTerms
	46, // 22: openbank.core.v1.deposits.OverdraftRateSettings.Tiers:type_name -> openbank.core.v1.products.InterestRateTier
	43, // 23: openbank.core.v1.deposits.OverdraftRateSettings.ReviewFrequency:type_name -> google.protobuf.Duration
	2,  // 24: openbank.core.v1.deposits.OverdraftRateSettings.RateType:type_name -> openbank.core.v1.deposits.InterestRateType
	44, // 25: openbank.core.v1.deposits.OverdraftSettings.ExpireTime:type_name -> google.protobuf.Timestamp
	42, // 26: openbank.core.v1.deposits.OverdraftSettings.Limit:type_name -> openbank.core.v1.Amount
	47, // 27: openbank.core.v1.deposits.Account.HolderType:type_name -> openbank.core.v1.Entity
	0,  // 28: openbank.core.v1.deposits.Account.State:type_name -> openbank.core.v1.deposits.AccountState
	1,  // 29: openbank.core.v1.deposits.Account.Type:type_name -> openbank.core.v1.deposits.AccountType
	4,  // 30: openbank.core.v1.deposits.Account.AccruedAmounts:type_name -> openbank.core.v1.deposits.AccruedAmounts
	5,  // 31: openbank.core.v1.deposits.Account.Balances:type_name -> openbank.core.v1.deposits.Balances
	48, // 32: openbank.core.v1.deposits.Account.InterestSettings:type_name -> openbank.core.v1.products.DepositInterestSettings
	6,  // 33: openbank.core.v1.deposits.Account.InternalControls:type_name -> openbank.core.v1.deposits.InternalControls
	7,  // 34: openbank.core.v1.deposits.Account.OverdraftRateSettings:type_name -> openbank.core.v1.deposits.OverdraftRateSettings
	8,  // 35: openbank.core.v1.deposits.Account.OverdraftSettings:type_name -> openbank.core.v1.deposits.OverdraftSettings
	44, // 36: openbank.core.v1.deposits.Account.CreateTime:type_name -> google.protobuf.Timestamp
	44, // 37: openbank.core.v1.deposits.Account.ApproveTime:type_name -> google.protobuf.Timestamp
	44, // 38: openbank.core.v1.deposits.Account.ActivateTime:type_name -> google.protobuf.Timestamp
	44, // 39: openbank.core.v1.deposits.Account.UpdateTime:type_name -> google.protobuf.Timestamp
	44, // 40: openbank.core.v1.deposits.Account.CloseTime:type_name -> google.protobuf.Timestamp
	44, // 41: openbank.core.v1.deposits.Account.AppraiseTime:type_name -> google.protobuf.Timestamp
	44, // 42: openbank.core.v1.deposits.Account.InterestCalculateTime:type_name -> google.protobuf.Timestamp
	44, // 43: openbank.core.v1.deposits.Account.InterestStoreTime:type_name -> google.protobuf.Timestamp
	44, // 44: openbank.core.v1.deposits.Account.OverdraftInterestReviewTime:type_name -> google.protobuf.Timestamp
	44, // 45: openbank.core.v1.deposits.Account.ArrearsSetTime:type_name -> google.protobuf.Timestamp
	44, // 46: openbank.core.v1.deposits.Account.LockTime:type_name -> google.protobuf.Timestamp
	44, // 47: openbank.core.v1.deposits.Account.MatureTime:type_name -> google.protobuf.Timestamp
	42, // 48: openbank.core.v1.deposits.FundBlock.Amount:type_name -> openbank.core.v1.Amount
	42, // 49: openbank.core.v1.deposits.FundBlock.SeizedAmount:type_name -> openbank.core.v1.Amount
	3,  // 50: openbank.core.v1.deposits.FundBlock.State:type_name -> openbank.core.v1.deposits.BlockState
	44, // 51: openbank.core.v1.deposits.FundBlock.CreateTime:type_name -> google.protobuf.Timestamp
	44, // 52: openbank.core.v1.deposits.FundBlock.UpdateTime:type_name -> google.protobuf.Timestamp
	9,  // 53: openbank.core.v1.deposits.CreateAccountRequest.Body:type_name -> openbank.core.v1.deposits.Account
	9,  // 54: openbank.core.v1.deposits.ListAccountsResponse.Accounts:type_name -> openbank.core.v1.deposits.Account
	9,  // 55: openbank.core.v1.deposits.UpdateAccountRequest.Body:type_name -> openbank.core.v1.deposits.Account
	10, // 56: openbank.core.v1.deposits.CreateFundBlockRequest.Body:type_name -> openbank.core.v1.deposits.FundBlock
	10, // 57: openbank.core.v1.deposits.UpdateFundBlockRequest.Body:type_name -> openbank.core.v1.deposits.FundBlock
	10, // 58: openbank.core.v1.deposits.ListFundBlocksResponse.Blocks:type_name -> openbank.core.v1.deposits.FundBlock
	49, // 59: openbank.core.v1.deposits.CreateCardRequest.Body:type_name -> openbank.core.v1.cards.Card
	49, // 60: openbank.core.v1.deposits.ListCardsResponse.Cards:type_name -> openbank.core.v1.cards.Card
	44, // 61: openbank.core.v1.deposits.GetDocumentRequest.StartTime:type_name -> google.protobuf.Timestamp
	44, // 62: openbank.core.v1.deposits.GetDocumentRequest.EndTime:type_name -> google.protobuf.Timestamp
	44, // 63: openbank.core.v1.deposits.AccruedInterest.StartTime:type_name -> google.protobuf.Timestamp
	30, // 64: openbank.core.v1.deposits.ApplyInterestRequest.Body:type_name -> openbank.core.v1.deposits.AccruedInterest
	32, // 65: openbank.core.v1.deposits.ReopenRequest.Body:type_name -> openbank.core.v1.deposits.ReopenDetails
	44, // 66: openbank.core.v1.deposits.NewMaturity.MatureTime:type_name -> google.protobuf.Timestamp
	34, // 67: openbank.core.v1.deposits.MatureRequest.Body:type_name -> openbank.core.v1.deposits.NewMaturity
	38, // 68: openbank.core.v1.deposits.Payment.Creditor:type_name -> openbank.core.v1.deposits.AccountDetails
	38, // 69: openbank.core.v1.deposits.Payment.Debtor:type_name -> openbank.core.v1.deposits.AccountDetails
	39, // 70: openbank.core.v1.deposits.Payment.Identification:type_name -> openbank.core.v1.deposits.PaymentIdentification
	40, // 71: openbank.core.v1.deposits.Payment.Remittance:type_name -> openbank.core.v1.deposits.RemittanceInformation
	11, // 72: openbank.core.v1.deposits.DepositsService.CreateAccount:input_type -> openbank.core.v1.deposits.CreateAccountRequest
	12, // 73: openbank.core.v1.deposits.DepositsService.ListAccounts:input_type -> openbank.core.v1.deposits.ListAccountsRequest
	14, // 74: openbank.core.v1.deposits.DepositsService.GetAccount:input_type -> openbank.core.v1.deposits.GetAccountRequest
	15, // 75: openbank.core.v1.deposits.DepositsService.UpdateAccount:input_type -> openbank.core.v1.deposits.UpdateAccountRequest
	36, // 76: openbank.core.v1.deposits.DepositsService.DeleteAccount:input_type -> openbank.core.v1.deposits.DeleteAccountRequest
	16, // 77: openbank.core.v1.deposits.DepositsService.CreateFundBlock:input_type -> openbank.core.v1.deposits.CreateFundBlockRequest
	17, // 78: openbank.core.v1.deposits.DepositsService.ListFundBlocks:input_type -> openbank.core.v1.deposits.ListFundBlocksRequest
	21, // 79: openbank.core.v1.deposits.DepositsService.GetFundBlock:input_type -> openbank.core.v1.deposits.GetFundBlockRequest
	18, // 80: openbank.core.v1.deposits.DepositsService.UpdateFundBlock:input_type -> openbank.core.v1.deposits.UpdateFundBlockRequest
	19, // 81: openbank.core.v1.deposits.DepositsService.DeleteFundBlock:input_type -> openbank.core.v1.deposits.DeleteFundBlockRequest
	22, // 82: openbank.core.v1.deposits.DepositsService.CreateCard:input_type -> openbank.core.v1.deposits.CreateCardRequest
	23, // 83: openbank.core.v1.deposits.DepositsService.ListCards:input_type -> openbank.core.v1.deposits.ListCardsRequest
	25, // 84: openbank.core.v1.deposits.DepositsService.GetCard:input_type -> openbank.core.v1.deposits.GetCardRequest
	26, // 85: openbank.core.v1.deposits.DepositsService.DeleteCard:input_type -> openbank.core.v1.deposits.DeleteCardRequest
	27, // 86: openbank.core.v1.deposits.DepositsService.GetDocument:input_type -> openbank.core.v1.deposits.GetDocumentRequest
	28, // 87: openbank.core.v1.deposits.DepositsService.GetFundedAccounts:input_type -> openbank.core.v1.deposits.GetLoanAccountsRequest
	31, // 88: openbank.core.v1.deposits.DepositsService.ApplyInterest:input_type -> openbank.core.v1.deposits.ApplyInterestRequest
	33, // 89: openbank.core.v1.deposits.DepositsService.ReopenAccount:input_type -> openbank.core.v1.deposits.ReopenRequest
	35, // 90: openbank.core.v1.deposits.DepositsService.Mature:input_type -> openbank.core.v1.deposits.MatureRequest
	37, // 91: openbank.core.v1.deposits.DepositsService.UndoMaturity:input_type -> openbank.core.v1.deposits.UndoMaturityRequest
	9,  // 92: openbank.core.v1.deposits.DepositsService.CreateAccount:output_type -> openbank.core.v1.deposits.Account
	13, // 93: openbank.core.v1.deposits.DepositsService.ListAccounts:output_type -> openbank.core.v1.deposits.ListAccountsResponse
	9,  // 94: openbank.core.v1.deposits.DepositsService.GetAccount:output_type -> openbank.core.v1.deposits.Account
	9,  // 95: openbank.core.v1.deposits.DepositsService.UpdateAccount:output_type -> openbank.core.v1.deposits.Account
	50, // 96: openbank.core.v1.deposits.DepositsService.DeleteAccount:output_type -> google.protobuf.Empty
	10, // 97: openbank.core.v1.deposits.DepositsService.CreateFundBlock:output_type -> openbank.core.v1.deposits.FundBlock
	20, // 98: openbank.core.v1.deposits.DepositsService.ListFundBlocks:output_type -> openbank.core.v1.deposits.ListFundBlocksResponse
	10, // 99: openbank.core.v1.deposits.DepositsService.GetFundBlock:output_type -> openbank.core.v1.deposits.FundBlock
	10, // 100: openbank.core.v1.deposits.DepositsService.UpdateFundBlock:output_type -> openbank.core.v1.deposits.FundBlock
	50, // 101: openbank.core.v1.deposits.DepositsService.DeleteFundBlock:output_type -> google.protobuf.Empty
	49, // 102: openbank.core.v1.deposits.DepositsService.CreateCard:output_type -> openbank.core.v1.cards.Card
	24, // 103: openbank.core.v1.deposits.DepositsService.ListCards:output_type -> openbank.core.v1.deposits.ListCardsResponse
	49, // 104: openbank.core.v1.deposits.DepositsService.GetCard:output_type -> openbank.core.v1.cards.Card
	50, // 105: openbank.core.v1.deposits.DepositsService.DeleteCard:output_type -> google.protobuf.Empty
	51, // 106: openbank.core.v1.deposits.DepositsService.GetDocument:output_type -> openbank.core.v1.File
	29, // 107: openbank.core.v1.deposits.DepositsService.GetFundedAccounts:output_type -> openbank.core.v1.deposits.GetLoanAccountsResponse
	50, // 108: openbank.core.v1.deposits.DepositsService.ApplyInterest:output_type -> google.protobuf.Empty
	50, // 109: openbank.core.v1.deposits.DepositsService.ReopenAccount:output_type -> google.protobuf.Empty
	50, // 110: openbank.core.v1.deposits.DepositsService.Mature:output_type -> google.protobuf.Empty
	50, // 111: openbank.core.v1.deposits.DepositsService.UndoMaturity:output_type -> google.protobuf.Empty
	92, // [92:112] is the sub-list for method output_type
	72, // [72:92] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_bnk_to_core_api_v1_deposits_all_proto_init() }
func file_bnk_to_core_api_v1_deposits_all_proto_init() {
	if File_bnk_to_core_api_v1_deposits_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccruedAmounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalControls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverdraftRateSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverdraftSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFundBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFundBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFundBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFundBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFundBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFundBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoanAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoanAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccruedInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyInterestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReopenDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReopenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMaturity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoMaturityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemittanceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_deposits_all_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bnk_to_core_api_v1_deposits_all_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bnk_to_core_api_v1_deposits_all_proto_goTypes,
		DependencyIndexes: file_bnk_to_core_api_v1_deposits_all_proto_depIdxs,
		EnumInfos:         file_bnk_to_core_api_v1_deposits_all_proto_enumTypes,
		MessageInfos:      file_bnk_to_core_api_v1_deposits_all_proto_msgTypes,
	}.Build()
	File_bnk_to_core_api_v1_deposits_all_proto = out.File
	file_bnk_to_core_api_v1_deposits_all_proto_rawDesc = nil
	file_bnk_to_core_api_v1_deposits_all_proto_goTypes = nil
	file_bnk_to_core_api_v1_deposits_all_proto_depIdxs = nil
}
