// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bnk.to/core/api/v1/consumers/all.proto

package consumers

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsumersServiceClient is the client API for ConsumersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumersServiceClient interface {
	// CreateConsumer creates a new API consumer.
	CreateConsumer(ctx context.Context, in *CreateConsumerRequest, opts ...grpc.CallOption) (*Consumer, error)
	// ListConsumers lists API consumers.
	ListConsumers(ctx context.Context, in *ListConsumersRequest, opts ...grpc.CallOption) (*ListConsumersResponse, error)
	// GetConsumer retrieves the specified API consumer.
	GetConsumer(ctx context.Context, in *GetConsumerRequest, opts ...grpc.CallOption) (*Consumer, error)
	// UpdateConsumer updates an existing API consumer.
	UpdateConsumer(ctx context.Context, in *UpdateConsumerRequest, opts ...grpc.CallOption) (*Consumer, error)
	// DeleteConsumer deletes an existing API consumer.
	DeleteConsumer(ctx context.Context, in *DeleteConsumerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateAPIKey creates a new API key.
	CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// ListAPIKeys lists API keys.
	ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error)
	// GetAPIKey retrieves the specified API key.
	GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// DeleteAPIKey deletes an API key.
	DeleteAPIKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type consumersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumersServiceClient(cc grpc.ClientConnInterface) ConsumersServiceClient {
	return &consumersServiceClient{cc}
}

func (c *consumersServiceClient) CreateConsumer(ctx context.Context, in *CreateConsumerRequest, opts ...grpc.CallOption) (*Consumer, error) {
	out := new(Consumer)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.consumers.ConsumersService/CreateConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumersServiceClient) ListConsumers(ctx context.Context, in *ListConsumersRequest, opts ...grpc.CallOption) (*ListConsumersResponse, error) {
	out := new(ListConsumersResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.consumers.ConsumersService/ListConsumers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumersServiceClient) GetConsumer(ctx context.Context, in *GetConsumerRequest, opts ...grpc.CallOption) (*Consumer, error) {
	out := new(Consumer)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.consumers.ConsumersService/GetConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumersServiceClient) UpdateConsumer(ctx context.Context, in *UpdateConsumerRequest, opts ...grpc.CallOption) (*Consumer, error) {
	out := new(Consumer)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.consumers.ConsumersService/UpdateConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumersServiceClient) DeleteConsumer(ctx context.Context, in *DeleteConsumerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.consumers.ConsumersService/DeleteConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumersServiceClient) CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.consumers.ConsumersService/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumersServiceClient) ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error) {
	out := new(ListAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.consumers.ConsumersService/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumersServiceClient) GetAPIKey(ctx context.Context, in *GetAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.consumers.ConsumersService/GetAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumersServiceClient) DeleteAPIKey(ctx context.Context, in *DeleteAPIKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.consumers.ConsumersService/DeleteAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumersServiceServer is the server API for ConsumersService service.
// All implementations must embed UnimplementedConsumersServiceServer
// for forward compatibility
type ConsumersServiceServer interface {
	// CreateConsumer creates a new API consumer.
	CreateConsumer(context.Context, *CreateConsumerRequest) (*Consumer, error)
	// ListConsumers lists API consumers.
	ListConsumers(context.Context, *ListConsumersRequest) (*ListConsumersResponse, error)
	// GetConsumer retrieves the specified API consumer.
	GetConsumer(context.Context, *GetConsumerRequest) (*Consumer, error)
	// UpdateConsumer updates an existing API consumer.
	UpdateConsumer(context.Context, *UpdateConsumerRequest) (*Consumer, error)
	// DeleteConsumer deletes an existing API consumer.
	DeleteConsumer(context.Context, *DeleteConsumerRequest) (*emptypb.Empty, error)
	// CreateAPIKey creates a new API key.
	CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*APIKey, error)
	// ListAPIKeys lists API keys.
	ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error)
	// GetAPIKey retrieves the specified API key.
	GetAPIKey(context.Context, *GetAPIKeyRequest) (*APIKey, error)
	// DeleteAPIKey deletes an API key.
	DeleteAPIKey(context.Context, *DeleteAPIKeyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedConsumersServiceServer()
}

// UnimplementedConsumersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsumersServiceServer struct{}

func (UnimplementedConsumersServiceServer) CreateConsumer(context.Context, *CreateConsumerRequest) (*Consumer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumer not implemented")
}

func (UnimplementedConsumersServiceServer) ListConsumers(context.Context, *ListConsumersRequest) (*ListConsumersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumers not implemented")
}

func (UnimplementedConsumersServiceServer) GetConsumer(context.Context, *GetConsumerRequest) (*Consumer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumer not implemented")
}

func (UnimplementedConsumersServiceServer) UpdateConsumer(context.Context, *UpdateConsumerRequest) (*Consumer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumer not implemented")
}

func (UnimplementedConsumersServiceServer) DeleteConsumer(context.Context, *DeleteConsumerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumer not implemented")
}

func (UnimplementedConsumersServiceServer) CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}

func (UnimplementedConsumersServiceServer) ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}

func (UnimplementedConsumersServiceServer) GetAPIKey(context.Context, *GetAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKey not implemented")
}

func (UnimplementedConsumersServiceServer) DeleteAPIKey(context.Context, *DeleteAPIKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}
func (UnimplementedConsumersServiceServer) mustEmbedUnimplementedConsumersServiceServer() {}

// UnsafeConsumersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumersServiceServer will
// result in compilation errors.
type UnsafeConsumersServiceServer interface {
	mustEmbedUnimplementedConsumersServiceServer()
}

func RegisterConsumersServiceServer(s grpc.ServiceRegistrar, srv ConsumersServiceServer) {
	s.RegisterService(&ConsumersService_ServiceDesc, srv)
}

func _ConsumersService_CreateConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumersServiceServer).CreateConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.consumers.ConsumersService/CreateConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumersServiceServer).CreateConsumer(ctx, req.(*CreateConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumersService_ListConsumers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumersServiceServer).ListConsumers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.consumers.ConsumersService/ListConsumers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumersServiceServer).ListConsumers(ctx, req.(*ListConsumersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumersService_GetConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumersServiceServer).GetConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.consumers.ConsumersService/GetConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumersServiceServer).GetConsumer(ctx, req.(*GetConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumersService_UpdateConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumersServiceServer).UpdateConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.consumers.ConsumersService/UpdateConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumersServiceServer).UpdateConsumer(ctx, req.(*UpdateConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumersService_DeleteConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumersServiceServer).DeleteConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.consumers.ConsumersService/DeleteConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumersServiceServer).DeleteConsumer(ctx, req.(*DeleteConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumersService_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumersServiceServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.consumers.ConsumersService/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumersServiceServer).CreateAPIKey(ctx, req.(*CreateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumersService_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumersServiceServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.consumers.ConsumersService/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumersServiceServer).ListAPIKeys(ctx, req.(*ListAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumersService_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumersServiceServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.consumers.ConsumersService/GetAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumersServiceServer).GetAPIKey(ctx, req.(*GetAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumersService_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumersServiceServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.consumers.ConsumersService/DeleteAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumersServiceServer).DeleteAPIKey(ctx, req.(*DeleteAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsumersService_ServiceDesc is the grpc.ServiceDesc for ConsumersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.consumers.ConsumersService",
	HandlerType: (*ConsumersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConsumer",
			Handler:    _ConsumersService_CreateConsumer_Handler,
		},
		{
			MethodName: "ListConsumers",
			Handler:    _ConsumersService_ListConsumers_Handler,
		},
		{
			MethodName: "GetConsumer",
			Handler:    _ConsumersService_GetConsumer_Handler,
		},
		{
			MethodName: "UpdateConsumer",
			Handler:    _ConsumersService_UpdateConsumer_Handler,
		},
		{
			MethodName: "DeleteConsumer",
			Handler:    _ConsumersService_DeleteConsumer_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _ConsumersService_CreateAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _ConsumersService_ListAPIKeys_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _ConsumersService_GetAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _ConsumersService_DeleteAPIKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/consumers/all.proto",
}
