// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bnk.to/core/api/v1/loans/all.proto

package loans

import (
	context "context"

	v1 "bnk.to/core/api/v1"
	cards "bnk.to/core/api/v1/cards"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoansServiceClient is the client API for LoansService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoansServiceClient interface {
	// CreateAccount creates a new loan account.
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// ListAccounts lists loan accounts.
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// GetAccount retrieves the specified loan account.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// UpdateAccount updates the specified loan account.
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// DeleteAccount deletes the specified loan account.
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ApplyAccountLock applies a lock to a loan account's income sources.
	ApplyAccountLock(ctx context.Context, in *ApplyAccountLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ApplyAccountUnlock removes a lock from a loan account's income sources.
	ApplyAccountUnlock(ctx context.Context, in *ApplyAccountUnlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateCard creates a new card for an existing loan account.
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*cards.Card, error)
	// ListCards lists cards for a loan account.
	ListCards(ctx context.Context, in *ListCardsRequest, opts ...grpc.CallOption) (*ListCardsResponse, error)
	// GetCard retrieves the specified card from a loan account.
	// To retrieve other information on the card, use the cards package under
	// the Services section.
	GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*cards.Card, error)
	// DeleteCard deletes the specified card.
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateFunding creates a new funding source for an existing loan account.
	CreateFunding(ctx context.Context, in *CreateFundingRequest, opts ...grpc.CallOption) (*InvestorFund, error)
	// ListFundings lists funding sources for a loan account.
	ListFundings(ctx context.Context, in *ListFundingsRequest, opts ...grpc.CallOption) (*ListFundingsResponse, error)
	// GetFunding retrieves the specified funding source from a loan account.
	GetFunding(ctx context.Context, in *GetFundingRequest, opts ...grpc.CallOption) (*InvestorFund, error)
	// UpdateFunding updates the specified funding source on a loan account.
	UpdateFunding(ctx context.Context, in *UpdateFundingRequest, opts ...grpc.CallOption) (*InvestorFund, error)
	// DeleteFunding deletes the specified funding source.
	DeleteFunding(ctx context.Context, in *DeleteFundingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SellFunding sells the specified funding source to other investors. This
	// endpoint is used in P2P investor funding transactions for investors to
	// trade funds for liquidity.
	SellFunding(ctx context.Context, in *SellFundingRequest, opts ...grpc.CallOption) (*SellFundingResponse, error)
	// GetInstallment retrieves the specified installment from a loan account.
	GetInstallment(ctx context.Context, in *GetInstallmentRequest, opts ...grpc.CallOption) (*Installment, error)
	// ListInstallments lists installments for the specified loan account.
	// The account ID may be set to "-" to indicate all accounts, allowing a
	// search across all loan accounts.
	ListInstallments(ctx context.Context, in *ListInstallmentsRequest, opts ...grpc.CallOption) (*ListInstallmentsResponse, error)
	// ApplyInterest applies interest to an existing loan account.
	ApplyInterest(ctx context.Context, in *ApplyInterestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetDocument generates a document for a loan account.
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*v1.File, error)
	// GetSchedule retrieves a loan account schedule.
	GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*Schedule, error)
	// PreviewSchedule retrieves a preview of an account schedule based on the
	// provided account. This endpoint does not affect the state of the Core
	// Banking system.
	PreviewSchedule(ctx context.Context, in *PreviewScheduleRequest, opts ...grpc.CallOption) (*Schedule, error)
	// PreviewRepayment previews a repayment at a future date.
	PreviewRepayment(ctx context.Context, in *PreviewRepaymentRequest, opts ...grpc.CallOption) (*PreviewRepaymentResponse, error)
	// Refinance refinances a loan account.
	Refinance(ctx context.Context, in *RefinanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reschedule reschedules a loan account.
	Reschedule(ctx context.Context, in *RescheduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WriteOff writes off a loan account.
	WriteOff(ctx context.Context, in *WriteOffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UndoRefinance undoes a refinance action.
	UndoRefinance(ctx context.Context, in *UndoRefinanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UndoReschedule undoes a reschedule action.
	UndoReschedule(ctx context.Context, in *UndoRescheduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UndoWriteOff undoes a write off action.
	UndoWriteOff(ctx context.Context, in *UndoWriteOffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type loansServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoansServiceClient(cc grpc.ClientConnInterface) LoansServiceClient {
	return &loansServiceClient{cc}
}

func (c *loansServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) ApplyAccountLock(ctx context.Context, in *ApplyAccountLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/ApplyAccountLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) ApplyAccountUnlock(ctx context.Context, in *ApplyAccountUnlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/ApplyAccountUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*cards.Card, error) {
	out := new(cards.Card)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) ListCards(ctx context.Context, in *ListCardsRequest, opts ...grpc.CallOption) (*ListCardsResponse, error) {
	out := new(ListCardsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/ListCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*cards.Card, error) {
	out := new(cards.Card)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/GetCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) CreateFunding(ctx context.Context, in *CreateFundingRequest, opts ...grpc.CallOption) (*InvestorFund, error) {
	out := new(InvestorFund)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/CreateFunding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) ListFundings(ctx context.Context, in *ListFundingsRequest, opts ...grpc.CallOption) (*ListFundingsResponse, error) {
	out := new(ListFundingsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/ListFundings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) GetFunding(ctx context.Context, in *GetFundingRequest, opts ...grpc.CallOption) (*InvestorFund, error) {
	out := new(InvestorFund)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/GetFunding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) UpdateFunding(ctx context.Context, in *UpdateFundingRequest, opts ...grpc.CallOption) (*InvestorFund, error) {
	out := new(InvestorFund)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/UpdateFunding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) DeleteFunding(ctx context.Context, in *DeleteFundingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/DeleteFunding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) SellFunding(ctx context.Context, in *SellFundingRequest, opts ...grpc.CallOption) (*SellFundingResponse, error) {
	out := new(SellFundingResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/SellFunding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) GetInstallment(ctx context.Context, in *GetInstallmentRequest, opts ...grpc.CallOption) (*Installment, error) {
	out := new(Installment)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/GetInstallment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) ListInstallments(ctx context.Context, in *ListInstallmentsRequest, opts ...grpc.CallOption) (*ListInstallmentsResponse, error) {
	out := new(ListInstallmentsResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/ListInstallments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) ApplyInterest(ctx context.Context, in *ApplyInterestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/ApplyInterest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*v1.File, error) {
	out := new(v1.File)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*Schedule, error) {
	out := new(Schedule)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/GetSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) PreviewSchedule(ctx context.Context, in *PreviewScheduleRequest, opts ...grpc.CallOption) (*Schedule, error) {
	out := new(Schedule)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/PreviewSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) PreviewRepayment(ctx context.Context, in *PreviewRepaymentRequest, opts ...grpc.CallOption) (*PreviewRepaymentResponse, error) {
	out := new(PreviewRepaymentResponse)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/PreviewRepayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) Refinance(ctx context.Context, in *RefinanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/Refinance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) Reschedule(ctx context.Context, in *RescheduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/Reschedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) WriteOff(ctx context.Context, in *WriteOffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/WriteOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) UndoRefinance(ctx context.Context, in *UndoRefinanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/UndoRefinance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) UndoReschedule(ctx context.Context, in *UndoRescheduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/UndoReschedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loansServiceClient) UndoWriteOff(ctx context.Context, in *UndoWriteOffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/openbank.core.v1.loans.LoansService/UndoWriteOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoansServiceServer is the server API for LoansService service.
// All implementations must embed UnimplementedLoansServiceServer
// for forward compatibility
type LoansServiceServer interface {
	// CreateAccount creates a new loan account.
	CreateAccount(context.Context, *CreateAccountRequest) (*Account, error)
	// ListAccounts lists loan accounts.
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// GetAccount retrieves the specified loan account.
	GetAccount(context.Context, *GetAccountRequest) (*Account, error)
	// UpdateAccount updates the specified loan account.
	UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error)
	// DeleteAccount deletes the specified loan account.
	DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error)
	// ApplyAccountLock applies a lock to a loan account's income sources.
	ApplyAccountLock(context.Context, *ApplyAccountLockRequest) (*emptypb.Empty, error)
	// ApplyAccountUnlock removes a lock from a loan account's income sources.
	ApplyAccountUnlock(context.Context, *ApplyAccountUnlockRequest) (*emptypb.Empty, error)
	// CreateCard creates a new card for an existing loan account.
	CreateCard(context.Context, *CreateCardRequest) (*cards.Card, error)
	// ListCards lists cards for a loan account.
	ListCards(context.Context, *ListCardsRequest) (*ListCardsResponse, error)
	// GetCard retrieves the specified card from a loan account.
	// To retrieve other information on the card, use the cards package under
	// the Services section.
	GetCard(context.Context, *GetCardRequest) (*cards.Card, error)
	// DeleteCard deletes the specified card.
	DeleteCard(context.Context, *DeleteCardRequest) (*emptypb.Empty, error)
	// CreateFunding creates a new funding source for an existing loan account.
	CreateFunding(context.Context, *CreateFundingRequest) (*InvestorFund, error)
	// ListFundings lists funding sources for a loan account.
	ListFundings(context.Context, *ListFundingsRequest) (*ListFundingsResponse, error)
	// GetFunding retrieves the specified funding source from a loan account.
	GetFunding(context.Context, *GetFundingRequest) (*InvestorFund, error)
	// UpdateFunding updates the specified funding source on a loan account.
	UpdateFunding(context.Context, *UpdateFundingRequest) (*InvestorFund, error)
	// DeleteFunding deletes the specified funding source.
	DeleteFunding(context.Context, *DeleteFundingRequest) (*emptypb.Empty, error)
	// SellFunding sells the specified funding source to other investors. This
	// endpoint is used in P2P investor funding transactions for investors to
	// trade funds for liquidity.
	SellFunding(context.Context, *SellFundingRequest) (*SellFundingResponse, error)
	// GetInstallment retrieves the specified installment from a loan account.
	GetInstallment(context.Context, *GetInstallmentRequest) (*Installment, error)
	// ListInstallments lists installments for the specified loan account.
	// The account ID may be set to "-" to indicate all accounts, allowing a
	// search across all loan accounts.
	ListInstallments(context.Context, *ListInstallmentsRequest) (*ListInstallmentsResponse, error)
	// ApplyInterest applies interest to an existing loan account.
	ApplyInterest(context.Context, *ApplyInterestRequest) (*emptypb.Empty, error)
	// GetDocument generates a document for a loan account.
	GetDocument(context.Context, *GetDocumentRequest) (*v1.File, error)
	// GetSchedule retrieves a loan account schedule.
	GetSchedule(context.Context, *GetScheduleRequest) (*Schedule, error)
	// PreviewSchedule retrieves a preview of an account schedule based on the
	// provided account. This endpoint does not affect the state of the Core
	// Banking system.
	PreviewSchedule(context.Context, *PreviewScheduleRequest) (*Schedule, error)
	// PreviewRepayment previews a repayment at a future date.
	PreviewRepayment(context.Context, *PreviewRepaymentRequest) (*PreviewRepaymentResponse, error)
	// Refinance refinances a loan account.
	Refinance(context.Context, *RefinanceRequest) (*emptypb.Empty, error)
	// Reschedule reschedules a loan account.
	Reschedule(context.Context, *RescheduleRequest) (*emptypb.Empty, error)
	// WriteOff writes off a loan account.
	WriteOff(context.Context, *WriteOffRequest) (*emptypb.Empty, error)
	// UndoRefinance undoes a refinance action.
	UndoRefinance(context.Context, *UndoRefinanceRequest) (*emptypb.Empty, error)
	// UndoReschedule undoes a reschedule action.
	UndoReschedule(context.Context, *UndoRescheduleRequest) (*emptypb.Empty, error)
	// UndoWriteOff undoes a write off action.
	UndoWriteOff(context.Context, *UndoWriteOffRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLoansServiceServer()
}

// UnimplementedLoansServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoansServiceServer struct{}

func (UnimplementedLoansServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}

func (UnimplementedLoansServiceServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}

func (UnimplementedLoansServiceServer) GetAccount(context.Context, *GetAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}

func (UnimplementedLoansServiceServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}

func (UnimplementedLoansServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}

func (UnimplementedLoansServiceServer) ApplyAccountLock(context.Context, *ApplyAccountLockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAccountLock not implemented")
}

func (UnimplementedLoansServiceServer) ApplyAccountUnlock(context.Context, *ApplyAccountUnlockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAccountUnlock not implemented")
}

func (UnimplementedLoansServiceServer) CreateCard(context.Context, *CreateCardRequest) (*cards.Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}

func (UnimplementedLoansServiceServer) ListCards(context.Context, *ListCardsRequest) (*ListCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCards not implemented")
}

func (UnimplementedLoansServiceServer) GetCard(context.Context, *GetCardRequest) (*cards.Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}

func (UnimplementedLoansServiceServer) DeleteCard(context.Context, *DeleteCardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}

func (UnimplementedLoansServiceServer) CreateFunding(context.Context, *CreateFundingRequest) (*InvestorFund, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFunding not implemented")
}

func (UnimplementedLoansServiceServer) ListFundings(context.Context, *ListFundingsRequest) (*ListFundingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFundings not implemented")
}

func (UnimplementedLoansServiceServer) GetFunding(context.Context, *GetFundingRequest) (*InvestorFund, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunding not implemented")
}

func (UnimplementedLoansServiceServer) UpdateFunding(context.Context, *UpdateFundingRequest) (*InvestorFund, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFunding not implemented")
}

func (UnimplementedLoansServiceServer) DeleteFunding(context.Context, *DeleteFundingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunding not implemented")
}

func (UnimplementedLoansServiceServer) SellFunding(context.Context, *SellFundingRequest) (*SellFundingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellFunding not implemented")
}

func (UnimplementedLoansServiceServer) GetInstallment(context.Context, *GetInstallmentRequest) (*Installment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstallment not implemented")
}

func (UnimplementedLoansServiceServer) ListInstallments(context.Context, *ListInstallmentsRequest) (*ListInstallmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallments not implemented")
}

func (UnimplementedLoansServiceServer) ApplyInterest(context.Context, *ApplyInterestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyInterest not implemented")
}

func (UnimplementedLoansServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*v1.File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}

func (UnimplementedLoansServiceServer) GetSchedule(context.Context, *GetScheduleRequest) (*Schedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}

func (UnimplementedLoansServiceServer) PreviewSchedule(context.Context, *PreviewScheduleRequest) (*Schedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewSchedule not implemented")
}

func (UnimplementedLoansServiceServer) PreviewRepayment(context.Context, *PreviewRepaymentRequest) (*PreviewRepaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewRepayment not implemented")
}

func (UnimplementedLoansServiceServer) Refinance(context.Context, *RefinanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refinance not implemented")
}

func (UnimplementedLoansServiceServer) Reschedule(context.Context, *RescheduleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reschedule not implemented")
}

func (UnimplementedLoansServiceServer) WriteOff(context.Context, *WriteOffRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteOff not implemented")
}

func (UnimplementedLoansServiceServer) UndoRefinance(context.Context, *UndoRefinanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoRefinance not implemented")
}

func (UnimplementedLoansServiceServer) UndoReschedule(context.Context, *UndoRescheduleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoReschedule not implemented")
}

func (UnimplementedLoansServiceServer) UndoWriteOff(context.Context, *UndoWriteOffRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoWriteOff not implemented")
}
func (UnimplementedLoansServiceServer) mustEmbedUnimplementedLoansServiceServer() {}

// UnsafeLoansServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoansServiceServer will
// result in compilation errors.
type UnsafeLoansServiceServer interface {
	mustEmbedUnimplementedLoansServiceServer()
}

func RegisterLoansServiceServer(s grpc.ServiceRegistrar, srv LoansServiceServer) {
	s.RegisterService(&LoansService_ServiceDesc, srv)
}

func _LoansService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_ApplyAccountLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyAccountLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).ApplyAccountLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/ApplyAccountLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).ApplyAccountLock(ctx, req.(*ApplyAccountLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_ApplyAccountUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyAccountUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).ApplyAccountUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/ApplyAccountUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).ApplyAccountUnlock(ctx, req.(*ApplyAccountUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_ListCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).ListCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/ListCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).ListCards(ctx, req.(*ListCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/GetCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).GetCard(ctx, req.(*GetCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_CreateFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).CreateFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/CreateFunding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).CreateFunding(ctx, req.(*CreateFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_ListFundings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFundingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).ListFundings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/ListFundings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).ListFundings(ctx, req.(*ListFundingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_GetFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).GetFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/GetFunding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).GetFunding(ctx, req.(*GetFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_UpdateFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).UpdateFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/UpdateFunding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).UpdateFunding(ctx, req.(*UpdateFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_DeleteFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).DeleteFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/DeleteFunding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).DeleteFunding(ctx, req.(*DeleteFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_SellFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).SellFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/SellFunding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).SellFunding(ctx, req.(*SellFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_GetInstallment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstallmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).GetInstallment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/GetInstallment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).GetInstallment(ctx, req.(*GetInstallmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_ListInstallments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstallmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).ListInstallments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/ListInstallments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).ListInstallments(ctx, req.(*ListInstallmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_ApplyInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).ApplyInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/ApplyInterest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).ApplyInterest(ctx, req.(*ApplyInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/GetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).GetSchedule(ctx, req.(*GetScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_PreviewSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).PreviewSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/PreviewSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).PreviewSchedule(ctx, req.(*PreviewScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_PreviewRepayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewRepaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).PreviewRepayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/PreviewRepayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).PreviewRepayment(ctx, req.(*PreviewRepaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_Refinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefinanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).Refinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/Refinance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).Refinance(ctx, req.(*RefinanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_Reschedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RescheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).Reschedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/Reschedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).Reschedule(ctx, req.(*RescheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_WriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).WriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/WriteOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).WriteOff(ctx, req.(*WriteOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_UndoRefinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoRefinanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).UndoRefinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/UndoRefinance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).UndoRefinance(ctx, req.(*UndoRefinanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_UndoReschedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoRescheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).UndoReschedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/UndoReschedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).UndoReschedule(ctx, req.(*UndoRescheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoansService_UndoWriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoWriteOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoansServiceServer).UndoWriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openbank.core.v1.loans.LoansService/UndoWriteOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoansServiceServer).UndoWriteOff(ctx, req.(*UndoWriteOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoansService_ServiceDesc is the grpc.ServiceDesc for LoansService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoansService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openbank.core.v1.loans.LoansService",
	HandlerType: (*LoansServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _LoansService_CreateAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _LoansService_ListAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _LoansService_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _LoansService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _LoansService_DeleteAccount_Handler,
		},
		{
			MethodName: "ApplyAccountLock",
			Handler:    _LoansService_ApplyAccountLock_Handler,
		},
		{
			MethodName: "ApplyAccountUnlock",
			Handler:    _LoansService_ApplyAccountUnlock_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _LoansService_CreateCard_Handler,
		},
		{
			MethodName: "ListCards",
			Handler:    _LoansService_ListCards_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _LoansService_GetCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _LoansService_DeleteCard_Handler,
		},
		{
			MethodName: "CreateFunding",
			Handler:    _LoansService_CreateFunding_Handler,
		},
		{
			MethodName: "ListFundings",
			Handler:    _LoansService_ListFundings_Handler,
		},
		{
			MethodName: "GetFunding",
			Handler:    _LoansService_GetFunding_Handler,
		},
		{
			MethodName: "UpdateFunding",
			Handler:    _LoansService_UpdateFunding_Handler,
		},
		{
			MethodName: "DeleteFunding",
			Handler:    _LoansService_DeleteFunding_Handler,
		},
		{
			MethodName: "SellFunding",
			Handler:    _LoansService_SellFunding_Handler,
		},
		{
			MethodName: "GetInstallment",
			Handler:    _LoansService_GetInstallment_Handler,
		},
		{
			MethodName: "ListInstallments",
			Handler:    _LoansService_ListInstallments_Handler,
		},
		{
			MethodName: "ApplyInterest",
			Handler:    _LoansService_ApplyInterest_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _LoansService_GetDocument_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _LoansService_GetSchedule_Handler,
		},
		{
			MethodName: "PreviewSchedule",
			Handler:    _LoansService_PreviewSchedule_Handler,
		},
		{
			MethodName: "PreviewRepayment",
			Handler:    _LoansService_PreviewRepayment_Handler,
		},
		{
			MethodName: "Refinance",
			Handler:    _LoansService_Refinance_Handler,
		},
		{
			MethodName: "Reschedule",
			Handler:    _LoansService_Reschedule_Handler,
		},
		{
			MethodName: "WriteOff",
			Handler:    _LoansService_WriteOff_Handler,
		},
		{
			MethodName: "UndoRefinance",
			Handler:    _LoansService_UndoRefinance_Handler,
		},
		{
			MethodName: "UndoReschedule",
			Handler:    _LoansService_UndoReschedule_Handler,
		},
		{
			MethodName: "UndoWriteOff",
			Handler:    _LoansService_UndoWriteOff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bnk.to/core/api/v1/loans/all.proto",
}
