// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: bnk.to/core/api/v1/loans/all.proto

// Package loans defines services for loans.

package loans

import (
	reflect "reflect"
	sync "sync"

	v1 "bnk.to/core/api/v1"
	cards "bnk.to/core/api/v1/cards"
	products "bnk.to/core/api/v1/products"
	transactions "bnk.to/core/api/v1/transactions"
	_ "github.com/xo/ecosystem/proto/xo"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// InstallmentState is the state of repayment for the installment.
type InstallmentState int32

const (
	InstallmentState_InstallmentPending       InstallmentState = 0
	InstallmentState_InstallmentLate          InstallmentState = 1
	InstallmentState_InstallmentPaid          InstallmentState = 2
	InstallmentState_InstallmentPartiallyPaid InstallmentState = 3
	InstallmentState_InstallmentGrace         InstallmentState = 4
)

// Enum value maps for InstallmentState.
var (
	InstallmentState_name = map[int32]string{
		0: "InstallmentPending",
		1: "InstallmentLate",
		2: "InstallmentPaid",
		3: "InstallmentPartiallyPaid",
		4: "InstallmentGrace",
	}
	InstallmentState_value = map[string]int32{
		"InstallmentPending":       0,
		"InstallmentLate":          1,
		"InstallmentPaid":          2,
		"InstallmentPartiallyPaid": 3,
		"InstallmentGrace":         4,
	}
)

func (x InstallmentState) Enum() *InstallmentState {
	p := new(InstallmentState)
	*p = x
	return p
}

func (x InstallmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstallmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_loans_all_proto_enumTypes[0].Descriptor()
}

func (InstallmentState) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_loans_all_proto_enumTypes[0]
}

func (x InstallmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstallmentState.Descriptor instead.
func (InstallmentState) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{0}
}

// AccountState is the state of an account.
type AccountState int32

const (
	AccountState_StatePartialApplication AccountState = 0
	AccountState_StatePendingApproval    AccountState = 1
	AccountState_StateApproved           AccountState = 2
	AccountState_StateActive             AccountState = 3
	AccountState_StateActiveInArrears    AccountState = 4
	AccountState_StateClosed             AccountState = 5
)

// Enum value maps for AccountState.
var (
	AccountState_name = map[int32]string{
		0: "StatePartialApplication",
		1: "StatePendingApproval",
		2: "StateApproved",
		3: "StateActive",
		4: "StateActiveInArrears",
		5: "StateClosed",
	}
	AccountState_value = map[string]int32{
		"StatePartialApplication": 0,
		"StatePendingApproval":    1,
		"StateApproved":           2,
		"StateActive":             3,
		"StateActiveInArrears":    4,
		"StateClosed":             5,
	}
)

func (x AccountState) Enum() *AccountState {
	p := new(AccountState)
	*p = x
	return p
}

func (x AccountState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountState) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_loans_all_proto_enumTypes[1].Descriptor()
}

func (AccountState) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_loans_all_proto_enumTypes[1]
}

func (x AccountState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountState.Descriptor instead.
func (AccountState) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{1}
}

// AccountSubState is the sub-state of an account.
type AccountSubState int32

const (
	AccountSubState_StatePartiallyDisbursed AccountSubState = 0
	AccountSubState_StateLocked             AccountSubState = 1
	AccountSubState_StateLockedCapping      AccountSubState = 2
	AccountSubState_StateRefinanced         AccountSubState = 3
	AccountSubState_StateRescheduled        AccountSubState = 4
	AccountSubState_StateWithdrawn          AccountSubState = 5
	AccountSubState_StateRepaid             AccountSubState = 6
	AccountSubState_StateRejected           AccountSubState = 7
	AccountSubState_StateWrittenOff         AccountSubState = 8
	AccountSubState_StateTerminated         AccountSubState = 9
)

// Enum value maps for AccountSubState.
var (
	AccountSubState_name = map[int32]string{
		0: "StatePartiallyDisbursed",
		1: "StateLocked",
		2: "StateLockedCapping",
		3: "StateRefinanced",
		4: "StateRescheduled",
		5: "StateWithdrawn",
		6: "StateRepaid",
		7: "StateRejected",
		8: "StateWrittenOff",
		9: "StateTerminated",
	}
	AccountSubState_value = map[string]int32{
		"StatePartiallyDisbursed": 0,
		"StateLocked":             1,
		"StateLockedCapping":      2,
		"StateRefinanced":         3,
		"StateRescheduled":        4,
		"StateWithdrawn":          5,
		"StateRepaid":             6,
		"StateRejected":           7,
		"StateWrittenOff":         8,
		"StateTerminated":         9,
	}
)

func (x AccountSubState) Enum() *AccountSubState {
	p := new(AccountSubState)
	*p = x
	return p
}

func (x AccountSubState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountSubState) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_loans_all_proto_enumTypes[2].Descriptor()
}

func (AccountSubState) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_loans_all_proto_enumTypes[2]
}

func (x AccountSubState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountSubState.Descriptor instead.
func (AccountSubState) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{2}
}

// AccountFuturePaymentsAcceptance is the acceptance of future payments.
type AccountFuturePaymentsAcceptance int32

const (
	AccountFuturePaymentsAcceptance_NoFuturePayments     AccountFuturePaymentsAcceptance = 0
	AccountFuturePaymentsAcceptance_AcceptFuturePayments AccountFuturePaymentsAcceptance = 1
	AccountFuturePaymentsAcceptance_AcceptOverpayments   AccountFuturePaymentsAcceptance = 2
)

// Enum value maps for AccountFuturePaymentsAcceptance.
var (
	AccountFuturePaymentsAcceptance_name = map[int32]string{
		0: "NoFuturePayments",
		1: "AcceptFuturePayments",
		2: "AcceptOverpayments",
	}
	AccountFuturePaymentsAcceptance_value = map[string]int32{
		"NoFuturePayments":     0,
		"AcceptFuturePayments": 1,
		"AcceptOverpayments":   2,
	}
)

func (x AccountFuturePaymentsAcceptance) Enum() *AccountFuturePaymentsAcceptance {
	p := new(AccountFuturePaymentsAcceptance)
	*p = x
	return p
}

func (x AccountFuturePaymentsAcceptance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountFuturePaymentsAcceptance) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_loans_all_proto_enumTypes[3].Descriptor()
}

func (AccountFuturePaymentsAcceptance) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_loans_all_proto_enumTypes[3]
}

func (x AccountFuturePaymentsAcceptance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountFuturePaymentsAcceptance.Descriptor instead.
func (AccountFuturePaymentsAcceptance) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{3}
}

// AccountLatePaymentsRecalculationMethod is the method used to calculate late
// payments.
type AccountLatePaymentsRecalculationMethod int32

const (
	AccountLatePaymentsRecalculationMethod_MethodOverdueInstallmentsIncrease AccountLatePaymentsRecalculationMethod = 0
	AccountLatePaymentsRecalculationMethod_MethodLastInstallmentIncrease     AccountLatePaymentsRecalculationMethod = 1
)

// Enum value maps for AccountLatePaymentsRecalculationMethod.
var (
	AccountLatePaymentsRecalculationMethod_name = map[int32]string{
		0: "MethodOverdueInstallmentsIncrease",
		1: "MethodLastInstallmentIncrease",
	}
	AccountLatePaymentsRecalculationMethod_value = map[string]int32{
		"MethodOverdueInstallmentsIncrease": 0,
		"MethodLastInstallmentIncrease":     1,
	}
)

func (x AccountLatePaymentsRecalculationMethod) Enum() *AccountLatePaymentsRecalculationMethod {
	p := new(AccountLatePaymentsRecalculationMethod)
	*p = x
	return p
}

func (x AccountLatePaymentsRecalculationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountLatePaymentsRecalculationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_loans_all_proto_enumTypes[4].Descriptor()
}

func (AccountLatePaymentsRecalculationMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_loans_all_proto_enumTypes[4]
}

func (x AccountLatePaymentsRecalculationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountLatePaymentsRecalculationMethod.Descriptor instead.
func (AccountLatePaymentsRecalculationMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{4}
}

// AccountPaymentMethod is the method used to pay the account.
type AccountPaymentMethod int32

const (
	AccountPaymentMethod_MethodHorizontal AccountPaymentMethod = 0
	AccountPaymentMethod_MethodVertical   AccountPaymentMethod = 1
)

// Enum value maps for AccountPaymentMethod.
var (
	AccountPaymentMethod_name = map[int32]string{
		0: "MethodHorizontal",
		1: "MethodVertical",
	}
	AccountPaymentMethod_value = map[string]int32{
		"MethodHorizontal": 0,
		"MethodVertical":   1,
	}
)

func (x AccountPaymentMethod) Enum() *AccountPaymentMethod {
	p := new(AccountPaymentMethod)
	*p = x
	return p
}

func (x AccountPaymentMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountPaymentMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_loans_all_proto_enumTypes[5].Descriptor()
}

func (AccountPaymentMethod) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_loans_all_proto_enumTypes[5]
}

func (x AccountPaymentMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountPaymentMethod.Descriptor instead.
func (AccountPaymentMethod) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{5}
}

// LockedOperations is the list of operations that can be locked.
type LockedOperations int32

const (
	LockedOperations_OperationApplyInterest  LockedOperations = 0
	LockedOperations_OperationApplyFees      LockedOperations = 1
	LockedOperations_OperationApplyPenalties LockedOperations = 2
)

// Enum value maps for LockedOperations.
var (
	LockedOperations_name = map[int32]string{
		0: "OperationApplyInterest",
		1: "OperationApplyFees",
		2: "OperationApplyPenalties",
	}
	LockedOperations_value = map[string]int32{
		"OperationApplyInterest":  0,
		"OperationApplyFees":      1,
		"OperationApplyPenalties": 2,
	}
)

func (x LockedOperations) Enum() *LockedOperations {
	p := new(LockedOperations)
	*p = x
	return p
}

func (x LockedOperations) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockedOperations) Descriptor() protoreflect.EnumDescriptor {
	return file_bnk_to_core_api_v1_loans_all_proto_enumTypes[6].Descriptor()
}

func (LockedOperations) Type() protoreflect.EnumType {
	return &file_bnk_to_core_api_v1_loans_all_proto_enumTypes[6]
}

func (x LockedOperations) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LockedOperations.Descriptor instead.
func (LockedOperations) EnumDescriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{6}
}

// Purchase is a purchase of a loan funding source.
type Purchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID for the funding account of the buyer.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Amount is the amount of funding source being purchased, as a fraction of
	// the whole fraction being sold.
	Amount string `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Price is the price paid for the amount.
	Price *v1.Amount `protobuf:"bytes,3,opt,name=Price,json=price,proto3" json:"price,omitempty"`
}

func (x *Purchase) Reset() {
	*x = Purchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Purchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Purchase) ProtoMessage() {}

func (x *Purchase) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Purchase.ProtoReflect.Descriptor instead.
func (*Purchase) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{0}
}

func (x *Purchase) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *Purchase) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Purchase) GetPrice() *v1.Amount {
	if x != nil {
		return x.Price
	}
	return nil
}

// FundingSale is the sale of a funding source in P2P products by an investor to
// another investor. The funding source ID being sold should be passed as a URL
// parameter and is therefore omitted in the body.
type FundingSale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Purchases is a list of investors purchasing the funding source.
	Purchases []*Purchase `protobuf:"bytes,1,rep,name=Purchases,json=purchases,proto3" json:"purchases,omitempty"`
}

func (x *FundingSale) Reset() {
	*x = FundingSale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingSale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingSale) ProtoMessage() {}

func (x *FundingSale) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingSale.ProtoReflect.Descriptor instead.
func (*FundingSale) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{1}
}

func (x *FundingSale) GetPurchases() []*Purchase {
	if x != nil {
		return x.Purchases
	}
	return nil
}

// InstallmentAmount is the amounts that an installment expects.
type InstallmentAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expected is the total expected amount, including the amount due and
	// paid.
	Expected *v1.Amount `protobuf:"bytes,1,opt,name=Expected,json=expected,proto3" json:"expected,omitempty"`
	// Due is the amount remaining to be paid.
	Due *v1.Amount `protobuf:"bytes,2,opt,name=Due,json=due,proto3" json:"due,omitempty"`
	// Paid is the amount that has been paid.
	Paid *v1.Amount `protobuf:"bytes,3,opt,name=Paid,json=paid,proto3" json:"paid,omitempty"`
	// Reduced is the amount of the installment that has been reduced.
	Reduced *v1.Amount `protobuf:"bytes,4,opt,name=Reduced,json=reduced,proto3" json:"reduced,omitempty"`
}

func (x *InstallmentAmount) Reset() {
	*x = InstallmentAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallmentAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallmentAmount) ProtoMessage() {}

func (x *InstallmentAmount) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallmentAmount.ProtoReflect.Descriptor instead.
func (*InstallmentAmount) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{2}
}

func (x *InstallmentAmount) GetExpected() *v1.Amount {
	if x != nil {
		return x.Expected
	}
	return nil
}

func (x *InstallmentAmount) GetDue() *v1.Amount {
	if x != nil {
		return x.Due
	}
	return nil
}

func (x *InstallmentAmount) GetPaid() *v1.Amount {
	if x != nil {
		return x.Paid
	}
	return nil
}

func (x *InstallmentAmount) GetReduced() *v1.Amount {
	if x != nil {
		return x.Reduced
	}
	return nil
}

// InstallmentFee is the fee applied to an installment.
type InstallmentFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FeeID is the ID of the fee applied.
	FeeID string `protobuf:"bytes,1,opt,name=FeeID,json=fee_id,proto3" json:"fee_id,omitempty"`
	// Name is the name of the fee applied.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// Amount is the status of repayment on the fee.
	Amount *InstallmentAmount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Tax is the status of repayment on the tax applied to the amount.
	Tax *InstallmentAmount `protobuf:"bytes,4,opt,name=Tax,json=tax,proto3" json:"tax,omitempty"`
}

func (x *InstallmentFee) Reset() {
	*x = InstallmentFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallmentFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallmentFee) ProtoMessage() {}

func (x *InstallmentFee) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallmentFee.ProtoReflect.Descriptor instead.
func (*InstallmentFee) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{3}
}

func (x *InstallmentFee) GetFeeID() string {
	if x != nil {
		return x.FeeID
	}
	return ""
}

func (x *InstallmentFee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstallmentFee) GetAmount() *InstallmentAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *InstallmentFee) GetTax() *InstallmentAmount {
	if x != nil {
		return x.Tax
	}
	return nil
}

// InstallmentAllocation is an installment allocation element.
type InstallmentAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the status of repayment on the element.
	Amount *InstallmentAmount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Tax is the status of repayment on the tax applied to the amount.
	Tax *InstallmentAmount `protobuf:"bytes,2,opt,name=Tax,json=tax,proto3" json:"tax,omitempty"`
}

func (x *InstallmentAllocation) Reset() {
	*x = InstallmentAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallmentAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallmentAllocation) ProtoMessage() {}

func (x *InstallmentAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallmentAllocation.ProtoReflect.Descriptor instead.
func (*InstallmentAllocation) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{4}
}

func (x *InstallmentAllocation) GetAmount() *InstallmentAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *InstallmentAllocation) GetTax() *InstallmentAmount {
	if x != nil {
		return x.Tax
	}
	return nil
}

// Installment is a single installment used in loan repayment.
type Installment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InstallmentID is the ID of the installment.
	InstallmentID string `protobuf:"bytes,1,opt,name=InstallmentID,json=installment_id,proto3" json:"installment_id,omitempty"`
	// Fees is the amount of fees applied to the installment.
	Fees []*InstallmentFee `protobuf:"bytes,2,rep,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// Interest is the amount of interest applied to the installment.
	Interest *InstallmentAllocation `protobuf:"bytes,3,opt,name=Interest,json=interest,proto3" json:"interest,omitempty"`
	// IsPaymentHoliday is a flag for offering payment holiday in the
	// installment. Whether the payment holiday is offered for the installment.
	IsPaymentHoliday bool `protobuf:"varint,4,opt,name=IsPaymentHoliday,json=is_payment_holiday,proto3" json:"is_payment_holiday,omitempty"`
	// PayTime is the time the installment was last paid.
	PayTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=PayTime,json=pay_time,proto3" json:"pay_time,omitempty"`
	// Order is the index of the installment generated for a loan starting from
	// 1, sorted chronologically.
	Order string `protobuf:"bytes,6,opt,name=Order,json=order,proto3" json:"order,omitempty"`
	// ParentAccountID is the ID of the parent account.
	ParentAccountID string `protobuf:"bytes,7,opt,name=ParentAccountID,json=parent_account_id,proto3" json:"parent_account_id,omitempty"`
	// Penalty is the amount of penalty that can be charged to the loan account.
	Penalty *InstallmentAllocation `protobuf:"bytes,8,opt,name=Penalty,json=penalty,proto3" json:"penalty,omitempty"`
	// Principal is the original amount of loan that is disbursed.
	Principal *InstallmentAllocation `protobuf:"bytes,9,opt,name=Principal,json=principal,proto3" json:"principal,omitempty"`
	// DueTime is the time the installment must be repaid.
	DueTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=DueTime,json=due_time,proto3" json:"due_time,omitempty"`
	// RepayTime is the time the installment was paid.
	RepayTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=RepayTime,json=repay_time,proto3" json:"repay_time,omitempty"`
	// State is the state of the installment.
	State InstallmentState `protobuf:"varint,12,opt,name=State,json=state,proto3,enum=openbank.core.v1.loans.InstallmentState" json:"state,omitempty"`
}

func (x *Installment) Reset() {
	*x = Installment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Installment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Installment) ProtoMessage() {}

func (x *Installment) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Installment.ProtoReflect.Descriptor instead.
func (*Installment) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{5}
}

func (x *Installment) GetInstallmentID() string {
	if x != nil {
		return x.InstallmentID
	}
	return ""
}

func (x *Installment) GetFees() []*InstallmentFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *Installment) GetInterest() *InstallmentAllocation {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *Installment) GetIsPaymentHoliday() bool {
	if x != nil {
		return x.IsPaymentHoliday
	}
	return false
}

func (x *Installment) GetPayTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PayTime
	}
	return nil
}

func (x *Installment) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *Installment) GetParentAccountID() string {
	if x != nil {
		return x.ParentAccountID
	}
	return ""
}

func (x *Installment) GetPenalty() *InstallmentAllocation {
	if x != nil {
		return x.Penalty
	}
	return nil
}

func (x *Installment) GetPrincipal() *InstallmentAllocation {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *Installment) GetDueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DueTime
	}
	return nil
}

func (x *Installment) GetRepayTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RepayTime
	}
	return nil
}

func (x *Installment) GetState() InstallmentState {
	if x != nil {
		return x.State
	}
	return InstallmentState_InstallmentPending
}

// Balances is the balances of a loan account.
type Balances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fees is the total fee expected to be paid by the client for the loan.
	Fees *v1.Amount `protobuf:"bytes,1,opt,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// FeesDue is the total fee due for the account.
	FeesDue *v1.Amount `protobuf:"bytes,2,opt,name=FeesDue,json=fees_due,proto3" json:"fees_due,omitempty"`
	// FeesPaid is the total fee paid by the client for the loan.
	// The fees paid. Represents the total fees paid for the account.
	FeesPaid *v1.Amount `protobuf:"bytes,3,opt,name=FeesPaid,json=fees_paid,proto3" json:"fees_paid,omitempty"`
	// Hold is the sum of all authorization hold on the account.
	Hold *v1.Amount `protobuf:"bytes,4,opt,name=Hold,json=hold,proto3" json:"hold,omitempty"`
	// Interest is the total interest expected to be paid by the client
	// from now on.
	Interest *v1.Amount `protobuf:"bytes,5,opt,name=Interest,json=interest,proto3" json:"interest,omitempty"`
	// InterestDue is the total interest due for the account.
	InterestDue *v1.Amount `protobuf:"bytes,6,opt,name=InterestDue,json=interest_due,proto3" json:"interest_due,omitempty"`
	// InterestFromArrears is the interest from arrears owned.
	InterestFromArrears *v1.Amount `protobuf:"bytes,7,opt,name=InterestFromArrears,json=interest_from_arrears,proto3" json:"interest_from_arrears,omitempty"`
	// InterestFromArrearsDue is the interest from arrears due.
	InterestFromArrearsDue *v1.Amount `protobuf:"bytes,8,opt,name=InterestFromArrearsDue,json=interest_from_arrears_due,proto3" json:"interest_from_arrears_due,omitempty"`
	// InterestFromArrearsPaid is the interest from arrears paid.
	InterestFromArrearsPaid *v1.Amount `protobuf:"bytes,9,opt,name=InterestFromArrearsPaid,json=interest_from_arrears_paid,proto3" json:"interest_from_arrears_paid,omitempty"`
	// InterestPaid is the total interest paid into the account.
	InterestPaid *v1.Amount `protobuf:"bytes,10,opt,name=InterestPaid,json=interest_paid,proto3" json:"interest_paid,omitempty"`
	// Penalty is the total penalty expected to be paid.
	Penalty *v1.Amount `protobuf:"bytes,11,opt,name=Penalty,json=penalty,proto3" json:"penalty,omitempty"`
	// PenaltyDue is the total penalty due for the account.
	PenaltyDue *v1.Amount `protobuf:"bytes,12,opt,name=PenaltyDue,json=penalty_due,proto3" json:"penalty_due,omitempty"`
	// PenaltyPaid is the total penalty paid by the client for the loan.
	PenaltyPaid *v1.Amount `protobuf:"bytes,13,opt,name=PenaltyPaid,json=penalty_paid,proto3" json:"penalty_paid,omitempty"`
	// Principal is the total principal owned by the client.
	Principal *v1.Amount `protobuf:"bytes,14,opt,name=Principal,json=principal,proto3" json:"principal,omitempty"`
	// PrincipalDue is the total principal due for the account.
	PrincipalDue *v1.Amount `protobuf:"bytes,15,opt,name=PrincipalDue,json=principal_due,proto3" json:"principal_due,omitempty"`
	// PrincipalPaid is the total principal paid by the client for the loan.
	PrincipalPaid *v1.Amount `protobuf:"bytes,16,opt,name=PrincipalPaid,json=principal_paid,proto3" json:"principal_paid,omitempty"`
	// Redraw is the total redraw amount owned.
	Redraw *v1.Amount `protobuf:"bytes,17,opt,name=Redraw,json=redraw,proto3" json:"redraw,omitempty"`
}

func (x *Balances) Reset() {
	*x = Balances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances) ProtoMessage() {}

func (x *Balances) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances.ProtoReflect.Descriptor instead.
func (*Balances) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{6}
}

func (x *Balances) GetFees() *v1.Amount {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *Balances) GetFeesDue() *v1.Amount {
	if x != nil {
		return x.FeesDue
	}
	return nil
}

func (x *Balances) GetFeesPaid() *v1.Amount {
	if x != nil {
		return x.FeesPaid
	}
	return nil
}

func (x *Balances) GetHold() *v1.Amount {
	if x != nil {
		return x.Hold
	}
	return nil
}

func (x *Balances) GetInterest() *v1.Amount {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *Balances) GetInterestDue() *v1.Amount {
	if x != nil {
		return x.InterestDue
	}
	return nil
}

func (x *Balances) GetInterestFromArrears() *v1.Amount {
	if x != nil {
		return x.InterestFromArrears
	}
	return nil
}

func (x *Balances) GetInterestFromArrearsDue() *v1.Amount {
	if x != nil {
		return x.InterestFromArrearsDue
	}
	return nil
}

func (x *Balances) GetInterestFromArrearsPaid() *v1.Amount {
	if x != nil {
		return x.InterestFromArrearsPaid
	}
	return nil
}

func (x *Balances) GetInterestPaid() *v1.Amount {
	if x != nil {
		return x.InterestPaid
	}
	return nil
}

func (x *Balances) GetPenalty() *v1.Amount {
	if x != nil {
		return x.Penalty
	}
	return nil
}

func (x *Balances) GetPenaltyDue() *v1.Amount {
	if x != nil {
		return x.PenaltyDue
	}
	return nil
}

func (x *Balances) GetPenaltyPaid() *v1.Amount {
	if x != nil {
		return x.PenaltyPaid
	}
	return nil
}

func (x *Balances) GetPrincipal() *v1.Amount {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *Balances) GetPrincipalDue() *v1.Amount {
	if x != nil {
		return x.PrincipalDue
	}
	return nil
}

func (x *Balances) GetPrincipalPaid() *v1.Amount {
	if x != nil {
		return x.PrincipalPaid
	}
	return nil
}

func (x *Balances) GetRedraw() *v1.Amount {
	if x != nil {
		return x.Redraw
	}
	return nil
}

// CustomPredefinedFee is a custom fee defined that was applied on the
// disbursement.
type CustomPredefinedFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FeeID is the ID of the fee predefined.
	FeeID string `protobuf:"bytes,1,opt,name=FeeID,json=fee_id,proto3" json:"fee_id,omitempty"`
	// Amount is the amount of the fee.
	Amount *v1.Amount `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *CustomPredefinedFee) Reset() {
	*x = CustomPredefinedFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPredefinedFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPredefinedFee) ProtoMessage() {}

func (x *CustomPredefinedFee) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPredefinedFee.ProtoReflect.Descriptor instead.
func (*CustomPredefinedFee) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{7}
}

func (x *CustomPredefinedFee) GetFeeID() string {
	if x != nil {
		return x.FeeID
	}
	return ""
}

func (x *CustomPredefinedFee) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// DisbursementDetails is the details of a disbursement.
type DisbursementDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DisburseTime is the time the disbursement was made.
	DisburseTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=DisburseTime,json=disburse_time,proto3" json:"disburse_time,omitempty"`
	// ExpectedDisburseTime is the expected time for disbursement.
	ExpectedDisburseTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ExpectedDisburseTime,json=expected_disburse_time,proto3" json:"expected_disburse_time,omitempty"`
	// FirstRepayTime is the time of the first repayment.
	FirstRepayTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=FirstRepayTime,json=first_repay_time,proto3" json:"first_repay_time,omitempty"`
	// Fees is the list of fees applied to the disbursement.
	Fees []*CustomPredefinedFee `protobuf:"bytes,4,rep,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// Transfer is the transfer details of the disbursement.
	Transfer *Transfer `protobuf:"bytes,5,opt,name=Transfer,json=transfer,proto3" json:"transfer,omitempty"`
}

func (x *DisbursementDetails) Reset() {
	*x = DisbursementDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisbursementDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisbursementDetails) ProtoMessage() {}

func (x *DisbursementDetails) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisbursementDetails.ProtoReflect.Descriptor instead.
func (*DisbursementDetails) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{8}
}

func (x *DisbursementDetails) GetDisburseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DisburseTime
	}
	return nil
}

func (x *DisbursementDetails) GetExpectedDisburseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedDisburseTime
	}
	return nil
}

func (x *DisbursementDetails) GetFirstRepayTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstRepayTime
	}
	return nil
}

func (x *DisbursementDetails) GetFees() []*CustomPredefinedFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *DisbursementDetails) GetTransfer() *Transfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

// Asset is an asset that is being used to guarantee a loan account.
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the amount of the asset used by the client for the guarantee.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// AssetName is the name of the asset if the type is an asset.
	AssetName string `protobuf:"bytes,2,opt,name=AssetName,json=asset_name,proto3" json:"asset_name,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{9}
}

func (x *Asset) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Asset) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

// Guarantor is a client that guarantees a loan account.
type Guarantor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GuarantorID is the ID of the guarantor.
	GuarantorID string `protobuf:"bytes,1,opt,name=GuarantorID,json=guarantor_id,proto3" json:"guarantor_id,omitempty"`
	// GuarantorType is the type of the guarantor.
	GuarantorType v1.Entity `protobuf:"varint,2,opt,name=GuarantorType,json=guarantor_type,proto3,enum=openbank.core.v1.Entity" json:"guarantor_type,omitempty"`
	// DepositAccountID is the ID of the deposit account used as a guarantee.
	DepositAccountID string `protobuf:"bytes,3,opt,name=DepositAccountID,json=deposit_account_id,proto3" json:"deposit_account_id,omitempty"`
	// Amount is the amount of the asset used by the client for the guarantee.
	Amount *v1.Amount `protobuf:"bytes,4,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *Guarantor) Reset() {
	*x = Guarantor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Guarantor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guarantor) ProtoMessage() {}

func (x *Guarantor) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guarantor.ProtoReflect.Descriptor instead.
func (*Guarantor) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{10}
}

func (x *Guarantor) GetGuarantorID() string {
	if x != nil {
		return x.GuarantorID
	}
	return ""
}

func (x *Guarantor) GetGuarantorType() v1.Entity {
	if x != nil {
		return x.GuarantorType
	}
	return v1.Entity(0)
}

func (x *Guarantor) GetDepositAccountID() string {
	if x != nil {
		return x.DepositAccountID
	}
	return ""
}

func (x *Guarantor) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// InvestorFund is the investor fund associated with a loan account.
type InvestorFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FundID is the ID of the investor fund.
	FundID string `protobuf:"bytes,1,opt,name=FundID,json=fund_id,proto3" json:"fund_id,omitempty"`
	// Amount is the amount of the investor fund.
	Amount *v1.Amount `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// InterestCommission is the minimum interest commission.
	InterestCommission float64 `protobuf:"fixed64,3,opt,name=InterestCommission,json=interest_commission,proto3" json:"interest_commission,omitempty"`
	// SharePercentage is the percentage shared by the investor fund.
	SharePercentage float64 `protobuf:"fixed64,4,opt,name=SharePercentage,json=share_percentage,proto3" json:"share_percentage,omitempty"`
}

func (x *InvestorFund) Reset() {
	*x = InvestorFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestorFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestorFund) ProtoMessage() {}

func (x *InvestorFund) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestorFund.ProtoReflect.Descriptor instead.
func (*InvestorFund) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{11}
}

func (x *InvestorFund) GetFundID() string {
	if x != nil {
		return x.FundID
	}
	return ""
}

func (x *InvestorFund) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *InvestorFund) GetInterestCommission() float64 {
	if x != nil {
		return x.InterestCommission
	}
	return 0
}

func (x *InvestorFund) GetSharePercentage() float64 {
	if x != nil {
		return x.SharePercentage
	}
	return 0
}

// Settings is the settings of an account.
type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arrears is the account's arrears settings.
	Arrears *products.ArrearsSettings `protobuf:"bytes,1,opt,name=Arrears,json=arrears,proto3" json:"arrears,omitempty"`
	// Interest is the account's interest settings.
	Interest *products.LoanInterestSettings `protobuf:"bytes,2,opt,name=Interest,json=interest,proto3" json:"interest,omitempty"`
	// Penalty is the account's penalty settings.
	Penalty *products.PenaltySettings `protobuf:"bytes,3,opt,name=Penalty,json=penalty,proto3" json:"penalty,omitempty"`
	// Prepayment is the account's prepayment settings.
	Prepayment *products.PrepaymentSettings `protobuf:"bytes,4,opt,name=Prepayment,json=prepayment,proto3" json:"prepayment,omitempty"`
	// PrincipalPayment is the account's principal payment settings.
	PrincipalPayment *products.PrincipalPaymentSettings `protobuf:"bytes,5,opt,name=PrincipalPayment,json=principal_payment,proto3" json:"principal_payment,omitempty"`
	// Redraw is the account's redraw settings.
	Redraw *products.RedrawSettings `protobuf:"bytes,6,opt,name=Redraw,json=redraw,proto3" json:"redraw,omitempty"`
	// Schedule is the account's schedule settings.
	Schedule *products.LoanScheduleSettings `protobuf:"bytes,7,opt,name=Schedule,json=schedule,proto3" json:"schedule,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{12}
}

func (x *Settings) GetArrears() *products.ArrearsSettings {
	if x != nil {
		return x.Arrears
	}
	return nil
}

func (x *Settings) GetInterest() *products.LoanInterestSettings {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *Settings) GetPenalty() *products.PenaltySettings {
	if x != nil {
		return x.Penalty
	}
	return nil
}

func (x *Settings) GetPrepayment() *products.PrepaymentSettings {
	if x != nil {
		return x.Prepayment
	}
	return nil
}

func (x *Settings) GetPrincipalPayment() *products.PrincipalPaymentSettings {
	if x != nil {
		return x.PrincipalPayment
	}
	return nil
}

func (x *Settings) GetRedraw() *products.RedrawSettings {
	if x != nil {
		return x.Redraw
	}
	return nil
}

func (x *Settings) GetSchedule() *products.LoanScheduleSettings {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// Account is a loan account where the bank lends to a customer.
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Name is the name of the account.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// HolderID is the ID of the holder of the account.
	HolderID string `protobuf:"bytes,3,opt,name=HolderID,json=holder_id,proto3" json:"holder_id,omitempty"`
	// HolderType is the type of the holder of the account.
	HolderType v1.Entity `protobuf:"varint,4,opt,name=HolderType,json=holder_type,proto3,enum=openbank.core.v1.Entity" json:"holder_type,omitempty"`
	// State is the state of the account.
	State AccountState `protobuf:"varint,5,opt,name=State,json=state,proto3,enum=openbank.core.v1.loans.AccountState" json:"state,omitempty"`
	// SubState is the sub-state of the account which may contain extra
	// restrictions.
	SubState AccountSubState `protobuf:"varint,6,opt,name=SubState,json=sub_state,proto3,enum=openbank.core.v1.loans.AccountSubState" json:"sub_state,omitempty"`
	// AccruedInterest is the amount of interest accrued.
	AccruedInterest *v1.Amount `protobuf:"bytes,7,opt,name=AccruedInterest,json=accrued_interest,proto3" json:"accrued_interest,omitempty"`
	// AccruedPenalty is the amount of penalty accrued.
	AccruedPenalty *v1.Amount `protobuf:"bytes,8,opt,name=AccruedPenalty,json=accrued_penalty,proto3" json:"accrued_penalty,omitempty"`
	// ActivationTransactionID is the ID of the transaction that activated the
	// account.
	ActivationTransactionID string `protobuf:"bytes,9,opt,name=ActivationTransactionID,json=activation_transaction_id,proto3" json:"activation_transaction_id,omitempty"`
	// ArrearsTolerancePeriod is the period of tolerance for arrears.
	ArrearsTolerancePeriod int32 `protobuf:"varint,10,opt,name=ArrearsTolerancePeriod,json=arrears_tolerance_period,proto3" json:"arrears_tolerance_period,omitempty"`
	// Assets is a list of assets associated with the account.
	Assets []*Asset `protobuf:"bytes,11,rep,name=Assets,json=assets,proto3" json:"assets,omitempty"`
	// Guarantors is a list of guarantors associated with the account.
	Guarantors []*Guarantor `protobuf:"bytes,12,rep,name=Guarantors,json=guarantors,proto3" json:"guarantors,omitempty"`
	// AssignedBranchID is the ID of the branch the account is assigned to.
	AssignedBranchID string `protobuf:"bytes,13,opt,name=AssignedBranchID,json=assigned_branch_id,proto3" json:"assigned_branch_id,omitempty"`
	// AssignedCentreID is the ID of the centre the account is assigned to.
	AssignedCentreID string `protobuf:"bytes,14,opt,name=AssignedCentreID,json=assigned_centre_id,proto3" json:"assigned_centre_id,omitempty"`
	// AssignedUserID is the ID of the user the account is assigned to.
	AssignedUserID string `protobuf:"bytes,15,opt,name=AssignedUserID,json=assigned_user_id,proto3" json:"assigned_user_id,omitempty"`
	// Balances is the balance details for this loan account.
	Balances *Balances `protobuf:"bytes,16,opt,name=Balances,json=balances,proto3" json:"balances,omitempty"`
	// RevolvingAccountID is the ID of the revolving account the account is
	// registered to.
	RevolvingAccountID string `protobuf:"bytes,17,opt,name=RevolvingAccountID,json=revolving_account_id,proto3" json:"revolving_account_id,omitempty"`
	// CurrencyCode is the currency code of the account.
	CurrencyCode string `protobuf:"bytes,18,opt,name=CurrencyCode,json=currency_code,proto3" json:"currency_code,omitempty"`
	// DaysInArrears is the number of days in arrears.
	DaysInArrears int32 `protobuf:"varint,19,opt,name=DaysInArrears,json=days_in_arrears,proto3" json:"days_in_arrears,omitempty"`
	// DaysLate is the number of days payment is late.
	DaysLate int32 `protobuf:"varint,20,opt,name=DaysLate,json=days_late,proto3" json:"days_late,omitempty"`
	// DisbursementDetails is the details of the disbursement.
	DisbursementDetails *DisbursementDetails `protobuf:"bytes,21,opt,name=DisbursementDetails,json=disbursement_details,proto3" json:"disbursement_details,omitempty"`
	// FuturePaymentsAcceptance is the settings for acceptance of future
	// payments.
	FuturePaymentsAcceptance AccountFuturePaymentsAcceptance `protobuf:"varint,22,opt,name=FuturePaymentsAcceptance,json=future_payments_acceptance,proto3,enum=openbank.core.v1.loans.AccountFuturePaymentsAcceptance" json:"future_payments_acceptance,omitempty"`
	// InterestCommission is the value of the interest booked by the
	// organization from the accounts funded by investors.
	InterestCommission *v1.Amount `protobuf:"bytes,23,opt,name=InterestCommission,json=interest_commission,proto3" json:"interest_commission,omitempty"`
	// InterestFromArrearsAccrued is the amount of interest accrued from
	// arrears.
	InterestFromArrearsAccrued *v1.Amount `protobuf:"bytes,24,opt,name=InterestFromArrearsAccrued,json=interest_from_arrears_accrued,proto3" json:"interest_from_arrears_accrued,omitempty"`
	// LatePaymentsRecalculationMethod is the method used to calculate late
	// payments.
	LatePaymentsRecalculationMethod AccountLatePaymentsRecalculationMethod `protobuf:"varint,25,opt,name=LatePaymentsRecalculationMethod,json=late_payments_recalculation_method,proto3,enum=openbank.core.v1.loans.AccountLatePaymentsRecalculationMethod" json:"late_payments_recalculation_method,omitempty"`
	// Amount is the amount of loan for the account.
	Amount *v1.Amount `protobuf:"bytes,26,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// LockedOperations is the list of operations that are locked.
	LockedOperations []LockedOperations `protobuf:"varint,27,rep,packed,name=LockedOperations,json=locked_operations,proto3,enum=openbank.core.v1.loans.LockedOperations" json:"locked_operations,omitempty"`
	// MigrationEventID is the ID of the migration event that created the
	// account.
	MigrationEventID string `protobuf:"bytes,28,opt,name=MigrationEventID,json=migration_event_id,proto3" json:"migration_event_id,omitempty"`
	// Notes is the notes of the account.
	Notes string `protobuf:"bytes,29,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
	// OriginalAccountID is the ID of the original account before rescheduling
	// or refinancing.
	OriginalAccountID string `protobuf:"bytes,30,opt,name=OriginalAccountID,json=original_account_id,proto3" json:"original_account_id,omitempty"`
	// PaymentHolidaysAccruedInterest is the amount of interest accrued on
	// payment holidays.
	PaymentHolidaysAccruedInterest *v1.Amount `protobuf:"bytes,31,opt,name=PaymentHolidaysAccruedInterest,json=payment_holidays_accrued_interest,proto3" json:"payment_holidays_accrued_interest,omitempty"`
	// PaymentMethod is the payment method of the account.
	PaymentMethod AccountPaymentMethod `protobuf:"varint,32,opt,name=PaymentMethod,json=payment_method,proto3,enum=openbank.core.v1.loans.AccountPaymentMethod" json:"payment_method,omitempty"`
	// ProductID is the ID of the product the account is registered to.
	ProductID string `protobuf:"bytes,33,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
	// RescheduledAccountID is the ID of the rescheduled account.
	RescheduledAccountID string `protobuf:"bytes,34,opt,name=RescheduledAccountID,json=rescheduled_account_id,proto3" json:"rescheduled_account_id,omitempty"`
	// Settings is the settings applied to the loan product.
	Settings *Settings `protobuf:"bytes,35,opt,name=Settings,json=settings,proto3" json:"settings,omitempty"`
	// SettlementAccountID is the ID of the settlement account.
	SettlementAccountID string `protobuf:"bytes,36,opt,name=SettlementAccountID,json=settlement_account_id,proto3" json:"settlement_account_id,omitempty"`
	// TaxRate is the tax rate of the account.
	TaxRate float64 `protobuf:"fixed64,37,opt,name=TaxRate,json=tax_rate,proto3" json:"tax_rate,omitempty"`
	// Tranches is a list of disbursement tranches available for the account.
	Tranches []*Tranche `protobuf:"bytes,38,rep,name=Tranches,json=tranches,proto3" json:"tranches,omitempty"`
	// ApproveTime is the time the account was approved.
	ApproveTime *timestamppb.Timestamp `protobuf:"bytes,39,opt,name=ApproveTime,json=approve_time,proto3" json:"approve_time,omitempty"`
	// CloseTime is the time the account was closed.
	CloseTime *timestamppb.Timestamp `protobuf:"bytes,40,opt,name=CloseTime,json=close_time,proto3" json:"close_time,omitempty"`
	// CreateTime is the time the account was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,41,opt,name=CreateTime,json=create_time,proto3" json:"create_time,omitempty"`
	// AppraiseTime is the time the account was last appraised.
	AppraiseTime *timestamppb.Timestamp `protobuf:"bytes,42,opt,name=AppraiseTime,json=appraise_time,proto3" json:"appraise_time,omitempty"`
	// InterestApplyTime is the time interest was last applied.
	InterestApplyTime *timestamppb.Timestamp `protobuf:"bytes,43,opt,name=InterestApplyTime,json=interest_apply_time,proto3" json:"interest_apply_time,omitempty"`
	// InterestReviewTime is the time the interest was last reviewed.
	InterestReviewTime *timestamppb.Timestamp `protobuf:"bytes,44,opt,name=InterestReviewTime,json=interest_review_time,proto3" json:"interest_review_time,omitempty"`
	// LockTime is the time the account was locked.
	LockTime *timestamppb.Timestamp `protobuf:"bytes,45,opt,name=LockTime,json=lock_time,proto3" json:"lock_time,omitempty"`
	// UpdateTime is the time the loan was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,46,opt,name=UpdateTime,json=update_time,proto3" json:"update_time,omitempty"`
	// ArrearsSetTime is the time the account was last set to standing.
	ArrearsSetTime *timestamppb.Timestamp `protobuf:"bytes,47,opt,name=ArrearsSetTime,json=arrears_set_time,proto3" json:"arrears_set_time,omitempty"`
	// TaxRateReviewTime is the time the tax rate was last reviewed.
	TaxRateReviewTime *timestamppb.Timestamp `protobuf:"bytes,48,opt,name=TaxRateReviewTime,json=tax_rate_review_time,proto3" json:"tax_rate_review_time,omitempty"`
	// TerminateTime is the time the account was terminated.
	TerminateTime *timestamppb.Timestamp `protobuf:"bytes,49,opt,name=TerminateTime,json=terminate_time,proto3" json:"terminate_time,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{13}
}

func (x *Account) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetHolderID() string {
	if x != nil {
		return x.HolderID
	}
	return ""
}

func (x *Account) GetHolderType() v1.Entity {
	if x != nil {
		return x.HolderType
	}
	return v1.Entity(0)
}

func (x *Account) GetState() AccountState {
	if x != nil {
		return x.State
	}
	return AccountState_StatePartialApplication
}

func (x *Account) GetSubState() AccountSubState {
	if x != nil {
		return x.SubState
	}
	return AccountSubState_StatePartiallyDisbursed
}

func (x *Account) GetAccruedInterest() *v1.Amount {
	if x != nil {
		return x.AccruedInterest
	}
	return nil
}

func (x *Account) GetAccruedPenalty() *v1.Amount {
	if x != nil {
		return x.AccruedPenalty
	}
	return nil
}

func (x *Account) GetActivationTransactionID() string {
	if x != nil {
		return x.ActivationTransactionID
	}
	return ""
}

func (x *Account) GetArrearsTolerancePeriod() int32 {
	if x != nil {
		return x.ArrearsTolerancePeriod
	}
	return 0
}

func (x *Account) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Account) GetGuarantors() []*Guarantor {
	if x != nil {
		return x.Guarantors
	}
	return nil
}

func (x *Account) GetAssignedBranchID() string {
	if x != nil {
		return x.AssignedBranchID
	}
	return ""
}

func (x *Account) GetAssignedCentreID() string {
	if x != nil {
		return x.AssignedCentreID
	}
	return ""
}

func (x *Account) GetAssignedUserID() string {
	if x != nil {
		return x.AssignedUserID
	}
	return ""
}

func (x *Account) GetBalances() *Balances {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *Account) GetRevolvingAccountID() string {
	if x != nil {
		return x.RevolvingAccountID
	}
	return ""
}

func (x *Account) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Account) GetDaysInArrears() int32 {
	if x != nil {
		return x.DaysInArrears
	}
	return 0
}

func (x *Account) GetDaysLate() int32 {
	if x != nil {
		return x.DaysLate
	}
	return 0
}

func (x *Account) GetDisbursementDetails() *DisbursementDetails {
	if x != nil {
		return x.DisbursementDetails
	}
	return nil
}

func (x *Account) GetFuturePaymentsAcceptance() AccountFuturePaymentsAcceptance {
	if x != nil {
		return x.FuturePaymentsAcceptance
	}
	return AccountFuturePaymentsAcceptance_NoFuturePayments
}

func (x *Account) GetInterestCommission() *v1.Amount {
	if x != nil {
		return x.InterestCommission
	}
	return nil
}

func (x *Account) GetInterestFromArrearsAccrued() *v1.Amount {
	if x != nil {
		return x.InterestFromArrearsAccrued
	}
	return nil
}

func (x *Account) GetLatePaymentsRecalculationMethod() AccountLatePaymentsRecalculationMethod {
	if x != nil {
		return x.LatePaymentsRecalculationMethod
	}
	return AccountLatePaymentsRecalculationMethod_MethodOverdueInstallmentsIncrease
}

func (x *Account) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Account) GetLockedOperations() []LockedOperations {
	if x != nil {
		return x.LockedOperations
	}
	return nil
}

func (x *Account) GetMigrationEventID() string {
	if x != nil {
		return x.MigrationEventID
	}
	return ""
}

func (x *Account) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Account) GetOriginalAccountID() string {
	if x != nil {
		return x.OriginalAccountID
	}
	return ""
}

func (x *Account) GetPaymentHolidaysAccruedInterest() *v1.Amount {
	if x != nil {
		return x.PaymentHolidaysAccruedInterest
	}
	return nil
}

func (x *Account) GetPaymentMethod() AccountPaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return AccountPaymentMethod_MethodHorizontal
}

func (x *Account) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *Account) GetRescheduledAccountID() string {
	if x != nil {
		return x.RescheduledAccountID
	}
	return ""
}

func (x *Account) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Account) GetSettlementAccountID() string {
	if x != nil {
		return x.SettlementAccountID
	}
	return ""
}

func (x *Account) GetTaxRate() float64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

func (x *Account) GetTranches() []*Tranche {
	if x != nil {
		return x.Tranches
	}
	return nil
}

func (x *Account) GetApproveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveTime
	}
	return nil
}

func (x *Account) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *Account) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Account) GetAppraiseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AppraiseTime
	}
	return nil
}

func (x *Account) GetInterestApplyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InterestApplyTime
	}
	return nil
}

func (x *Account) GetInterestReviewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InterestReviewTime
	}
	return nil
}

func (x *Account) GetLockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LockTime
	}
	return nil
}

func (x *Account) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Account) GetArrearsSetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ArrearsSetTime
	}
	return nil
}

func (x *Account) GetTaxRateReviewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TaxRateReviewTime
	}
	return nil
}

func (x *Account) GetTerminateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TerminateTime
	}
	return nil
}

// ActionDetails is a structure that holds details about an action.
type ActionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Notes is the notes associated with the action.
	Notes string `protobuf:"bytes,1,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
}

func (x *ActionDetails) Reset() {
	*x = ActionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDetails) ProtoMessage() {}

func (x *ActionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDetails.ProtoReflect.Descriptor instead.
func (*ActionDetails) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{14}
}

func (x *ActionDetails) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// Tranche is a structure that holds details about a tranche, allowing partial
// approval of loans and the loan to be extended.
type Tranche struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the amount of the tranche available for disbursement.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// DisbursementDetails is the details of the disbursement.
	DisbursementDetails *TrancheDisbursementDetails `protobuf:"bytes,2,opt,name=DisbursementDetails,json=disbursement_details,proto3" json:"disbursement_details,omitempty"`
	// Fees is the list of fees for the tranche.
	Fees []*CustomPredefinedFee `protobuf:"bytes,3,rep,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// TrancheNumber is the index of the tranche.
	TrancheNumber int32 `protobuf:"varint,4,opt,name=TrancheNumber,json=tranche_number,proto3" json:"tranche_number,omitempty"`
}

func (x *Tranche) Reset() {
	*x = Tranche{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tranche) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tranche) ProtoMessage() {}

func (x *Tranche) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tranche.ProtoReflect.Descriptor instead.
func (*Tranche) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{15}
}

func (x *Tranche) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Tranche) GetDisbursementDetails() *TrancheDisbursementDetails {
	if x != nil {
		return x.DisbursementDetails
	}
	return nil
}

func (x *Tranche) GetFees() []*CustomPredefinedFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *Tranche) GetTrancheNumber() int32 {
	if x != nil {
		return x.TrancheNumber
	}
	return 0
}

// Transfer is a structure that holds details about a transfer.
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InternalTransfer is the flag that indicates if the transfer is internal,
	// between loans and deposit accounts.
	InternalTransfer bool `protobuf:"varint,1,opt,name=InternalTransfer,json=internal_transfer,proto3" json:"internal_transfer,omitempty"`
	// TargetDepositAccountID is the ID of the target deposit account.
	TargetDepositAccountID string `protobuf:"bytes,2,opt,name=TargetDepositAccountID,json=target_deposit_account_id,proto3" json:"target_deposit_account_id,omitempty"`
	// Transaction is the details of the transaction.
	Transaction *Transaction `protobuf:"bytes,3,opt,name=Transaction,json=transaction,proto3" json:"transaction,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{16}
}

func (x *Transfer) GetInternalTransfer() bool {
	if x != nil {
		return x.InternalTransfer
	}
	return false
}

func (x *Transfer) GetTargetDepositAccountID() string {
	if x != nil {
		return x.TargetDepositAccountID
	}
	return ""
}

func (x *Transfer) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// PaymentAmounts is a list of amounts paid.
type PaymentAmounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fees is the amount of fees paid.
	Fees *v1.Amount `protobuf:"bytes,1,opt,name=Fees,json=fees,proto3" json:"fees,omitempty"`
	// Interest is the amount of interest paid.
	Interest *v1.Amount `protobuf:"bytes,2,opt,name=Interest,json=interest,proto3" json:"interest,omitempty"`
	// Penalty is the amount of penalty paid.
	Penalty *v1.Amount `protobuf:"bytes,3,opt,name=Penalty,json=penalty,proto3" json:"penalty,omitempty"`
}

func (x *PaymentAmounts) Reset() {
	*x = PaymentAmounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentAmounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAmounts) ProtoMessage() {}

func (x *PaymentAmounts) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAmounts.ProtoReflect.Descriptor instead.
func (*PaymentAmounts) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{17}
}

func (x *PaymentAmounts) GetFees() *v1.Amount {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *PaymentAmounts) GetInterest() *v1.Amount {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *PaymentAmounts) GetPenalty() *v1.Amount {
	if x != nil {
		return x.Penalty
	}
	return nil
}

// RefinanceDisbursementDetails is the details of the disbursement of a
// refinanced account.
type RefinanceDisbursementDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ExpectedDisburseTime is the expected disbursement time of the refinanced
	// account.
	ExpectedDisburseTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ExpectedDisburseTime,json=expected_disburse_time,proto3" json:"expected_disburse_time,omitempty"`
	// FirstRepayTime is the first repayment time of the refinanced account.
	FirstRepayTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=FirstRepayTime,json=first_repay_time,proto3" json:"first_repay_time,omitempty"`
	// Fees is the list of fees for the refinanced account.
	Fees []*CustomPredefinedFee `protobuf:"bytes,3,rep,name=Fees,json=fees,proto3" json:"fees,omitempty"`
}

func (x *RefinanceDisbursementDetails) Reset() {
	*x = RefinanceDisbursementDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefinanceDisbursementDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefinanceDisbursementDetails) ProtoMessage() {}

func (x *RefinanceDisbursementDetails) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefinanceDisbursementDetails.ProtoReflect.Descriptor instead.
func (*RefinanceDisbursementDetails) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{18}
}

func (x *RefinanceDisbursementDetails) GetExpectedDisburseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedDisburseTime
	}
	return nil
}

func (x *RefinanceDisbursementDetails) GetFirstRepayTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstRepayTime
	}
	return nil
}

func (x *RefinanceDisbursementDetails) GetFees() []*CustomPredefinedFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

// RefinanceAccountAction is the refinance action to perform on a loan account.
type RefinanceAccountAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KeepSameAccountID is the flag to keep the same account ID.
	KeepSameAccountID bool `protobuf:"varint,1,opt,name=KeepSameAccountID,json=keep_same_account_id,proto3" json:"keep_same_account_id,omitempty"`
	// Account is the settings for the refinanced account.
	Account *RefinanceAccount `protobuf:"bytes,2,opt,name=Account,json=account,proto3" json:"account,omitempty"`
	// TopUpAmount is the amount to top up.
	TopUpAmount *v1.Amount `protobuf:"bytes,3,opt,name=TopUpAmount,json=top_up_amount,proto3" json:"top_up_amount,omitempty"`
	// WriteOffAmounts is the amount to write off.
	WriteOffAmounts *RefinanceWriteOffAmounts `protobuf:"bytes,4,opt,name=WriteOffAmounts,json=write_off_amounts,proto3" json:"write_off_amounts,omitempty"`
}

func (x *RefinanceAccountAction) Reset() {
	*x = RefinanceAccountAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefinanceAccountAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefinanceAccountAction) ProtoMessage() {}

func (x *RefinanceAccountAction) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefinanceAccountAction.ProtoReflect.Descriptor instead.
func (*RefinanceAccountAction) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{19}
}

func (x *RefinanceAccountAction) GetKeepSameAccountID() bool {
	if x != nil {
		return x.KeepSameAccountID
	}
	return false
}

func (x *RefinanceAccountAction) GetAccount() *RefinanceAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *RefinanceAccountAction) GetTopUpAmount() *v1.Amount {
	if x != nil {
		return x.TopUpAmount
	}
	return nil
}

func (x *RefinanceAccountAction) GetWriteOffAmounts() *RefinanceWriteOffAmounts {
	if x != nil {
		return x.WriteOffAmounts
	}
	return nil
}

// RefinanceAccount is the settings for the refinanced account.
type RefinanceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the refinanced account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Name is the name of the refinanced account.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// ProductID is the ID of the product of the refinanced account.
	ProductID string `protobuf:"bytes,3,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
	// AccountArrearsSettings is the settings for the account arrears.
	AccountArrearsSettings *RestructureAccountArrearsSettings `protobuf:"bytes,4,opt,name=AccountArrearsSettings,json=account_arrears_settings,proto3" json:"account_arrears_settings,omitempty"`
	// DisbursementDetails is the details of the disbursement.
	DisbursementDetails *RefinanceDisbursementDetails `protobuf:"bytes,5,opt,name=DisbursementDetails,json=disbursement_details,proto3" json:"disbursement_details,omitempty"`
	// Guarantors is the list of guarantors for the refinanced account.
	Guarantors []*Guarantor `protobuf:"bytes,6,rep,name=Guarantors,json=guarantors,proto3" json:"guarantors,omitempty"`
	// InterestSettings is the settings for interest.
	InterestSettings *RestructureInterestSettings `protobuf:"bytes,7,opt,name=InterestSettings,json=interest_settings,proto3" json:"interest_settings,omitempty"`
	// PenaltySettings is the settings for the penalty.
	PenaltySettings *RestructurePenaltySettings `protobuf:"bytes,8,opt,name=PenaltySettings,json=penalty_settings,proto3" json:"penalty_settings,omitempty"`
	// PrincipalPaymentSettings is the settings for the principal payment.
	PrincipalPaymentSettings *RestructurePrincipalPaymentSettings `protobuf:"bytes,9,opt,name=PrincipalPaymentSettings,json=principal_payment_settings,proto3" json:"principal_payment_settings,omitempty"`
	// ScheduleSettings is the settings for the schedule.
	ScheduleSettings *RestructureScheduleSettings `protobuf:"bytes,10,opt,name=ScheduleSettings,json=schedule_settings,proto3" json:"schedule_settings,omitempty"`
	// Notes is the notes of the refinanced account.
	Notes string `protobuf:"bytes,11,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
}

func (x *RefinanceAccount) Reset() {
	*x = RefinanceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefinanceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefinanceAccount) ProtoMessage() {}

func (x *RefinanceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefinanceAccount.ProtoReflect.Descriptor instead.
func (*RefinanceAccount) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{20}
}

func (x *RefinanceAccount) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *RefinanceAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RefinanceAccount) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *RefinanceAccount) GetAccountArrearsSettings() *RestructureAccountArrearsSettings {
	if x != nil {
		return x.AccountArrearsSettings
	}
	return nil
}

func (x *RefinanceAccount) GetDisbursementDetails() *RefinanceDisbursementDetails {
	if x != nil {
		return x.DisbursementDetails
	}
	return nil
}

func (x *RefinanceAccount) GetGuarantors() []*Guarantor {
	if x != nil {
		return x.Guarantors
	}
	return nil
}

func (x *RefinanceAccount) GetInterestSettings() *RestructureInterestSettings {
	if x != nil {
		return x.InterestSettings
	}
	return nil
}

func (x *RefinanceAccount) GetPenaltySettings() *RestructurePenaltySettings {
	if x != nil {
		return x.PenaltySettings
	}
	return nil
}

func (x *RefinanceAccount) GetPrincipalPaymentSettings() *RestructurePrincipalPaymentSettings {
	if x != nil {
		return x.PrincipalPaymentSettings
	}
	return nil
}

func (x *RefinanceAccount) GetScheduleSettings() *RestructureScheduleSettings {
	if x != nil {
		return x.ScheduleSettings
	}
	return nil
}

func (x *RefinanceAccount) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// RestructureScheduleSettings is the settings for a restructure schedule.
type RestructureScheduleSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FixedDaysOfMonth is the list of days of the month to repay.
	FixedDaysOfMonth []int32 `protobuf:"varint,1,rep,packed,name=FixedDaysOfMonth,json=fixed_days_of_month,proto3" json:"fixed_days_of_month,omitempty"`
	// GracePeriod is the grace period of the restructure schedule.
	GracePeriod int32 `protobuf:"varint,2,opt,name=GracePeriod,json=grace_period,proto3" json:"grace_period,omitempty"`
	// PeriodicPayment is the amount to periodically pay.
	PeriodicPayment *v1.Amount `protobuf:"bytes,3,opt,name=PeriodicPayment,json=periodic_payment,proto3" json:"periodic_payment,omitempty"`
	// NumberOfPreviewedInstallments is the number of previewed installments.
	NumberOfPreviewedInstallments int32 `protobuf:"varint,4,opt,name=NumberOfPreviewedInstallments,json=number_of_previewed_installments,proto3" json:"number_of_previewed_installments,omitempty"`
	// RepaymentInstallments is the number of installments to repay.
	RepaymentInstallments int32 `protobuf:"varint,5,opt,name=RepaymentInstallments,json=repayment_installments,proto3" json:"repayment_installments,omitempty"`
	// RepaymentPeriod is the duration between repayments.
	RepaymentPeriod *durationpb.Duration `protobuf:"bytes,6,opt,name=RepaymentPeriod,json=repayment_period,proto3" json:"repayment_period,omitempty"`
}

func (x *RestructureScheduleSettings) Reset() {
	*x = RestructureScheduleSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestructureScheduleSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestructureScheduleSettings) ProtoMessage() {}

func (x *RestructureScheduleSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestructureScheduleSettings.ProtoReflect.Descriptor instead.
func (*RestructureScheduleSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{21}
}

func (x *RestructureScheduleSettings) GetFixedDaysOfMonth() []int32 {
	if x != nil {
		return x.FixedDaysOfMonth
	}
	return nil
}

func (x *RestructureScheduleSettings) GetGracePeriod() int32 {
	if x != nil {
		return x.GracePeriod
	}
	return 0
}

func (x *RestructureScheduleSettings) GetPeriodicPayment() *v1.Amount {
	if x != nil {
		return x.PeriodicPayment
	}
	return nil
}

func (x *RestructureScheduleSettings) GetNumberOfPreviewedInstallments() int32 {
	if x != nil {
		return x.NumberOfPreviewedInstallments
	}
	return 0
}

func (x *RestructureScheduleSettings) GetRepaymentInstallments() int32 {
	if x != nil {
		return x.RepaymentInstallments
	}
	return 0
}

func (x *RestructureScheduleSettings) GetRepaymentPeriod() *durationpb.Duration {
	if x != nil {
		return x.RepaymentPeriod
	}
	return nil
}

// RefinanceWriteOffAmounts is the amount to write off for the refinanced
// account.
type RefinanceWriteOffAmounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee is the write-off amount for fee.
	Fee *v1.Amount `protobuf:"bytes,1,opt,name=Fee,json=fee,proto3" json:"fee,omitempty"`
	// Interest is the write-off amount for interest.
	Interest *v1.Amount `protobuf:"bytes,2,opt,name=Interest,json=interest,proto3" json:"interest,omitempty"`
	// Penalty is the write-off amount for penalty.
	Penalty *v1.Amount `protobuf:"bytes,3,opt,name=Penalty,json=penalty,proto3" json:"penalty,omitempty"`
}

func (x *RefinanceWriteOffAmounts) Reset() {
	*x = RefinanceWriteOffAmounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefinanceWriteOffAmounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefinanceWriteOffAmounts) ProtoMessage() {}

func (x *RefinanceWriteOffAmounts) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefinanceWriteOffAmounts.ProtoReflect.Descriptor instead.
func (*RefinanceWriteOffAmounts) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{22}
}

func (x *RefinanceWriteOffAmounts) GetFee() *v1.Amount {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *RefinanceWriteOffAmounts) GetInterest() *v1.Amount {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *RefinanceWriteOffAmounts) GetPenalty() *v1.Amount {
	if x != nil {
		return x.Penalty
	}
	return nil
}

// RescheduleDisbursementDetails is the details of the disbursement of a
// rescheduled account.
type RescheduleDisbursementDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FirstRepayTime is the first repayment time of the rescheduled
	// account.
	FirstRepayTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=FirstRepayTime,json=first_repay_time,proto3" json:"first_repay_time,omitempty"`
}

func (x *RescheduleDisbursementDetails) Reset() {
	*x = RescheduleDisbursementDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RescheduleDisbursementDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleDisbursementDetails) ProtoMessage() {}

func (x *RescheduleDisbursementDetails) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleDisbursementDetails.ProtoReflect.Descriptor instead.
func (*RescheduleDisbursementDetails) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{23}
}

func (x *RescheduleDisbursementDetails) GetFirstRepayTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstRepayTime
	}
	return nil
}

// RescheduleAccount is the settings for the rescheduled account.
type RescheduleAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the rescheduled account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Name is the name of the rescheduled account.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// ProductID is the ID of the product of the rescheduled account.
	ProductID string `protobuf:"bytes,3,opt,name=ProductID,json=product_id,proto3" json:"product_id,omitempty"`
	// AccountArrearsSettings is the account arrears settings for the
	// rescheduled account.
	AccountArrearsSettings *RestructureAccountArrearsSettings `protobuf:"bytes,4,opt,name=AccountArrearsSettings,json=account_arrears_settings,proto3" json:"account_arrears_settings,omitempty"`
	// DisbursementDetails is the details of the disbursement.
	DisbursementDetails *RescheduleDisbursementDetails `protobuf:"bytes,5,opt,name=DisbursementDetails,json=disbursement_details,proto3" json:"disbursement_details,omitempty"`
	// Guarantors is the list of guarantors for the rescheduled account.
	Guarantors []*Guarantor `protobuf:"bytes,6,rep,name=Guarantors,json=guarantors,proto3" json:"guarantors,omitempty"`
	// InterestCommission is the interest commission for the rescheduled
	// account.
	InterestCommission *v1.Amount `protobuf:"bytes,7,opt,name=InterestCommission,json=interest_commission,proto3" json:"interest_commission,omitempty"`
	// InterestSettings is the interest settings for the rescheduled
	// account.
	InterestSettings *RestructureInterestSettings `protobuf:"bytes,8,opt,name=InterestSettings,json=interest_settings,proto3" json:"interest_settings,omitempty"`
	// PenaltySettings is the penalty settings for the rescheduled
	// account.
	PenaltySettings *RestructurePenaltySettings `protobuf:"bytes,9,opt,name=PenaltySettings,json=penalty_settings,proto3" json:"penalty_settings,omitempty"`
	// PrincipalPaymentSettings is the principal payment settings for the
	// rescheduled account.
	PrincipalPaymentSettings *RestructurePrincipalPaymentSettings `protobuf:"bytes,10,opt,name=PrincipalPaymentSettings,json=principal_payment_settings,proto3" json:"principal_payment_settings,omitempty"`
	// ScheduleSettings is the schedule settings for the rescheduled
	// account.
	ScheduleSettings *RestructureScheduleSettings `protobuf:"bytes,11,opt,name=ScheduleSettings,json=schedule_settings,proto3" json:"schedule_settings,omitempty"`
	// Notes is the human-readable notes for the rescheduled loan account.
	Notes string `protobuf:"bytes,12,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
}

func (x *RescheduleAccount) Reset() {
	*x = RescheduleAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RescheduleAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleAccount) ProtoMessage() {}

func (x *RescheduleAccount) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleAccount.ProtoReflect.Descriptor instead.
func (*RescheduleAccount) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{24}
}

func (x *RescheduleAccount) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *RescheduleAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RescheduleAccount) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *RescheduleAccount) GetAccountArrearsSettings() *RestructureAccountArrearsSettings {
	if x != nil {
		return x.AccountArrearsSettings
	}
	return nil
}

func (x *RescheduleAccount) GetDisbursementDetails() *RescheduleDisbursementDetails {
	if x != nil {
		return x.DisbursementDetails
	}
	return nil
}

func (x *RescheduleAccount) GetGuarantors() []*Guarantor {
	if x != nil {
		return x.Guarantors
	}
	return nil
}

func (x *RescheduleAccount) GetInterestCommission() *v1.Amount {
	if x != nil {
		return x.InterestCommission
	}
	return nil
}

func (x *RescheduleAccount) GetInterestSettings() *RestructureInterestSettings {
	if x != nil {
		return x.InterestSettings
	}
	return nil
}

func (x *RescheduleAccount) GetPenaltySettings() *RestructurePenaltySettings {
	if x != nil {
		return x.PenaltySettings
	}
	return nil
}

func (x *RescheduleAccount) GetPrincipalPaymentSettings() *RestructurePrincipalPaymentSettings {
	if x != nil {
		return x.PrincipalPaymentSettings
	}
	return nil
}

func (x *RescheduleAccount) GetScheduleSettings() *RestructureScheduleSettings {
	if x != nil {
		return x.ScheduleSettings
	}
	return nil
}

func (x *RescheduleAccount) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// RescheduleAccountAction is the action to reschedule a loan account.
type RescheduleAccountAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KeepSameAccountID is the flag to keep the same account ID.
	KeepSameAccountID bool `protobuf:"varint,1,opt,name=KeepSameAccountID,json=keep_same_account_id,proto3" json:"keep_same_account_id,omitempty"`
	// Account is the details of rescheduled account.
	Account *RescheduleAccount `protobuf:"bytes,2,opt,name=Account,json=account,proto3" json:"account,omitempty"`
	// WriteOffAmounts is the amounts written off in the rescheduled loan
	// account.
	WriteOffAmounts *RescheduleWriteOffAmounts `protobuf:"bytes,3,opt,name=WriteOffAmounts,json=write_off_amounts,proto3" json:"write_off_amounts,omitempty"`
}

func (x *RescheduleAccountAction) Reset() {
	*x = RescheduleAccountAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RescheduleAccountAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleAccountAction) ProtoMessage() {}

func (x *RescheduleAccountAction) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleAccountAction.ProtoReflect.Descriptor instead.
func (*RescheduleAccountAction) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{25}
}

func (x *RescheduleAccountAction) GetKeepSameAccountID() bool {
	if x != nil {
		return x.KeepSameAccountID
	}
	return false
}

func (x *RescheduleAccountAction) GetAccount() *RescheduleAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *RescheduleAccountAction) GetWriteOffAmounts() *RescheduleWriteOffAmounts {
	if x != nil {
		return x.WriteOffAmounts
	}
	return nil
}

// RescheduleWriteOffAmounts is the write-off amounts on the rescheduled loan
// account.
type RescheduleWriteOffAmounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee is the write-off amount for fee.
	Fee *v1.Amount `protobuf:"bytes,1,opt,name=Fee,json=fee,proto3" json:"fee,omitempty"`
	// Interest is the write-off amount for interest.
	Interest *v1.Amount `protobuf:"bytes,2,opt,name=Interest,json=interest,proto3" json:"interest,omitempty"`
	// Penalty is the write-off amount for penalty.
	Penalty *v1.Amount `protobuf:"bytes,3,opt,name=Penalty,json=penalty,proto3" json:"penalty,omitempty"`
	// Principal is the write-off amount for principal.
	Principal *v1.Amount `protobuf:"bytes,4,opt,name=Principal,json=principal,proto3" json:"principal,omitempty"`
}

func (x *RescheduleWriteOffAmounts) Reset() {
	*x = RescheduleWriteOffAmounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RescheduleWriteOffAmounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleWriteOffAmounts) ProtoMessage() {}

func (x *RescheduleWriteOffAmounts) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleWriteOffAmounts.ProtoReflect.Descriptor instead.
func (*RescheduleWriteOffAmounts) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{26}
}

func (x *RescheduleWriteOffAmounts) GetFee() *v1.Amount {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *RescheduleWriteOffAmounts) GetInterest() *v1.Amount {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *RescheduleWriteOffAmounts) GetPenalty() *v1.Amount {
	if x != nil {
		return x.Penalty
	}
	return nil
}

func (x *RescheduleWriteOffAmounts) GetPrincipal() *v1.Amount {
	if x != nil {
		return x.Principal
	}
	return nil
}

// RestructureAccountArrearsSettings is the arrears settings on the
// restructured account.
type RestructureAccountArrearsSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TolerancePercentageOfOutstandingPrincipal is the tolerance percentage of
	// outstanding principal.
	TolerancePercentageOfOutstandingPrincipal float64 `protobuf:"fixed64,1,opt,name=TolerancePercentageOfOutstandingPrincipal,json=tolerance_percentage_of_outstanding_principal,proto3" json:"tolerance_percentage_of_outstanding_principal,omitempty"`
	// TolerancePeriod is the arrears tolerance period.
	TolerancePeriod int32 `protobuf:"varint,2,opt,name=TolerancePeriod,json=tolerance_period,proto3" json:"tolerance_period,omitempty"`
}

func (x *RestructureAccountArrearsSettings) Reset() {
	*x = RestructureAccountArrearsSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestructureAccountArrearsSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestructureAccountArrearsSettings) ProtoMessage() {}

func (x *RestructureAccountArrearsSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestructureAccountArrearsSettings.ProtoReflect.Descriptor instead.
func (*RestructureAccountArrearsSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{27}
}

func (x *RestructureAccountArrearsSettings) GetTolerancePercentageOfOutstandingPrincipal() float64 {
	if x != nil {
		return x.TolerancePercentageOfOutstandingPrincipal
	}
	return 0
}

func (x *RestructureAccountArrearsSettings) GetTolerancePeriod() int32 {
	if x != nil {
		return x.TolerancePeriod
	}
	return 0
}

// RestructureInterestSettings is the interest settings on the restructured
// account.
type RestructureInterestSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rate is the interest rate for the restructured account.
	Rate float64 `protobuf:"fixed64,1,opt,name=Rate,json=rate,proto3" json:"rate,omitempty"`
	// Spread is the interest spread for the restructured account.
	Spread float64 `protobuf:"fixed64,2,opt,name=Spread,json=spread,proto3" json:"spread,omitempty"`
}

func (x *RestructureInterestSettings) Reset() {
	*x = RestructureInterestSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestructureInterestSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestructureInterestSettings) ProtoMessage() {}

func (x *RestructureInterestSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestructureInterestSettings.ProtoReflect.Descriptor instead.
func (*RestructureInterestSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{28}
}

func (x *RestructureInterestSettings) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *RestructureInterestSettings) GetSpread() float64 {
	if x != nil {
		return x.Spread
	}
	return 0
}

// RestructurePenaltySettings is the penalty settings on the restructured
// account.
type RestructurePenaltySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PenaltyRate is the penalty rate for the restructured loan account.
	PenaltyRate float64 `protobuf:"fixed64,1,opt,name=PenaltyRate,json=penalty_rate,proto3" json:"penalty_rate,omitempty"`
}

func (x *RestructurePenaltySettings) Reset() {
	*x = RestructurePenaltySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestructurePenaltySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestructurePenaltySettings) ProtoMessage() {}

func (x *RestructurePenaltySettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestructurePenaltySettings.ProtoReflect.Descriptor instead.
func (*RestructurePenaltySettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{29}
}

func (x *RestructurePenaltySettings) GetPenaltyRate() float64 {
	if x != nil {
		return x.PenaltyRate
	}
	return 0
}

// RestructurePrincipalPaymentSettings is the principal payment settings on the
// restructured account.
type RestructurePrincipalPaymentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount is the fixed principal payment amount.
	Amount *v1.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Percentage is the principal payment percentage.
	Percentage float64 `protobuf:"fixed64,2,opt,name=Percentage,json=percentage,proto3" json:"percentage,omitempty"`
}

func (x *RestructurePrincipalPaymentSettings) Reset() {
	*x = RestructurePrincipalPaymentSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestructurePrincipalPaymentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestructurePrincipalPaymentSettings) ProtoMessage() {}

func (x *RestructurePrincipalPaymentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestructurePrincipalPaymentSettings.ProtoReflect.Descriptor instead.
func (*RestructurePrincipalPaymentSettings) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{30}
}

func (x *RestructurePrincipalPaymentSettings) GetAmount() *v1.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *RestructurePrincipalPaymentSettings) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// TrancheDisbursementDetails is the disbursement details regarding a loan
// tranche.
type TrancheDisbursementDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransactionID is the ID of the disbursement transaction.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"transaction_id,omitempty"`
	// ExpectedDisburseTime is the expected time of disbursement.
	ExpectedDisburseTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ExpectedDisburseTime,json=expected_disburse_time,proto3" json:"expected_disburse_time,omitempty"`
}

func (x *TrancheDisbursementDetails) Reset() {
	*x = TrancheDisbursementDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrancheDisbursementDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrancheDisbursementDetails) ProtoMessage() {}

func (x *TrancheDisbursementDetails) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrancheDisbursementDetails.ProtoReflect.Descriptor instead.
func (*TrancheDisbursementDetails) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{31}
}

func (x *TrancheDisbursementDetails) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *TrancheDisbursementDetails) GetExpectedDisburseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedDisburseTime
	}
	return nil
}

// Transaction is the details for a loan transaction.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChannelID is the ID of the channel that the transaction was performed on.
	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,json=channel_id,proto3" json:"channel_id,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{32}
}

func (x *Transaction) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

// Schedule is a schedule for a loan account.
type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CurrencyCode is the code of the currency all transactions use.
	CurrencyCode string `protobuf:"bytes,1,opt,name=CurrencyCode,json=currency_code,proto3" json:"currency_code,omitempty"`
	// Transactions is the list of transactions for the loan account.
	Transactions []*Installment `protobuf:"bytes,2,rep,name=Transactions,json=transactions,proto3" json:"transactions,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{33}
}

func (x *Schedule) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Schedule) GetTransactions() []*Installment {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// CreateAccountRequest is the request to create a new account.
type CreateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the details of the new loan account.
	Body *Account `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateAccountRequest) Reset() {
	*x = CreateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequest) ProtoMessage() {}

func (x *CreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{34}
}

func (x *CreateAccountRequest) GetBody() *Account {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListAccountsRequest is the request to list accounts.
type ListAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageToken is the page token to use for the next page.
	PageToken string `protobuf:"bytes,1,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of accounts to return.
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// Filter is the filter to apply to the list.
	Filter string `protobuf:"bytes,3,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
	// OrderBy is the field to order the list by.
	OrderBy string `protobuf:"bytes,4,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
}

func (x *ListAccountsRequest) Reset() {
	*x = ListAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsRequest) ProtoMessage() {}

func (x *ListAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{35}
}

func (x *ListAccountsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAccountsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAccountsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListAccountsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListAccountsResponse is the response for listing accounts.
type ListAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of accounts matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of accounts remaining in the list, including the
	// accounts in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Accounts is the list of accounts.
	Accounts []*Account `protobuf:"bytes,3,rep,name=Accounts,json=accounts,proto3" json:"accounts,omitempty"`
	// NextPageToken is the page token for the next page.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAccountsResponse) Reset() {
	*x = ListAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsResponse) ProtoMessage() {}

func (x *ListAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{36}
}

func (x *ListAccountsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListAccountsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListAccountsResponse) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *ListAccountsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetAccountRequest is the request to get an account.
type GetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to get.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{37}
}

func (x *GetAccountRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

// UpdateAccountRequest is the request to update an account.
type UpdateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to update.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the account to update.
	Body *Account `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateAccountRequest) Reset() {
	*x = UpdateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountRequest) ProtoMessage() {}

func (x *UpdateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateAccountRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *UpdateAccountRequest) GetBody() *Account {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteAccountRequest is the request to delete a loan account.
type DeleteAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to delete.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *DeleteAccountRequest) Reset() {
	*x = DeleteAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountRequest) ProtoMessage() {}

func (x *DeleteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteAccountRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

// NewAccountLock is the request body to apply a lock on a loan
// account.
type NewAccountLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LockedOperations is the list of operations to lock.
	LockedOperations []LockedOperations `protobuf:"varint,1,rep,packed,name=LockedOperations,json=locked_operations,proto3,enum=openbank.core.v1.loans.LockedOperations" json:"locked_operations,omitempty"`
	// Notes is extra user-readable details on the request.
	Notes string `protobuf:"bytes,2,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
}

func (x *NewAccountLock) Reset() {
	*x = NewAccountLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAccountLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAccountLock) ProtoMessage() {}

func (x *NewAccountLock) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAccountLock.ProtoReflect.Descriptor instead.
func (*NewAccountLock) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{40}
}

func (x *NewAccountLock) GetLockedOperations() []LockedOperations {
	if x != nil {
		return x.LockedOperations
	}
	return nil
}

func (x *NewAccountLock) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// ApplyAccountLockRequest is a request to apply a lock on a loan account.
type ApplyAccountLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the loan account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the request.
	Body *NewAccountLock `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *ApplyAccountLockRequest) Reset() {
	*x = ApplyAccountLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyAccountLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyAccountLockRequest) ProtoMessage() {}

func (x *ApplyAccountLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyAccountLockRequest.ProtoReflect.Descriptor instead.
func (*ApplyAccountLockRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{41}
}

func (x *ApplyAccountLockRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ApplyAccountLockRequest) GetBody() *NewAccountLock {
	if x != nil {
		return x.Body
	}
	return nil
}

// ApplyAccountUnlockRequest is a request to remove a lock from a loan account.
type ApplyAccountUnlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the loan account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Notes is extra user-readable details on the request.
	Notes string `protobuf:"bytes,2,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
}

func (x *ApplyAccountUnlockRequest) Reset() {
	*x = ApplyAccountUnlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyAccountUnlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyAccountUnlockRequest) ProtoMessage() {}

func (x *ApplyAccountUnlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyAccountUnlockRequest.ProtoReflect.Descriptor instead.
func (*ApplyAccountUnlockRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{42}
}

func (x *ApplyAccountUnlockRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ApplyAccountUnlockRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// CreateCardRequest is the request to create a new card.
type CreateCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to create the card for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the new card.
	Body *cards.Card `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateCardRequest) Reset() {
	*x = CreateCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCardRequest) ProtoMessage() {}

func (x *CreateCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCardRequest.ProtoReflect.Descriptor instead.
func (*CreateCardRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{43}
}

func (x *CreateCardRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateCardRequest) GetBody() *cards.Card {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListCardsRequest is the request to list cards of a loan account.
type ListCardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to list cards for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// PageToken is the page token to use for the next page.
	PageToken string `protobuf:"bytes,2,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of cards to return.
	PageSize int32 `protobuf:"varint,3,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// Filter is the filter to apply to the list.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
	// OrderBy is the field to order the list by.
	OrderBy string `protobuf:"bytes,5,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
}

func (x *ListCardsRequest) Reset() {
	*x = ListCardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCardsRequest) ProtoMessage() {}

func (x *ListCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCardsRequest.ProtoReflect.Descriptor instead.
func (*ListCardsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{44}
}

func (x *ListCardsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListCardsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCardsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCardsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListCardsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListCardsResponse is the response for listing cards.
type ListCardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of cards matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of cards remaining in the list, including the
	// cards in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Cards is the cards that were retrieved.
	Cards []*cards.Card `protobuf:"bytes,3,rep,name=Cards,json=cards,proto3" json:"cards,omitempty"`
	// NextPageToken is the page token for the next page.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListCardsResponse) Reset() {
	*x = ListCardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCardsResponse) ProtoMessage() {}

func (x *ListCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCardsResponse.ProtoReflect.Descriptor instead.
func (*ListCardsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{45}
}

func (x *ListCardsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCardsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListCardsResponse) GetCards() []*cards.Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *ListCardsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetCardRequest is the request to retrieve a card.
type GetCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to get the card for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// CardID is the ID of the card to get.
	CardID string `protobuf:"bytes,2,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
}

func (x *GetCardRequest) Reset() {
	*x = GetCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardRequest) ProtoMessage() {}

func (x *GetCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardRequest.ProtoReflect.Descriptor instead.
func (*GetCardRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{46}
}

func (x *GetCardRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetCardRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

// DeleteCardRequest is the request to delete a card.
type DeleteCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to delete the card for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// CardID is the ID of the card to get.
	CardID string `protobuf:"bytes,2,opt,name=CardID,json=card_id,proto3" json:"card_id,omitempty"`
}

func (x *DeleteCardRequest) Reset() {
	*x = DeleteCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCardRequest) ProtoMessage() {}

func (x *DeleteCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCardRequest.ProtoReflect.Descriptor instead.
func (*DeleteCardRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{47}
}

func (x *DeleteCardRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *DeleteCardRequest) GetCardID() string {
	if x != nil {
		return x.CardID
	}
	return ""
}

// CreateFundingRequest is the request to create a new funding source.
type CreateFundingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to create the funding source for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the new funding source.
	Body *InvestorFund `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *CreateFundingRequest) Reset() {
	*x = CreateFundingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFundingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFundingRequest) ProtoMessage() {}

func (x *CreateFundingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFundingRequest.ProtoReflect.Descriptor instead.
func (*CreateFundingRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{48}
}

func (x *CreateFundingRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CreateFundingRequest) GetBody() *InvestorFund {
	if x != nil {
		return x.Body
	}
	return nil
}

// ListFundingsRequest is the request to list funding sources of a loan account.
type ListFundingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to list funding sources for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// PageToken is the page token to use for the next page.
	PageToken string `protobuf:"bytes,2,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of funding sources to return.
	PageSize int32 `protobuf:"varint,3,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// Filter is the filter to apply to the list.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
	// OrderBy is the field to order the list by.
	OrderBy string `protobuf:"bytes,5,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
}

func (x *ListFundingsRequest) Reset() {
	*x = ListFundingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFundingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFundingsRequest) ProtoMessage() {}

func (x *ListFundingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFundingsRequest.ProtoReflect.Descriptor instead.
func (*ListFundingsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{49}
}

func (x *ListFundingsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListFundingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListFundingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFundingsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListFundingsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListFundingsResponse is the response for listing funding sources.
type ListFundingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of funds matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of funds remaining in the list, including the
	// funds in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Funds is the funding sources that were retrieved.
	Funds []*InvestorFund `protobuf:"bytes,3,rep,name=Funds,json=funds,proto3" json:"funds,omitempty"`
	// NextPageToken is the page token for the next page.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFundingsResponse) Reset() {
	*x = ListFundingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFundingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFundingsResponse) ProtoMessage() {}

func (x *ListFundingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFundingsResponse.ProtoReflect.Descriptor instead.
func (*ListFundingsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{50}
}

func (x *ListFundingsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListFundingsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListFundingsResponse) GetFunds() []*InvestorFund {
	if x != nil {
		return x.Funds
	}
	return nil
}

func (x *ListFundingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// GetFundingRequest is the request to retrieve a funding source.
type GetFundingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to retrieve the funding source for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// FundID is the ID of the funding source to retrieve.
	FundID string `protobuf:"bytes,2,opt,name=FundID,json=fund_id,proto3" json:"fund_id,omitempty"`
}

func (x *GetFundingRequest) Reset() {
	*x = GetFundingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFundingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFundingRequest) ProtoMessage() {}

func (x *GetFundingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFundingRequest.ProtoReflect.Descriptor instead.
func (*GetFundingRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{51}
}

func (x *GetFundingRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetFundingRequest) GetFundID() string {
	if x != nil {
		return x.FundID
	}
	return ""
}

// UpdateFundingRequest is the request to update the specified funding source.
type UpdateFundingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to update the funding sources for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// FundID is the ID of the funding source to update.
	FundID string `protobuf:"bytes,2,opt,name=FundID,json=fund_id,proto3" json:"fund_id,omitempty"`
	// Body is the details of the new funding source.
	Body *InvestorFund `protobuf:"bytes,3,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UpdateFundingRequest) Reset() {
	*x = UpdateFundingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFundingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFundingRequest) ProtoMessage() {}

func (x *UpdateFundingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFundingRequest.ProtoReflect.Descriptor instead.
func (*UpdateFundingRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateFundingRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *UpdateFundingRequest) GetFundID() string {
	if x != nil {
		return x.FundID
	}
	return ""
}

func (x *UpdateFundingRequest) GetBody() *InvestorFund {
	if x != nil {
		return x.Body
	}
	return nil
}

// DeleteFundingRequest is the request to delete the specified funding
// source.
type DeleteFundingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to delete the funding sources for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// FundID is the ID of the funding sources to delete.
	FundID string `protobuf:"bytes,2,opt,name=FundID,json=fund_id,proto3" json:"fund_id,omitempty"`
}

func (x *DeleteFundingRequest) Reset() {
	*x = DeleteFundingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFundingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFundingRequest) ProtoMessage() {}

func (x *DeleteFundingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFundingRequest.ProtoReflect.Descriptor instead.
func (*DeleteFundingRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteFundingRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *DeleteFundingRequest) GetFundID() string {
	if x != nil {
		return x.FundID
	}
	return ""
}

// SellFundingRequest is a request to sell a funding request to other investors.
type SellFundingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to delete the funding sources for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// FundID is the ID of the funding source.
	FundID string `protobuf:"bytes,2,opt,name=FundID,json=fund_id,proto3" json:"fund_id,omitempty"`
	// Body is the purchase list of the funding source.
	Body *FundingSale `protobuf:"bytes,3,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *SellFundingRequest) Reset() {
	*x = SellFundingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellFundingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellFundingRequest) ProtoMessage() {}

func (x *SellFundingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellFundingRequest.ProtoReflect.Descriptor instead.
func (*SellFundingRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{54}
}

func (x *SellFundingRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *SellFundingRequest) GetFundID() string {
	if x != nil {
		return x.FundID
	}
	return ""
}

func (x *SellFundingRequest) GetBody() *FundingSale {
	if x != nil {
		return x.Body
	}
	return nil
}

// SellFundingResponse is the response for selling a funding request to other
// investors.
type SellFundingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transactions is a list of deposit transactions that were created as a
	// result of the sale. It includes credit transactions from the buyers and a
	// debit transaction to the seller.
	Transactions []*transactions.DepositTransaction `protobuf:"bytes,1,rep,name=Transactions,json=transactions,proto3" json:"transactions,omitempty"`
}

func (x *SellFundingResponse) Reset() {
	*x = SellFundingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellFundingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellFundingResponse) ProtoMessage() {}

func (x *SellFundingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellFundingResponse.ProtoReflect.Descriptor instead.
func (*SellFundingResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{55}
}

func (x *SellFundingResponse) GetTransactions() []*transactions.DepositTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// GetInstallmentRequest is the request to retrieve an installment.
type GetInstallmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to retrieve the installment for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// InstallmentID is the ID of the installment to retrieve.
	InstallmentID string `protobuf:"bytes,2,opt,name=InstallmentID,json=installment_id,proto3" json:"installment_id,omitempty"`
}

func (x *GetInstallmentRequest) Reset() {
	*x = GetInstallmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstallmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstallmentRequest) ProtoMessage() {}

func (x *GetInstallmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstallmentRequest.ProtoReflect.Descriptor instead.
func (*GetInstallmentRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{56}
}

func (x *GetInstallmentRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetInstallmentRequest) GetInstallmentID() string {
	if x != nil {
		return x.InstallmentID
	}
	return ""
}

// ListInstallmentsRequest is a request to list the installments of a loan
// account.
type ListInstallmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to list installments for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// PageToken is the page token to use for the next page.
	PageToken string `protobuf:"bytes,2,opt,name=PageToken,json=page_token,proto3" json:"page_token,omitempty"`
	// PageSize is the number of installments to return.
	PageSize int32 `protobuf:"varint,3,opt,name=PageSize,json=page_size,proto3" json:"page_size,omitempty"`
	// Filter is the filter to apply to the list.
	Filter string `protobuf:"bytes,4,opt,name=Filter,json=filter,proto3" json:"filter,omitempty"`
	// OrderBy is the field to order the list by.
	OrderBy string `protobuf:"bytes,5,opt,name=OrderBy,json=order_by,proto3" json:"order_by,omitempty"`
}

func (x *ListInstallmentsRequest) Reset() {
	*x = ListInstallmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstallmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstallmentsRequest) ProtoMessage() {}

func (x *ListInstallmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstallmentsRequest.ProtoReflect.Descriptor instead.
func (*ListInstallmentsRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{57}
}

func (x *ListInstallmentsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ListInstallmentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListInstallmentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInstallmentsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListInstallmentsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// ListInstallmentsResponse is the response for listing installments.
type ListInstallmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total is the total number of installments matching the filter.
	Total int32 `protobuf:"varint,1,opt,name=Total,json=total,proto3" json:"total,omitempty"`
	// Remaining is the number of installments remaining in the list, including
	// the installments in the response.
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,json=remaining,proto3" json:"remaining,omitempty"`
	// Installments is the list of installments that were retrieved.
	Installments []*Installment `protobuf:"bytes,3,rep,name=Installments,json=installments,proto3" json:"installments,omitempty"`
	// NextPageToken is the page token for the next page.
	NextPageToken string `protobuf:"bytes,4,opt,name=NextPageToken,json=next_page_token,proto3" json:"next_page_token,omitempty"`
}

func (x *ListInstallmentsResponse) Reset() {
	*x = ListInstallmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstallmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstallmentsResponse) ProtoMessage() {}

func (x *ListInstallmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstallmentsResponse.ProtoReflect.Descriptor instead.
func (*ListInstallmentsResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{58}
}

func (x *ListInstallmentsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListInstallmentsResponse) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *ListInstallmentsResponse) GetInstallments() []*Installment {
	if x != nil {
		return x.Installments
	}
	return nil
}

func (x *ListInstallmentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// NewInterest is the details of a new interest.
type NewInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IsPaymentHolidays is the flag to indicate if the interest is paid on
	// holidays.
	IsPaymentHolidays bool `protobuf:"varint,1,opt,name=IsPaymentHolidays,json=is_payment_holidays,proto3" json:"is_payment_holidays,omitempty"`
	// HolidayAmount is the amount of Payment Holidays interest to apply.
	HolidayAmount *v1.Amount `protobuf:"bytes,2,opt,name=HolidayAmount,json=holiday_amount,proto3" json:"holiday_amount,omitempty"`
	// ValueTime is the time the interest should be applied.
	ValueTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ValueTime,json=value_time,proto3" json:"value_time,omitempty"`
	// Notes is the notes for applying the interest.
	Notes string `protobuf:"bytes,4,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
}

func (x *NewInterest) Reset() {
	*x = NewInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewInterest) ProtoMessage() {}

func (x *NewInterest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewInterest.ProtoReflect.Descriptor instead.
func (*NewInterest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{59}
}

func (x *NewInterest) GetIsPaymentHolidays() bool {
	if x != nil {
		return x.IsPaymentHolidays
	}
	return false
}

func (x *NewInterest) GetHolidayAmount() *v1.Amount {
	if x != nil {
		return x.HolidayAmount
	}
	return nil
}

func (x *NewInterest) GetValueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueTime
	}
	return nil
}

func (x *NewInterest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// ApplyInterestRequest is the request to create a new interest.
type ApplyInterestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to create the interest for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the new interest to apply.
	Body *NewInterest `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *ApplyInterestRequest) Reset() {
	*x = ApplyInterestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyInterestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyInterestRequest) ProtoMessage() {}

func (x *ApplyInterestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyInterestRequest.ProtoReflect.Descriptor instead.
func (*ApplyInterestRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{60}
}

func (x *ApplyInterestRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ApplyInterestRequest) GetBody() *NewInterest {
	if x != nil {
		return x.Body
	}
	return nil
}

// NewRepayment is the details of a new repayment.
type NewRepayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PaymentID is the ID of the repayment.
	PaymentID string `protobuf:"bytes,1,opt,name=PaymentID,json=payment_id,proto3" json:"payment_id,omitempty"`
	// Amount is the amount repaid.
	Amount *PaymentAmounts `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	// Transaction is the transaction for the repayment.
	Transaction *Transaction `protobuf:"bytes,3,opt,name=Transaction,json=transaction,proto3" json:"transaction,omitempty"`
	// EntryTime is the time the repayment was made.
	EntryTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=EntryTime,json=entry_time,proto3" json:"entry_time,omitempty"`
	// Notes is the notes for the repayment.
	Notes string `protobuf:"bytes,5,opt,name=Notes,json=notes,proto3" json:"notes,omitempty"`
}

func (x *NewRepayment) Reset() {
	*x = NewRepayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRepayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRepayment) ProtoMessage() {}

func (x *NewRepayment) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRepayment.ProtoReflect.Descriptor instead.
func (*NewRepayment) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{61}
}

func (x *NewRepayment) GetPaymentID() string {
	if x != nil {
		return x.PaymentID
	}
	return ""
}

func (x *NewRepayment) GetAmount() *PaymentAmounts {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *NewRepayment) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *NewRepayment) GetEntryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EntryTime
	}
	return nil
}

func (x *NewRepayment) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// PreviewRepaymentRequest is the request to preview a new repayment.
type PreviewRepaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to preview the repayment for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the new repayment.
	Body *NewRepayment `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *PreviewRepaymentRequest) Reset() {
	*x = PreviewRepaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewRepaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewRepaymentRequest) ProtoMessage() {}

func (x *PreviewRepaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewRepaymentRequest.ProtoReflect.Descriptor instead.
func (*PreviewRepaymentRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{62}
}

func (x *PreviewRepaymentRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *PreviewRepaymentRequest) GetBody() *NewRepayment {
	if x != nil {
		return x.Body
	}
	return nil
}

// PreviewRepaymentResponse is the response for previewing a repayment. It
// contains the balances after the repayment is applied.
type PreviewRepaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FeeBalance is the fee balance after the repayment.
	FeeBalance *v1.Amount `protobuf:"bytes,1,opt,name=FeeBalance,json=fee_balance,proto3" json:"fee_balance,omitempty"`
	// InterestBalance is the interest balance after the repayment.
	InterestBalance *v1.Amount `protobuf:"bytes,2,opt,name=InterestBalance,json=interest_balance,proto3" json:"interest_balance,omitempty"`
	// PenaltyBalance is the penalty balance after the repayment.
	PenaltyBalance *v1.Amount `protobuf:"bytes,3,opt,name=PenaltyBalance,json=penalty_balance,proto3" json:"penalty_balance,omitempty"`
	// PrincipalBalance is the principal balance after the repayment.
	PrincipalBalance *v1.Amount `protobuf:"bytes,4,opt,name=PrincipalBalance,json=principal_balance,proto3" json:"principal_balance,omitempty"`
	// TotalBalance is the total balance after the repayment.
	TotalBalance *v1.Amount `protobuf:"bytes,5,opt,name=TotalBalance,json=total_balance,proto3" json:"total_balance,omitempty"`
}

func (x *PreviewRepaymentResponse) Reset() {
	*x = PreviewRepaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewRepaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewRepaymentResponse) ProtoMessage() {}

func (x *PreviewRepaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewRepaymentResponse.ProtoReflect.Descriptor instead.
func (*PreviewRepaymentResponse) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{63}
}

func (x *PreviewRepaymentResponse) GetFeeBalance() *v1.Amount {
	if x != nil {
		return x.FeeBalance
	}
	return nil
}

func (x *PreviewRepaymentResponse) GetInterestBalance() *v1.Amount {
	if x != nil {
		return x.InterestBalance
	}
	return nil
}

func (x *PreviewRepaymentResponse) GetPenaltyBalance() *v1.Amount {
	if x != nil {
		return x.PenaltyBalance
	}
	return nil
}

func (x *PreviewRepaymentResponse) GetPrincipalBalance() *v1.Amount {
	if x != nil {
		return x.PrincipalBalance
	}
	return nil
}

func (x *PreviewRepaymentResponse) GetTotalBalance() *v1.Amount {
	if x != nil {
		return x.TotalBalance
	}
	return nil
}

// GetDocumentRequest is the request to retrieve a document.
type GetDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to retrieve the document for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// TemplateID is the ID of the template to generate the document based on.
	TemplateID string `protobuf:"bytes,2,opt,name=TemplateID,json=template_id,proto3" json:"template_id,omitempty"`
	// StartTime is the start time of transactions to generate transaction
	// history for.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=StartTime,json=start_time,proto3" json:"start_time,omitempty"`
	// EndTime is the end time of transactions to generate transaction history
	// for.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=EndTime,json=end_time,proto3" json:"end_time,omitempty"`
}

func (x *GetDocumentRequest) Reset() {
	*x = GetDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentRequest) ProtoMessage() {}

func (x *GetDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{64}
}

func (x *GetDocumentRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetDocumentRequest) GetTemplateID() string {
	if x != nil {
		return x.TemplateID
	}
	return ""
}

func (x *GetDocumentRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetDocumentRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// GetScheduleRequest is the request to retrieve a loan account schedule.
type GetScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to retrieve the schedule for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *GetScheduleRequest) Reset() {
	*x = GetScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleRequest) ProtoMessage() {}

func (x *GetScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetScheduleRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{65}
}

func (x *GetScheduleRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

// PreviewScheduleRequest is the request to retrieve an account
// schedule preview.
type PreviewScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the parameters for a schedule to be previewed.
	Body *Account `protobuf:"bytes,1,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *PreviewScheduleRequest) Reset() {
	*x = PreviewScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewScheduleRequest) ProtoMessage() {}

func (x *PreviewScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewScheduleRequest.ProtoReflect.Descriptor instead.
func (*PreviewScheduleRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{66}
}

func (x *PreviewScheduleRequest) GetBody() *Account {
	if x != nil {
		return x.Body
	}
	return nil
}

// RefinanceRequest is the request to refinance a loan account.
type RefinanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to refinance.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the refinance action to take.
	Body *RefinanceAccountAction `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *RefinanceRequest) Reset() {
	*x = RefinanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefinanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefinanceRequest) ProtoMessage() {}

func (x *RefinanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefinanceRequest.ProtoReflect.Descriptor instead.
func (*RefinanceRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{67}
}

func (x *RefinanceRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *RefinanceRequest) GetBody() *RefinanceAccountAction {
	if x != nil {
		return x.Body
	}
	return nil
}

// RescheduleRequest is the request to reschedule a loan account.
type RescheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to reschedule.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the reschedule action to take.
	Body *RescheduleAccountAction `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *RescheduleRequest) Reset() {
	*x = RescheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RescheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleRequest) ProtoMessage() {}

func (x *RescheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleRequest.ProtoReflect.Descriptor instead.
func (*RescheduleRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{68}
}

func (x *RescheduleRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *RescheduleRequest) GetBody() *RescheduleAccountAction {
	if x != nil {
		return x.Body
	}
	return nil
}

// WriteOffRequest is the request to write off a loan account.
type WriteOffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to write off.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the write off.
	Body *ActionDetails `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *WriteOffRequest) Reset() {
	*x = WriteOffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteOffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOffRequest) ProtoMessage() {}

func (x *WriteOffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOffRequest.ProtoReflect.Descriptor instead.
func (*WriteOffRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{69}
}

func (x *WriteOffRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *WriteOffRequest) GetBody() *ActionDetails {
	if x != nil {
		return x.Body
	}
	return nil
}

// UndoRefinanceRequest is the request to undo a refinance action.
type UndoRefinanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to undo the refinance action for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the undo refinance action.
	Body *ActionDetails `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UndoRefinanceRequest) Reset() {
	*x = UndoRefinanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoRefinanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoRefinanceRequest) ProtoMessage() {}

func (x *UndoRefinanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoRefinanceRequest.ProtoReflect.Descriptor instead.
func (*UndoRefinanceRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{70}
}

func (x *UndoRefinanceRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *UndoRefinanceRequest) GetBody() *ActionDetails {
	if x != nil {
		return x.Body
	}
	return nil
}

// UndoRescheduleRequest is the request to undo a reschedule action.
type UndoRescheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to undo the reschedule action for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the undo reschedule action.
	Body *ActionDetails `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UndoRescheduleRequest) Reset() {
	*x = UndoRescheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoRescheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoRescheduleRequest) ProtoMessage() {}

func (x *UndoRescheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoRescheduleRequest.ProtoReflect.Descriptor instead.
func (*UndoRescheduleRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{71}
}

func (x *UndoRescheduleRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *UndoRescheduleRequest) GetBody() *ActionDetails {
	if x != nil {
		return x.Body
	}
	return nil
}

// UndoWriteOffRequest is the request to undo a write off action.
type UndoWriteOffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccountID is the ID of the account to undo the write off action for.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Body is the details of the undo write off action.
	Body *ActionDetails `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"body,omitempty"`
}

func (x *UndoWriteOffRequest) Reset() {
	*x = UndoWriteOffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoWriteOffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoWriteOffRequest) ProtoMessage() {}

func (x *UndoWriteOffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bnk_to_core_api_v1_loans_all_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoWriteOffRequest.ProtoReflect.Descriptor instead.
func (*UndoWriteOffRequest) Descriptor() ([]byte, []int) {
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP(), []int{72}
}

func (x *UndoWriteOffRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *UndoWriteOffRequest) GetBody() *ActionDetails {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_bnk_to_core_api_v1_loans_all_proto protoreflect.FileDescriptor

var file_bnk_to_core_api_v1_loans_all_proto_rawDesc = []byte{
	0x0a, 0x22, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x1a, 0x0b, 0x78, 0x6f,
	0x2f, 0x78, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x62, 0x6e, 0x6b, 0x2e,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x08, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x66,
	0x0a, 0x0b, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x4a, 0x0a,
	0x09, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x94, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x03, 0x44, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x03, 0x64, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64,
	0x12, 0x3e, 0x0a, 0x07, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64,
	0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xf8, 0x01,
	0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65,
	0x12, 0x21, 0x0a, 0x05, 0x46, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x65, 0x65,
	0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x47, 0x0a, 0x03, 0x54, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x74, 0x61, 0x78, 0x3a, 0x0b, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x03, 0x54, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x74, 0x61, 0x78, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xeb, 0x06, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x02, 0x08, 0x02, 0x52,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x46, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x65, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61,
	0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x10, 0x49, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0xda, 0x47, 0x02, 0x30, 0x01, 0x52, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x55, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1c, 0x2a, 0x1a, 0x0a, 0x0d, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x07, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x57,
	0x0a, 0x09, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x07, 0x44, 0x75, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x52, 0x65,
	0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xed, 0x09, 0x0a, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x07,
	0x46, 0x65, 0x65, 0x73, 0x44, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x64, 0x75, 0x65, 0x12, 0x41, 0x0a,
	0x08, 0x46, 0x65, 0x65, 0x73, 0x50, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x04, 0x48, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x44, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x12,
	0x5f, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41,
	0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x44, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x64, 0x75, 0x65,
	0x12, 0x61, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x50, 0x61, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x12, 0x3e,
	0x0a, 0x07, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x45,
	0x0a, 0x0a, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x44, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x5f, 0x64, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x50, 0x61, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x12, 0x42,
	0x0a, 0x09, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x12, 0x49, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x44,
	0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x65, 0x12, 0x4b, 0x0a,
	0x0d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x52, 0x65,
	0x64, 0x72, 0x61, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x46, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x0b,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xb6, 0x03, 0x0a, 0x13,
	0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x5c, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x62,
	0x75, 0x72, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x50,
	0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x4b, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72,
	0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x65, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x48, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0x7d, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3c, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47,
	0x02, 0x10, 0x01, 0x22, 0x8c, 0x02, 0x0a, 0x09, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f,
	0x72, 0x12, 0x2d, 0x0a, 0x0b, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x12, 0x4b, 0x0a, 0x0d, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x67,
	0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0xf2, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x46,
	0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda,
	0x47, 0x02, 0x08, 0x02, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x85, 0x05, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x07, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61,
	0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x12, 0x59, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x10,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x52, 0x65,
	0x64, 0x72, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x12, 0x57, 0x0a, 0x08, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22,
	0xad, 0x1e, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x02, 0x08, 0x02, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x48,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65,
	0x64, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x16, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x61, 0x72, 0x72, 0x65, 0x61,
	0x72, 0x73, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1d, 0x2a, 0x1b,
	0x0a, 0x0f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x52, 0x12, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x12,
	0x57, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x65, 0x6e, 0x74, 0x72,
	0x65, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1c, 0x2a, 0x1a, 0x0a, 0x0e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x12, 0x08, 0x43, 0x65, 0x6e, 0x74,
	0x72, 0x65, 0x49, 0x44, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x16, 0x2a,
	0x14, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61,
	0x6e, 0x73, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x5f, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x20, 0x2a, 0x1e, 0x0a, 0x11,
	0x72, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x14, 0x72, 0x65,
	0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1d, 0x2a, 0x1b, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x44, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x41, 0x72, 0x72,
	0x65, 0x61, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x61, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x44, 0x61, 0x79, 0x73, 0x4c,
	0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x6a, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x81, 0x01, 0x0a,
	0x18, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x55, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x41, 0x63,
	0x63, 0x72, 0x75, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x61, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64,
	0x12, 0x97, 0x01, 0x0a, 0x1f, 0x4c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x22, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x10, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47,
	0x1e, 0x2a, 0x1a, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x30, 0x01, 0x52,
	0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x12, 0x6f, 0x0a, 0x1e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x21, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x23, 0x2a, 0x21, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0xda, 0x47, 0x1e, 0x2a, 0x1a, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x30, 0x01, 0x52, 0x16, 0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0xda, 0x47, 0x1e,
	0x2a, 0x1a, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x30, 0x01, 0x52, 0x15,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x08,
	0x54, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x4b, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a,
	0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x0e, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x61,
	0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x57, 0x0a, 0x11, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x14, 0x74, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x3e, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22,
	0xc7, 0x02, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x13, 0x44, 0x69, 0x73,
	0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x04,
	0x46, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x46, 0x65, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x0b, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x08, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x16, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x46, 0x65, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66,
	0x65, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0xa8, 0x02, 0x0a, 0x1c, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x50, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x65, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73,
	0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xe6, 0x02,
	0x0a, 0x16, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x11, 0x4b, 0x65, 0x65, 0x70,
	0x53, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x14, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e,
	0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0d, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x68, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xcb, 0x07, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x7f, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x65,
	0x61, 0x72, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x72, 0x72,
	0x65, 0x61, 0x72, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x73, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x14, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x47, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x67, 0x75, 0x61, 0x72,
	0x61, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x6c, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x0f, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x85, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6c, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0xcf, 0x03, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x61, 0x79,
	0x73, 0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x2d, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4f,
	0x0a, 0x0f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x53, 0x0a, 0x1d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x16, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x07, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x3a, 0x0b, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x7e, 0x0a, 0x1d, 0x52, 0x65,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xa4, 0x08, 0x0a, 0x11, 0x52,
	0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x7f, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x74, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x62, 0x75,
	0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4d, 0x0a,
	0x0a, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x12,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x69, 0x0a, 0x0f, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x85, 0x01, 0x0a,
	0x18, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x6c, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10,
	0x01, 0x22, 0x9f, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x11, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x0f, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47,
	0x02, 0x10, 0x01, 0x22, 0xa6, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x36, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x50,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x09, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x3a,
	0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xd5, 0x01, 0x0a,
	0x21, 0x52, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x6c, 0x0a, 0x29, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x4f, 0x75, 0x74, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x2d, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x12, 0x35, 0x0a, 0x0f, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0x6e, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0x58, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x9c,
	0x01, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0xba, 0x01,
	0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x0d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12,
	0x5c, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x62, 0x75,
	0x72, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x0b, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01, 0x22, 0x45, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10,
	0x01, 0x22, 0x9d, 0x01, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x53, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10,
	0x01, 0x22, 0x5f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xe7, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x46, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x49, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa2, 0x01, 0x0a, 0x0e,
	0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x61,
	0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02, 0x10, 0x01,
	0x22, 0x94, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x4e,
	0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x70, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0xe4, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x05, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x68, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x6b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8f, 0x01, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x44, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x46, 0x75, 0x6e, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe7,
	0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08,
	0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a,
	0x05, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x46, 0x75,
	0x6e, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x6b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x06, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb4,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x6e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x46, 0x75, 0x6e, 0x64,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x46, 0x75, 0x6e, 0x64, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6c, 0x65, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x53, 0x65,
	0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x61, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x7d, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x31, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xeb, 0x01, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a,
	0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xf7, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x53, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x11, 0x49, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x69, 0x73, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x12,
	0x4b, 0x0a, 0x0d, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x68, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x09,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda, 0x47, 0x02,
	0x10, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x4e, 0x65,
	0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xce, 0x02, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x4a, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x3a, 0x0b, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0xda,
	0x47, 0x02, 0x10, 0x01, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61,
	0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa7, 0x03, 0x0a, 0x18, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a,
	0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4d,
	0x0a, 0x0e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a,
	0x10, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x49, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x61, 0x0a,
	0x16, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x95, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x12, 0x4e, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x45, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x90, 0x01, 0x0a, 0x14, 0x55, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x55, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x55, 0x6e, 0x64, 0x6f,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0xa0, 0x01, 0x0a, 0x10, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x10, 0x01, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x69, 0x64, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x20, 0x0a, 0x18,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x6c, 0x79, 0x50, 0x61, 0x69, 0x64, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18,
	0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61,
	0x63, 0x65, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xb0, 0x01, 0x0a,
	0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x17, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x41, 0x72, 0x72, 0x65, 0x61, 0x72, 0x73,
	0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a,
	0x90, 0x02, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x64, 0x10, 0x00,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x13, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x61, 0x69, 0x64, 0x10,
	0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x10,
	0x08, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02,
	0x18, 0x00, 0x2a, 0x79, 0x0a, 0x1f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x10, 0x4e, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1c, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a,
	0x12, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x7e, 0x0a,
	0x26, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x21, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x10, 0x00, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x25, 0x0a, 0x1d, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4c, 0x61, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x4c, 0x0a,
	0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x16, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x73, 0x0a, 0x10, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1e, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x1a, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x46, 0x65, 0x65, 0x73, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00,
	0x32, 0xe1, 0x24, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x26, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0x8f,
	0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x28, 0x00, 0x30, 0x00,
	0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x96, 0x01,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x32,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x1a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x6c, 0x6f, 0x63, 0x6b, 0x28, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x2a, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x28, 0x00, 0x12, 0x93,
	0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x29, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x22, 0x38, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x28, 0x00, 0x30, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12,
	0x90, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x22, 0x3b, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12,
	0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x7d, 0x28, 0x00,
	0x30, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x3b, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x7d, 0x28, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x22, 0x3b, 0x88, 0x02, 0x00, 0x90, 0x02,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x27, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x66, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x28, 0x00, 0x30,
	0x00, 0x12, 0xa1, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e,
	0x64, 0x22, 0x3e, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12,
	0x30, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x44,
	0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xad, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x22, 0x44, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x1a,
	0x30, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x44,
	0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3e, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f,
	0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x66, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x12,
	0xb5, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x35, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x66, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x7d, 0x3a, 0x73,
	0x65, 0x6c, 0x6c, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb3, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61,
	0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x49,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb4, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x28, 0x00, 0x30, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x40, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x3a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x28, 0x00,
	0x12, 0x94, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x22, 0x3d, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x64, 0x6f, 0x63, 0x2f, 0x7b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x35, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x28, 0x00, 0x30, 0x00,
	0x12, 0x97, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x2e, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x3a, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x28, 0x00, 0x30, 0x00, 0x12, 0xbe, 0x01, 0x0a, 0x10, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x43, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3c, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0x28, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a,
	0x72, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x28, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3d, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x7d, 0x3a, 0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x28, 0x00, 0x12, 0x8a,
	0x01, 0x0a, 0x08, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3b, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x28, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x0d,
	0x55, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x40, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x28, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x55, 0x6e, 0x64, 0x6f,
	0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x41, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x28, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x55, 0x6e, 0x64, 0x6f, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73,
	0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3f, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x6c,
	0x6f, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x3a, 0x75, 0x6e, 0x64, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x28, 0x00, 0x1a,
	0x03, 0x88, 0x02, 0x00, 0x42, 0x8d, 0x01, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x48,
	0x01, 0x50, 0x01, 0x5a, 0x1e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61, 0x6e, 0x73, 0x3b, 0x6c, 0x6f,
	0x61, 0x6e, 0x73, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8,
	0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x92, 0x41, 0x39, 0x0a, 0x03, 0x32, 0x2e, 0x30,
	0x12, 0x0b, 0x0a, 0x05, 0x4c, 0x6f, 0x61, 0x6e, 0x73, 0x32, 0x02, 0x76, 0x31, 0x2a, 0x01, 0x02,
	0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bnk_to_core_api_v1_loans_all_proto_rawDescOnce sync.Once
	file_bnk_to_core_api_v1_loans_all_proto_rawDescData = file_bnk_to_core_api_v1_loans_all_proto_rawDesc
)

func file_bnk_to_core_api_v1_loans_all_proto_rawDescGZIP() []byte {
	file_bnk_to_core_api_v1_loans_all_proto_rawDescOnce.Do(func() {
		file_bnk_to_core_api_v1_loans_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_bnk_to_core_api_v1_loans_all_proto_rawDescData)
	})
	return file_bnk_to_core_api_v1_loans_all_proto_rawDescData
}

var (
	file_bnk_to_core_api_v1_loans_all_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
	file_bnk_to_core_api_v1_loans_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 73)
	file_bnk_to_core_api_v1_loans_all_proto_goTypes   = []interface{}{
		(InstallmentState)(0),                       // 0: openbank.core.v1.loans.InstallmentState
		(AccountState)(0),                           // 1: openbank.core.v1.loans.AccountState
		(AccountSubState)(0),                        // 2: openbank.core.v1.loans.AccountSubState
		(AccountFuturePaymentsAcceptance)(0),        // 3: openbank.core.v1.loans.AccountFuturePaymentsAcceptance
		(AccountLatePaymentsRecalculationMethod)(0), // 4: openbank.core.v1.loans.AccountLatePaymentsRecalculationMethod
		(AccountPaymentMethod)(0),                   // 5: openbank.core.v1.loans.AccountPaymentMethod
		(LockedOperations)(0),                       // 6: openbank.core.v1.loans.LockedOperations
		(*Purchase)(nil),                            // 7: openbank.core.v1.loans.Purchase
		(*FundingSale)(nil),                         // 8: openbank.core.v1.loans.FundingSale
		(*InstallmentAmount)(nil),                   // 9: openbank.core.v1.loans.InstallmentAmount
		(*InstallmentFee)(nil),                      // 10: openbank.core.v1.loans.InstallmentFee
		(*InstallmentAllocation)(nil),               // 11: openbank.core.v1.loans.InstallmentAllocation
		(*Installment)(nil),                         // 12: openbank.core.v1.loans.Installment
		(*Balances)(nil),                            // 13: openbank.core.v1.loans.Balances
		(*CustomPredefinedFee)(nil),                 // 14: openbank.core.v1.loans.CustomPredefinedFee
		(*DisbursementDetails)(nil),                 // 15: openbank.core.v1.loans.DisbursementDetails
		(*Asset)(nil),                               // 16: openbank.core.v1.loans.Asset
		(*Guarantor)(nil),                           // 17: openbank.core.v1.loans.Guarantor
		(*InvestorFund)(nil),                        // 18: openbank.core.v1.loans.InvestorFund
		(*Settings)(nil),                            // 19: openbank.core.v1.loans.Settings
		(*Account)(nil),                             // 20: openbank.core.v1.loans.Account
		(*ActionDetails)(nil),                       // 21: openbank.core.v1.loans.ActionDetails
		(*Tranche)(nil),                             // 22: openbank.core.v1.loans.Tranche
		(*Transfer)(nil),                            // 23: openbank.core.v1.loans.Transfer
		(*PaymentAmounts)(nil),                      // 24: openbank.core.v1.loans.PaymentAmounts
		(*RefinanceDisbursementDetails)(nil),        // 25: openbank.core.v1.loans.RefinanceDisbursementDetails
		(*RefinanceAccountAction)(nil),              // 26: openbank.core.v1.loans.RefinanceAccountAction
		(*RefinanceAccount)(nil),                    // 27: openbank.core.v1.loans.RefinanceAccount
		(*RestructureScheduleSettings)(nil),         // 28: openbank.core.v1.loans.RestructureScheduleSettings
		(*RefinanceWriteOffAmounts)(nil),            // 29: openbank.core.v1.loans.RefinanceWriteOffAmounts
		(*RescheduleDisbursementDetails)(nil),       // 30: openbank.core.v1.loans.RescheduleDisbursementDetails
		(*RescheduleAccount)(nil),                   // 31: openbank.core.v1.loans.RescheduleAccount
		(*RescheduleAccountAction)(nil),             // 32: openbank.core.v1.loans.RescheduleAccountAction
		(*RescheduleWriteOffAmounts)(nil),           // 33: openbank.core.v1.loans.RescheduleWriteOffAmounts
		(*RestructureAccountArrearsSettings)(nil),   // 34: openbank.core.v1.loans.RestructureAccountArrearsSettings
		(*RestructureInterestSettings)(nil),         // 35: openbank.core.v1.loans.RestructureInterestSettings
		(*RestructurePenaltySettings)(nil),          // 36: openbank.core.v1.loans.RestructurePenaltySettings
		(*RestructurePrincipalPaymentSettings)(nil), // 37: openbank.core.v1.loans.RestructurePrincipalPaymentSettings
		(*TrancheDisbursementDetails)(nil),          // 38: openbank.core.v1.loans.TrancheDisbursementDetails
		(*Transaction)(nil),                         // 39: openbank.core.v1.loans.Transaction
		(*Schedule)(nil),                            // 40: openbank.core.v1.loans.Schedule
		(*CreateAccountRequest)(nil),                // 41: openbank.core.v1.loans.CreateAccountRequest
		(*ListAccountsRequest)(nil),                 // 42: openbank.core.v1.loans.ListAccountsRequest
		(*ListAccountsResponse)(nil),                // 43: openbank.core.v1.loans.ListAccountsResponse
		(*GetAccountRequest)(nil),                   // 44: openbank.core.v1.loans.GetAccountRequest
		(*UpdateAccountRequest)(nil),                // 45: openbank.core.v1.loans.UpdateAccountRequest
		(*DeleteAccountRequest)(nil),                // 46: openbank.core.v1.loans.DeleteAccountRequest
		(*NewAccountLock)(nil),                      // 47: openbank.core.v1.loans.NewAccountLock
		(*ApplyAccountLockRequest)(nil),             // 48: openbank.core.v1.loans.ApplyAccountLockRequest
		(*ApplyAccountUnlockRequest)(nil),           // 49: openbank.core.v1.loans.ApplyAccountUnlockRequest
		(*CreateCardRequest)(nil),                   // 50: openbank.core.v1.loans.CreateCardRequest
		(*ListCardsRequest)(nil),                    // 51: openbank.core.v1.loans.ListCardsRequest
		(*ListCardsResponse)(nil),                   // 52: openbank.core.v1.loans.ListCardsResponse
		(*GetCardRequest)(nil),                      // 53: openbank.core.v1.loans.GetCardRequest
		(*DeleteCardRequest)(nil),                   // 54: openbank.core.v1.loans.DeleteCardRequest
		(*CreateFundingRequest)(nil),                // 55: openbank.core.v1.loans.CreateFundingRequest
		(*ListFundingsRequest)(nil),                 // 56: openbank.core.v1.loans.ListFundingsRequest
		(*ListFundingsResponse)(nil),                // 57: openbank.core.v1.loans.ListFundingsResponse
		(*GetFundingRequest)(nil),                   // 58: openbank.core.v1.loans.GetFundingRequest
		(*UpdateFundingRequest)(nil),                // 59: openbank.core.v1.loans.UpdateFundingRequest
		(*DeleteFundingRequest)(nil),                // 60: openbank.core.v1.loans.DeleteFundingRequest
		(*SellFundingRequest)(nil),                  // 61: openbank.core.v1.loans.SellFundingRequest
		(*SellFundingResponse)(nil),                 // 62: openbank.core.v1.loans.SellFundingResponse
		(*GetInstallmentRequest)(nil),               // 63: openbank.core.v1.loans.GetInstallmentRequest
		(*ListInstallmentsRequest)(nil),             // 64: openbank.core.v1.loans.ListInstallmentsRequest
		(*ListInstallmentsResponse)(nil),            // 65: openbank.core.v1.loans.ListInstallmentsResponse
		(*NewInterest)(nil),                         // 66: openbank.core.v1.loans.NewInterest
		(*ApplyInterestRequest)(nil),                // 67: openbank.core.v1.loans.ApplyInterestRequest
		(*NewRepayment)(nil),                        // 68: openbank.core.v1.loans.NewRepayment
		(*PreviewRepaymentRequest)(nil),             // 69: openbank.core.v1.loans.PreviewRepaymentRequest
		(*PreviewRepaymentResponse)(nil),            // 70: openbank.core.v1.loans.PreviewRepaymentResponse
		(*GetDocumentRequest)(nil),                  // 71: openbank.core.v1.loans.GetDocumentRequest
		(*GetScheduleRequest)(nil),                  // 72: openbank.core.v1.loans.GetScheduleRequest
		(*PreviewScheduleRequest)(nil),              // 73: openbank.core.v1.loans.PreviewScheduleRequest
		(*RefinanceRequest)(nil),                    // 74: openbank.core.v1.loans.RefinanceRequest
		(*RescheduleRequest)(nil),                   // 75: openbank.core.v1.loans.RescheduleRequest
		(*WriteOffRequest)(nil),                     // 76: openbank.core.v1.loans.WriteOffRequest
		(*UndoRefinanceRequest)(nil),                // 77: openbank.core.v1.loans.UndoRefinanceRequest
		(*UndoRescheduleRequest)(nil),               // 78: openbank.core.v1.loans.UndoRescheduleRequest
		(*UndoWriteOffRequest)(nil),                 // 79: openbank.core.v1.loans.UndoWriteOffRequest
		(*v1.Amount)(nil),                           // 80: openbank.core.v1.Amount
		(*timestamppb.Timestamp)(nil),               // 81: google.protobuf.Timestamp
		(v1.Entity)(0),                              // 82: openbank.core.v1.Entity
		(*products.ArrearsSettings)(nil),            // 83: openbank.core.v1.products.ArrearsSettings
		(*products.LoanInterestSettings)(nil),       // 84: openbank.core.v1.products.LoanInterestSettings
		(*products.PenaltySettings)(nil),            // 85: openbank.core.v1.products.PenaltySettings
		(*products.PrepaymentSettings)(nil),         // 86: openbank.core.v1.products.PrepaymentSettings
		(*products.PrincipalPaymentSettings)(nil),   // 87: openbank.core.v1.products.PrincipalPaymentSettings
		(*products.RedrawSettings)(nil),             // 88: openbank.core.v1.products.RedrawSettings
		(*products.LoanScheduleSettings)(nil),       // 89: openbank.core.v1.products.LoanScheduleSettings
		(*durationpb.Duration)(nil),                 // 90: google.protobuf.Duration
		(*cards.Card)(nil),                          // 91: openbank.core.v1.cards.Card
		(*transactions.DepositTransaction)(nil),     // 92: openbank.core.v1.transactions.DepositTransaction
		(*emptypb.Empty)(nil),                       // 93: google.protobuf.Empty
		(*v1.File)(nil),                             // 94: openbank.core.v1.File
	}
)

var file_bnk_to_core_api_v1_loans_all_proto_depIdxs = []int32{
	80,  // 0: openbank.core.v1.loans.Purchase.Price:type_name -> openbank.core.v1.Amount
	7,   // 1: openbank.core.v1.loans.FundingSale.Purchases:type_name -> openbank.core.v1.loans.Purchase
	80,  // 2: openbank.core.v1.loans.InstallmentAmount.Expected:type_name -> openbank.core.v1.Amount
	80,  // 3: openbank.core.v1.loans.InstallmentAmount.Due:type_name -> openbank.core.v1.Amount
	80,  // 4: openbank.core.v1.loans.InstallmentAmount.Paid:type_name -> openbank.core.v1.Amount
	80,  // 5: openbank.core.v1.loans.InstallmentAmount.Reduced:type_name -> openbank.core.v1.Amount
	9,   // 6: openbank.core.v1.loans.InstallmentFee.Amount:type_name -> openbank.core.v1.loans.InstallmentAmount
	9,   // 7: openbank.core.v1.loans.InstallmentFee.Tax:type_name -> openbank.core.v1.loans.InstallmentAmount
	9,   // 8: openbank.core.v1.loans.InstallmentAllocation.Amount:type_name -> openbank.core.v1.loans.InstallmentAmount
	9,   // 9: openbank.core.v1.loans.InstallmentAllocation.Tax:type_name -> openbank.core.v1.loans.InstallmentAmount
	10,  // 10: openbank.core.v1.loans.Installment.Fees:type_name -> openbank.core.v1.loans.InstallmentFee
	11,  // 11: openbank.core.v1.loans.Installment.Interest:type_name -> openbank.core.v1.loans.InstallmentAllocation
	81,  // 12: openbank.core.v1.loans.Installment.PayTime:type_name -> google.protobuf.Timestamp
	11,  // 13: openbank.core.v1.loans.Installment.Penalty:type_name -> openbank.core.v1.loans.InstallmentAllocation
	11,  // 14: openbank.core.v1.loans.Installment.Principal:type_name -> openbank.core.v1.loans.InstallmentAllocation
	81,  // 15: openbank.core.v1.loans.Installment.DueTime:type_name -> google.protobuf.Timestamp
	81,  // 16: openbank.core.v1.loans.Installment.RepayTime:type_name -> google.protobuf.Timestamp
	0,   // 17: openbank.core.v1.loans.Installment.State:type_name -> openbank.core.v1.loans.InstallmentState
	80,  // 18: openbank.core.v1.loans.Balances.Fees:type_name -> openbank.core.v1.Amount
	80,  // 19: openbank.core.v1.loans.Balances.FeesDue:type_name -> openbank.core.v1.Amount
	80,  // 20: openbank.core.v1.loans.Balances.FeesPaid:type_name -> openbank.core.v1.Amount
	80,  // 21: openbank.core.v1.loans.Balances.Hold:type_name -> openbank.core.v1.Amount
	80,  // 22: openbank.core.v1.loans.Balances.Interest:type_name -> openbank.core.v1.Amount
	80,  // 23: openbank.core.v1.loans.Balances.InterestDue:type_name -> openbank.core.v1.Amount
	80,  // 24: openbank.core.v1.loans.Balances.InterestFromArrears:type_name -> openbank.core.v1.Amount
	80,  // 25: openbank.core.v1.loans.Balances.InterestFromArrearsDue:type_name -> openbank.core.v1.Amount
	80,  // 26: openbank.core.v1.loans.Balances.InterestFromArrearsPaid:type_name -> openbank.core.v1.Amount
	80,  // 27: openbank.core.v1.loans.Balances.InterestPaid:type_name -> openbank.core.v1.Amount
	80,  // 28: openbank.core.v1.loans.Balances.Penalty:type_name -> openbank.core.v1.Amount
	80,  // 29: openbank.core.v1.loans.Balances.PenaltyDue:type_name -> openbank.core.v1.Amount
	80,  // 30: openbank.core.v1.loans.Balances.PenaltyPaid:type_name -> openbank.core.v1.Amount
	80,  // 31: openbank.core.v1.loans.Balances.Principal:type_name -> openbank.core.v1.Amount
	80,  // 32: openbank.core.v1.loans.Balances.PrincipalDue:type_name -> openbank.core.v1.Amount
	80,  // 33: openbank.core.v1.loans.Balances.PrincipalPaid:type_name -> openbank.core.v1.Amount
	80,  // 34: openbank.core.v1.loans.Balances.Redraw:type_name -> openbank.core.v1.Amount
	80,  // 35: openbank.core.v1.loans.CustomPredefinedFee.Amount:type_name -> openbank.core.v1.Amount
	81,  // 36: openbank.core.v1.loans.DisbursementDetails.DisburseTime:type_name -> google.protobuf.Timestamp
	81,  // 37: openbank.core.v1.loans.DisbursementDetails.ExpectedDisburseTime:type_name -> google.protobuf.Timestamp
	81,  // 38: openbank.core.v1.loans.DisbursementDetails.FirstRepayTime:type_name -> google.protobuf.Timestamp
	14,  // 39: openbank.core.v1.loans.DisbursementDetails.Fees:type_name -> openbank.core.v1.loans.CustomPredefinedFee
	23,  // 40: openbank.core.v1.loans.DisbursementDetails.Transfer:type_name -> openbank.core.v1.loans.Transfer
	80,  // 41: openbank.core.v1.loans.Asset.Amount:type_name -> openbank.core.v1.Amount
	82,  // 42: openbank.core.v1.loans.Guarantor.GuarantorType:type_name -> openbank.core.v1.Entity
	80,  // 43: openbank.core.v1.loans.Guarantor.Amount:type_name -> openbank.core.v1.Amount
	80,  // 44: openbank.core.v1.loans.InvestorFund.Amount:type_name -> openbank.core.v1.Amount
	83,  // 45: openbank.core.v1.loans.Settings.Arrears:type_name -> openbank.core.v1.products.ArrearsSettings
	84,  // 46: openbank.core.v1.loans.Settings.Interest:type_name -> openbank.core.v1.products.LoanInterestSettings
	85,  // 47: openbank.core.v1.loans.Settings.Penalty:type_name -> openbank.core.v1.products.PenaltySettings
	86,  // 48: openbank.core.v1.loans.Settings.Prepayment:type_name -> openbank.core.v1.products.PrepaymentSettings
	87,  // 49: openbank.core.v1.loans.Settings.PrincipalPayment:type_name -> openbank.core.v1.products.PrincipalPaymentSettings
	88,  // 50: openbank.core.v1.loans.Settings.Redraw:type_name -> openbank.core.v1.products.RedrawSettings
	89,  // 51: openbank.core.v1.loans.Settings.Schedule:type_name -> openbank.core.v1.products.LoanScheduleSettings
	82,  // 52: openbank.core.v1.loans.Account.HolderType:type_name -> openbank.core.v1.Entity
	1,   // 53: openbank.core.v1.loans.Account.State:type_name -> openbank.core.v1.loans.AccountState
	2,   // 54: openbank.core.v1.loans.Account.SubState:type_name -> openbank.core.v1.loans.AccountSubState
	80,  // 55: openbank.core.v1.loans.Account.AccruedInterest:type_name -> openbank.core.v1.Amount
	80,  // 56: openbank.core.v1.loans.Account.AccruedPenalty:type_name -> openbank.core.v1.Amount
	16,  // 57: openbank.core.v1.loans.Account.Assets:type_name -> openbank.core.v1.loans.Asset
	17,  // 58: openbank.core.v1.loans.Account.Guarantors:type_name -> openbank.core.v1.loans.Guarantor
	13,  // 59: openbank.core.v1.loans.Account.Balances:type_name -> openbank.core.v1.loans.Balances
	15,  // 60: openbank.core.v1.loans.Account.DisbursementDetails:type_name -> openbank.core.v1.loans.DisbursementDetails
	3,   // 61: openbank.core.v1.loans.Account.FuturePaymentsAcceptance:type_name -> openbank.core.v1.loans.AccountFuturePaymentsAcceptance
	80,  // 62: openbank.core.v1.loans.Account.InterestCommission:type_name -> openbank.core.v1.Amount
	80,  // 63: openbank.core.v1.loans.Account.InterestFromArrearsAccrued:type_name -> openbank.core.v1.Amount
	4,   // 64: openbank.core.v1.loans.Account.LatePaymentsRecalculationMethod:type_name -> openbank.core.v1.loans.AccountLatePaymentsRecalculationMethod
	80,  // 65: openbank.core.v1.loans.Account.Amount:type_name -> openbank.core.v1.Amount
	6,   // 66: openbank.core.v1.loans.Account.LockedOperations:type_name -> openbank.core.v1.loans.LockedOperations
	80,  // 67: openbank.core.v1.loans.Account.PaymentHolidaysAccruedInterest:type_name -> openbank.core.v1.Amount
	5,   // 68: openbank.core.v1.loans.Account.PaymentMethod:type_name -> openbank.core.v1.loans.AccountPaymentMethod
	19,  // 69: openbank.core.v1.loans.Account.Settings:type_name -> openbank.core.v1.loans.Settings
	22,  // 70: openbank.core.v1.loans.Account.Tranches:type_name -> openbank.core.v1.loans.Tranche
	81,  // 71: openbank.core.v1.loans.Account.ApproveTime:type_name -> google.protobuf.Timestamp
	81,  // 72: openbank.core.v1.loans.Account.CloseTime:type_name -> google.protobuf.Timestamp
	81,  // 73: openbank.core.v1.loans.Account.CreateTime:type_name -> google.protobuf.Timestamp
	81,  // 74: openbank.core.v1.loans.Account.AppraiseTime:type_name -> google.protobuf.Timestamp
	81,  // 75: openbank.core.v1.loans.Account.InterestApplyTime:type_name -> google.protobuf.Timestamp
	81,  // 76: openbank.core.v1.loans.Account.InterestReviewTime:type_name -> google.protobuf.Timestamp
	81,  // 77: openbank.core.v1.loans.Account.LockTime:type_name -> google.protobuf.Timestamp
	81,  // 78: openbank.core.v1.loans.Account.UpdateTime:type_name -> google.protobuf.Timestamp
	81,  // 79: openbank.core.v1.loans.Account.ArrearsSetTime:type_name -> google.protobuf.Timestamp
	81,  // 80: openbank.core.v1.loans.Account.TaxRateReviewTime:type_name -> google.protobuf.Timestamp
	81,  // 81: openbank.core.v1.loans.Account.TerminateTime:type_name -> google.protobuf.Timestamp
	80,  // 82: openbank.core.v1.loans.Tranche.Amount:type_name -> openbank.core.v1.Amount
	38,  // 83: openbank.core.v1.loans.Tranche.DisbursementDetails:type_name -> openbank.core.v1.loans.TrancheDisbursementDetails
	14,  // 84: openbank.core.v1.loans.Tranche.Fees:type_name -> openbank.core.v1.loans.CustomPredefinedFee
	39,  // 85: openbank.core.v1.loans.Transfer.Transaction:type_name -> openbank.core.v1.loans.Transaction
	80,  // 86: openbank.core.v1.loans.PaymentAmounts.Fees:type_name -> openbank.core.v1.Amount
	80,  // 87: openbank.core.v1.loans.PaymentAmounts.Interest:type_name -> openbank.core.v1.Amount
	80,  // 88: openbank.core.v1.loans.PaymentAmounts.Penalty:type_name -> openbank.core.v1.Amount
	81,  // 89: openbank.core.v1.loans.RefinanceDisbursementDetails.ExpectedDisburseTime:type_name -> google.protobuf.Timestamp
	81,  // 90: openbank.core.v1.loans.RefinanceDisbursementDetails.FirstRepayTime:type_name -> google.protobuf.Timestamp
	14,  // 91: openbank.core.v1.loans.RefinanceDisbursementDetails.Fees:type_name -> openbank.core.v1.loans.CustomPredefinedFee
	27,  // 92: openbank.core.v1.loans.RefinanceAccountAction.Account:type_name -> openbank.core.v1.loans.RefinanceAccount
	80,  // 93: openbank.core.v1.loans.RefinanceAccountAction.TopUpAmount:type_name -> openbank.core.v1.Amount
	29,  // 94: openbank.core.v1.loans.RefinanceAccountAction.WriteOffAmounts:type_name -> openbank.core.v1.loans.RefinanceWriteOffAmounts
	34,  // 95: openbank.core.v1.loans.RefinanceAccount.AccountArrearsSettings:type_name -> openbank.core.v1.loans.RestructureAccountArrearsSettings
	25,  // 96: openbank.core.v1.loans.RefinanceAccount.DisbursementDetails:type_name -> openbank.core.v1.loans.RefinanceDisbursementDetails
	17,  // 97: openbank.core.v1.loans.RefinanceAccount.Guarantors:type_name -> openbank.core.v1.loans.Guarantor
	35,  // 98: openbank.core.v1.loans.RefinanceAccount.InterestSettings:type_name -> openbank.core.v1.loans.RestructureInterestSettings
	36,  // 99: openbank.core.v1.loans.RefinanceAccount.PenaltySettings:type_name -> openbank.core.v1.loans.RestructurePenaltySettings
	37,  // 100: openbank.core.v1.loans.RefinanceAccount.PrincipalPaymentSettings:type_name -> openbank.core.v1.loans.RestructurePrincipalPaymentSettings
	28,  // 101: openbank.core.v1.loans.RefinanceAccount.ScheduleSettings:type_name -> openbank.core.v1.loans.RestructureScheduleSettings
	80,  // 102: openbank.core.v1.loans.RestructureScheduleSettings.PeriodicPayment:type_name -> openbank.core.v1.Amount
	90,  // 103: openbank.core.v1.loans.RestructureScheduleSettings.RepaymentPeriod:type_name -> google.protobuf.Duration
	80,  // 104: openbank.core.v1.loans.RefinanceWriteOffAmounts.Fee:type_name -> openbank.core.v1.Amount
	80,  // 105: openbank.core.v1.loans.RefinanceWriteOffAmounts.Interest:type_name -> openbank.core.v1.Amount
	80,  // 106: openbank.core.v1.loans.RefinanceWriteOffAmounts.Penalty:type_name -> openbank.core.v1.Amount
	81,  // 107: openbank.core.v1.loans.RescheduleDisbursementDetails.FirstRepayTime:type_name -> google.protobuf.Timestamp
	34,  // 108: openbank.core.v1.loans.RescheduleAccount.AccountArrearsSettings:type_name -> openbank.core.v1.loans.RestructureAccountArrearsSettings
	30,  // 109: openbank.core.v1.loans.RescheduleAccount.DisbursementDetails:type_name -> openbank.core.v1.loans.RescheduleDisbursementDetails
	17,  // 110: openbank.core.v1.loans.RescheduleAccount.Guarantors:type_name -> openbank.core.v1.loans.Guarantor
	80,  // 111: openbank.core.v1.loans.RescheduleAccount.InterestCommission:type_name -> openbank.core.v1.Amount
	35,  // 112: openbank.core.v1.loans.RescheduleAccount.InterestSettings:type_name -> openbank.core.v1.loans.RestructureInterestSettings
	36,  // 113: openbank.core.v1.loans.RescheduleAccount.PenaltySettings:type_name -> openbank.core.v1.loans.RestructurePenaltySettings
	37,  // 114: openbank.core.v1.loans.RescheduleAccount.PrincipalPaymentSettings:type_name -> openbank.core.v1.loans.RestructurePrincipalPaymentSettings
	28,  // 115: openbank.core.v1.loans.RescheduleAccount.ScheduleSettings:type_name -> openbank.core.v1.loans.RestructureScheduleSettings
	31,  // 116: openbank.core.v1.loans.RescheduleAccountAction.Account:type_name -> openbank.core.v1.loans.RescheduleAccount
	33,  // 117: openbank.core.v1.loans.RescheduleAccountAction.WriteOffAmounts:type_name -> openbank.core.v1.loans.RescheduleWriteOffAmounts
	80,  // 118: openbank.core.v1.loans.RescheduleWriteOffAmounts.Fee:type_name -> openbank.core.v1.Amount
	80,  // 119: openbank.core.v1.loans.RescheduleWriteOffAmounts.Interest:type_name -> openbank.core.v1.Amount
	80,  // 120: openbank.core.v1.loans.RescheduleWriteOffAmounts.Penalty:type_name -> openbank.core.v1.Amount
	80,  // 121: openbank.core.v1.loans.RescheduleWriteOffAmounts.Principal:type_name -> openbank.core.v1.Amount
	80,  // 122: openbank.core.v1.loans.RestructurePrincipalPaymentSettings.Amount:type_name -> openbank.core.v1.Amount
	81,  // 123: openbank.core.v1.loans.TrancheDisbursementDetails.ExpectedDisburseTime:type_name -> google.protobuf.Timestamp
	12,  // 124: openbank.core.v1.loans.Schedule.Transactions:type_name -> openbank.core.v1.loans.Installment
	20,  // 125: openbank.core.v1.loans.CreateAccountRequest.Body:type_name -> openbank.core.v1.loans.Account
	20,  // 126: openbank.core.v1.loans.ListAccountsResponse.Accounts:type_name -> openbank.core.v1.loans.Account
	20,  // 127: openbank.core.v1.loans.UpdateAccountRequest.Body:type_name -> openbank.core.v1.loans.Account
	6,   // 128: openbank.core.v1.loans.NewAccountLock.LockedOperations:type_name -> openbank.core.v1.loans.LockedOperations
	47,  // 129: openbank.core.v1.loans.ApplyAccountLockRequest.Body:type_name -> openbank.core.v1.loans.NewAccountLock
	91,  // 130: openbank.core.v1.loans.CreateCardRequest.Body:type_name -> openbank.core.v1.cards.Card
	91,  // 131: openbank.core.v1.loans.ListCardsResponse.Cards:type_name -> openbank.core.v1.cards.Card
	18,  // 132: openbank.core.v1.loans.CreateFundingRequest.Body:type_name -> openbank.core.v1.loans.InvestorFund
	18,  // 133: openbank.core.v1.loans.ListFundingsResponse.Funds:type_name -> openbank.core.v1.loans.InvestorFund
	18,  // 134: openbank.core.v1.loans.UpdateFundingRequest.Body:type_name -> openbank.core.v1.loans.InvestorFund
	8,   // 135: openbank.core.v1.loans.SellFundingRequest.Body:type_name -> openbank.core.v1.loans.FundingSale
	92,  // 136: openbank.core.v1.loans.SellFundingResponse.Transactions:type_name -> openbank.core.v1.transactions.DepositTransaction
	12,  // 137: openbank.core.v1.loans.ListInstallmentsResponse.Installments:type_name -> openbank.core.v1.loans.Installment
	80,  // 138: openbank.core.v1.loans.NewInterest.HolidayAmount:type_name -> openbank.core.v1.Amount
	81,  // 139: openbank.core.v1.loans.NewInterest.ValueTime:type_name -> google.protobuf.Timestamp
	66,  // 140: openbank.core.v1.loans.ApplyInterestRequest.Body:type_name -> openbank.core.v1.loans.NewInterest
	24,  // 141: openbank.core.v1.loans.NewRepayment.Amount:type_name -> openbank.core.v1.loans.PaymentAmounts
	39,  // 142: openbank.core.v1.loans.NewRepayment.Transaction:type_name -> openbank.core.v1.loans.Transaction
	81,  // 143: openbank.core.v1.loans.NewRepayment.EntryTime:type_name -> google.protobuf.Timestamp
	68,  // 144: openbank.core.v1.loans.PreviewRepaymentRequest.Body:type_name -> openbank.core.v1.loans.NewRepayment
	80,  // 145: openbank.core.v1.loans.PreviewRepaymentResponse.FeeBalance:type_name -> openbank.core.v1.Amount
	80,  // 146: openbank.core.v1.loans.PreviewRepaymentResponse.InterestBalance:type_name -> openbank.core.v1.Amount
	80,  // 147: openbank.core.v1.loans.PreviewRepaymentResponse.PenaltyBalance:type_name -> openbank.core.v1.Amount
	80,  // 148: openbank.core.v1.loans.PreviewRepaymentResponse.PrincipalBalance:type_name -> openbank.core.v1.Amount
	80,  // 149: openbank.core.v1.loans.PreviewRepaymentResponse.TotalBalance:type_name -> openbank.core.v1.Amount
	81,  // 150: openbank.core.v1.loans.GetDocumentRequest.StartTime:type_name -> google.protobuf.Timestamp
	81,  // 151: openbank.core.v1.loans.GetDocumentRequest.EndTime:type_name -> google.protobuf.Timestamp
	20,  // 152: openbank.core.v1.loans.PreviewScheduleRequest.Body:type_name -> openbank.core.v1.loans.Account
	26,  // 153: openbank.core.v1.loans.RefinanceRequest.Body:type_name -> openbank.core.v1.loans.RefinanceAccountAction
	32,  // 154: openbank.core.v1.loans.RescheduleRequest.Body:type_name -> openbank.core.v1.loans.RescheduleAccountAction
	21,  // 155: openbank.core.v1.loans.WriteOffRequest.Body:type_name -> openbank.core.v1.loans.ActionDetails
	21,  // 156: openbank.core.v1.loans.UndoRefinanceRequest.Body:type_name -> openbank.core.v1.loans.ActionDetails
	21,  // 157: openbank.core.v1.loans.UndoRescheduleRequest.Body:type_name -> openbank.core.v1.loans.ActionDetails
	21,  // 158: openbank.core.v1.loans.UndoWriteOffRequest.Body:type_name -> openbank.core.v1.loans.ActionDetails
	41,  // 159: openbank.core.v1.loans.LoansService.CreateAccount:input_type -> openbank.core.v1.loans.CreateAccountRequest
	42,  // 160: openbank.core.v1.loans.LoansService.ListAccounts:input_type -> openbank.core.v1.loans.ListAccountsRequest
	44,  // 161: openbank.core.v1.loans.LoansService.GetAccount:input_type -> openbank.core.v1.loans.GetAccountRequest
	45,  // 162: openbank.core.v1.loans.LoansService.UpdateAccount:input_type -> openbank.core.v1.loans.UpdateAccountRequest
	46,  // 163: openbank.core.v1.loans.LoansService.DeleteAccount:input_type -> openbank.core.v1.loans.DeleteAccountRequest
	48,  // 164: openbank.core.v1.loans.LoansService.ApplyAccountLock:input_type -> openbank.core.v1.loans.ApplyAccountLockRequest
	49,  // 165: openbank.core.v1.loans.LoansService.ApplyAccountUnlock:input_type -> openbank.core.v1.loans.ApplyAccountUnlockRequest
	50,  // 166: openbank.core.v1.loans.LoansService.CreateCard:input_type -> openbank.core.v1.loans.CreateCardRequest
	51,  // 167: openbank.core.v1.loans.LoansService.ListCards:input_type -> openbank.core.v1.loans.ListCardsRequest
	53,  // 168: openbank.core.v1.loans.LoansService.GetCard:input_type -> openbank.core.v1.loans.GetCardRequest
	54,  // 169: openbank.core.v1.loans.LoansService.DeleteCard:input_type -> openbank.core.v1.loans.DeleteCardRequest
	55,  // 170: openbank.core.v1.loans.LoansService.CreateFunding:input_type -> openbank.core.v1.loans.CreateFundingRequest
	56,  // 171: openbank.core.v1.loans.LoansService.ListFundings:input_type -> openbank.core.v1.loans.ListFundingsRequest
	58,  // 172: openbank.core.v1.loans.LoansService.GetFunding:input_type -> openbank.core.v1.loans.GetFundingRequest
	59,  // 173: openbank.core.v1.loans.LoansService.UpdateFunding:input_type -> openbank.core.v1.loans.UpdateFundingRequest
	60,  // 174: openbank.core.v1.loans.LoansService.DeleteFunding:input_type -> openbank.core.v1.loans.DeleteFundingRequest
	61,  // 175: openbank.core.v1.loans.LoansService.SellFunding:input_type -> openbank.core.v1.loans.SellFundingRequest
	63,  // 176: openbank.core.v1.loans.LoansService.GetInstallment:input_type -> openbank.core.v1.loans.GetInstallmentRequest
	64,  // 177: openbank.core.v1.loans.LoansService.ListInstallments:input_type -> openbank.core.v1.loans.ListInstallmentsRequest
	67,  // 178: openbank.core.v1.loans.LoansService.ApplyInterest:input_type -> openbank.core.v1.loans.ApplyInterestRequest
	71,  // 179: openbank.core.v1.loans.LoansService.GetDocument:input_type -> openbank.core.v1.loans.GetDocumentRequest
	72,  // 180: openbank.core.v1.loans.LoansService.GetSchedule:input_type -> openbank.core.v1.loans.GetScheduleRequest
	73,  // 181: openbank.core.v1.loans.LoansService.PreviewSchedule:input_type -> openbank.core.v1.loans.PreviewScheduleRequest
	69,  // 182: openbank.core.v1.loans.LoansService.PreviewRepayment:input_type -> openbank.core.v1.loans.PreviewRepaymentRequest
	74,  // 183: openbank.core.v1.loans.LoansService.Refinance:input_type -> openbank.core.v1.loans.RefinanceRequest
	75,  // 184: openbank.core.v1.loans.LoansService.Reschedule:input_type -> openbank.core.v1.loans.RescheduleRequest
	76,  // 185: openbank.core.v1.loans.LoansService.WriteOff:input_type -> openbank.core.v1.loans.WriteOffRequest
	77,  // 186: openbank.core.v1.loans.LoansService.UndoRefinance:input_type -> openbank.core.v1.loans.UndoRefinanceRequest
	78,  // 187: openbank.core.v1.loans.LoansService.UndoReschedule:input_type -> openbank.core.v1.loans.UndoRescheduleRequest
	79,  // 188: openbank.core.v1.loans.LoansService.UndoWriteOff:input_type -> openbank.core.v1.loans.UndoWriteOffRequest
	20,  // 189: openbank.core.v1.loans.LoansService.CreateAccount:output_type -> openbank.core.v1.loans.Account
	43,  // 190: openbank.core.v1.loans.LoansService.ListAccounts:output_type -> openbank.core.v1.loans.ListAccountsResponse
	20,  // 191: openbank.core.v1.loans.LoansService.GetAccount:output_type -> openbank.core.v1.loans.Account
	20,  // 192: openbank.core.v1.loans.LoansService.UpdateAccount:output_type -> openbank.core.v1.loans.Account
	93,  // 193: openbank.core.v1.loans.LoansService.DeleteAccount:output_type -> google.protobuf.Empty
	93,  // 194: openbank.core.v1.loans.LoansService.ApplyAccountLock:output_type -> google.protobuf.Empty
	93,  // 195: openbank.core.v1.loans.LoansService.ApplyAccountUnlock:output_type -> google.protobuf.Empty
	91,  // 196: openbank.core.v1.loans.LoansService.CreateCard:output_type -> openbank.core.v1.cards.Card
	52,  // 197: openbank.core.v1.loans.LoansService.ListCards:output_type -> openbank.core.v1.loans.ListCardsResponse
	91,  // 198: openbank.core.v1.loans.LoansService.GetCard:output_type -> openbank.core.v1.cards.Card
	93,  // 199: openbank.core.v1.loans.LoansService.DeleteCard:output_type -> google.protobuf.Empty
	18,  // 200: openbank.core.v1.loans.LoansService.CreateFunding:output_type -> openbank.core.v1.loans.InvestorFund
	57,  // 201: openbank.core.v1.loans.LoansService.ListFundings:output_type -> openbank.core.v1.loans.ListFundingsResponse
	18,  // 202: openbank.core.v1.loans.LoansService.GetFunding:output_type -> openbank.core.v1.loans.InvestorFund
	18,  // 203: openbank.core.v1.loans.LoansService.UpdateFunding:output_type -> openbank.core.v1.loans.InvestorFund
	93,  // 204: openbank.core.v1.loans.LoansService.DeleteFunding:output_type -> google.protobuf.Empty
	62,  // 205: openbank.core.v1.loans.LoansService.SellFunding:output_type -> openbank.core.v1.loans.SellFundingResponse
	12,  // 206: openbank.core.v1.loans.LoansService.GetInstallment:output_type -> openbank.core.v1.loans.Installment
	65,  // 207: openbank.core.v1.loans.LoansService.ListInstallments:output_type -> openbank.core.v1.loans.ListInstallmentsResponse
	93,  // 208: openbank.core.v1.loans.LoansService.ApplyInterest:output_type -> google.protobuf.Empty
	94,  // 209: openbank.core.v1.loans.LoansService.GetDocument:output_type -> openbank.core.v1.File
	40,  // 210: openbank.core.v1.loans.LoansService.GetSchedule:output_type -> openbank.core.v1.loans.Schedule
	40,  // 211: openbank.core.v1.loans.LoansService.PreviewSchedule:output_type -> openbank.core.v1.loans.Schedule
	70,  // 212: openbank.core.v1.loans.LoansService.PreviewRepayment:output_type -> openbank.core.v1.loans.PreviewRepaymentResponse
	93,  // 213: openbank.core.v1.loans.LoansService.Refinance:output_type -> google.protobuf.Empty
	93,  // 214: openbank.core.v1.loans.LoansService.Reschedule:output_type -> google.protobuf.Empty
	93,  // 215: openbank.core.v1.loans.LoansService.WriteOff:output_type -> google.protobuf.Empty
	93,  // 216: openbank.core.v1.loans.LoansService.UndoRefinance:output_type -> google.protobuf.Empty
	93,  // 217: openbank.core.v1.loans.LoansService.UndoReschedule:output_type -> google.protobuf.Empty
	93,  // 218: openbank.core.v1.loans.LoansService.UndoWriteOff:output_type -> google.protobuf.Empty
	189, // [189:219] is the sub-list for method output_type
	159, // [159:189] is the sub-list for method input_type
	159, // [159:159] is the sub-list for extension type_name
	159, // [159:159] is the sub-list for extension extendee
	0,   // [0:159] is the sub-list for field type_name
}

func init() { file_bnk_to_core_api_v1_loans_all_proto_init() }
func file_bnk_to_core_api_v1_loans_all_proto_init() {
	if File_bnk_to_core_api_v1_loans_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Purchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingSale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallmentAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallmentFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallmentAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Installment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPredefinedFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisbursementDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Guarantor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestorFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tranche); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentAmounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefinanceDisbursementDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefinanceAccountAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefinanceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestructureScheduleSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefinanceWriteOffAmounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RescheduleDisbursementDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RescheduleAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RescheduleAccountAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RescheduleWriteOffAmounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestructureAccountArrearsSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestructureInterestSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestructurePenaltySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestructurePrincipalPaymentSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrancheDisbursementDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAccountLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyAccountLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyAccountUnlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFundingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFundingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFundingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFundingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFundingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFundingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellFundingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellFundingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstallmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstallmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstallmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyInterestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRepayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewRepaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewRepaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefinanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RescheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteOffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoRefinanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoRescheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bnk_to_core_api_v1_loans_all_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoWriteOffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bnk_to_core_api_v1_loans_all_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   73,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bnk_to_core_api_v1_loans_all_proto_goTypes,
		DependencyIndexes: file_bnk_to_core_api_v1_loans_all_proto_depIdxs,
		EnumInfos:         file_bnk_to_core_api_v1_loans_all_proto_enumTypes,
		MessageInfos:      file_bnk_to_core_api_v1_loans_all_proto_msgTypes,
	}.Build()
	File_bnk_to_core_api_v1_loans_all_proto = out.File
	file_bnk_to_core_api_v1_loans_all_proto_rawDesc = nil
	file_bnk_to_core_api_v1_loans_all_proto_goTypes = nil
	file_bnk_to_core_api_v1_loans_all_proto_depIdxs = nil
}
