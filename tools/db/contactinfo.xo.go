// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	core "bnk.to/core/api/v1"
)

// ContactInfo represents a row from 'contact_infos'.
type ContactInfo struct {
	ID         int32       `json:"id"`         // id
	FullName   string      `json:"full_name"`  // full_name
	Addresses  []byte      `json:"addresses"`  // addresses
	Telephones StringSlice `json:"telephones"` // telephones
	Emails     StringSlice `json:"emails"`     // emails
	Language   string      `json:"language"`   // language
	// xo fields
	Exists, Deleted bool
}

func NewContactInfo(pb *core.ContactInfo) (ContactInfo, error) {
	if pb == nil {
		return ContactInfo{}, ErrNilType{"ContactInfo"}
	}
	ci := ContactInfo{
		FullName:   pb.FullName,
		Telephones: pb.Telephones,
		Emails:     pb.Emails,
		Language:   pb.Language,
	}
	var err error
	ci.Addresses, err = marshalArray(pb.Addresses)
	if err != nil {
		return ContactInfo{}, err
	}
	return ci, nil
}

func (ci ContactInfo) PB() (*core.ContactInfo, error) {
	pb := &core.ContactInfo{
		FullName:   ci.FullName,
		Telephones: ci.Telephones,
		Emails:     ci.Emails,
		Language:   ci.Language,
	}
	var err error
	err = unmarshalArray(ci.Addresses, &pb.Addresses)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type ContactInfoRepository interface {
	InsertContactInfo(context.Context, *ContactInfo) error
	ListContactInfos(context.Context, string, int32, string, *ListPosition) (ListStat, []*ContactInfo, *ListPosition, error)

	// From contact_infos_pkey
	ContactInfoByID(context.Context, int32) (*ContactInfo, error)

	UpdateContactInfoByID(context.Context, *ContactInfo) error
	DeleteContactInfoByID(context.Context, int32) error
}
