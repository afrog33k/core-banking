// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/consumers"
)

// Consumer represents a row from 'consumers'.
type Consumer struct {
	ID                int32                 `json:"id"`                 // id
	ConsumerID        string                `json:"consumer_id"`        // consumer_id
	Name              string                `json:"name"`               // name
	Type              ConsumersConsumerType `json:"type"`               // type
	BranchID          string                `json:"branch_id"`          // branch_id
	Access            []byte                `json:"access"`             // access
	RoleID            string                `json:"role_id"`            // role_id
	TransactionLimits []byte                `json:"transaction_limits"` // transaction_limits
	CreateTime        time.Time             `json:"create_time"`        // create_time
	UpdateTime        time.Time             `json:"update_time"`        // update_time
	// xo fields
	Exists, Deleted bool
}

func NewConsumer(pb *consumers.Consumer) (Consumer, error) {
	if pb == nil {
		return Consumer{}, ErrNilType{"Consumer"}
	}
	c := Consumer{
		ConsumerID: pb.ConsumerID,
		Name:       pb.Name,
		Type:       NewConsumersConsumerType(pb.Type),
		BranchID:   pb.BranchID,
		RoleID:     pb.RoleID,
		CreateTime: pb.CreateTime.AsTime(),
		UpdateTime: pb.UpdateTime.AsTime(),
	}
	var err error
	c.Access, err = protojson.Marshal(pb.Access)
	if err != nil {
		return Consumer{}, err
	}
	c.TransactionLimits, err = json.Marshal(pb.TransactionLimits)
	if err != nil {
		return Consumer{}, err
	}
	return c, nil
}

func (c Consumer) PB() (*consumers.Consumer, error) {
	pb := &consumers.Consumer{
		ConsumerID: c.ConsumerID,
		Name:       c.Name,
		Type:       c.Type.PB(),
		BranchID:   c.BranchID,
		RoleID:     c.RoleID,
		CreateTime: timestamppb.New(c.CreateTime),
		UpdateTime: timestamppb.New(c.UpdateTime),
	}
	var err error
	err = unmarshalMessage(c.Access, &pb.Access)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(c.TransactionLimits, &pb.TransactionLimits)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type ConsumerRepository interface {
	InsertConsumer(context.Context, *Consumer) error
	ListConsumers(context.Context, string, int32, string, *ListPosition) (ListStat, []*Consumer, *ListPosition, error)

	// From consumers_pkey
	ConsumerByID(context.Context, int32) (*Consumer, error)

	UpdateConsumerByID(context.Context, *Consumer) error
	DeleteConsumerByID(context.Context, int32) error

	// From consumers_consumer_id_idx
	ConsumerByConsumerID(context.Context, string) (*Consumer, error)

	UpdateConsumerByConsumerID(context.Context, *Consumer) error
	DeleteConsumerByConsumerID(context.Context, string) error
}
