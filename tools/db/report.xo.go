// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"bnk.to/core/api/v1/reports"
)

// Report represents a row from 'reports'.
type Report struct {
	ID       int32  `json:"id"`        // id
	ReportID string `json:"report_id"` // report_id
	Items    []byte `json:"items"`     // items
	Status   Status `json:"status"`    // status
	// xo fields
	Exists, Deleted bool
}

func NewReport(pb *reports.Report) (Report, error) {
	if pb == nil {
		return Report{}, ErrNilType{"Report"}
	}
	r := Report{
		ReportID: pb.ReportID,
		Status:   NewStatus(pb.Status),
	}
	var err error
	r.Items, err = marshalArray(pb.Items)
	if err != nil {
		return Report{}, err
	}
	return r, nil
}

func (r Report) PB() (*reports.Report, error) {
	pb := &reports.Report{
		ReportID: r.ReportID,
		Status:   r.Status.PB(),
	}
	var err error
	err = unmarshalArray(r.Items, &pb.Items)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type ReportRepository interface {
	InsertReport(context.Context, *Report) error
	ListReports(context.Context, string, int32, string, *ListPosition) (ListStat, []*Report, *ListPosition, error)

	// From reports_pkey
	ReportByID(context.Context, int32) (*Report, error)

	UpdateReportByID(context.Context, *Report) error
	DeleteReportByID(context.Context, int32) error

	// From reports_report_id_idx
	ReportByReportID(context.Context, string) (*Report, error)

	UpdateReportByReportID(context.Context, *Report) error
	DeleteReportByReportID(context.Context, string) error
}
