// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertProductRiskLevel(ctx context.Context, prl *db.ProductRiskLevel) error {
	const stmt = `INSERT INTO product_risk_levels
		(level_id, name, minimum_days, maximum_days, provisioning_percent)
		VALUES ($1, $2, $3, $4, $5)
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		prl.LevelID, prl.Name, prl.MinimumDays, prl.MaximumDays, prl.ProvisioningPercent,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListProductRiskLevels(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.ProductRiskLevel, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, product_risk_levels.id,

				product_risk_levels.level_id,
				product_risk_levels.name,
				product_risk_levels.minimum_days,
				product_risk_levels.maximum_days,
				product_risk_levels.provisioning_percent
			FROM
				product_risk_levels
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL, NULL, NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "product_risk_levels."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.ProductRiskLevel, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x, &x, &x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.ProductRiskLevel
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.LevelID, &next.Name, &next.MinimumDays, &next.MaximumDays, &next.ProvisioningPercent,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) ProductRiskLevelByID(ctx context.Context, id int32) (*db.ProductRiskLevel, error) {
	const stmt = `SELECT
		product_risk_levels.id,

		product_risk_levels.level_id,
		product_risk_levels.name,
		product_risk_levels.minimum_days,
		product_risk_levels.maximum_days,
		product_risk_levels.provisioning_percent
	FROM
		product_risk_levels
	WHERE
		id = $1`

	var prl db.ProductRiskLevel
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&prl.ID,
		&prl.LevelID, &prl.Name, &prl.MinimumDays, &prl.MaximumDays, &prl.ProvisioningPercent,
	); err != nil {
		return nil, err
	}

	return &prl, nil
}

func (repo *Repository) UpdateProductRiskLevelByID(ctx context.Context, prl *db.ProductRiskLevel) error {
	const stmt = `UPDATE product_risk_levels
	SET level_id=$1,
		name=$2,
		minimum_days=$3,
		maximum_days=$4,
		provisioning_percent=$5
	WHERE id = $6`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		prl.LevelID, prl.Name, prl.MinimumDays, prl.MaximumDays, prl.ProvisioningPercent, prl.ID,
	)
	return err
}

func (repo *Repository) DeleteProductRiskLevelByID(ctx context.Context, id int32) error {
	const stmt = `DELETE FROM product_risk_levels
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) ProductRiskLevelByLevelID(ctx context.Context, levelID string) (*db.ProductRiskLevel, error) {
	const stmt = `SELECT
		product_risk_levels.id,

		product_risk_levels.level_id,
		product_risk_levels.name,
		product_risk_levels.minimum_days,
		product_risk_levels.maximum_days,
		product_risk_levels.provisioning_percent
	FROM
		product_risk_levels
	WHERE
		level_id = $1`

	var prl db.ProductRiskLevel
	row := repo.db.QueryRowContext(ctx, stmt, levelID)
	if err := row.Scan(
		&prl.ID,
		&prl.LevelID, &prl.Name, &prl.MinimumDays, &prl.MaximumDays, &prl.ProvisioningPercent,
	); err != nil {
		return nil, err
	}

	return &prl, nil
}

func (repo *Repository) UpdateProductRiskLevelByLevelID(ctx context.Context, prl *db.ProductRiskLevel) error {
	const stmt = `UPDATE product_risk_levels
	SET level_id=$1,
		name=$2,
		minimum_days=$3,
		maximum_days=$4,
		provisioning_percent=$5
	WHERE level_id = $6`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		prl.LevelID, prl.Name, prl.MinimumDays, prl.MaximumDays, prl.ProvisioningPercent, prl.LevelID,
	)
	return err
}

func (repo *Repository) DeleteProductRiskLevelByLevelID(ctx context.Context, levelID string) error {
	const stmt = `DELETE FROM product_risk_levels
	WHERE level_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		levelID,
	)
	return err
}
