// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertGroupRole(ctx context.Context, gr *db.GroupRole) error {
	const stmt = `INSERT INTO group_roles
		(role_id, name)
		VALUES ($1, $2)
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		gr.RoleID, gr.Name,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListGroupRoles(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.GroupRole, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, group_roles.id,

				group_roles.role_id,
				group_roles.name
			FROM
				group_roles
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "group_roles."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.GroupRole, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.GroupRole
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.RoleID, &next.Name,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) GroupRoleByID(ctx context.Context, id int32) (*db.GroupRole, error) {
	const stmt = `SELECT
		group_roles.id,

		group_roles.role_id,
		group_roles.name
	FROM
		group_roles
	WHERE
		id = $1`

	var gr db.GroupRole
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&gr.ID,
		&gr.RoleID, &gr.Name,
	); err != nil {
		return nil, err
	}

	return &gr, nil
}

func (repo *Repository) UpdateGroupRoleByID(ctx context.Context, gr *db.GroupRole) error {
	const stmt = `UPDATE group_roles
	SET role_id=$1,
		name=$2
	WHERE id = $3`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		gr.RoleID, gr.Name, gr.ID,
	)
	return err
}

func (repo *Repository) DeleteGroupRoleByID(ctx context.Context, id int32) error {
	const stmt = `DELETE FROM group_roles
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) GroupRoleByRoleID(ctx context.Context, roleID string) (*db.GroupRole, error) {
	const stmt = `SELECT
		group_roles.id,

		group_roles.role_id,
		group_roles.name
	FROM
		group_roles
	WHERE
		role_id = $1`

	var gr db.GroupRole
	row := repo.db.QueryRowContext(ctx, stmt, roleID)
	if err := row.Scan(
		&gr.ID,
		&gr.RoleID, &gr.Name,
	); err != nil {
		return nil, err
	}

	return &gr, nil
}

func (repo *Repository) UpdateGroupRoleByRoleID(ctx context.Context, gr *db.GroupRole) error {
	const stmt = `UPDATE group_roles
	SET role_id=$1,
		name=$2
	WHERE role_id = $3`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		gr.RoleID, gr.Name, gr.RoleID,
	)
	return err
}

func (repo *Repository) DeleteGroupRoleByRoleID(ctx context.Context, roleID string) error {
	const stmt = `DELETE FROM group_roles
	WHERE role_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		roleID,
	)
	return err
}
