// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertOrgChannel(ctx context.Context, oc *db.OrgChannel) error {
	const stmt = `INSERT INTO org_channels
		(channel_id, gl_account, name, loans_constraints, deposit_constraints, state, default, allowed_users)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		oc.ChannelID, oc.GLAccount, oc.Name, oc.LoansConstraints, oc.DepositConstraints, oc.State, oc.Default, oc.AllowedUsers,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListOrgChannels(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.OrgChannel, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, org_channels.id,

				org_channels.channel_id,
				org_channels.gl_account,
				org_channels.name,
				org_channels.loans_constraints,
				org_channels.deposit_constraints,
				org_channels.state,
				org_channels.default,
				org_channels.allowed_users
			FROM
				org_channels
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "org_channels."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.OrgChannel, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x, &x, &x, &x, &x, &x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.OrgChannel
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.ChannelID, &next.GLAccount, &next.Name, &next.LoansConstraints, &next.DepositConstraints, &next.State, &next.Default, &next.AllowedUsers,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) OrgChannelByID(ctx context.Context, id int32) (*db.OrgChannel, error) {
	const stmt = `SELECT
		org_channels.id,

		org_channels.channel_id,
		org_channels.gl_account,
		org_channels.name,
		org_channels.loans_constraints,
		org_channels.deposit_constraints,
		org_channels.state,
		org_channels.default,
		org_channels.allowed_users
	FROM
		org_channels
	WHERE
		id = $1`

	var oc db.OrgChannel
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&oc.ID,
		&oc.ChannelID, &oc.GLAccount, &oc.Name, &oc.LoansConstraints, &oc.DepositConstraints, &oc.State, &oc.Default, &oc.AllowedUsers,
	); err != nil {
		return nil, err
	}

	return &oc, nil
}

func (repo *Repository) UpdateOrgChannelByID(ctx context.Context, oc *db.OrgChannel) error {
	const stmt = `UPDATE org_channels
	SET channel_id=$1,
		gl_account=$2,
		name=$3,
		loans_constraints=$4,
		deposit_constraints=$5,
		state=$6,
		default=$7,
		allowed_users=$8
	WHERE id = $9`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		oc.ChannelID, oc.GLAccount, oc.Name, oc.LoansConstraints, oc.DepositConstraints, oc.State, oc.Default, oc.AllowedUsers, oc.ID,
	)
	return err
}

func (repo *Repository) DeleteOrgChannelByID(ctx context.Context, id int32) error {
	const stmt = `DELETE FROM org_channels
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) OrgChannelByChannelID(ctx context.Context, channelID string) (*db.OrgChannel, error) {
	const stmt = `SELECT
		org_channels.id,

		org_channels.channel_id,
		org_channels.gl_account,
		org_channels.name,
		org_channels.loans_constraints,
		org_channels.deposit_constraints,
		org_channels.state,
		org_channels.default,
		org_channels.allowed_users
	FROM
		org_channels
	WHERE
		channel_id = $1`

	var oc db.OrgChannel
	row := repo.db.QueryRowContext(ctx, stmt, channelID)
	if err := row.Scan(
		&oc.ID,
		&oc.ChannelID, &oc.GLAccount, &oc.Name, &oc.LoansConstraints, &oc.DepositConstraints, &oc.State, &oc.Default, &oc.AllowedUsers,
	); err != nil {
		return nil, err
	}

	return &oc, nil
}

func (repo *Repository) UpdateOrgChannelByChannelID(ctx context.Context, oc *db.OrgChannel) error {
	const stmt = `UPDATE org_channels
	SET channel_id=$1,
		gl_account=$2,
		name=$3,
		loans_constraints=$4,
		deposit_constraints=$5,
		state=$6,
		default=$7,
		allowed_users=$8
	WHERE channel_id = $9`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		oc.ChannelID, oc.GLAccount, oc.Name, oc.LoansConstraints, oc.DepositConstraints, oc.State, oc.Default, oc.AllowedUsers, oc.ChannelID,
	)
	return err
}

func (repo *Repository) DeleteOrgChannelByChannelID(ctx context.Context, channelID string) error {
	const stmt = `DELETE FROM org_channels
	WHERE channel_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		channelID,
	)
	return err
}
