// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertBranch(ctx context.Context, b *db.Branch) error {
	const stmt = `WITH branches_info AS (
		INSERT INTO contact_infos
			(full_name, addresses, telephones, emails, language)
			VALUES ($1, $2, $3, $4, $5)
			RETURNING id
	)
	INSERT INTO branches
		(branch_id, info, notes, state, fields, create_time, update_time)
		SELECT $6, branches_info.id, $7, $8, $9, $10, $11
		FROM branches_info
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		b.Info.FullName, b.Info.Addresses, b.Info.Telephones, b.Info.Emails, b.Info.Language,
		b.BranchID, b.Notes, b.State, b.Fields, b.CreateTime, b.UpdateTime,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListBranches(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.Branch, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, branches.id,

				branches_info_tbl.full_name,
				branches_info_tbl.addresses,
				branches_info_tbl.telephones,
				branches_info_tbl.emails,
				branches_info_tbl.language,

				branches.branch_id,
				branches.notes,
				branches.state,
				branches.fields,
				branches.create_time,
				branches.update_time
			FROM
				branches
				JOIN contact_infos AS branches_info_tbl ON branches_info_tbl.id = branches.info
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL, NULL, NULL, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "branches."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.Branch, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x, &x, &x, &x,
		&x, &x, &x, &x, &x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.Branch
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.Info.FullName, &next.Info.Addresses, &next.Info.Telephones, &next.Info.Emails, &next.Info.Language,
			&next.BranchID, &next.Notes, &next.State, &next.Fields, &next.CreateTime, &next.UpdateTime,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) BranchByID(ctx context.Context, id int32) (*db.Branch, error) {
	const stmt = `SELECT
		branches.id,

		branches_info_tbl.full_name,
		branches_info_tbl.addresses,
		branches_info_tbl.telephones,
		branches_info_tbl.emails,
		branches_info_tbl.language,

		branches.branch_id,
		branches.notes,
		branches.state,
		branches.fields,
		branches.create_time,
		branches.update_time
	FROM
		branches
		JOIN contact_infos AS branches_info_tbl ON branches_info_tbl.id = branches.info
	WHERE
		id = $1`

	var b db.Branch
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&b.ID,
		&b.Info.FullName, &b.Info.Addresses, &b.Info.Telephones, &b.Info.Emails, &b.Info.Language,
		&b.BranchID, &b.Notes, &b.State, &b.Fields, &b.CreateTime, &b.UpdateTime,
	); err != nil {
		return nil, err
	}

	return &b, nil
}

func (repo *Repository) UpdateBranchByID(ctx context.Context, b *db.Branch) error {
	const stmt = `WITH branches_contact_infos AS (
		UPDATE contact_infos
		SET full_name=$1,
			addresses=$2,
			telephones=$3,
			emails=$4,
			language=$5
		FROM branches
		WHERE branches.info = contact_infos.id AND
			branches.id = $6
	)
	UPDATE branches
	SET branch_id=$7,
		notes=$8,
		state=$9,
		fields=$10,
		update_time=$11
	WHERE id = $12`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		b.Info.FullName, b.Info.Addresses, b.Info.Telephones, b.Info.Emails, b.Info.Language, b.ID,
		b.BranchID, b.Notes, b.State, b.Fields, b.UpdateTime, b.ID,
	)
	return err
}

func (repo *Repository) DeleteBranchByID(ctx context.Context, id int32) error {
	const stmt = `WITH branches_contact_infos AS (
		DELETE FROM contact_infos
		USING branches
		WHERE branches.info = contact_infos.id AND
			branches.id = $1
	)
	DELETE FROM branches
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) BranchByBranchID(ctx context.Context, branchID string) (*db.Branch, error) {
	const stmt = `SELECT
		branches.id,

		branches_info_tbl.full_name,
		branches_info_tbl.addresses,
		branches_info_tbl.telephones,
		branches_info_tbl.emails,
		branches_info_tbl.language,

		branches.branch_id,
		branches.notes,
		branches.state,
		branches.fields,
		branches.create_time,
		branches.update_time
	FROM
		branches
		JOIN contact_infos AS branches_info_tbl ON branches_info_tbl.id = branches.info
	WHERE
		branch_id = $1`

	var b db.Branch
	row := repo.db.QueryRowContext(ctx, stmt, branchID)
	if err := row.Scan(
		&b.ID,
		&b.Info.FullName, &b.Info.Addresses, &b.Info.Telephones, &b.Info.Emails, &b.Info.Language,
		&b.BranchID, &b.Notes, &b.State, &b.Fields, &b.CreateTime, &b.UpdateTime,
	); err != nil {
		return nil, err
	}

	return &b, nil
}

func (repo *Repository) UpdateBranchByBranchID(ctx context.Context, b *db.Branch) error {
	const stmt = `WITH branches_contact_infos AS (
		UPDATE contact_infos
		SET full_name=$1,
			addresses=$2,
			telephones=$3,
			emails=$4,
			language=$5
		FROM branches
		WHERE branches.info = contact_infos.id AND
			branches.branch_id = $6
	)
	UPDATE branches
	SET branch_id=$7,
		notes=$8,
		state=$9,
		fields=$10,
		update_time=$11
	WHERE branch_id = $12`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		b.Info.FullName, b.Info.Addresses, b.Info.Telephones, b.Info.Emails, b.Info.Language, b.BranchID,
		b.BranchID, b.Notes, b.State, b.Fields, b.UpdateTime, b.BranchID,
	)
	return err
}

func (repo *Repository) DeleteBranchByBranchID(ctx context.Context, branchID string) error {
	const stmt = `WITH branches_contact_infos AS (
		DELETE FROM contact_infos
		USING branches
		WHERE branches.info = contact_infos.id AND
			branches.branch_id = $1
	)
	DELETE FROM branches
	WHERE branch_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		branchID,
	)
	return err
}
