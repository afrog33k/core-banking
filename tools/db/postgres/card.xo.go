// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertCard(ctx context.Context, c *db.Card) error {
	const stmt = `INSERT INTO cards
		(card_id, type, account_id)
		VALUES ($1, $2, $3)
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		c.CardID, c.Type, c.AccountID,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListCards(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.Card, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, cards.id,

				cards.card_id,
				cards.type,
				cards.account_id
			FROM
				cards
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "cards."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.Card, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.Card
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.CardID, &next.Type, &next.AccountID,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) CardByID(ctx context.Context, id int32) (*db.Card, error) {
	const stmt = `SELECT
		cards.id,

		cards.card_id,
		cards.type,
		cards.account_id
	FROM
		cards
	WHERE
		id = $1`

	var c db.Card
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&c.ID,
		&c.CardID, &c.Type, &c.AccountID,
	); err != nil {
		return nil, err
	}

	return &c, nil
}

func (repo *Repository) UpdateCardByID(ctx context.Context, c *db.Card) error {
	const stmt = `UPDATE cards
	SET card_id=$1,
		type=$2,
		account_id=$3
	WHERE id = $4`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		c.CardID, c.Type, c.AccountID, c.ID,
	)
	return err
}

func (repo *Repository) DeleteCardByID(ctx context.Context, id int32) error {
	const stmt = `DELETE FROM cards
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) CardByCardID(ctx context.Context, cardID string) (*db.Card, error) {
	const stmt = `SELECT
		cards.id,

		cards.card_id,
		cards.type,
		cards.account_id
	FROM
		cards
	WHERE
		card_id = $1`

	var c db.Card
	row := repo.db.QueryRowContext(ctx, stmt, cardID)
	if err := row.Scan(
		&c.ID,
		&c.CardID, &c.Type, &c.AccountID,
	); err != nil {
		return nil, err
	}

	return &c, nil
}

func (repo *Repository) UpdateCardByCardID(ctx context.Context, c *db.Card) error {
	const stmt = `UPDATE cards
	SET card_id=$1,
		type=$2,
		account_id=$3
	WHERE card_id = $4`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		c.CardID, c.Type, c.AccountID, c.CardID,
	)
	return err
}

func (repo *Repository) DeleteCardByCardID(ctx context.Context, cardID string) error {
	const stmt = `DELETE FROM cards
	WHERE card_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		cardID,
	)
	return err
}

func (repo *Repository) CardByType(ctx context.Context, typ db.CardsType) ([]*db.Card, error) {
	const stmt = `SELECT
		cards.id,

		cards.card_id,
		cards.type,
		cards.account_id
	FROM
		cards
	WHERE
		type = $1`

	rows, err := repo.db.QueryContext(ctx, stmt, typ)
	if err != nil {
		return nil, err
	}

	defer rows.Close()
	var result []*db.Card
	for rows.Next() {
		var next db.Card
		if err := rows.Scan(
			&next.ID,
			&next.CardID, &next.Type, &next.AccountID,
		); err != nil {
			return nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return nil, rows.Err()
	}
	return result, nil
}
