// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertGroup(ctx context.Context, g *db.Group) error {
	const stmt = `WITH groups_info AS (
		INSERT INTO contact_infos
			(full_name, addresses, telephones, emails, language)
			VALUES ($1, $2, $3, $4, $5)
			RETURNING id
	)
	INSERT INTO groups
		(group_id, info, branch_id, centre_id, owner_id, loan_cycle, migration_event_id, notes, create_time, update_time)
		SELECT $6, groups_info.id, $7, $8, $9, $10, $11, $12, $13, $14
		FROM groups_info
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		g.Info.FullName, g.Info.Addresses, g.Info.Telephones, g.Info.Emails, g.Info.Language,
		g.GroupID, g.BranchID, g.CentreID, g.OwnerID, g.LoanCycle, g.MigrationEventID, g.Notes, g.CreateTime, g.UpdateTime,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListGroups(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.Group, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, groups.id,

				groups_info_tbl.full_name,
				groups_info_tbl.addresses,
				groups_info_tbl.telephones,
				groups_info_tbl.emails,
				groups_info_tbl.language,

				groups.group_id,
				groups.branch_id,
				groups.centre_id,
				groups.owner_id,
				groups.loan_cycle,
				groups.migration_event_id,
				groups.notes,
				groups.create_time,
				groups.update_time
			FROM
				groups
				JOIN contact_infos AS groups_info_tbl ON groups_info_tbl.id = groups.info
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL, NULL, NULL, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "groups."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.Group, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x, &x, &x, &x,
		&x, &x, &x, &x, &x, &x, &x, &x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.Group
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.Info.FullName, &next.Info.Addresses, &next.Info.Telephones, &next.Info.Emails, &next.Info.Language,
			&next.GroupID, &next.BranchID, &next.CentreID, &next.OwnerID, &next.LoanCycle, &next.MigrationEventID, &next.Notes, &next.CreateTime, &next.UpdateTime,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) GroupByID(ctx context.Context, id int32) (*db.Group, error) {
	const stmt = `SELECT
		groups.id,

		groups_info_tbl.full_name,
		groups_info_tbl.addresses,
		groups_info_tbl.telephones,
		groups_info_tbl.emails,
		groups_info_tbl.language,

		groups.group_id,
		groups.branch_id,
		groups.centre_id,
		groups.owner_id,
		groups.loan_cycle,
		groups.migration_event_id,
		groups.notes,
		groups.create_time,
		groups.update_time
	FROM
		groups
		JOIN contact_infos AS groups_info_tbl ON groups_info_tbl.id = groups.info
	WHERE
		id = $1`

	var g db.Group
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&g.ID,
		&g.Info.FullName, &g.Info.Addresses, &g.Info.Telephones, &g.Info.Emails, &g.Info.Language,
		&g.GroupID, &g.BranchID, &g.CentreID, &g.OwnerID, &g.LoanCycle, &g.MigrationEventID, &g.Notes, &g.CreateTime, &g.UpdateTime,
	); err != nil {
		return nil, err
	}

	return &g, nil
}

func (repo *Repository) UpdateGroupByID(ctx context.Context, g *db.Group) error {
	const stmt = `WITH groups_contact_infos AS (
		UPDATE contact_infos
		SET full_name=$1,
			addresses=$2,
			telephones=$3,
			emails=$4,
			language=$5
		FROM groups
		WHERE groups.info = contact_infos.id AND
			groups.id = $6
	)
	UPDATE groups
	SET group_id=$7,
		branch_id=$8,
		centre_id=$9,
		owner_id=$10,
		loan_cycle=$11,
		migration_event_id=$12,
		notes=$13,
		update_time=$14
	WHERE id = $15`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		g.Info.FullName, g.Info.Addresses, g.Info.Telephones, g.Info.Emails, g.Info.Language, g.ID,
		g.GroupID, g.BranchID, g.CentreID, g.OwnerID, g.LoanCycle, g.MigrationEventID, g.Notes, g.UpdateTime, g.ID,
	)
	return err
}

func (repo *Repository) DeleteGroupByID(ctx context.Context, id int32) error {
	const stmt = `WITH groups_contact_infos AS (
		DELETE FROM contact_infos
		USING groups
		WHERE groups.info = contact_infos.id AND
			groups.id = $1
	)
	DELETE FROM groups
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) GroupByGroupID(ctx context.Context, groupID string) (*db.Group, error) {
	const stmt = `SELECT
		groups.id,

		groups_info_tbl.full_name,
		groups_info_tbl.addresses,
		groups_info_tbl.telephones,
		groups_info_tbl.emails,
		groups_info_tbl.language,

		groups.group_id,
		groups.branch_id,
		groups.centre_id,
		groups.owner_id,
		groups.loan_cycle,
		groups.migration_event_id,
		groups.notes,
		groups.create_time,
		groups.update_time
	FROM
		groups
		JOIN contact_infos AS groups_info_tbl ON groups_info_tbl.id = groups.info
	WHERE
		group_id = $1`

	var g db.Group
	row := repo.db.QueryRowContext(ctx, stmt, groupID)
	if err := row.Scan(
		&g.ID,
		&g.Info.FullName, &g.Info.Addresses, &g.Info.Telephones, &g.Info.Emails, &g.Info.Language,
		&g.GroupID, &g.BranchID, &g.CentreID, &g.OwnerID, &g.LoanCycle, &g.MigrationEventID, &g.Notes, &g.CreateTime, &g.UpdateTime,
	); err != nil {
		return nil, err
	}

	return &g, nil
}

func (repo *Repository) UpdateGroupByGroupID(ctx context.Context, g *db.Group) error {
	const stmt = `WITH groups_contact_infos AS (
		UPDATE contact_infos
		SET full_name=$1,
			addresses=$2,
			telephones=$3,
			emails=$4,
			language=$5
		FROM groups
		WHERE groups.info = contact_infos.id AND
			groups.group_id = $6
	)
	UPDATE groups
	SET group_id=$7,
		branch_id=$8,
		centre_id=$9,
		owner_id=$10,
		loan_cycle=$11,
		migration_event_id=$12,
		notes=$13,
		update_time=$14
	WHERE group_id = $15`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		g.Info.FullName, g.Info.Addresses, g.Info.Telephones, g.Info.Emails, g.Info.Language, g.GroupID,
		g.GroupID, g.BranchID, g.CentreID, g.OwnerID, g.LoanCycle, g.MigrationEventID, g.Notes, g.UpdateTime, g.GroupID,
	)
	return err
}

func (repo *Repository) DeleteGroupByGroupID(ctx context.Context, groupID string) error {
	const stmt = `WITH groups_contact_infos AS (
		DELETE FROM contact_infos
		USING groups
		WHERE groups.info = contact_infos.id AND
			groups.group_id = $1
	)
	DELETE FROM groups
	WHERE group_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		groupID,
	)
	return err
}
