// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertRateIndexRate(ctx context.Context, rir *db.RateIndexRate) error {
	const stmt = `INSERT INTO rate_index_rates
		(rate_id, source_id, user_id, rate, notes, start_time)
		VALUES ($1, $2, $3, $4, $5, $6)
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		rir.RateID, rir.SourceID, rir.UserID, rir.Rate, rir.Notes, rir.StartTime,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListRateIndexRates(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.RateIndexRate, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, rate_index_rates.id,

				rate_index_rates.rate_id,
				rate_index_rates.source_id,
				rate_index_rates.user_id,
				rate_index_rates.rate,
				rate_index_rates.notes,
				rate_index_rates.start_time
			FROM
				rate_index_rates
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "rate_index_rates."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.RateIndexRate, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x, &x, &x, &x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.RateIndexRate
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.RateID, &next.SourceID, &next.UserID, &next.Rate, &next.Notes, &next.StartTime,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) RateIndexRateByID(ctx context.Context, id int32) (*db.RateIndexRate, error) {
	const stmt = `SELECT
		rate_index_rates.id,

		rate_index_rates.rate_id,
		rate_index_rates.source_id,
		rate_index_rates.user_id,
		rate_index_rates.rate,
		rate_index_rates.notes,
		rate_index_rates.start_time
	FROM
		rate_index_rates
	WHERE
		id = $1`

	var rir db.RateIndexRate
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&rir.ID,
		&rir.RateID, &rir.SourceID, &rir.UserID, &rir.Rate, &rir.Notes, &rir.StartTime,
	); err != nil {
		return nil, err
	}

	return &rir, nil
}

func (repo *Repository) UpdateRateIndexRateByID(ctx context.Context, rir *db.RateIndexRate) error {
	const stmt = `UPDATE rate_index_rates
	SET rate_id=$1,
		source_id=$2,
		user_id=$3,
		rate=$4,
		notes=$5,
		start_time=$6
	WHERE id = $7`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		rir.RateID, rir.SourceID, rir.UserID, rir.Rate, rir.Notes, rir.StartTime, rir.ID,
	)
	return err
}

func (repo *Repository) DeleteRateIndexRateByID(ctx context.Context, id int32) error {
	const stmt = `DELETE FROM rate_index_rates
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) RateIndexRateByRateID(ctx context.Context, rateID string) (*db.RateIndexRate, error) {
	const stmt = `SELECT
		rate_index_rates.id,

		rate_index_rates.rate_id,
		rate_index_rates.source_id,
		rate_index_rates.user_id,
		rate_index_rates.rate,
		rate_index_rates.notes,
		rate_index_rates.start_time
	FROM
		rate_index_rates
	WHERE
		rate_id = $1`

	var rir db.RateIndexRate
	row := repo.db.QueryRowContext(ctx, stmt, rateID)
	if err := row.Scan(
		&rir.ID,
		&rir.RateID, &rir.SourceID, &rir.UserID, &rir.Rate, &rir.Notes, &rir.StartTime,
	); err != nil {
		return nil, err
	}

	return &rir, nil
}

func (repo *Repository) UpdateRateIndexRateByRateID(ctx context.Context, rir *db.RateIndexRate) error {
	const stmt = `UPDATE rate_index_rates
	SET rate_id=$1,
		source_id=$2,
		user_id=$3,
		rate=$4,
		notes=$5,
		start_time=$6
	WHERE rate_id = $7`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		rir.RateID, rir.SourceID, rir.UserID, rir.Rate, rir.Notes, rir.StartTime, rir.RateID,
	)
	return err
}

func (repo *Repository) DeleteRateIndexRateByRateID(ctx context.Context, rateID string) error {
	const stmt = `DELETE FROM rate_index_rates
	WHERE rate_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		rateID,
	)
	return err
}
