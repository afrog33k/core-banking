// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertCardHold(ctx context.Context, ch *db.CardHold) error {
	const stmt = `INSERT INTO card_holds
		(hold_id, account_id, advice, amount, original_amount, card_acceptor, exchange_rate, card_id, type, source, status, user_transaction_time)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		ch.HoldID, ch.AccountID, ch.Advice, ch.Amount, ch.OriginalAmount, ch.CardAcceptor, ch.ExchangeRate, ch.CardID, ch.Type, ch.Source, ch.Status, ch.UserTransactionTime,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListCardHolds(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.CardHold, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, card_holds.id,

				card_holds.hold_id,
				card_holds.account_id,
				card_holds.advice,
				card_holds.amount,
				card_holds.original_amount,
				card_holds.card_acceptor,
				card_holds.exchange_rate,
				card_holds.card_id,
				card_holds.type,
				card_holds.source,
				card_holds.status,
				card_holds.user_transaction_time
			FROM
				card_holds
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "card_holds."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.CardHold, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x, &x, &x, &x, &x, &x, &x, &x, &x, &x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.CardHold
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.HoldID, &next.AccountID, &next.Advice, &next.Amount, &next.OriginalAmount, &next.CardAcceptor, &next.ExchangeRate, &next.CardID, &next.Type, &next.Source, &next.Status, &next.UserTransactionTime,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) CardHoldByID(ctx context.Context, id int32) (*db.CardHold, error) {
	const stmt = `SELECT
		card_holds.id,

		card_holds.hold_id,
		card_holds.account_id,
		card_holds.advice,
		card_holds.amount,
		card_holds.original_amount,
		card_holds.card_acceptor,
		card_holds.exchange_rate,
		card_holds.card_id,
		card_holds.type,
		card_holds.source,
		card_holds.status,
		card_holds.user_transaction_time
	FROM
		card_holds
	WHERE
		id = $1`

	var ch db.CardHold
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&ch.ID,
		&ch.HoldID, &ch.AccountID, &ch.Advice, &ch.Amount, &ch.OriginalAmount, &ch.CardAcceptor, &ch.ExchangeRate, &ch.CardID, &ch.Type, &ch.Source, &ch.Status, &ch.UserTransactionTime,
	); err != nil {
		return nil, err
	}

	return &ch, nil
}

func (repo *Repository) UpdateCardHoldByID(ctx context.Context, ch *db.CardHold) error {
	const stmt = `UPDATE card_holds
	SET hold_id=$1,
		account_id=$2,
		advice=$3,
		amount=$4,
		original_amount=$5,
		card_acceptor=$6,
		exchange_rate=$7,
		card_id=$8,
		type=$9,
		source=$10,
		status=$11,
		user_transaction_time=$12
	WHERE id = $13`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		ch.HoldID, ch.AccountID, ch.Advice, ch.Amount, ch.OriginalAmount, ch.CardAcceptor, ch.ExchangeRate, ch.CardID, ch.Type, ch.Source, ch.Status, ch.UserTransactionTime, ch.ID,
	)
	return err
}

func (repo *Repository) DeleteCardHoldByID(ctx context.Context, id int32) error {
	const stmt = `DELETE FROM card_holds
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) CardHoldByHoldID(ctx context.Context, holdID string) (*db.CardHold, error) {
	const stmt = `SELECT
		card_holds.id,

		card_holds.hold_id,
		card_holds.account_id,
		card_holds.advice,
		card_holds.amount,
		card_holds.original_amount,
		card_holds.card_acceptor,
		card_holds.exchange_rate,
		card_holds.card_id,
		card_holds.type,
		card_holds.source,
		card_holds.status,
		card_holds.user_transaction_time
	FROM
		card_holds
	WHERE
		hold_id = $1`

	var ch db.CardHold
	row := repo.db.QueryRowContext(ctx, stmt, holdID)
	if err := row.Scan(
		&ch.ID,
		&ch.HoldID, &ch.AccountID, &ch.Advice, &ch.Amount, &ch.OriginalAmount, &ch.CardAcceptor, &ch.ExchangeRate, &ch.CardID, &ch.Type, &ch.Source, &ch.Status, &ch.UserTransactionTime,
	); err != nil {
		return nil, err
	}

	return &ch, nil
}

func (repo *Repository) UpdateCardHoldByHoldID(ctx context.Context, ch *db.CardHold) error {
	const stmt = `UPDATE card_holds
	SET hold_id=$1,
		account_id=$2,
		advice=$3,
		amount=$4,
		original_amount=$5,
		card_acceptor=$6,
		exchange_rate=$7,
		card_id=$8,
		type=$9,
		source=$10,
		status=$11,
		user_transaction_time=$12
	WHERE hold_id = $13`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		ch.HoldID, ch.AccountID, ch.Advice, ch.Amount, ch.OriginalAmount, ch.CardAcceptor, ch.ExchangeRate, ch.CardID, ch.Type, ch.Source, ch.Status, ch.UserTransactionTime, ch.HoldID,
	)
	return err
}

func (repo *Repository) DeleteCardHoldByHoldID(ctx context.Context, holdID string) error {
	const stmt = `DELETE FROM card_holds
	WHERE hold_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		holdID,
	)
	return err
}
