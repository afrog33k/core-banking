// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertConsumer(ctx context.Context, c *db.Consumer) error {
	const stmt = `INSERT INTO consumers
		(consumer_id, name, type, branch_id, access, role_id, transaction_limits, create_time, update_time)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		c.ConsumerID, c.Name, c.Type, c.BranchID, c.Access, c.RoleID, c.TransactionLimits, c.CreateTime, c.UpdateTime,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListConsumers(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.Consumer, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, consumers.id,

				consumers.consumer_id,
				consumers.name,
				consumers.type,
				consumers.branch_id,
				consumers.access,
				consumers.role_id,
				consumers.transaction_limits,
				consumers.create_time,
				consumers.update_time
			FROM
				consumers
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "consumers."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.Consumer, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x, &x, &x, &x, &x, &x, &x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.Consumer
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.ConsumerID, &next.Name, &next.Type, &next.BranchID, &next.Access, &next.RoleID, &next.TransactionLimits, &next.CreateTime, &next.UpdateTime,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) ConsumerByID(ctx context.Context, id int32) (*db.Consumer, error) {
	const stmt = `SELECT
		consumers.id,

		consumers.consumer_id,
		consumers.name,
		consumers.type,
		consumers.branch_id,
		consumers.access,
		consumers.role_id,
		consumers.transaction_limits,
		consumers.create_time,
		consumers.update_time
	FROM
		consumers
	WHERE
		id = $1`

	var c db.Consumer
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&c.ID,
		&c.ConsumerID, &c.Name, &c.Type, &c.BranchID, &c.Access, &c.RoleID, &c.TransactionLimits, &c.CreateTime, &c.UpdateTime,
	); err != nil {
		return nil, err
	}

	return &c, nil
}

func (repo *Repository) UpdateConsumerByID(ctx context.Context, c *db.Consumer) error {
	const stmt = `UPDATE consumers
	SET consumer_id=$1,
		name=$2,
		type=$3,
		branch_id=$4,
		access=$5,
		role_id=$6,
		transaction_limits=$7,
		update_time=$8
	WHERE id = $9`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		c.ConsumerID, c.Name, c.Type, c.BranchID, c.Access, c.RoleID, c.TransactionLimits, c.UpdateTime, c.ID,
	)
	return err
}

func (repo *Repository) DeleteConsumerByID(ctx context.Context, id int32) error {
	const stmt = `DELETE FROM consumers
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) ConsumerByConsumerID(ctx context.Context, consumerID string) (*db.Consumer, error) {
	const stmt = `SELECT
		consumers.id,

		consumers.consumer_id,
		consumers.name,
		consumers.type,
		consumers.branch_id,
		consumers.access,
		consumers.role_id,
		consumers.transaction_limits,
		consumers.create_time,
		consumers.update_time
	FROM
		consumers
	WHERE
		consumer_id = $1`

	var c db.Consumer
	row := repo.db.QueryRowContext(ctx, stmt, consumerID)
	if err := row.Scan(
		&c.ID,
		&c.ConsumerID, &c.Name, &c.Type, &c.BranchID, &c.Access, &c.RoleID, &c.TransactionLimits, &c.CreateTime, &c.UpdateTime,
	); err != nil {
		return nil, err
	}

	return &c, nil
}

func (repo *Repository) UpdateConsumerByConsumerID(ctx context.Context, c *db.Consumer) error {
	const stmt = `UPDATE consumers
	SET consumer_id=$1,
		name=$2,
		type=$3,
		branch_id=$4,
		access=$5,
		role_id=$6,
		transaction_limits=$7,
		update_time=$8
	WHERE consumer_id = $9`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		c.ConsumerID, c.Name, c.Type, c.BranchID, c.Access, c.RoleID, c.TransactionLimits, c.UpdateTime, c.ConsumerID,
	)
	return err
}

func (repo *Repository) DeleteConsumerByConsumerID(ctx context.Context, consumerID string) error {
	const stmt = `DELETE FROM consumers
	WHERE consumer_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		consumerID,
	)
	return err
}
