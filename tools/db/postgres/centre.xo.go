// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertCentre(ctx context.Context, c *db.Centre) error {
	const stmt = `WITH centres_info AS (
		INSERT INTO contact_infos
			(full_name, addresses, telephones, emails, language)
			VALUES ($1, $2, $3, $4, $5)
			RETURNING id
	)
	INSERT INTO centres
		(centre_id, info, notes, assigned_branch_id, meeting_day, state, create_time, update_time, fields)
		SELECT $6, centres_info.id, $7, $8, $9, $10, $11, $12, $13
		FROM centres_info
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		c.Info.FullName, c.Info.Addresses, c.Info.Telephones, c.Info.Emails, c.Info.Language,
		c.CentreID, c.Notes, c.AssignedBranchID, c.MeetingDay, c.State, c.CreateTime, c.UpdateTime, c.Fields,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListCentres(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.Centre, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, centres.id,

				centres_info_tbl.full_name,
				centres_info_tbl.addresses,
				centres_info_tbl.telephones,
				centres_info_tbl.emails,
				centres_info_tbl.language,

				centres.centre_id,
				centres.notes,
				centres.assigned_branch_id,
				centres.meeting_day,
				centres.state,
				centres.create_time,
				centres.update_time,
				centres.fields
			FROM
				centres
				JOIN contact_infos AS centres_info_tbl ON centres_info_tbl.id = centres.info
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL, NULL, NULL, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "centres."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.Centre, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x, &x, &x, &x,
		&x, &x, &x, &x, &x, &x, &x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.Centre
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.Info.FullName, &next.Info.Addresses, &next.Info.Telephones, &next.Info.Emails, &next.Info.Language,
			&next.CentreID, &next.Notes, &next.AssignedBranchID, &next.MeetingDay, &next.State, &next.CreateTime, &next.UpdateTime, &next.Fields,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) CentreByID(ctx context.Context, id int32) (*db.Centre, error) {
	const stmt = `SELECT
		centres.id,

		centres_info_tbl.full_name,
		centres_info_tbl.addresses,
		centres_info_tbl.telephones,
		centres_info_tbl.emails,
		centres_info_tbl.language,

		centres.centre_id,
		centres.notes,
		centres.assigned_branch_id,
		centres.meeting_day,
		centres.state,
		centres.create_time,
		centres.update_time,
		centres.fields
	FROM
		centres
		JOIN contact_infos AS centres_info_tbl ON centres_info_tbl.id = centres.info
	WHERE
		id = $1`

	var c db.Centre
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&c.ID,
		&c.Info.FullName, &c.Info.Addresses, &c.Info.Telephones, &c.Info.Emails, &c.Info.Language,
		&c.CentreID, &c.Notes, &c.AssignedBranchID, &c.MeetingDay, &c.State, &c.CreateTime, &c.UpdateTime, &c.Fields,
	); err != nil {
		return nil, err
	}

	return &c, nil
}

func (repo *Repository) UpdateCentreByID(ctx context.Context, c *db.Centre) error {
	const stmt = `WITH centres_contact_infos AS (
		UPDATE contact_infos
		SET full_name=$1,
			addresses=$2,
			telephones=$3,
			emails=$4,
			language=$5
		FROM centres
		WHERE centres.info = contact_infos.id AND
			centres.id = $6
	)
	UPDATE centres
	SET centre_id=$7,
		notes=$8,
		assigned_branch_id=$9,
		meeting_day=$10,
		state=$11,
		update_time=$12,
		fields=$13
	WHERE id = $14`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		c.Info.FullName, c.Info.Addresses, c.Info.Telephones, c.Info.Emails, c.Info.Language, c.ID,
		c.CentreID, c.Notes, c.AssignedBranchID, c.MeetingDay, c.State, c.UpdateTime, c.Fields, c.ID,
	)
	return err
}

func (repo *Repository) DeleteCentreByID(ctx context.Context, id int32) error {
	const stmt = `WITH centres_contact_infos AS (
		DELETE FROM contact_infos
		USING centres
		WHERE centres.info = contact_infos.id AND
			centres.id = $1
	)
	DELETE FROM centres
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) CentreByCentreID(ctx context.Context, centreID string) (*db.Centre, error) {
	const stmt = `SELECT
		centres.id,

		centres_info_tbl.full_name,
		centres_info_tbl.addresses,
		centres_info_tbl.telephones,
		centres_info_tbl.emails,
		centres_info_tbl.language,

		centres.centre_id,
		centres.notes,
		centres.assigned_branch_id,
		centres.meeting_day,
		centres.state,
		centres.create_time,
		centres.update_time,
		centres.fields
	FROM
		centres
		JOIN contact_infos AS centres_info_tbl ON centres_info_tbl.id = centres.info
	WHERE
		centre_id = $1`

	var c db.Centre
	row := repo.db.QueryRowContext(ctx, stmt, centreID)
	if err := row.Scan(
		&c.ID,
		&c.Info.FullName, &c.Info.Addresses, &c.Info.Telephones, &c.Info.Emails, &c.Info.Language,
		&c.CentreID, &c.Notes, &c.AssignedBranchID, &c.MeetingDay, &c.State, &c.CreateTime, &c.UpdateTime, &c.Fields,
	); err != nil {
		return nil, err
	}

	return &c, nil
}

func (repo *Repository) UpdateCentreByCentreID(ctx context.Context, c *db.Centre) error {
	const stmt = `WITH centres_contact_infos AS (
		UPDATE contact_infos
		SET full_name=$1,
			addresses=$2,
			telephones=$3,
			emails=$4,
			language=$5
		FROM centres
		WHERE centres.info = contact_infos.id AND
			centres.centre_id = $6
	)
	UPDATE centres
	SET centre_id=$7,
		notes=$8,
		assigned_branch_id=$9,
		meeting_day=$10,
		state=$11,
		update_time=$12,
		fields=$13
	WHERE centre_id = $14`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		c.Info.FullName, c.Info.Addresses, c.Info.Telephones, c.Info.Emails, c.Info.Language, c.CentreID,
		c.CentreID, c.Notes, c.AssignedBranchID, c.MeetingDay, c.State, c.UpdateTime, c.Fields, c.CentreID,
	)
	return err
}

func (repo *Repository) DeleteCentreByCentreID(ctx context.Context, centreID string) error {
	const stmt = `WITH centres_contact_infos AS (
		DELETE FROM contact_infos
		USING centres
		WHERE centres.info = contact_infos.id AND
			centres.centre_id = $1
	)
	DELETE FROM centres
	WHERE centre_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		centreID,
	)
	return err
}
