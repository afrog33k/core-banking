// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertFieldSet(ctx context.Context, fs *db.FieldSet) error {
	const stmt = `INSERT INTO field_sets
		(set_id, name, description, allow_duplicates, valid_for, state, create_time, update_time)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		fs.SetID, fs.Name, fs.Description, fs.AllowDuplicates, fs.ValidFor, fs.State, fs.CreateTime, fs.UpdateTime,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListFieldSets(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.FieldSet, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, field_sets.id,

				field_sets.set_id,
				field_sets.name,
				field_sets.description,
				field_sets.allow_duplicates,
				field_sets.valid_for,
				field_sets.state,
				field_sets.create_time,
				field_sets.update_time
			FROM
				field_sets
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "field_sets."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.FieldSet, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x, &x, &x, &x, &x, &x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.FieldSet
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.SetID, &next.Name, &next.Description, &next.AllowDuplicates, &next.ValidFor, &next.State, &next.CreateTime, &next.UpdateTime,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) FieldSetByID(ctx context.Context, id int32) (*db.FieldSet, error) {
	const stmt = `SELECT
		field_sets.id,

		field_sets.set_id,
		field_sets.name,
		field_sets.description,
		field_sets.allow_duplicates,
		field_sets.valid_for,
		field_sets.state,
		field_sets.create_time,
		field_sets.update_time
	FROM
		field_sets
	WHERE
		id = $1`

	var fs db.FieldSet
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&fs.ID,
		&fs.SetID, &fs.Name, &fs.Description, &fs.AllowDuplicates, &fs.ValidFor, &fs.State, &fs.CreateTime, &fs.UpdateTime,
	); err != nil {
		return nil, err
	}

	return &fs, nil
}

func (repo *Repository) UpdateFieldSetByID(ctx context.Context, fs *db.FieldSet) error {
	const stmt = `UPDATE field_sets
	SET set_id=$1,
		name=$2,
		description=$3,
		allow_duplicates=$4,
		valid_for=$5,
		state=$6,
		update_time=$7
	WHERE id = $8`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		fs.SetID, fs.Name, fs.Description, fs.AllowDuplicates, fs.ValidFor, fs.State, fs.UpdateTime, fs.ID,
	)
	return err
}

func (repo *Repository) DeleteFieldSetByID(ctx context.Context, id int32) error {
	const stmt = `DELETE FROM field_sets
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) FieldSetBySetID(ctx context.Context, setID string) (*db.FieldSet, error) {
	const stmt = `SELECT
		field_sets.id,

		field_sets.set_id,
		field_sets.name,
		field_sets.description,
		field_sets.allow_duplicates,
		field_sets.valid_for,
		field_sets.state,
		field_sets.create_time,
		field_sets.update_time
	FROM
		field_sets
	WHERE
		set_id = $1`

	var fs db.FieldSet
	row := repo.db.QueryRowContext(ctx, stmt, setID)
	if err := row.Scan(
		&fs.ID,
		&fs.SetID, &fs.Name, &fs.Description, &fs.AllowDuplicates, &fs.ValidFor, &fs.State, &fs.CreateTime, &fs.UpdateTime,
	); err != nil {
		return nil, err
	}

	return &fs, nil
}

func (repo *Repository) UpdateFieldSetBySetID(ctx context.Context, fs *db.FieldSet) error {
	const stmt = `UPDATE field_sets
	SET set_id=$1,
		name=$2,
		description=$3,
		allow_duplicates=$4,
		valid_for=$5,
		state=$6,
		update_time=$7
	WHERE set_id = $8`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		fs.SetID, fs.Name, fs.Description, fs.AllowDuplicates, fs.ValidFor, fs.State, fs.UpdateTime, fs.SetID,
	)
	return err
}

func (repo *Repository) DeleteFieldSetBySetID(ctx context.Context, setID string) error {
	const stmt = `DELETE FROM field_sets
	WHERE set_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		setID,
	)
	return err
}
