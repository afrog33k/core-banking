// Package postgres contains generated code from xo.
package postgres

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"

	"bnk.to/core/tools/db"
)

func (repo *Repository) InsertLedgerAccount(ctx context.Context, la *db.LedgerAccount) error {
	const stmt = `INSERT INTO ledger_accounts
		(account_id, name, description, amount, activated, allow_manual_entries, gl_code, migration_event_id, strip_trailing_zeros, type, usage, create_time, update_time)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
		RETURNING id`
	var id int
	row := repo.db.QueryRowContext(
		ctx, stmt,
		la.AccountID, la.Name, la.Description, la.Amount, la.Activated, la.AllowManualEntries, la.GLCode, la.MigrationEventID, la.StripTrailingZeros, la.Type, la.Usage, la.CreateTime, la.UpdateTime,
	)
	if err := row.Scan(&id); err != nil {
		return err
	}
	return nil
}

func (repo *Repository) ListLedgerAccounts(ctx context.Context, filter string, pageSize int32, orderBy string, after *db.ListPosition) (db.ListStat, []*db.LedgerAccount, *db.ListPosition, error) {
	if filter != "" {
		return db.ListStat{}, nil, nil, fmt.Errorf("filter is unimplemented")
	}
	if orderBy == "" {
		orderBy = "id"
	}
	whereClause := `
		(
			(all_entries.ordered_idx > $2) OR
			(all_entries.ordered_idx = $2 AND all_entries.id > $3)
		)
	`
	if after == nil {
		// Use placeholder values but always evaluate to true.
		whereClause = "$2::INTEGER = $3"
		after = &db.ListPosition{
			Data: 0,
			ID:   0,
		}
	}
	const stmt = `WITH all_entries AS (
			SELECT
				quote_ident($1) AS ordered_idx, ledger_accounts.id,

				ledger_accounts.account_id,
				ledger_accounts.name,
				ledger_accounts.description,
				ledger_accounts.amount,
				ledger_accounts.activated,
				ledger_accounts.allow_manual_entries,
				ledger_accounts.gl_code,
				ledger_accounts.migration_event_id,
				ledger_accounts.strip_trailing_zeros,
				ledger_accounts.type,
				ledger_accounts.usage,
				ledger_accounts.create_time,
				ledger_accounts.update_time
			FROM
				ledger_accounts
			WHERE
				%s
		), all_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				all_entries
		), filtered AS (
			SELECT
				*
			FROM
				all_entries
			WHERE %s
		), filtered_count AS (
			SELECT
				COUNT(*) AS count
			FROM
				filtered
		)
		SELECT
			all_count.count, filtered_count.count,
			NULL, NULL,
			NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
		FROM
			all_count
			CROSS JOIN filtered_count
		UNION ALL
		(
			SELECT
				*
			FROM
				all_count
				CROSS JOIN filtered_count
				CROSS JOIN filtered
			ORDER BY
				quote_ident($1), filtered.id
			LIMIT
				$4
		)`

	filterSQL := "TRUE" // TODO
	query := fmt.Sprintf(stmt, filterSQL, whereClause)
	rows, err := repo.db.QueryContext(ctx, query, "ledger_accounts."+orderBy, after.Data, after.ID, pageSize)
	if err != nil {
		return db.ListStat{}, nil, nil, err
	}

	defer rows.Close()
	result := make([]*db.LedgerAccount, 0, pageSize)
	var nextPos db.ListPosition
	var listStat db.ListStat
	if !rows.Next() {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	var x any
	if err := rows.Scan(
		&listStat.Total, &listStat.Remaining,
		&x, &x,
		&x, &x, &x, &x, &x, &x, &x, &x, &x, &x, &x, &x, &x,
	); err != nil {
		return db.ListStat{}, nil, nil, err
	}
	for rows.Next() {
		var next db.LedgerAccount
		if err := rows.Scan(
			&listStat.Total, &listStat.Remaining,
			&nextPos.Data, &nextPos.ID,
			&next.AccountID, &next.Name, &next.Description, &next.Amount, &next.Activated, &next.AllowManualEntries, &next.GLCode, &next.MigrationEventID, &next.StripTrailingZeros, &next.Type, &next.Usage, &next.CreateTime, &next.UpdateTime,
		); err != nil {
			return db.ListStat{}, nil, nil, err
		}
		result = append(result, &next)
	}
	if rows.Err() != nil {
		return db.ListStat{}, nil, nil, rows.Err()
	}
	return listStat, result, &nextPos, nil
}

func (repo *Repository) LedgerAccountByID(ctx context.Context, id int32) (*db.LedgerAccount, error) {
	const stmt = `SELECT
		ledger_accounts.id,

		ledger_accounts.account_id,
		ledger_accounts.name,
		ledger_accounts.description,
		ledger_accounts.amount,
		ledger_accounts.activated,
		ledger_accounts.allow_manual_entries,
		ledger_accounts.gl_code,
		ledger_accounts.migration_event_id,
		ledger_accounts.strip_trailing_zeros,
		ledger_accounts.type,
		ledger_accounts.usage,
		ledger_accounts.create_time,
		ledger_accounts.update_time
	FROM
		ledger_accounts
	WHERE
		id = $1`

	var la db.LedgerAccount
	row := repo.db.QueryRowContext(ctx, stmt, id)
	if err := row.Scan(
		&la.ID,
		&la.AccountID, &la.Name, &la.Description, &la.Amount, &la.Activated, &la.AllowManualEntries, &la.GLCode, &la.MigrationEventID, &la.StripTrailingZeros, &la.Type, &la.Usage, &la.CreateTime, &la.UpdateTime,
	); err != nil {
		return nil, err
	}

	return &la, nil
}

func (repo *Repository) UpdateLedgerAccountByID(ctx context.Context, la *db.LedgerAccount) error {
	const stmt = `UPDATE ledger_accounts
	SET account_id=$1,
		name=$2,
		description=$3,
		amount=$4,
		activated=$5,
		allow_manual_entries=$6,
		gl_code=$7,
		migration_event_id=$8,
		strip_trailing_zeros=$9,
		type=$10,
		usage=$11,
		update_time=$12
	WHERE id = $13`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		la.AccountID, la.Name, la.Description, la.Amount, la.Activated, la.AllowManualEntries, la.GLCode, la.MigrationEventID, la.StripTrailingZeros, la.Type, la.Usage, la.UpdateTime, la.ID,
	)
	return err
}

func (repo *Repository) DeleteLedgerAccountByID(ctx context.Context, id int32) error {
	const stmt = `DELETE FROM ledger_accounts
	WHERE id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		id,
	)
	return err
}

func (repo *Repository) LedgerAccountByAccountID(ctx context.Context, accountID string) (*db.LedgerAccount, error) {
	const stmt = `SELECT
		ledger_accounts.id,

		ledger_accounts.account_id,
		ledger_accounts.name,
		ledger_accounts.description,
		ledger_accounts.amount,
		ledger_accounts.activated,
		ledger_accounts.allow_manual_entries,
		ledger_accounts.gl_code,
		ledger_accounts.migration_event_id,
		ledger_accounts.strip_trailing_zeros,
		ledger_accounts.type,
		ledger_accounts.usage,
		ledger_accounts.create_time,
		ledger_accounts.update_time
	FROM
		ledger_accounts
	WHERE
		account_id = $1`

	var la db.LedgerAccount
	row := repo.db.QueryRowContext(ctx, stmt, accountID)
	if err := row.Scan(
		&la.ID,
		&la.AccountID, &la.Name, &la.Description, &la.Amount, &la.Activated, &la.AllowManualEntries, &la.GLCode, &la.MigrationEventID, &la.StripTrailingZeros, &la.Type, &la.Usage, &la.CreateTime, &la.UpdateTime,
	); err != nil {
		return nil, err
	}

	return &la, nil
}

func (repo *Repository) UpdateLedgerAccountByAccountID(ctx context.Context, la *db.LedgerAccount) error {
	const stmt = `UPDATE ledger_accounts
	SET account_id=$1,
		name=$2,
		description=$3,
		amount=$4,
		activated=$5,
		allow_manual_entries=$6,
		gl_code=$7,
		migration_event_id=$8,
		strip_trailing_zeros=$9,
		type=$10,
		usage=$11,
		update_time=$12
	WHERE account_id = $13`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		la.AccountID, la.Name, la.Description, la.Amount, la.Activated, la.AllowManualEntries, la.GLCode, la.MigrationEventID, la.StripTrailingZeros, la.Type, la.Usage, la.UpdateTime, la.AccountID,
	)
	return err
}

func (repo *Repository) DeleteLedgerAccountByAccountID(ctx context.Context, accountID string) error {
	const stmt = `DELETE FROM ledger_accounts
	WHERE account_id = $1`
	_, err := repo.db.ExecContext(
		ctx, stmt,
		accountID,
	)
	return err
}
