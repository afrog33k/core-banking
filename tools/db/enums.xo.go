// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"

	core "bnk.to/core/api/v1"
	"bnk.to/core/api/v1/cards"
	"bnk.to/core/api/v1/clients"
	"bnk.to/core/api/v1/comments"
	"bnk.to/core/api/v1/consumers"
	"bnk.to/core/api/v1/deposits"
	"bnk.to/core/api/v1/documents"
	"bnk.to/core/api/v1/fields"
	"bnk.to/core/api/v1/ledgers"
	"bnk.to/core/api/v1/loans"
	"bnk.to/core/api/v1/notifications"
	"bnk.to/core/api/v1/org"
	"bnk.to/core/api/v1/products"
	"bnk.to/core/api/v1/rates"
	"bnk.to/core/api/v1/reports"
	"bnk.to/core/api/v1/revolving"
	"bnk.to/core/api/v1/tasks"
	"bnk.to/core/api/v1/transactions"
	"bnk.to/core/api/v1/users"
)

// CardsHoldSource is the 'cards_hold_source' enum.
type CardsHoldSource int32

// CardsHoldSource values.
const (
	// CardsHoldSourceCardsource is the 'CardSource' cards_hold_source.
	CardsHoldSourceCardsource CardsHoldSource = 1
	// CardsHoldSourceAccountsource is the 'AccountSource' cards_hold_source.
	CardsHoldSourceAccountsource CardsHoldSource = 2
)

func NewCardsHoldSource(chs cards.HoldSource) CardsHoldSource {
	return CardsHoldSource(chs + 1)
}

func (chs CardsHoldSource) PB() cards.HoldSource {
	return cards.HoldSource(chs - 1)
}

// UnmarshalText unmarshals CardsHoldSource from text.
func (chs *CardsHoldSource) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "CardSource":
		*chs = CardsHoldSourceCardsource
	case "AccountSource":
		*chs = CardsHoldSourceAccountsource
	default:
		return ErrInvalidCardsHoldSource(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (chs CardsHoldSource) String() string {
	switch chs {
	case CardsHoldSourceCardsource:
		return "CardSource"
	case CardsHoldSourceAccountsource:
		return "AccountSource"
	}
	return fmt.Sprintf("CardsHoldSource(%d)", chs)
}

// Value satisfies the driver.Valuer interface.
func (chs CardsHoldSource) Value() (driver.Value, error) {
	return chs.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (chs *CardsHoldSource) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return chs.UnmarshalText(buf)
	}
	return ErrInvalidCardsHoldSource(fmt.Sprintf("%T", v))
}

// ErrInvalidCardsHoldSource is the invalid CardsHoldSource error.
type ErrInvalidCardsHoldSource string

// Error satisfies the error interface.
func (err ErrInvalidCardsHoldSource) Error() string {
	return fmt.Sprintf("invalid CardsHoldSource(%s)", string(err))
}

// CardsHoldStatus is the 'cards_hold_status' enum.
type CardsHoldStatus int32

// CardsHoldStatus values.
const (
	// CardsHoldStatusHoldpending is the 'HoldPending' cards_hold_status.
	CardsHoldStatusHoldpending CardsHoldStatus = 1
	// CardsHoldStatusHoldreversed is the 'HoldReversed' cards_hold_status.
	CardsHoldStatusHoldreversed CardsHoldStatus = 2
	// CardsHoldStatusHoldsettled is the 'HoldSettled' cards_hold_status.
	CardsHoldStatusHoldsettled CardsHoldStatus = 3
	// CardsHoldStatusHoldexpired is the 'HoldExpired' cards_hold_status.
	CardsHoldStatusHoldexpired CardsHoldStatus = 4
)

func NewCardsHoldStatus(chs cards.HoldStatus) CardsHoldStatus {
	return CardsHoldStatus(chs + 1)
}

func (chs CardsHoldStatus) PB() cards.HoldStatus {
	return cards.HoldStatus(chs - 1)
}

// UnmarshalText unmarshals CardsHoldStatus from text.
func (chs *CardsHoldStatus) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "HoldPending":
		*chs = CardsHoldStatusHoldpending
	case "HoldReversed":
		*chs = CardsHoldStatusHoldreversed
	case "HoldSettled":
		*chs = CardsHoldStatusHoldsettled
	case "HoldExpired":
		*chs = CardsHoldStatusHoldexpired
	default:
		return ErrInvalidCardsHoldStatus(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (chs CardsHoldStatus) String() string {
	switch chs {
	case CardsHoldStatusHoldpending:
		return "HoldPending"
	case CardsHoldStatusHoldreversed:
		return "HoldReversed"
	case CardsHoldStatusHoldsettled:
		return "HoldSettled"
	case CardsHoldStatusHoldexpired:
		return "HoldExpired"
	}
	return fmt.Sprintf("CardsHoldStatus(%d)", chs)
}

// Value satisfies the driver.Valuer interface.
func (chs CardsHoldStatus) Value() (driver.Value, error) {
	return chs.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (chs *CardsHoldStatus) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return chs.UnmarshalText(buf)
	}
	return ErrInvalidCardsHoldStatus(fmt.Sprintf("%T", v))
}

// ErrInvalidCardsHoldStatus is the invalid CardsHoldStatus error.
type ErrInvalidCardsHoldStatus string

// Error satisfies the error interface.
func (err ErrInvalidCardsHoldStatus) Error() string {
	return fmt.Sprintf("invalid CardsHoldStatus(%s)", string(err))
}

// CardsType is the 'cards_type' enum.
type CardsType int32

// CardsType values.
const (
	// CardsTypeDebit is the 'Debit' cards_type.
	CardsTypeDebit CardsType = 1
	// CardsTypeCredit is the 'Credit' cards_type.
	CardsTypeCredit CardsType = 2
)

func NewCardsType(ct cards.Type) CardsType {
	return CardsType(ct + 1)
}

func (ct CardsType) PB() cards.Type {
	return cards.Type(ct - 1)
}

// UnmarshalText unmarshals CardsType from text.
func (ct *CardsType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Debit":
		*ct = CardsTypeDebit
	case "Credit":
		*ct = CardsTypeCredit
	default:
		return ErrInvalidCardsType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (ct CardsType) String() string {
	switch ct {
	case CardsTypeDebit:
		return "Debit"
	case CardsTypeCredit:
		return "Credit"
	}
	return fmt.Sprintf("CardsType(%d)", ct)
}

// Value satisfies the driver.Valuer interface.
func (ct CardsType) Value() (driver.Value, error) {
	return ct.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ct *CardsType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ct.UnmarshalText(buf)
	}
	return ErrInvalidCardsType(fmt.Sprintf("%T", v))
}

// ErrInvalidCardsType is the invalid CardsType error.
type ErrInvalidCardsType string

// Error satisfies the error interface.
func (err ErrInvalidCardsType) Error() string {
	return fmt.Sprintf("invalid CardsType(%s)", string(err))
}

// ClientsGender is the 'clients_gender' enum.
type ClientsGender int32

// ClientsGender values.
const (
	// ClientsGenderMale is the 'Male' clients_gender.
	ClientsGenderMale ClientsGender = 1
	// ClientsGenderFemale is the 'Female' clients_gender.
	ClientsGenderFemale ClientsGender = 2
	// ClientsGenderOther is the 'Other' clients_gender.
	ClientsGenderOther ClientsGender = 3
)

func NewClientsGender(cg clients.Gender) ClientsGender {
	return ClientsGender(cg + 1)
}

func (cg ClientsGender) PB() clients.Gender {
	return clients.Gender(cg - 1)
}

// UnmarshalText unmarshals ClientsGender from text.
func (cg *ClientsGender) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Male":
		*cg = ClientsGenderMale
	case "Female":
		*cg = ClientsGenderFemale
	case "Other":
		*cg = ClientsGenderOther
	default:
		return ErrInvalidClientsGender(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (cg ClientsGender) String() string {
	switch cg {
	case ClientsGenderMale:
		return "Male"
	case ClientsGenderFemale:
		return "Female"
	case ClientsGenderOther:
		return "Other"
	}
	return fmt.Sprintf("ClientsGender(%d)", cg)
}

// Value satisfies the driver.Valuer interface.
func (cg ClientsGender) Value() (driver.Value, error) {
	return cg.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (cg *ClientsGender) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return cg.UnmarshalText(buf)
	}
	return ErrInvalidClientsGender(fmt.Sprintf("%T", v))
}

// ErrInvalidClientsGender is the invalid ClientsGender error.
type ErrInvalidClientsGender string

// Error satisfies the error interface.
func (err ErrInvalidClientsGender) Error() string {
	return fmt.Sprintf("invalid ClientsGender(%s)", string(err))
}

// CommentsOwner is the 'comments_owner' enum.
type CommentsOwner int32

// CommentsOwner values.
const (
	// CommentsOwnerClient is the 'Client' comments_owner.
	CommentsOwnerClient CommentsOwner = 1
	// CommentsOwnerGroup is the 'Group' comments_owner.
	CommentsOwnerGroup CommentsOwner = 2
	// CommentsOwnerLoanproduct is the 'LoanProduct' comments_owner.
	CommentsOwnerLoanproduct CommentsOwner = 3
	// CommentsOwnerSavingsproduct is the 'SavingsProduct' comments_owner.
	CommentsOwnerSavingsproduct CommentsOwner = 4
	// CommentsOwnerCentre is the 'Centre' comments_owner.
	CommentsOwnerCentre CommentsOwner = 5
	// CommentsOwnerBranch is the 'Branch' comments_owner.
	CommentsOwnerBranch CommentsOwner = 6
	// CommentsOwnerUser is the 'User' comments_owner.
	CommentsOwnerUser CommentsOwner = 7
	// CommentsOwnerLoanaccount is the 'LoanAccount' comments_owner.
	CommentsOwnerLoanaccount CommentsOwner = 8
	// CommentsOwnerDepositaccount is the 'DepositAccount' comments_owner.
	CommentsOwnerDepositaccount CommentsOwner = 9
	// CommentsOwnerIddocument is the 'IDDocument' comments_owner.
	CommentsOwnerIddocument CommentsOwner = 10
	// CommentsOwnerLineofcredit is the 'LineOfCredit' comments_owner.
	CommentsOwnerLineofcredit CommentsOwner = 11
	// CommentsOwnerGljournalentry is the 'GLJournalEntry' comments_owner.
	CommentsOwnerGljournalentry CommentsOwner = 12
)

func NewCommentsOwner(co comments.Owner) CommentsOwner {
	return CommentsOwner(co + 1)
}

func (co CommentsOwner) PB() comments.Owner {
	return comments.Owner(co - 1)
}

// UnmarshalText unmarshals CommentsOwner from text.
func (co *CommentsOwner) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Client":
		*co = CommentsOwnerClient
	case "Group":
		*co = CommentsOwnerGroup
	case "LoanProduct":
		*co = CommentsOwnerLoanproduct
	case "SavingsProduct":
		*co = CommentsOwnerSavingsproduct
	case "Centre":
		*co = CommentsOwnerCentre
	case "Branch":
		*co = CommentsOwnerBranch
	case "User":
		*co = CommentsOwnerUser
	case "LoanAccount":
		*co = CommentsOwnerLoanaccount
	case "DepositAccount":
		*co = CommentsOwnerDepositaccount
	case "IDDocument":
		*co = CommentsOwnerIddocument
	case "LineOfCredit":
		*co = CommentsOwnerLineofcredit
	case "GLJournalEntry":
		*co = CommentsOwnerGljournalentry
	default:
		return ErrInvalidCommentsOwner(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (co CommentsOwner) String() string {
	switch co {
	case CommentsOwnerClient:
		return "Client"
	case CommentsOwnerGroup:
		return "Group"
	case CommentsOwnerLoanproduct:
		return "LoanProduct"
	case CommentsOwnerSavingsproduct:
		return "SavingsProduct"
	case CommentsOwnerCentre:
		return "Centre"
	case CommentsOwnerBranch:
		return "Branch"
	case CommentsOwnerUser:
		return "User"
	case CommentsOwnerLoanaccount:
		return "LoanAccount"
	case CommentsOwnerDepositaccount:
		return "DepositAccount"
	case CommentsOwnerIddocument:
		return "IDDocument"
	case CommentsOwnerLineofcredit:
		return "LineOfCredit"
	case CommentsOwnerGljournalentry:
		return "GLJournalEntry"
	}
	return fmt.Sprintf("CommentsOwner(%d)", co)
}

// Value satisfies the driver.Valuer interface.
func (co CommentsOwner) Value() (driver.Value, error) {
	return co.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (co *CommentsOwner) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return co.UnmarshalText(buf)
	}
	return ErrInvalidCommentsOwner(fmt.Sprintf("%T", v))
}

// ErrInvalidCommentsOwner is the invalid CommentsOwner error.
type ErrInvalidCommentsOwner string

// Error satisfies the error interface.
func (err ErrInvalidCommentsOwner) Error() string {
	return fmt.Sprintf("invalid CommentsOwner(%s)", string(err))
}

// ConsumersConsumerType is the 'consumers_consumer_type' enum.
type ConsumersConsumerType int32

// ConsumersConsumerType values.
const (
	// ConsumersConsumerTypeTypestreamingapi is the 'TypeStreamingAPI' consumers_consumer_type.
	ConsumersConsumerTypeTypestreamingapi ConsumersConsumerType = 1
	// ConsumersConsumerTypeTypeaudittrail is the 'TypeAuditTrail' consumers_consumer_type.
	ConsumersConsumerTypeTypeaudittrail ConsumersConsumerType = 2
	// ConsumersConsumerTypeTypepayments is the 'TypePayments' consumers_consumer_type.
	ConsumersConsumerTypeTypepayments ConsumersConsumerType = 3
)

func NewConsumersConsumerType(cct consumers.ConsumerType) ConsumersConsumerType {
	return ConsumersConsumerType(cct + 1)
}

func (cct ConsumersConsumerType) PB() consumers.ConsumerType {
	return consumers.ConsumerType(cct - 1)
}

// UnmarshalText unmarshals ConsumersConsumerType from text.
func (cct *ConsumersConsumerType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "TypeStreamingAPI":
		*cct = ConsumersConsumerTypeTypestreamingapi
	case "TypeAuditTrail":
		*cct = ConsumersConsumerTypeTypeaudittrail
	case "TypePayments":
		*cct = ConsumersConsumerTypeTypepayments
	default:
		return ErrInvalidConsumersConsumerType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (cct ConsumersConsumerType) String() string {
	switch cct {
	case ConsumersConsumerTypeTypestreamingapi:
		return "TypeStreamingAPI"
	case ConsumersConsumerTypeTypeaudittrail:
		return "TypeAuditTrail"
	case ConsumersConsumerTypeTypepayments:
		return "TypePayments"
	}
	return fmt.Sprintf("ConsumersConsumerType(%d)", cct)
}

// Value satisfies the driver.Valuer interface.
func (cct ConsumersConsumerType) Value() (driver.Value, error) {
	return cct.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (cct *ConsumersConsumerType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return cct.UnmarshalText(buf)
	}
	return ErrInvalidConsumersConsumerType(fmt.Sprintf("%T", v))
}

// ErrInvalidConsumersConsumerType is the invalid ConsumersConsumerType error.
type ErrInvalidConsumersConsumerType string

// Error satisfies the error interface.
func (err ErrInvalidConsumersConsumerType) Error() string {
	return fmt.Sprintf("invalid ConsumersConsumerType(%s)", string(err))
}

// DepositsAccountState is the 'deposits_account_state' enum.
type DepositsAccountState int32

// DepositsAccountState values.
const (
	// DepositsAccountStatePendingapproval is the 'PendingApproval' deposits_account_state.
	DepositsAccountStatePendingapproval DepositsAccountState = 1
	// DepositsAccountStateApproved is the 'Approved' deposits_account_state.
	DepositsAccountStateApproved DepositsAccountState = 2
	// DepositsAccountStateActive is the 'Active' deposits_account_state.
	DepositsAccountStateActive DepositsAccountState = 3
	// DepositsAccountStateActiveinarrears is the 'ActiveInArrears' deposits_account_state.
	DepositsAccountStateActiveinarrears DepositsAccountState = 4
	// DepositsAccountStateMatured is the 'Matured' deposits_account_state.
	DepositsAccountStateMatured DepositsAccountState = 5
	// DepositsAccountStateLocked is the 'Locked' deposits_account_state.
	DepositsAccountStateLocked DepositsAccountState = 6
	// DepositsAccountStateDormant is the 'Dormant' deposits_account_state.
	DepositsAccountStateDormant DepositsAccountState = 7
	// DepositsAccountStateClosed is the 'Closed' deposits_account_state.
	DepositsAccountStateClosed DepositsAccountState = 8
	// DepositsAccountStateClosedwrittenoff is the 'ClosedWrittenOff' deposits_account_state.
	DepositsAccountStateClosedwrittenoff DepositsAccountState = 9
	// DepositsAccountStateWithdrawn is the 'Withdrawn' deposits_account_state.
	DepositsAccountStateWithdrawn DepositsAccountState = 10
	// DepositsAccountStateClosedrejected is the 'ClosedRejected' deposits_account_state.
	DepositsAccountStateClosedrejected DepositsAccountState = 11
)

func NewDepositsAccountState(das deposits.AccountState) DepositsAccountState {
	return DepositsAccountState(das + 1)
}

func (das DepositsAccountState) PB() deposits.AccountState {
	return deposits.AccountState(das - 1)
}

// UnmarshalText unmarshals DepositsAccountState from text.
func (das *DepositsAccountState) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "PendingApproval":
		*das = DepositsAccountStatePendingapproval
	case "Approved":
		*das = DepositsAccountStateApproved
	case "Active":
		*das = DepositsAccountStateActive
	case "ActiveInArrears":
		*das = DepositsAccountStateActiveinarrears
	case "Matured":
		*das = DepositsAccountStateMatured
	case "Locked":
		*das = DepositsAccountStateLocked
	case "Dormant":
		*das = DepositsAccountStateDormant
	case "Closed":
		*das = DepositsAccountStateClosed
	case "ClosedWrittenOff":
		*das = DepositsAccountStateClosedwrittenoff
	case "Withdrawn":
		*das = DepositsAccountStateWithdrawn
	case "ClosedRejected":
		*das = DepositsAccountStateClosedrejected
	default:
		return ErrInvalidDepositsAccountState(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (das DepositsAccountState) String() string {
	switch das {
	case DepositsAccountStatePendingapproval:
		return "PendingApproval"
	case DepositsAccountStateApproved:
		return "Approved"
	case DepositsAccountStateActive:
		return "Active"
	case DepositsAccountStateActiveinarrears:
		return "ActiveInArrears"
	case DepositsAccountStateMatured:
		return "Matured"
	case DepositsAccountStateLocked:
		return "Locked"
	case DepositsAccountStateDormant:
		return "Dormant"
	case DepositsAccountStateClosed:
		return "Closed"
	case DepositsAccountStateClosedwrittenoff:
		return "ClosedWrittenOff"
	case DepositsAccountStateWithdrawn:
		return "Withdrawn"
	case DepositsAccountStateClosedrejected:
		return "ClosedRejected"
	}
	return fmt.Sprintf("DepositsAccountState(%d)", das)
}

// Value satisfies the driver.Valuer interface.
func (das DepositsAccountState) Value() (driver.Value, error) {
	return das.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (das *DepositsAccountState) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return das.UnmarshalText(buf)
	}
	return ErrInvalidDepositsAccountState(fmt.Sprintf("%T", v))
}

// ErrInvalidDepositsAccountState is the invalid DepositsAccountState error.
type ErrInvalidDepositsAccountState string

// Error satisfies the error interface.
func (err ErrInvalidDepositsAccountState) Error() string {
	return fmt.Sprintf("invalid DepositsAccountState(%s)", string(err))
}

// DepositsAccountType is the 'deposits_account_type' enum.
type DepositsAccountType int32

// DepositsAccountType values.
const (
	// DepositsAccountTypeCurrentaccount is the 'CurrentAccount' deposits_account_type.
	DepositsAccountTypeCurrentaccount DepositsAccountType = 1
	// DepositsAccountTypeRegularsavings is the 'RegularSavings' deposits_account_type.
	DepositsAccountTypeRegularsavings DepositsAccountType = 2
	// DepositsAccountTypeFixeddeposit is the 'FixedDeposit' deposits_account_type.
	DepositsAccountTypeFixeddeposit DepositsAccountType = 3
	// DepositsAccountTypeSavingsplan is the 'SavingsPlan' deposits_account_type.
	DepositsAccountTypeSavingsplan DepositsAccountType = 4
	// DepositsAccountTypeInvestoraccount is the 'InvestorAccount' deposits_account_type.
	DepositsAccountTypeInvestoraccount DepositsAccountType = 5
)

func NewDepositsAccountType(dat deposits.AccountType) DepositsAccountType {
	return DepositsAccountType(dat + 1)
}

func (dat DepositsAccountType) PB() deposits.AccountType {
	return deposits.AccountType(dat - 1)
}

// UnmarshalText unmarshals DepositsAccountType from text.
func (dat *DepositsAccountType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "CurrentAccount":
		*dat = DepositsAccountTypeCurrentaccount
	case "RegularSavings":
		*dat = DepositsAccountTypeRegularsavings
	case "FixedDeposit":
		*dat = DepositsAccountTypeFixeddeposit
	case "SavingsPlan":
		*dat = DepositsAccountTypeSavingsplan
	case "InvestorAccount":
		*dat = DepositsAccountTypeInvestoraccount
	default:
		return ErrInvalidDepositsAccountType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (dat DepositsAccountType) String() string {
	switch dat {
	case DepositsAccountTypeCurrentaccount:
		return "CurrentAccount"
	case DepositsAccountTypeRegularsavings:
		return "RegularSavings"
	case DepositsAccountTypeFixeddeposit:
		return "FixedDeposit"
	case DepositsAccountTypeSavingsplan:
		return "SavingsPlan"
	case DepositsAccountTypeInvestoraccount:
		return "InvestorAccount"
	}
	return fmt.Sprintf("DepositsAccountType(%d)", dat)
}

// Value satisfies the driver.Valuer interface.
func (dat DepositsAccountType) Value() (driver.Value, error) {
	return dat.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (dat *DepositsAccountType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return dat.UnmarshalText(buf)
	}
	return ErrInvalidDepositsAccountType(fmt.Sprintf("%T", v))
}

// ErrInvalidDepositsAccountType is the invalid DepositsAccountType error.
type ErrInvalidDepositsAccountType string

// Error satisfies the error interface.
func (err ErrInvalidDepositsAccountType) Error() string {
	return fmt.Sprintf("invalid DepositsAccountType(%s)", string(err))
}

// DepositsBlockState is the 'deposits_block_state' enum.
type DepositsBlockState int32

// DepositsBlockState values.
const (
	// DepositsBlockStatePending is the 'Pending' deposits_block_state.
	DepositsBlockStatePending DepositsBlockState = 1
	// DepositsBlockStateSeized is the 'Seized' deposits_block_state.
	DepositsBlockStateSeized DepositsBlockState = 2
	// DepositsBlockStateRemoved is the 'Removed' deposits_block_state.
	DepositsBlockStateRemoved DepositsBlockState = 3
	// DepositsBlockStatePartiallyseized is the 'PartiallySeized' deposits_block_state.
	DepositsBlockStatePartiallyseized DepositsBlockState = 4
)

func NewDepositsBlockState(dbs deposits.BlockState) DepositsBlockState {
	return DepositsBlockState(dbs + 1)
}

func (dbs DepositsBlockState) PB() deposits.BlockState {
	return deposits.BlockState(dbs - 1)
}

// UnmarshalText unmarshals DepositsBlockState from text.
func (dbs *DepositsBlockState) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Pending":
		*dbs = DepositsBlockStatePending
	case "Seized":
		*dbs = DepositsBlockStateSeized
	case "Removed":
		*dbs = DepositsBlockStateRemoved
	case "PartiallySeized":
		*dbs = DepositsBlockStatePartiallyseized
	default:
		return ErrInvalidDepositsBlockState(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (dbs DepositsBlockState) String() string {
	switch dbs {
	case DepositsBlockStatePending:
		return "Pending"
	case DepositsBlockStateSeized:
		return "Seized"
	case DepositsBlockStateRemoved:
		return "Removed"
	case DepositsBlockStatePartiallyseized:
		return "PartiallySeized"
	}
	return fmt.Sprintf("DepositsBlockState(%d)", dbs)
}

// Value satisfies the driver.Valuer interface.
func (dbs DepositsBlockState) Value() (driver.Value, error) {
	return dbs.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (dbs *DepositsBlockState) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return dbs.UnmarshalText(buf)
	}
	return ErrInvalidDepositsBlockState(fmt.Sprintf("%T", v))
}

// ErrInvalidDepositsBlockState is the invalid DepositsBlockState error.
type ErrInvalidDepositsBlockState string

// Error satisfies the error interface.
func (err ErrInvalidDepositsBlockState) Error() string {
	return fmt.Sprintf("invalid DepositsBlockState(%s)", string(err))
}

// DepositsInterestRateType is the 'deposits_interest_rate_type' enum.
type DepositsInterestRateType int32

// DepositsInterestRateType values.
const (
	// DepositsInterestRateTypeFixedrate is the 'FixedRate' deposits_interest_rate_type.
	DepositsInterestRateTypeFixedrate DepositsInterestRateType = 1
	// DepositsInterestRateTypeIndexrate is the 'IndexRate' deposits_interest_rate_type.
	DepositsInterestRateTypeIndexrate DepositsInterestRateType = 2
)

func NewDepositsInterestRateType(dirt deposits.InterestRateType) DepositsInterestRateType {
	return DepositsInterestRateType(dirt + 1)
}

func (dirt DepositsInterestRateType) PB() deposits.InterestRateType {
	return deposits.InterestRateType(dirt - 1)
}

// UnmarshalText unmarshals DepositsInterestRateType from text.
func (dirt *DepositsInterestRateType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "FixedRate":
		*dirt = DepositsInterestRateTypeFixedrate
	case "IndexRate":
		*dirt = DepositsInterestRateTypeIndexrate
	default:
		return ErrInvalidDepositsInterestRateType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (dirt DepositsInterestRateType) String() string {
	switch dirt {
	case DepositsInterestRateTypeFixedrate:
		return "FixedRate"
	case DepositsInterestRateTypeIndexrate:
		return "IndexRate"
	}
	return fmt.Sprintf("DepositsInterestRateType(%d)", dirt)
}

// Value satisfies the driver.Valuer interface.
func (dirt DepositsInterestRateType) Value() (driver.Value, error) {
	return dirt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (dirt *DepositsInterestRateType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return dirt.UnmarshalText(buf)
	}
	return ErrInvalidDepositsInterestRateType(fmt.Sprintf("%T", v))
}

// ErrInvalidDepositsInterestRateType is the invalid DepositsInterestRateType error.
type ErrInvalidDepositsInterestRateType string

// Error satisfies the error interface.
func (err ErrInvalidDepositsInterestRateType) Error() string {
	return fmt.Sprintf("invalid DepositsInterestRateType(%s)", string(err))
}

// DocumentsOwner is the 'documents_owner' enum.
type DocumentsOwner int32

// DocumentsOwner values.
const (
	// DocumentsOwnerClient is the 'Client' documents_owner.
	DocumentsOwnerClient DocumentsOwner = 1
	// DocumentsOwnerGroup is the 'Group' documents_owner.
	DocumentsOwnerGroup DocumentsOwner = 2
	// DocumentsOwnerLoanproduct is the 'LoanProduct' documents_owner.
	DocumentsOwnerLoanproduct DocumentsOwner = 3
	// DocumentsOwnerSavingsproduct is the 'SavingsProduct' documents_owner.
	DocumentsOwnerSavingsproduct DocumentsOwner = 4
	// DocumentsOwnerCentre is the 'Centre' documents_owner.
	DocumentsOwnerCentre DocumentsOwner = 5
	// DocumentsOwnerBranch is the 'Branch' documents_owner.
	DocumentsOwnerBranch DocumentsOwner = 6
	// DocumentsOwnerUser is the 'User' documents_owner.
	DocumentsOwnerUser DocumentsOwner = 7
	// DocumentsOwnerLoanaccount is the 'LoanAccount' documents_owner.
	DocumentsOwnerLoanaccount DocumentsOwner = 8
	// DocumentsOwnerDepositaccount is the 'DepositAccount' documents_owner.
	DocumentsOwnerDepositaccount DocumentsOwner = 9
	// DocumentsOwnerIddocument is the 'IDDocument' documents_owner.
	DocumentsOwnerIddocument DocumentsOwner = 10
	// DocumentsOwnerLineofcredit is the 'LineOfCredit' documents_owner.
	DocumentsOwnerLineofcredit DocumentsOwner = 11
	// DocumentsOwnerGljournalentry is the 'GLJournalEntry' documents_owner.
	DocumentsOwnerGljournalentry DocumentsOwner = 12
	// DocumentsOwnerIdtemplate is the 'IDTemplate' documents_owner.
	DocumentsOwnerIdtemplate DocumentsOwner = 13
)

func NewDocumentsOwner(do documents.Owner) DocumentsOwner {
	return DocumentsOwner(do + 1)
}

func (do DocumentsOwner) PB() documents.Owner {
	return documents.Owner(do - 1)
}

// UnmarshalText unmarshals DocumentsOwner from text.
func (do *DocumentsOwner) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Client":
		*do = DocumentsOwnerClient
	case "Group":
		*do = DocumentsOwnerGroup
	case "LoanProduct":
		*do = DocumentsOwnerLoanproduct
	case "SavingsProduct":
		*do = DocumentsOwnerSavingsproduct
	case "Centre":
		*do = DocumentsOwnerCentre
	case "Branch":
		*do = DocumentsOwnerBranch
	case "User":
		*do = DocumentsOwnerUser
	case "LoanAccount":
		*do = DocumentsOwnerLoanaccount
	case "DepositAccount":
		*do = DocumentsOwnerDepositaccount
	case "IDDocument":
		*do = DocumentsOwnerIddocument
	case "LineOfCredit":
		*do = DocumentsOwnerLineofcredit
	case "GLJournalEntry":
		*do = DocumentsOwnerGljournalentry
	case "IDTemplate":
		*do = DocumentsOwnerIdtemplate
	default:
		return ErrInvalidDocumentsOwner(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (do DocumentsOwner) String() string {
	switch do {
	case DocumentsOwnerClient:
		return "Client"
	case DocumentsOwnerGroup:
		return "Group"
	case DocumentsOwnerLoanproduct:
		return "LoanProduct"
	case DocumentsOwnerSavingsproduct:
		return "SavingsProduct"
	case DocumentsOwnerCentre:
		return "Centre"
	case DocumentsOwnerBranch:
		return "Branch"
	case DocumentsOwnerUser:
		return "User"
	case DocumentsOwnerLoanaccount:
		return "LoanAccount"
	case DocumentsOwnerDepositaccount:
		return "DepositAccount"
	case DocumentsOwnerIddocument:
		return "IDDocument"
	case DocumentsOwnerLineofcredit:
		return "LineOfCredit"
	case DocumentsOwnerGljournalentry:
		return "GLJournalEntry"
	case DocumentsOwnerIdtemplate:
		return "IDTemplate"
	}
	return fmt.Sprintf("DocumentsOwner(%d)", do)
}

// Value satisfies the driver.Valuer interface.
func (do DocumentsOwner) Value() (driver.Value, error) {
	return do.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (do *DocumentsOwner) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return do.UnmarshalText(buf)
	}
	return ErrInvalidDocumentsOwner(fmt.Sprintf("%T", v))
}

// ErrInvalidDocumentsOwner is the invalid DocumentsOwner error.
type ErrInvalidDocumentsOwner string

// Error satisfies the error interface.
func (err ErrInvalidDocumentsOwner) Error() string {
	return fmt.Sprintf("invalid DocumentsOwner(%s)", string(err))
}

// Entity is the 'entity' enum.
type Entity int32

// Entity values.
const (
	// EntityClient is the 'Client' entity.
	EntityClient Entity = 1
	// EntityGroup is the 'Group' entity.
	EntityGroup Entity = 2
)

func NewEntity(e core.Entity) Entity {
	return Entity(e + 1)
}

func (e Entity) PB() core.Entity {
	return core.Entity(e - 1)
}

// UnmarshalText unmarshals Entity from text.
func (e *Entity) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Client":
		*e = EntityClient
	case "Group":
		*e = EntityGroup
	default:
		return ErrInvalidEntity(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (e Entity) String() string {
	switch e {
	case EntityClient:
		return "Client"
	case EntityGroup:
		return "Group"
	}
	return fmt.Sprintf("Entity(%d)", e)
}

// Value satisfies the driver.Valuer interface.
func (e Entity) Value() (driver.Value, error) {
	return e.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (e *Entity) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return e.UnmarshalText(buf)
	}
	return ErrInvalidEntity(fmt.Sprintf("%T", v))
}

// ErrInvalidEntity is the invalid Entity error.
type ErrInvalidEntity string

// Error satisfies the error interface.
func (err ErrInvalidEntity) Error() string {
	return fmt.Sprintf("invalid Entity(%s)", string(err))
}

// FieldsAvailableFor is the 'fields_available_for' enum.
type FieldsAvailableFor int32

// FieldsAvailableFor values.
const (
	// FieldsAvailableForForclient is the 'ForClient' fields_available_for.
	FieldsAvailableForForclient FieldsAvailableFor = 1
	// FieldsAvailableForForgroup is the 'ForGroup' fields_available_for.
	FieldsAvailableForForgroup FieldsAvailableFor = 2
	// FieldsAvailableForForcreditarrangement is the 'ForCreditArrangement' fields_available_for.
	FieldsAvailableForForcreditarrangement FieldsAvailableFor = 3
	// FieldsAvailableForForloanaccount is the 'ForLoanAccount' fields_available_for.
	FieldsAvailableForForloanaccount FieldsAvailableFor = 4
	// FieldsAvailableForForguarantor is the 'ForGuarantor' fields_available_for.
	FieldsAvailableForForguarantor FieldsAvailableFor = 5
	// FieldsAvailableForForasset is the 'ForAsset' fields_available_for.
	FieldsAvailableForForasset FieldsAvailableFor = 6
	// FieldsAvailableForFordepositaccount is the 'ForDepositAccount' fields_available_for.
	FieldsAvailableForFordepositaccount FieldsAvailableFor = 7
	// FieldsAvailableForFortransactionchannel is the 'ForTransactionChannel' fields_available_for.
	FieldsAvailableForFortransactionchannel FieldsAvailableFor = 8
	// FieldsAvailableForFortransactiontype is the 'ForTransactionType' fields_available_for.
	FieldsAvailableForFortransactiontype FieldsAvailableFor = 9
	// FieldsAvailableForForbranch is the 'ForBranch' fields_available_for.
	FieldsAvailableForForbranch FieldsAvailableFor = 10
	// FieldsAvailableForForcentre is the 'ForCentre' fields_available_for.
	FieldsAvailableForForcentre FieldsAvailableFor = 11
	// FieldsAvailableForForuser is the 'ForUser' fields_available_for.
	FieldsAvailableForForuser FieldsAvailableFor = 12
)

func NewFieldsAvailableFor(faf fields.AvailableFor) FieldsAvailableFor {
	return FieldsAvailableFor(faf + 1)
}

func (faf FieldsAvailableFor) PB() fields.AvailableFor {
	return fields.AvailableFor(faf - 1)
}

// UnmarshalText unmarshals FieldsAvailableFor from text.
func (faf *FieldsAvailableFor) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "ForClient":
		*faf = FieldsAvailableForForclient
	case "ForGroup":
		*faf = FieldsAvailableForForgroup
	case "ForCreditArrangement":
		*faf = FieldsAvailableForForcreditarrangement
	case "ForLoanAccount":
		*faf = FieldsAvailableForForloanaccount
	case "ForGuarantor":
		*faf = FieldsAvailableForForguarantor
	case "ForAsset":
		*faf = FieldsAvailableForForasset
	case "ForDepositAccount":
		*faf = FieldsAvailableForFordepositaccount
	case "ForTransactionChannel":
		*faf = FieldsAvailableForFortransactionchannel
	case "ForTransactionType":
		*faf = FieldsAvailableForFortransactiontype
	case "ForBranch":
		*faf = FieldsAvailableForForbranch
	case "ForCentre":
		*faf = FieldsAvailableForForcentre
	case "ForUser":
		*faf = FieldsAvailableForForuser
	default:
		return ErrInvalidFieldsAvailableFor(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (faf FieldsAvailableFor) String() string {
	switch faf {
	case FieldsAvailableForForclient:
		return "ForClient"
	case FieldsAvailableForForgroup:
		return "ForGroup"
	case FieldsAvailableForForcreditarrangement:
		return "ForCreditArrangement"
	case FieldsAvailableForForloanaccount:
		return "ForLoanAccount"
	case FieldsAvailableForForguarantor:
		return "ForGuarantor"
	case FieldsAvailableForForasset:
		return "ForAsset"
	case FieldsAvailableForFordepositaccount:
		return "ForDepositAccount"
	case FieldsAvailableForFortransactionchannel:
		return "ForTransactionChannel"
	case FieldsAvailableForFortransactiontype:
		return "ForTransactionType"
	case FieldsAvailableForForbranch:
		return "ForBranch"
	case FieldsAvailableForForcentre:
		return "ForCentre"
	case FieldsAvailableForForuser:
		return "ForUser"
	}
	return fmt.Sprintf("FieldsAvailableFor(%d)", faf)
}

// Value satisfies the driver.Valuer interface.
func (faf FieldsAvailableFor) Value() (driver.Value, error) {
	return faf.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (faf *FieldsAvailableFor) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return faf.UnmarshalText(buf)
	}
	return ErrInvalidFieldsAvailableFor(fmt.Sprintf("%T", v))
}

// ErrInvalidFieldsAvailableFor is the invalid FieldsAvailableFor error.
type ErrInvalidFieldsAvailableFor string

// Error satisfies the error interface.
func (err ErrInvalidFieldsAvailableFor) Error() string {
	return fmt.Sprintf("invalid FieldsAvailableFor(%s)", string(err))
}

// FieldsType is the 'fields_type' enum.
type FieldsType int32

// FieldsType values.
const (
	// FieldsTypeTypefreetext is the 'TypeFreeText' fields_type.
	FieldsTypeTypefreetext FieldsType = 1
	// FieldsTypeTypeparagraph is the 'TypeParagraph' fields_type.
	FieldsTypeTypeparagraph FieldsType = 2
	// FieldsTypeTypeselection is the 'TypeSelection' fields_type.
	FieldsTypeTypeselection FieldsType = 3
	// FieldsTypeTypenumber is the 'TypeNumber' fields_type.
	FieldsTypeTypenumber FieldsType = 4
	// FieldsTypeTypecheckbox is the 'TypeCheckbox' fields_type.
	FieldsTypeTypecheckbox FieldsType = 5
	// FieldsTypeTypedate is the 'TypeDate' fields_type.
	FieldsTypeTypedate FieldsType = 6
	// FieldsTypeTypeclient is the 'TypeClient' fields_type.
	FieldsTypeTypeclient FieldsType = 7
	// FieldsTypeTypegroup is the 'TypeGroup' fields_type.
	FieldsTypeTypegroup FieldsType = 8
	// FieldsTypeTypeuser is the 'TypeUser' fields_type.
	FieldsTypeTypeuser FieldsType = 9
)

func NewFieldsType(ft fields.Type) FieldsType {
	return FieldsType(ft + 1)
}

func (ft FieldsType) PB() fields.Type {
	return fields.Type(ft - 1)
}

// UnmarshalText unmarshals FieldsType from text.
func (ft *FieldsType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "TypeFreeText":
		*ft = FieldsTypeTypefreetext
	case "TypeParagraph":
		*ft = FieldsTypeTypeparagraph
	case "TypeSelection":
		*ft = FieldsTypeTypeselection
	case "TypeNumber":
		*ft = FieldsTypeTypenumber
	case "TypeCheckbox":
		*ft = FieldsTypeTypecheckbox
	case "TypeDate":
		*ft = FieldsTypeTypedate
	case "TypeClient":
		*ft = FieldsTypeTypeclient
	case "TypeGroup":
		*ft = FieldsTypeTypegroup
	case "TypeUser":
		*ft = FieldsTypeTypeuser
	default:
		return ErrInvalidFieldsType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (ft FieldsType) String() string {
	switch ft {
	case FieldsTypeTypefreetext:
		return "TypeFreeText"
	case FieldsTypeTypeparagraph:
		return "TypeParagraph"
	case FieldsTypeTypeselection:
		return "TypeSelection"
	case FieldsTypeTypenumber:
		return "TypeNumber"
	case FieldsTypeTypecheckbox:
		return "TypeCheckbox"
	case FieldsTypeTypedate:
		return "TypeDate"
	case FieldsTypeTypeclient:
		return "TypeClient"
	case FieldsTypeTypegroup:
		return "TypeGroup"
	case FieldsTypeTypeuser:
		return "TypeUser"
	}
	return fmt.Sprintf("FieldsType(%d)", ft)
}

// Value satisfies the driver.Valuer interface.
func (ft FieldsType) Value() (driver.Value, error) {
	return ft.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ft *FieldsType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ft.UnmarshalText(buf)
	}
	return ErrInvalidFieldsType(fmt.Sprintf("%T", v))
}

// ErrInvalidFieldsType is the invalid FieldsType error.
type ErrInvalidFieldsType string

// Error satisfies the error interface.
func (err ErrInvalidFieldsType) Error() string {
	return fmt.Sprintf("invalid FieldsType(%s)", string(err))
}

// LedgersAccountType is the 'ledgers_account_type' enum.
type LedgersAccountType int32

// LedgersAccountType values.
const (
	// LedgersAccountTypeAsset is the 'Asset' ledgers_account_type.
	LedgersAccountTypeAsset LedgersAccountType = 1
	// LedgersAccountTypeLiability is the 'Liability' ledgers_account_type.
	LedgersAccountTypeLiability LedgersAccountType = 2
	// LedgersAccountTypeEquity is the 'Equity' ledgers_account_type.
	LedgersAccountTypeEquity LedgersAccountType = 3
	// LedgersAccountTypeIncome is the 'Income' ledgers_account_type.
	LedgersAccountTypeIncome LedgersAccountType = 4
	// LedgersAccountTypeExpense is the 'Expense' ledgers_account_type.
	LedgersAccountTypeExpense LedgersAccountType = 5
)

func NewLedgersAccountType(lat ledgers.AccountType) LedgersAccountType {
	return LedgersAccountType(lat + 1)
}

func (lat LedgersAccountType) PB() ledgers.AccountType {
	return ledgers.AccountType(lat - 1)
}

// UnmarshalText unmarshals LedgersAccountType from text.
func (lat *LedgersAccountType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Asset":
		*lat = LedgersAccountTypeAsset
	case "Liability":
		*lat = LedgersAccountTypeLiability
	case "Equity":
		*lat = LedgersAccountTypeEquity
	case "Income":
		*lat = LedgersAccountTypeIncome
	case "Expense":
		*lat = LedgersAccountTypeExpense
	default:
		return ErrInvalidLedgersAccountType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (lat LedgersAccountType) String() string {
	switch lat {
	case LedgersAccountTypeAsset:
		return "Asset"
	case LedgersAccountTypeLiability:
		return "Liability"
	case LedgersAccountTypeEquity:
		return "Equity"
	case LedgersAccountTypeIncome:
		return "Income"
	case LedgersAccountTypeExpense:
		return "Expense"
	}
	return fmt.Sprintf("LedgersAccountType(%d)", lat)
}

// Value satisfies the driver.Valuer interface.
func (lat LedgersAccountType) Value() (driver.Value, error) {
	return lat.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (lat *LedgersAccountType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return lat.UnmarshalText(buf)
	}
	return ErrInvalidLedgersAccountType(fmt.Sprintf("%T", v))
}

// ErrInvalidLedgersAccountType is the invalid LedgersAccountType error.
type ErrInvalidLedgersAccountType string

// Error satisfies the error interface.
func (err ErrInvalidLedgersAccountType) Error() string {
	return fmt.Sprintf("invalid LedgersAccountType(%s)", string(err))
}

// LedgersEntryType is the 'ledgers_entry_type' enum.
type LedgersEntryType int32

// LedgersEntryType values.
const (
	// LedgersEntryTypeDebit is the 'Debit' ledgers_entry_type.
	LedgersEntryTypeDebit LedgersEntryType = 1
	// LedgersEntryTypeCredit is the 'Credit' ledgers_entry_type.
	LedgersEntryTypeCredit LedgersEntryType = 2
)

func NewLedgersEntryType(let ledgers.EntryType) LedgersEntryType {
	return LedgersEntryType(let + 1)
}

func (let LedgersEntryType) PB() ledgers.EntryType {
	return ledgers.EntryType(let - 1)
}

// UnmarshalText unmarshals LedgersEntryType from text.
func (let *LedgersEntryType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Debit":
		*let = LedgersEntryTypeDebit
	case "Credit":
		*let = LedgersEntryTypeCredit
	default:
		return ErrInvalidLedgersEntryType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (let LedgersEntryType) String() string {
	switch let {
	case LedgersEntryTypeDebit:
		return "Debit"
	case LedgersEntryTypeCredit:
		return "Credit"
	}
	return fmt.Sprintf("LedgersEntryType(%d)", let)
}

// Value satisfies the driver.Valuer interface.
func (let LedgersEntryType) Value() (driver.Value, error) {
	return let.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (let *LedgersEntryType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return let.UnmarshalText(buf)
	}
	return ErrInvalidLedgersEntryType(fmt.Sprintf("%T", v))
}

// ErrInvalidLedgersEntryType is the invalid LedgersEntryType error.
type ErrInvalidLedgersEntryType string

// Error satisfies the error interface.
func (err ErrInvalidLedgersEntryType) Error() string {
	return fmt.Sprintf("invalid LedgersEntryType(%s)", string(err))
}

// LedgersProductType is the 'ledgers_product_type' enum.
type LedgersProductType int32

// LedgersProductType values.
const (
	// LedgersProductTypeLoan is the 'Loan' ledgers_product_type.
	LedgersProductTypeLoan LedgersProductType = 1
	// LedgersProductTypeSavings is the 'Savings' ledgers_product_type.
	LedgersProductTypeSavings LedgersProductType = 2
)

func NewLedgersProductType(lpt ledgers.ProductType) LedgersProductType {
	return LedgersProductType(lpt + 1)
}

func (lpt LedgersProductType) PB() ledgers.ProductType {
	return ledgers.ProductType(lpt - 1)
}

// UnmarshalText unmarshals LedgersProductType from text.
func (lpt *LedgersProductType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Loan":
		*lpt = LedgersProductTypeLoan
	case "Savings":
		*lpt = LedgersProductTypeSavings
	default:
		return ErrInvalidLedgersProductType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (lpt LedgersProductType) String() string {
	switch lpt {
	case LedgersProductTypeLoan:
		return "Loan"
	case LedgersProductTypeSavings:
		return "Savings"
	}
	return fmt.Sprintf("LedgersProductType(%d)", lpt)
}

// Value satisfies the driver.Valuer interface.
func (lpt LedgersProductType) Value() (driver.Value, error) {
	return lpt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (lpt *LedgersProductType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return lpt.UnmarshalText(buf)
	}
	return ErrInvalidLedgersProductType(fmt.Sprintf("%T", v))
}

// ErrInvalidLedgersProductType is the invalid LedgersProductType error.
type ErrInvalidLedgersProductType string

// Error satisfies the error interface.
func (err ErrInvalidLedgersProductType) Error() string {
	return fmt.Sprintf("invalid LedgersProductType(%s)", string(err))
}

// LedgersUsage is the 'ledgers_usage' enum.
type LedgersUsage int32

// LedgersUsage values.
const (
	// LedgersUsageTransactions is the 'Transactions' ledgers_usage.
	LedgersUsageTransactions LedgersUsage = 1
	// LedgersUsageGrouping is the 'Grouping' ledgers_usage.
	LedgersUsageGrouping LedgersUsage = 2
)

func NewLedgersUsage(lu ledgers.Usage) LedgersUsage {
	return LedgersUsage(lu + 1)
}

func (lu LedgersUsage) PB() ledgers.Usage {
	return ledgers.Usage(lu - 1)
}

// UnmarshalText unmarshals LedgersUsage from text.
func (lu *LedgersUsage) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Transactions":
		*lu = LedgersUsageTransactions
	case "Grouping":
		*lu = LedgersUsageGrouping
	default:
		return ErrInvalidLedgersUsage(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (lu LedgersUsage) String() string {
	switch lu {
	case LedgersUsageTransactions:
		return "Transactions"
	case LedgersUsageGrouping:
		return "Grouping"
	}
	return fmt.Sprintf("LedgersUsage(%d)", lu)
}

// Value satisfies the driver.Valuer interface.
func (lu LedgersUsage) Value() (driver.Value, error) {
	return lu.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (lu *LedgersUsage) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return lu.UnmarshalText(buf)
	}
	return ErrInvalidLedgersUsage(fmt.Sprintf("%T", v))
}

// ErrInvalidLedgersUsage is the invalid LedgersUsage error.
type ErrInvalidLedgersUsage string

// Error satisfies the error interface.
func (err ErrInvalidLedgersUsage) Error() string {
	return fmt.Sprintf("invalid LedgersUsage(%s)", string(err))
}

// LoansAccountFuturePaymentsAcceptance is the 'loans_account_future_payments_acceptance' enum.
type LoansAccountFuturePaymentsAcceptance int32

// LoansAccountFuturePaymentsAcceptance values.
const (
	// LoansAccountFuturePaymentsAcceptanceNofuturepayments is the 'NoFuturePayments' loans_account_future_payments_acceptance.
	LoansAccountFuturePaymentsAcceptanceNofuturepayments LoansAccountFuturePaymentsAcceptance = 1
	// LoansAccountFuturePaymentsAcceptanceAcceptfuturepayments is the 'AcceptFuturePayments' loans_account_future_payments_acceptance.
	LoansAccountFuturePaymentsAcceptanceAcceptfuturepayments LoansAccountFuturePaymentsAcceptance = 2
	// LoansAccountFuturePaymentsAcceptanceAcceptoverpayments is the 'AcceptOverpayments' loans_account_future_payments_acceptance.
	LoansAccountFuturePaymentsAcceptanceAcceptoverpayments LoansAccountFuturePaymentsAcceptance = 3
)

func NewLoansAccountFuturePaymentsAcceptance(lafpa loans.AccountFuturePaymentsAcceptance) LoansAccountFuturePaymentsAcceptance {
	return LoansAccountFuturePaymentsAcceptance(lafpa + 1)
}

func (lafpa LoansAccountFuturePaymentsAcceptance) PB() loans.AccountFuturePaymentsAcceptance {
	return loans.AccountFuturePaymentsAcceptance(lafpa - 1)
}

// UnmarshalText unmarshals LoansAccountFuturePaymentsAcceptance from text.
func (lafpa *LoansAccountFuturePaymentsAcceptance) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "NoFuturePayments":
		*lafpa = LoansAccountFuturePaymentsAcceptanceNofuturepayments
	case "AcceptFuturePayments":
		*lafpa = LoansAccountFuturePaymentsAcceptanceAcceptfuturepayments
	case "AcceptOverpayments":
		*lafpa = LoansAccountFuturePaymentsAcceptanceAcceptoverpayments
	default:
		return ErrInvalidLoansAccountFuturePaymentsAcceptance(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (lafpa LoansAccountFuturePaymentsAcceptance) String() string {
	switch lafpa {
	case LoansAccountFuturePaymentsAcceptanceNofuturepayments:
		return "NoFuturePayments"
	case LoansAccountFuturePaymentsAcceptanceAcceptfuturepayments:
		return "AcceptFuturePayments"
	case LoansAccountFuturePaymentsAcceptanceAcceptoverpayments:
		return "AcceptOverpayments"
	}
	return fmt.Sprintf("LoansAccountFuturePaymentsAcceptance(%d)", lafpa)
}

// Value satisfies the driver.Valuer interface.
func (lafpa LoansAccountFuturePaymentsAcceptance) Value() (driver.Value, error) {
	return lafpa.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (lafpa *LoansAccountFuturePaymentsAcceptance) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return lafpa.UnmarshalText(buf)
	}
	return ErrInvalidLoansAccountFuturePaymentsAcceptance(fmt.Sprintf("%T", v))
}

// ErrInvalidLoansAccountFuturePaymentsAcceptance is the invalid LoansAccountFuturePaymentsAcceptance error.
type ErrInvalidLoansAccountFuturePaymentsAcceptance string

// Error satisfies the error interface.
func (err ErrInvalidLoansAccountFuturePaymentsAcceptance) Error() string {
	return fmt.Sprintf("invalid LoansAccountFuturePaymentsAcceptance(%s)", string(err))
}

// LoansAccountLatePaymentsRecalculationMethod is the 'loans_account_late_payments_recalculation_method' enum.
type LoansAccountLatePaymentsRecalculationMethod int32

// LoansAccountLatePaymentsRecalculationMethod values.
const (
	// LoansAccountLatePaymentsRecalculationMethodMethodoverdueinstallmentsincrease is the 'MethodOverdueInstallmentsIncrease' loans_account_late_payments_recalculation_method.
	LoansAccountLatePaymentsRecalculationMethodMethodoverdueinstallmentsincrease LoansAccountLatePaymentsRecalculationMethod = 1
	// LoansAccountLatePaymentsRecalculationMethodMethodlastinstallmentincrease is the 'MethodLastInstallmentIncrease' loans_account_late_payments_recalculation_method.
	LoansAccountLatePaymentsRecalculationMethodMethodlastinstallmentincrease LoansAccountLatePaymentsRecalculationMethod = 2
)

func NewLoansAccountLatePaymentsRecalculationMethod(lalprm loans.AccountLatePaymentsRecalculationMethod) LoansAccountLatePaymentsRecalculationMethod {
	return LoansAccountLatePaymentsRecalculationMethod(lalprm + 1)
}

func (lalprm LoansAccountLatePaymentsRecalculationMethod) PB() loans.AccountLatePaymentsRecalculationMethod {
	return loans.AccountLatePaymentsRecalculationMethod(lalprm - 1)
}

// UnmarshalText unmarshals LoansAccountLatePaymentsRecalculationMethod from text.
func (lalprm *LoansAccountLatePaymentsRecalculationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodOverdueInstallmentsIncrease":
		*lalprm = LoansAccountLatePaymentsRecalculationMethodMethodoverdueinstallmentsincrease
	case "MethodLastInstallmentIncrease":
		*lalprm = LoansAccountLatePaymentsRecalculationMethodMethodlastinstallmentincrease
	default:
		return ErrInvalidLoansAccountLatePaymentsRecalculationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (lalprm LoansAccountLatePaymentsRecalculationMethod) String() string {
	switch lalprm {
	case LoansAccountLatePaymentsRecalculationMethodMethodoverdueinstallmentsincrease:
		return "MethodOverdueInstallmentsIncrease"
	case LoansAccountLatePaymentsRecalculationMethodMethodlastinstallmentincrease:
		return "MethodLastInstallmentIncrease"
	}
	return fmt.Sprintf("LoansAccountLatePaymentsRecalculationMethod(%d)", lalprm)
}

// Value satisfies the driver.Valuer interface.
func (lalprm LoansAccountLatePaymentsRecalculationMethod) Value() (driver.Value, error) {
	return lalprm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (lalprm *LoansAccountLatePaymentsRecalculationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return lalprm.UnmarshalText(buf)
	}
	return ErrInvalidLoansAccountLatePaymentsRecalculationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidLoansAccountLatePaymentsRecalculationMethod is the invalid LoansAccountLatePaymentsRecalculationMethod error.
type ErrInvalidLoansAccountLatePaymentsRecalculationMethod string

// Error satisfies the error interface.
func (err ErrInvalidLoansAccountLatePaymentsRecalculationMethod) Error() string {
	return fmt.Sprintf("invalid LoansAccountLatePaymentsRecalculationMethod(%s)", string(err))
}

// LoansAccountPaymentMethod is the 'loans_account_payment_method' enum.
type LoansAccountPaymentMethod int32

// LoansAccountPaymentMethod values.
const (
	// LoansAccountPaymentMethodMethodhorizontal is the 'MethodHorizontal' loans_account_payment_method.
	LoansAccountPaymentMethodMethodhorizontal LoansAccountPaymentMethod = 1
	// LoansAccountPaymentMethodMethodvertical is the 'MethodVertical' loans_account_payment_method.
	LoansAccountPaymentMethodMethodvertical LoansAccountPaymentMethod = 2
)

func NewLoansAccountPaymentMethod(lapm loans.AccountPaymentMethod) LoansAccountPaymentMethod {
	return LoansAccountPaymentMethod(lapm + 1)
}

func (lapm LoansAccountPaymentMethod) PB() loans.AccountPaymentMethod {
	return loans.AccountPaymentMethod(lapm - 1)
}

// UnmarshalText unmarshals LoansAccountPaymentMethod from text.
func (lapm *LoansAccountPaymentMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodHorizontal":
		*lapm = LoansAccountPaymentMethodMethodhorizontal
	case "MethodVertical":
		*lapm = LoansAccountPaymentMethodMethodvertical
	default:
		return ErrInvalidLoansAccountPaymentMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (lapm LoansAccountPaymentMethod) String() string {
	switch lapm {
	case LoansAccountPaymentMethodMethodhorizontal:
		return "MethodHorizontal"
	case LoansAccountPaymentMethodMethodvertical:
		return "MethodVertical"
	}
	return fmt.Sprintf("LoansAccountPaymentMethod(%d)", lapm)
}

// Value satisfies the driver.Valuer interface.
func (lapm LoansAccountPaymentMethod) Value() (driver.Value, error) {
	return lapm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (lapm *LoansAccountPaymentMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return lapm.UnmarshalText(buf)
	}
	return ErrInvalidLoansAccountPaymentMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidLoansAccountPaymentMethod is the invalid LoansAccountPaymentMethod error.
type ErrInvalidLoansAccountPaymentMethod string

// Error satisfies the error interface.
func (err ErrInvalidLoansAccountPaymentMethod) Error() string {
	return fmt.Sprintf("invalid LoansAccountPaymentMethod(%s)", string(err))
}

// LoansAccountState is the 'loans_account_state' enum.
type LoansAccountState int32

// LoansAccountState values.
const (
	// LoansAccountStateStatepartialapplication is the 'StatePartialApplication' loans_account_state.
	LoansAccountStateStatepartialapplication LoansAccountState = 1
	// LoansAccountStateStatependingapproval is the 'StatePendingApproval' loans_account_state.
	LoansAccountStateStatependingapproval LoansAccountState = 2
	// LoansAccountStateStateapproved is the 'StateApproved' loans_account_state.
	LoansAccountStateStateapproved LoansAccountState = 3
	// LoansAccountStateStateactive is the 'StateActive' loans_account_state.
	LoansAccountStateStateactive LoansAccountState = 4
	// LoansAccountStateStateactiveinarrears is the 'StateActiveInArrears' loans_account_state.
	LoansAccountStateStateactiveinarrears LoansAccountState = 5
	// LoansAccountStateStateclosed is the 'StateClosed' loans_account_state.
	LoansAccountStateStateclosed LoansAccountState = 6
)

func NewLoansAccountState(las loans.AccountState) LoansAccountState {
	return LoansAccountState(las + 1)
}

func (las LoansAccountState) PB() loans.AccountState {
	return loans.AccountState(las - 1)
}

// UnmarshalText unmarshals LoansAccountState from text.
func (las *LoansAccountState) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "StatePartialApplication":
		*las = LoansAccountStateStatepartialapplication
	case "StatePendingApproval":
		*las = LoansAccountStateStatependingapproval
	case "StateApproved":
		*las = LoansAccountStateStateapproved
	case "StateActive":
		*las = LoansAccountStateStateactive
	case "StateActiveInArrears":
		*las = LoansAccountStateStateactiveinarrears
	case "StateClosed":
		*las = LoansAccountStateStateclosed
	default:
		return ErrInvalidLoansAccountState(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (las LoansAccountState) String() string {
	switch las {
	case LoansAccountStateStatepartialapplication:
		return "StatePartialApplication"
	case LoansAccountStateStatependingapproval:
		return "StatePendingApproval"
	case LoansAccountStateStateapproved:
		return "StateApproved"
	case LoansAccountStateStateactive:
		return "StateActive"
	case LoansAccountStateStateactiveinarrears:
		return "StateActiveInArrears"
	case LoansAccountStateStateclosed:
		return "StateClosed"
	}
	return fmt.Sprintf("LoansAccountState(%d)", las)
}

// Value satisfies the driver.Valuer interface.
func (las LoansAccountState) Value() (driver.Value, error) {
	return las.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (las *LoansAccountState) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return las.UnmarshalText(buf)
	}
	return ErrInvalidLoansAccountState(fmt.Sprintf("%T", v))
}

// ErrInvalidLoansAccountState is the invalid LoansAccountState error.
type ErrInvalidLoansAccountState string

// Error satisfies the error interface.
func (err ErrInvalidLoansAccountState) Error() string {
	return fmt.Sprintf("invalid LoansAccountState(%s)", string(err))
}

// LoansAccountSubState is the 'loans_account_sub_state' enum.
type LoansAccountSubState int32

// LoansAccountSubState values.
const (
	// LoansAccountSubStateStatepartiallydisbursed is the 'StatePartiallyDisbursed' loans_account_sub_state.
	LoansAccountSubStateStatepartiallydisbursed LoansAccountSubState = 1
	// LoansAccountSubStateStatelocked is the 'StateLocked' loans_account_sub_state.
	LoansAccountSubStateStatelocked LoansAccountSubState = 2
	// LoansAccountSubStateStatelockedcapping is the 'StateLockedCapping' loans_account_sub_state.
	LoansAccountSubStateStatelockedcapping LoansAccountSubState = 3
	// LoansAccountSubStateStaterefinanced is the 'StateRefinanced' loans_account_sub_state.
	LoansAccountSubStateStaterefinanced LoansAccountSubState = 4
	// LoansAccountSubStateStaterescheduled is the 'StateRescheduled' loans_account_sub_state.
	LoansAccountSubStateStaterescheduled LoansAccountSubState = 5
	// LoansAccountSubStateStatewithdrawn is the 'StateWithdrawn' loans_account_sub_state.
	LoansAccountSubStateStatewithdrawn LoansAccountSubState = 6
	// LoansAccountSubStateStaterepaid is the 'StateRepaid' loans_account_sub_state.
	LoansAccountSubStateStaterepaid LoansAccountSubState = 7
	// LoansAccountSubStateStaterejected is the 'StateRejected' loans_account_sub_state.
	LoansAccountSubStateStaterejected LoansAccountSubState = 8
	// LoansAccountSubStateStatewrittenoff is the 'StateWrittenOff' loans_account_sub_state.
	LoansAccountSubStateStatewrittenoff LoansAccountSubState = 9
	// LoansAccountSubStateStateterminated is the 'StateTerminated' loans_account_sub_state.
	LoansAccountSubStateStateterminated LoansAccountSubState = 10
)

func NewLoansAccountSubState(lass loans.AccountSubState) LoansAccountSubState {
	return LoansAccountSubState(lass + 1)
}

func (lass LoansAccountSubState) PB() loans.AccountSubState {
	return loans.AccountSubState(lass - 1)
}

// UnmarshalText unmarshals LoansAccountSubState from text.
func (lass *LoansAccountSubState) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "StatePartiallyDisbursed":
		*lass = LoansAccountSubStateStatepartiallydisbursed
	case "StateLocked":
		*lass = LoansAccountSubStateStatelocked
	case "StateLockedCapping":
		*lass = LoansAccountSubStateStatelockedcapping
	case "StateRefinanced":
		*lass = LoansAccountSubStateStaterefinanced
	case "StateRescheduled":
		*lass = LoansAccountSubStateStaterescheduled
	case "StateWithdrawn":
		*lass = LoansAccountSubStateStatewithdrawn
	case "StateRepaid":
		*lass = LoansAccountSubStateStaterepaid
	case "StateRejected":
		*lass = LoansAccountSubStateStaterejected
	case "StateWrittenOff":
		*lass = LoansAccountSubStateStatewrittenoff
	case "StateTerminated":
		*lass = LoansAccountSubStateStateterminated
	default:
		return ErrInvalidLoansAccountSubState(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (lass LoansAccountSubState) String() string {
	switch lass {
	case LoansAccountSubStateStatepartiallydisbursed:
		return "StatePartiallyDisbursed"
	case LoansAccountSubStateStatelocked:
		return "StateLocked"
	case LoansAccountSubStateStatelockedcapping:
		return "StateLockedCapping"
	case LoansAccountSubStateStaterefinanced:
		return "StateRefinanced"
	case LoansAccountSubStateStaterescheduled:
		return "StateRescheduled"
	case LoansAccountSubStateStatewithdrawn:
		return "StateWithdrawn"
	case LoansAccountSubStateStaterepaid:
		return "StateRepaid"
	case LoansAccountSubStateStaterejected:
		return "StateRejected"
	case LoansAccountSubStateStatewrittenoff:
		return "StateWrittenOff"
	case LoansAccountSubStateStateterminated:
		return "StateTerminated"
	}
	return fmt.Sprintf("LoansAccountSubState(%d)", lass)
}

// Value satisfies the driver.Valuer interface.
func (lass LoansAccountSubState) Value() (driver.Value, error) {
	return lass.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (lass *LoansAccountSubState) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return lass.UnmarshalText(buf)
	}
	return ErrInvalidLoansAccountSubState(fmt.Sprintf("%T", v))
}

// ErrInvalidLoansAccountSubState is the invalid LoansAccountSubState error.
type ErrInvalidLoansAccountSubState string

// Error satisfies the error interface.
func (err ErrInvalidLoansAccountSubState) Error() string {
	return fmt.Sprintf("invalid LoansAccountSubState(%s)", string(err))
}

// LoansInstallmentState is the 'loans_installment_state' enum.
type LoansInstallmentState int32

// LoansInstallmentState values.
const (
	// LoansInstallmentStateInstallmentpending is the 'InstallmentPending' loans_installment_state.
	LoansInstallmentStateInstallmentpending LoansInstallmentState = 1
	// LoansInstallmentStateInstallmentlate is the 'InstallmentLate' loans_installment_state.
	LoansInstallmentStateInstallmentlate LoansInstallmentState = 2
	// LoansInstallmentStateInstallmentpaid is the 'InstallmentPaid' loans_installment_state.
	LoansInstallmentStateInstallmentpaid LoansInstallmentState = 3
	// LoansInstallmentStateInstallmentpartiallypaid is the 'InstallmentPartiallyPaid' loans_installment_state.
	LoansInstallmentStateInstallmentpartiallypaid LoansInstallmentState = 4
	// LoansInstallmentStateInstallmentgrace is the 'InstallmentGrace' loans_installment_state.
	LoansInstallmentStateInstallmentgrace LoansInstallmentState = 5
)

func NewLoansInstallmentState(lis loans.InstallmentState) LoansInstallmentState {
	return LoansInstallmentState(lis + 1)
}

func (lis LoansInstallmentState) PB() loans.InstallmentState {
	return loans.InstallmentState(lis - 1)
}

// UnmarshalText unmarshals LoansInstallmentState from text.
func (lis *LoansInstallmentState) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "InstallmentPending":
		*lis = LoansInstallmentStateInstallmentpending
	case "InstallmentLate":
		*lis = LoansInstallmentStateInstallmentlate
	case "InstallmentPaid":
		*lis = LoansInstallmentStateInstallmentpaid
	case "InstallmentPartiallyPaid":
		*lis = LoansInstallmentStateInstallmentpartiallypaid
	case "InstallmentGrace":
		*lis = LoansInstallmentStateInstallmentgrace
	default:
		return ErrInvalidLoansInstallmentState(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (lis LoansInstallmentState) String() string {
	switch lis {
	case LoansInstallmentStateInstallmentpending:
		return "InstallmentPending"
	case LoansInstallmentStateInstallmentlate:
		return "InstallmentLate"
	case LoansInstallmentStateInstallmentpaid:
		return "InstallmentPaid"
	case LoansInstallmentStateInstallmentpartiallypaid:
		return "InstallmentPartiallyPaid"
	case LoansInstallmentStateInstallmentgrace:
		return "InstallmentGrace"
	}
	return fmt.Sprintf("LoansInstallmentState(%d)", lis)
}

// Value satisfies the driver.Valuer interface.
func (lis LoansInstallmentState) Value() (driver.Value, error) {
	return lis.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (lis *LoansInstallmentState) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return lis.UnmarshalText(buf)
	}
	return ErrInvalidLoansInstallmentState(fmt.Sprintf("%T", v))
}

// ErrInvalidLoansInstallmentState is the invalid LoansInstallmentState error.
type ErrInvalidLoansInstallmentState string

// Error satisfies the error interface.
func (err ErrInvalidLoansInstallmentState) Error() string {
	return fmt.Sprintf("invalid LoansInstallmentState(%s)", string(err))
}

// LoansLockedOperations is the 'loans_locked_operations' enum.
type LoansLockedOperations int32

// LoansLockedOperations values.
const (
	// LoansLockedOperationsOperationapplyinterest is the 'OperationApplyInterest' loans_locked_operations.
	LoansLockedOperationsOperationapplyinterest LoansLockedOperations = 1
	// LoansLockedOperationsOperationapplyfees is the 'OperationApplyFees' loans_locked_operations.
	LoansLockedOperationsOperationapplyfees LoansLockedOperations = 2
	// LoansLockedOperationsOperationapplypenalties is the 'OperationApplyPenalties' loans_locked_operations.
	LoansLockedOperationsOperationapplypenalties LoansLockedOperations = 3
)

func NewLoansLockedOperations(llo loans.LockedOperations) LoansLockedOperations {
	return LoansLockedOperations(llo + 1)
}

func (llo LoansLockedOperations) PB() loans.LockedOperations {
	return loans.LockedOperations(llo - 1)
}

// UnmarshalText unmarshals LoansLockedOperations from text.
func (llo *LoansLockedOperations) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "OperationApplyInterest":
		*llo = LoansLockedOperationsOperationapplyinterest
	case "OperationApplyFees":
		*llo = LoansLockedOperationsOperationapplyfees
	case "OperationApplyPenalties":
		*llo = LoansLockedOperationsOperationapplypenalties
	default:
		return ErrInvalidLoansLockedOperations(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (llo LoansLockedOperations) String() string {
	switch llo {
	case LoansLockedOperationsOperationapplyinterest:
		return "OperationApplyInterest"
	case LoansLockedOperationsOperationapplyfees:
		return "OperationApplyFees"
	case LoansLockedOperationsOperationapplypenalties:
		return "OperationApplyPenalties"
	}
	return fmt.Sprintf("LoansLockedOperations(%d)", llo)
}

// Value satisfies the driver.Valuer interface.
func (llo LoansLockedOperations) Value() (driver.Value, error) {
	return llo.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (llo *LoansLockedOperations) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return llo.UnmarshalText(buf)
	}
	return ErrInvalidLoansLockedOperations(fmt.Sprintf("%T", v))
}

// ErrInvalidLoansLockedOperations is the invalid LoansLockedOperations error.
type ErrInvalidLoansLockedOperations string

// Error satisfies the error interface.
func (err ErrInvalidLoansLockedOperations) Error() string {
	return fmt.Sprintf("invalid LoansLockedOperations(%s)", string(err))
}

// NotificationsEvent is the 'notifications_event' enum.
type NotificationsEvent int32

// NotificationsEvent values.
const (
	// NotificationsEventEventmanual is the 'EventManual' notifications_event.
	NotificationsEventEventmanual NotificationsEvent = 1
	// NotificationsEventEventclientcreated is the 'EventClientCreated' notifications_event.
	NotificationsEventEventclientcreated NotificationsEvent = 2
	// NotificationsEventEventclientapproved is the 'EventClientApproved' notifications_event.
	NotificationsEventEventclientapproved NotificationsEvent = 3
	// NotificationsEventEventgroupactivity is the 'EventGroupActivity' notifications_event.
	NotificationsEventEventgroupactivity NotificationsEvent = 4
	// NotificationsEventEventgroupcreated is the 'EventGroupCreated' notifications_event.
	NotificationsEventEventgroupcreated NotificationsEvent = 5
	// NotificationsEventEventloancreated is the 'EventLoanCreated' notifications_event.
	NotificationsEventEventloancreated NotificationsEvent = 6
	// NotificationsEventEventinterestratechanged is the 'EventInterestRateChanged' notifications_event.
	NotificationsEventEventinterestratechanged NotificationsEvent = 7
	// NotificationsEventEventclientrejected is the 'EventClientRejected' notifications_event.
	NotificationsEventEventclientrejected NotificationsEvent = 8
	// NotificationsEventEventclientactivity is the 'EventClientActivity' notifications_event.
	NotificationsEventEventclientactivity NotificationsEvent = 9
	// NotificationsEventEventloanrepayment is the 'EventLoanRepayment' notifications_event.
	NotificationsEventEventloanrepayment NotificationsEvent = 10
	// NotificationsEventEventloanrepaymentreversal is the 'EventLoanRepaymentReversal' notifications_event.
	NotificationsEventEventloanrepaymentreversal NotificationsEvent = 11
	// NotificationsEventEventfeeapplied is the 'EventFeeApplied' notifications_event.
	NotificationsEventEventfeeapplied NotificationsEvent = 12
	// NotificationsEventEventfeeadjusted is the 'EventFeeAdjusted' notifications_event.
	NotificationsEventEventfeeadjusted NotificationsEvent = 13
	// NotificationsEventEventfeecharged is the 'EventFeeCharged' notifications_event.
	NotificationsEventEventfeecharged NotificationsEvent = 14
	// NotificationsEventEventloanapproval is the 'EventLoanApproval' notifications_event.
	NotificationsEventEventloanapproval NotificationsEvent = 15
	// NotificationsEventEventloanaccountclosure is the 'EventLoanAccountClosure' notifications_event.
	NotificationsEventEventloanaccountclosure NotificationsEvent = 16
	// NotificationsEventEventloanaccountwriteoff is the 'EventLoanAccountWriteOff' notifications_event.
	NotificationsEventEventloanaccountwriteoff NotificationsEvent = 17
	// NotificationsEventEventloanaccountrejection is the 'EventLoanAccountRejection' notifications_event.
	NotificationsEventEventloanaccountrejection NotificationsEvent = 18
	// NotificationsEventEventloanaccountrescheduled is the 'EventLoanAccountRescheduled' notifications_event.
	NotificationsEventEventloanaccountrescheduled NotificationsEvent = 19
	// NotificationsEventEventloanaccountrefinanced is the 'EventLoanAccountRefinanced' notifications_event.
	NotificationsEventEventloanaccountrefinanced NotificationsEvent = 20
	// NotificationsEventEventrepaymentreminder is the 'EventRepaymentReminder' notifications_event.
	NotificationsEventEventrepaymentreminder NotificationsEvent = 21
	// NotificationsEventEventaccountinarrears is the 'EventAccountInArrears' notifications_event.
	NotificationsEventEventaccountinarrears NotificationsEvent = 22
	// NotificationsEventEventloandisbursement is the 'EventLoanDisbursement' notifications_event.
	NotificationsEventEventloandisbursement NotificationsEvent = 23
	// NotificationsEventEventloandisbursementreversal is the 'EventLoanDisbursementReversal' notifications_event.
	NotificationsEventEventloandisbursementreversal NotificationsEvent = 24
	// NotificationsEventEventloanaccountactivity is the 'EventLoanAccountActivity' notifications_event.
	NotificationsEventEventloanaccountactivity NotificationsEvent = 25
	// NotificationsEventEventloananticipateddisbursement is the 'EventLoanAnticipatedDisbursement' notifications_event.
	NotificationsEventEventloananticipateddisbursement NotificationsEvent = 26
	// NotificationsEventEventsavingscreated is the 'EventSavingsCreated' notifications_event.
	NotificationsEventEventsavingscreated NotificationsEvent = 27
	// NotificationsEventEventsavingsdeposit is the 'EventSavingsDeposit' notifications_event.
	NotificationsEventEventsavingsdeposit NotificationsEvent = 28
	// NotificationsEventEventsavingsdepositreversal is the 'EventSavingsDepositReversal' notifications_event.
	NotificationsEventEventsavingsdepositreversal NotificationsEvent = 29
	// NotificationsEventEventsavingsapproval is the 'EventSavingsApproval' notifications_event.
	NotificationsEventEventsavingsapproval NotificationsEvent = 30
	// NotificationsEventEventsavingsaccountactivated is the 'EventSavingsAccountActivated' notifications_event.
	NotificationsEventEventsavingsaccountactivated NotificationsEvent = 31
	// NotificationsEventEventsavingsaccountclosure is the 'EventSavingsAccountClosure' notifications_event.
	NotificationsEventEventsavingsaccountclosure NotificationsEvent = 32
	// NotificationsEventEventsavingsaccountrejection is the 'EventSavingsAccountRejection' notifications_event.
	NotificationsEventEventsavingsaccountrejection NotificationsEvent = 33
	// NotificationsEventEventsavingswithdrawal is the 'EventSavingsWithdrawal' notifications_event.
	NotificationsEventEventsavingswithdrawal NotificationsEvent = 34
	// NotificationsEventEventsavingswithdrawalreversal is the 'EventSavingsWithdrawalReversal' notifications_event.
	NotificationsEventEventsavingswithdrawalreversal NotificationsEvent = 35
	// NotificationsEventEventsavingsaccountactivity is the 'EventSavingsAccountActivity' notifications_event.
	NotificationsEventEventsavingsaccountactivity NotificationsEvent = 36
	// NotificationsEventEventaccountauthorizationholdcreated is the 'EventAccountAuthorizationHoldCreated' notifications_event.
	NotificationsEventEventaccountauthorizationholdcreated NotificationsEvent = 37
	// NotificationsEventEventcardsauthorizationholdcreated is the 'EventCardsAuthorizationHoldCreated' notifications_event.
	NotificationsEventEventcardsauthorizationholdcreated NotificationsEvent = 38
	// NotificationsEventEventcardsauthorizationholdsettled is the 'EventCardsAuthorizationHoldSettled' notifications_event.
	NotificationsEventEventcardsauthorizationholdsettled NotificationsEvent = 39
	// NotificationsEventEventcardsauthorizationholdamountdecreased is the 'EventCardsAuthorizationHoldAmountDecreased' notifications_event.
	NotificationsEventEventcardsauthorizationholdamountdecreased NotificationsEvent = 40
	// NotificationsEventEventcardsauthorizationholdamountincreased is the 'EventCardsAuthorizationHoldAmountIncreased' notifications_event.
	NotificationsEventEventcardsauthorizationholdamountincreased NotificationsEvent = 41
	// NotificationsEventEventcardsauthorizationholdexpired is the 'EventCardsAuthorizationHoldExpired' notifications_event.
	NotificationsEventEventcardsauthorizationholdexpired NotificationsEvent = 42
	// NotificationsEventEventcardsauthorizationholdreversed is the 'EventCardsAuthorizationHoldReversed' notifications_event.
	NotificationsEventEventcardsauthorizationholdreversed NotificationsEvent = 43
	// NotificationsEventEventportalactivated is the 'EventPortalActivated' notifications_event.
	NotificationsEventEventportalactivated NotificationsEvent = 44
	// NotificationsEventEventportalpasswordreset is the 'EventPortalPasswordReset' notifications_event.
	NotificationsEventEventportalpasswordreset NotificationsEvent = 45
	// NotificationsEventEventendofdayprocessingcompleted is the 'EventEndOfDayProcessingCompleted' notifications_event.
	NotificationsEventEventendofdayprocessingcompleted NotificationsEvent = 46
	// NotificationsEventEventdataaccessstatechanged is the 'EventDataAccessStateChanged' notifications_event.
	NotificationsEventEventdataaccessstatechanged NotificationsEvent = 47
	// NotificationsEventEventrevolvingaccountcreated is the 'EventRevolvingAccountCreated' notifications_event.
	NotificationsEventEventrevolvingaccountcreated NotificationsEvent = 48
	// NotificationsEventEventrevolvingaccountclosed is the 'EventRevolvingAccountClosed' notifications_event.
	NotificationsEventEventrevolvingaccountclosed NotificationsEvent = 49
	// NotificationsEventEventrevolvingaccountapproved is the 'EventRevolvingAccountApproved' notifications_event.
	NotificationsEventEventrevolvingaccountapproved NotificationsEvent = 50
	// NotificationsEventEventrevolvingaccountrejected is the 'EventRevolvingAccountRejected' notifications_event.
	NotificationsEventEventrevolvingaccountrejected NotificationsEvent = 51
	// NotificationsEventEventrevolvingaccountwithdrawn is the 'EventRevolvingAccountWithdrawn' notifications_event.
	NotificationsEventEventrevolvingaccountwithdrawn NotificationsEvent = 52
	// NotificationsEventEventrevolvingaccountdeleted is the 'EventRevolvingAccountDeleted' notifications_event.
	NotificationsEventEventrevolvingaccountdeleted NotificationsEvent = 53
	// NotificationsEventEventrevolvingaccountadded is the 'EventRevolvingAccountAdded' notifications_event.
	NotificationsEventEventrevolvingaccountadded NotificationsEvent = 54
	// NotificationsEventEventrevolvingaccountremoved is the 'EventRevolvingAccountRemoved' notifications_event.
	NotificationsEventEventrevolvingaccountremoved NotificationsEvent = 55
	// NotificationsEventEventrevolvingaccountedited is the 'EventRevolvingAccountEdited' notifications_event.
	NotificationsEventEventrevolvingaccountedited NotificationsEvent = 56
	// NotificationsEventEventpaymentorderactivity is the 'EventPaymentOrderActivity' notifications_event.
	NotificationsEventEventpaymentorderactivity NotificationsEvent = 57
	// NotificationsEventEventcollectionorderactivity is the 'EventCollectionOrderActivity' notifications_event.
	NotificationsEventEventcollectionorderactivity NotificationsEvent = 58
	// NotificationsEventEventjournalentryadded is the 'EventJournalEntryAdded' notifications_event.
	NotificationsEventEventjournalentryadded NotificationsEvent = 59
	// NotificationsEventEventjournalentryadjusted is the 'EventJournalEntryAdjusted' notifications_event.
	NotificationsEventEventjournalentryadjusted NotificationsEvent = 60
)

func NewNotificationsEvent(ne notifications.Event) NotificationsEvent {
	return NotificationsEvent(ne + 1)
}

func (ne NotificationsEvent) PB() notifications.Event {
	return notifications.Event(ne - 1)
}

// UnmarshalText unmarshals NotificationsEvent from text.
func (ne *NotificationsEvent) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "EventManual":
		*ne = NotificationsEventEventmanual
	case "EventClientCreated":
		*ne = NotificationsEventEventclientcreated
	case "EventClientApproved":
		*ne = NotificationsEventEventclientapproved
	case "EventGroupActivity":
		*ne = NotificationsEventEventgroupactivity
	case "EventGroupCreated":
		*ne = NotificationsEventEventgroupcreated
	case "EventLoanCreated":
		*ne = NotificationsEventEventloancreated
	case "EventInterestRateChanged":
		*ne = NotificationsEventEventinterestratechanged
	case "EventClientRejected":
		*ne = NotificationsEventEventclientrejected
	case "EventClientActivity":
		*ne = NotificationsEventEventclientactivity
	case "EventLoanRepayment":
		*ne = NotificationsEventEventloanrepayment
	case "EventLoanRepaymentReversal":
		*ne = NotificationsEventEventloanrepaymentreversal
	case "EventFeeApplied":
		*ne = NotificationsEventEventfeeapplied
	case "EventFeeAdjusted":
		*ne = NotificationsEventEventfeeadjusted
	case "EventFeeCharged":
		*ne = NotificationsEventEventfeecharged
	case "EventLoanApproval":
		*ne = NotificationsEventEventloanapproval
	case "EventLoanAccountClosure":
		*ne = NotificationsEventEventloanaccountclosure
	case "EventLoanAccountWriteOff":
		*ne = NotificationsEventEventloanaccountwriteoff
	case "EventLoanAccountRejection":
		*ne = NotificationsEventEventloanaccountrejection
	case "EventLoanAccountRescheduled":
		*ne = NotificationsEventEventloanaccountrescheduled
	case "EventLoanAccountRefinanced":
		*ne = NotificationsEventEventloanaccountrefinanced
	case "EventRepaymentReminder":
		*ne = NotificationsEventEventrepaymentreminder
	case "EventAccountInArrears":
		*ne = NotificationsEventEventaccountinarrears
	case "EventLoanDisbursement":
		*ne = NotificationsEventEventloandisbursement
	case "EventLoanDisbursementReversal":
		*ne = NotificationsEventEventloandisbursementreversal
	case "EventLoanAccountActivity":
		*ne = NotificationsEventEventloanaccountactivity
	case "EventLoanAnticipatedDisbursement":
		*ne = NotificationsEventEventloananticipateddisbursement
	case "EventSavingsCreated":
		*ne = NotificationsEventEventsavingscreated
	case "EventSavingsDeposit":
		*ne = NotificationsEventEventsavingsdeposit
	case "EventSavingsDepositReversal":
		*ne = NotificationsEventEventsavingsdepositreversal
	case "EventSavingsApproval":
		*ne = NotificationsEventEventsavingsapproval
	case "EventSavingsAccountActivated":
		*ne = NotificationsEventEventsavingsaccountactivated
	case "EventSavingsAccountClosure":
		*ne = NotificationsEventEventsavingsaccountclosure
	case "EventSavingsAccountRejection":
		*ne = NotificationsEventEventsavingsaccountrejection
	case "EventSavingsWithdrawal":
		*ne = NotificationsEventEventsavingswithdrawal
	case "EventSavingsWithdrawalReversal":
		*ne = NotificationsEventEventsavingswithdrawalreversal
	case "EventSavingsAccountActivity":
		*ne = NotificationsEventEventsavingsaccountactivity
	case "EventAccountAuthorizationHoldCreated":
		*ne = NotificationsEventEventaccountauthorizationholdcreated
	case "EventCardsAuthorizationHoldCreated":
		*ne = NotificationsEventEventcardsauthorizationholdcreated
	case "EventCardsAuthorizationHoldSettled":
		*ne = NotificationsEventEventcardsauthorizationholdsettled
	case "EventCardsAuthorizationHoldAmountDecreased":
		*ne = NotificationsEventEventcardsauthorizationholdamountdecreased
	case "EventCardsAuthorizationHoldAmountIncreased":
		*ne = NotificationsEventEventcardsauthorizationholdamountincreased
	case "EventCardsAuthorizationHoldExpired":
		*ne = NotificationsEventEventcardsauthorizationholdexpired
	case "EventCardsAuthorizationHoldReversed":
		*ne = NotificationsEventEventcardsauthorizationholdreversed
	case "EventPortalActivated":
		*ne = NotificationsEventEventportalactivated
	case "EventPortalPasswordReset":
		*ne = NotificationsEventEventportalpasswordreset
	case "EventEndOfDayProcessingCompleted":
		*ne = NotificationsEventEventendofdayprocessingcompleted
	case "EventDataAccessStateChanged":
		*ne = NotificationsEventEventdataaccessstatechanged
	case "EventRevolvingAccountCreated":
		*ne = NotificationsEventEventrevolvingaccountcreated
	case "EventRevolvingAccountClosed":
		*ne = NotificationsEventEventrevolvingaccountclosed
	case "EventRevolvingAccountApproved":
		*ne = NotificationsEventEventrevolvingaccountapproved
	case "EventRevolvingAccountRejected":
		*ne = NotificationsEventEventrevolvingaccountrejected
	case "EventRevolvingAccountWithdrawn":
		*ne = NotificationsEventEventrevolvingaccountwithdrawn
	case "EventRevolvingAccountDeleted":
		*ne = NotificationsEventEventrevolvingaccountdeleted
	case "EventRevolvingAccountAdded":
		*ne = NotificationsEventEventrevolvingaccountadded
	case "EventRevolvingAccountRemoved":
		*ne = NotificationsEventEventrevolvingaccountremoved
	case "EventRevolvingAccountEdited":
		*ne = NotificationsEventEventrevolvingaccountedited
	case "EventPaymentOrderActivity":
		*ne = NotificationsEventEventpaymentorderactivity
	case "EventCollectionOrderActivity":
		*ne = NotificationsEventEventcollectionorderactivity
	case "EventJournalEntryAdded":
		*ne = NotificationsEventEventjournalentryadded
	case "EventJournalEntryAdjusted":
		*ne = NotificationsEventEventjournalentryadjusted
	default:
		return ErrInvalidNotificationsEvent(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (ne NotificationsEvent) String() string {
	switch ne {
	case NotificationsEventEventmanual:
		return "EventManual"
	case NotificationsEventEventclientcreated:
		return "EventClientCreated"
	case NotificationsEventEventclientapproved:
		return "EventClientApproved"
	case NotificationsEventEventgroupactivity:
		return "EventGroupActivity"
	case NotificationsEventEventgroupcreated:
		return "EventGroupCreated"
	case NotificationsEventEventloancreated:
		return "EventLoanCreated"
	case NotificationsEventEventinterestratechanged:
		return "EventInterestRateChanged"
	case NotificationsEventEventclientrejected:
		return "EventClientRejected"
	case NotificationsEventEventclientactivity:
		return "EventClientActivity"
	case NotificationsEventEventloanrepayment:
		return "EventLoanRepayment"
	case NotificationsEventEventloanrepaymentreversal:
		return "EventLoanRepaymentReversal"
	case NotificationsEventEventfeeapplied:
		return "EventFeeApplied"
	case NotificationsEventEventfeeadjusted:
		return "EventFeeAdjusted"
	case NotificationsEventEventfeecharged:
		return "EventFeeCharged"
	case NotificationsEventEventloanapproval:
		return "EventLoanApproval"
	case NotificationsEventEventloanaccountclosure:
		return "EventLoanAccountClosure"
	case NotificationsEventEventloanaccountwriteoff:
		return "EventLoanAccountWriteOff"
	case NotificationsEventEventloanaccountrejection:
		return "EventLoanAccountRejection"
	case NotificationsEventEventloanaccountrescheduled:
		return "EventLoanAccountRescheduled"
	case NotificationsEventEventloanaccountrefinanced:
		return "EventLoanAccountRefinanced"
	case NotificationsEventEventrepaymentreminder:
		return "EventRepaymentReminder"
	case NotificationsEventEventaccountinarrears:
		return "EventAccountInArrears"
	case NotificationsEventEventloandisbursement:
		return "EventLoanDisbursement"
	case NotificationsEventEventloandisbursementreversal:
		return "EventLoanDisbursementReversal"
	case NotificationsEventEventloanaccountactivity:
		return "EventLoanAccountActivity"
	case NotificationsEventEventloananticipateddisbursement:
		return "EventLoanAnticipatedDisbursement"
	case NotificationsEventEventsavingscreated:
		return "EventSavingsCreated"
	case NotificationsEventEventsavingsdeposit:
		return "EventSavingsDeposit"
	case NotificationsEventEventsavingsdepositreversal:
		return "EventSavingsDepositReversal"
	case NotificationsEventEventsavingsapproval:
		return "EventSavingsApproval"
	case NotificationsEventEventsavingsaccountactivated:
		return "EventSavingsAccountActivated"
	case NotificationsEventEventsavingsaccountclosure:
		return "EventSavingsAccountClosure"
	case NotificationsEventEventsavingsaccountrejection:
		return "EventSavingsAccountRejection"
	case NotificationsEventEventsavingswithdrawal:
		return "EventSavingsWithdrawal"
	case NotificationsEventEventsavingswithdrawalreversal:
		return "EventSavingsWithdrawalReversal"
	case NotificationsEventEventsavingsaccountactivity:
		return "EventSavingsAccountActivity"
	case NotificationsEventEventaccountauthorizationholdcreated:
		return "EventAccountAuthorizationHoldCreated"
	case NotificationsEventEventcardsauthorizationholdcreated:
		return "EventCardsAuthorizationHoldCreated"
	case NotificationsEventEventcardsauthorizationholdsettled:
		return "EventCardsAuthorizationHoldSettled"
	case NotificationsEventEventcardsauthorizationholdamountdecreased:
		return "EventCardsAuthorizationHoldAmountDecreased"
	case NotificationsEventEventcardsauthorizationholdamountincreased:
		return "EventCardsAuthorizationHoldAmountIncreased"
	case NotificationsEventEventcardsauthorizationholdexpired:
		return "EventCardsAuthorizationHoldExpired"
	case NotificationsEventEventcardsauthorizationholdreversed:
		return "EventCardsAuthorizationHoldReversed"
	case NotificationsEventEventportalactivated:
		return "EventPortalActivated"
	case NotificationsEventEventportalpasswordreset:
		return "EventPortalPasswordReset"
	case NotificationsEventEventendofdayprocessingcompleted:
		return "EventEndOfDayProcessingCompleted"
	case NotificationsEventEventdataaccessstatechanged:
		return "EventDataAccessStateChanged"
	case NotificationsEventEventrevolvingaccountcreated:
		return "EventRevolvingAccountCreated"
	case NotificationsEventEventrevolvingaccountclosed:
		return "EventRevolvingAccountClosed"
	case NotificationsEventEventrevolvingaccountapproved:
		return "EventRevolvingAccountApproved"
	case NotificationsEventEventrevolvingaccountrejected:
		return "EventRevolvingAccountRejected"
	case NotificationsEventEventrevolvingaccountwithdrawn:
		return "EventRevolvingAccountWithdrawn"
	case NotificationsEventEventrevolvingaccountdeleted:
		return "EventRevolvingAccountDeleted"
	case NotificationsEventEventrevolvingaccountadded:
		return "EventRevolvingAccountAdded"
	case NotificationsEventEventrevolvingaccountremoved:
		return "EventRevolvingAccountRemoved"
	case NotificationsEventEventrevolvingaccountedited:
		return "EventRevolvingAccountEdited"
	case NotificationsEventEventpaymentorderactivity:
		return "EventPaymentOrderActivity"
	case NotificationsEventEventcollectionorderactivity:
		return "EventCollectionOrderActivity"
	case NotificationsEventEventjournalentryadded:
		return "EventJournalEntryAdded"
	case NotificationsEventEventjournalentryadjusted:
		return "EventJournalEntryAdjusted"
	}
	return fmt.Sprintf("NotificationsEvent(%d)", ne)
}

// Value satisfies the driver.Valuer interface.
func (ne NotificationsEvent) Value() (driver.Value, error) {
	return ne.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ne *NotificationsEvent) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ne.UnmarshalText(buf)
	}
	return ErrInvalidNotificationsEvent(fmt.Sprintf("%T", v))
}

// ErrInvalidNotificationsEvent is the invalid NotificationsEvent error.
type ErrInvalidNotificationsEvent string

// Error satisfies the error interface.
func (err ErrInvalidNotificationsEvent) Error() string {
	return fmt.Sprintf("invalid NotificationsEvent(%s)", string(err))
}

// NotificationsFailureReason is the 'notifications_failure_reason' enum.
type NotificationsFailureReason int32

// NotificationsFailureReason values.
const (
	// NotificationsFailureReasonReasonunsupportedencoding is the 'ReasonUnsupportedEncoding' notifications_failure_reason.
	NotificationsFailureReasonReasonunsupportedencoding NotificationsFailureReason = 1
	// NotificationsFailureReasonReasonemailservicenotenabled is the 'ReasonEmailServiceNotEnabled' notifications_failure_reason.
	NotificationsFailureReasonReasonemailservicenotenabled NotificationsFailureReason = 2
	// NotificationsFailureReasonReasonsmstoolong is the 'ReasonSMSTooLong' notifications_failure_reason.
	NotificationsFailureReasonReasonsmstoolong NotificationsFailureReason = 3
	// NotificationsFailureReasonReasonsmsservicenotenabled is the 'ReasonSMSServiceNotEnabled' notifications_failure_reason.
	NotificationsFailureReasonReasonsmsservicenotenabled NotificationsFailureReason = 4
	// NotificationsFailureReasonReasonsmsnotsent is the 'ReasonSMSNotSent' notifications_failure_reason.
	NotificationsFailureReasonReasonsmsnotsent NotificationsFailureReason = 5
	// NotificationsFailureReasonReasonsmsserviceerror is the 'ReasonSMSServiceError' notifications_failure_reason.
	NotificationsFailureReasonReasonsmsserviceerror NotificationsFailureReason = 6
	// NotificationsFailureReasonReasonsmsconnectionexception is the 'ReasonSMSConnectionException' notifications_failure_reason.
	NotificationsFailureReasonReasonsmsconnectionexception NotificationsFailureReason = 7
	// NotificationsFailureReasonReasonwebhooknotificationsdisabled is the 'ReasonWebhookNotificationsDisabled' notifications_failure_reason.
	NotificationsFailureReasonReasonwebhooknotificationsdisabled NotificationsFailureReason = 8
	// NotificationsFailureReasonReasoninvalidhttpresponse is the 'ReasonInvalidHTTPResponse' notifications_failure_reason.
	NotificationsFailureReasonReasoninvalidhttpresponse NotificationsFailureReason = 9
	// NotificationsFailureReasonReasonhttperrorwhilesending is the 'ReasonHTTPErrorWhileSending' notifications_failure_reason.
	NotificationsFailureReasonReasonhttperrorwhilesending NotificationsFailureReason = 10
	// NotificationsFailureReasonReasoninvalidjsonbodysyntax is the 'ReasonInvalidJSONBodySyntax' notifications_failure_reason.
	NotificationsFailureReasonReasoninvalidjsonbodysyntax NotificationsFailureReason = 11
	// NotificationsFailureReasonReasonmissingtemplateid is the 'ReasonMissingTemplateID' notifications_failure_reason.
	NotificationsFailureReasonReasonmissingtemplateid NotificationsFailureReason = 12
	// NotificationsFailureReasonReasonundefineddestination is the 'ReasonUndefinedDestination' notifications_failure_reason.
	NotificationsFailureReasonReasonundefineddestination NotificationsFailureReason = 13
	// NotificationsFailureReasonReasonblacklistedurl is the 'ReasonBlacklistedURL' notifications_failure_reason.
	NotificationsFailureReasonReasonblacklistedurl NotificationsFailureReason = 14
	// NotificationsFailureReasonReasoninvalidsmsgatewaycredentials is the 'ReasonInvalidSMSGatewayCredentials' notifications_failure_reason.
	NotificationsFailureReasonReasoninvalidsmsgatewaycredentials NotificationsFailureReason = 15
	// NotificationsFailureReasonReasonmissingsmsrecipient is the 'ReasonMissingSMSRecipient' notifications_failure_reason.
	NotificationsFailureReasonReasonmissingsmsrecipient NotificationsFailureReason = 16
	// NotificationsFailureReasonReasonsmsgatewayerror is the 'ReasonSMSGatewayError' notifications_failure_reason.
	NotificationsFailureReasonReasonsmsgatewayerror NotificationsFailureReason = 17
	// NotificationsFailureReasonReasonmissingemailrecipientaddress is the 'ReasonMissingEmailRecipientAddress' notifications_failure_reason.
	NotificationsFailureReasonReasonmissingemailrecipientaddress NotificationsFailureReason = 18
	// NotificationsFailureReasonReasonother is the 'ReasonOther' notifications_failure_reason.
	NotificationsFailureReasonReasonother NotificationsFailureReason = 19
)

func NewNotificationsFailureReason(nfr notifications.FailureReason) NotificationsFailureReason {
	return NotificationsFailureReason(nfr + 1)
}

func (nfr NotificationsFailureReason) PB() notifications.FailureReason {
	return notifications.FailureReason(nfr - 1)
}

// UnmarshalText unmarshals NotificationsFailureReason from text.
func (nfr *NotificationsFailureReason) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "ReasonUnsupportedEncoding":
		*nfr = NotificationsFailureReasonReasonunsupportedencoding
	case "ReasonEmailServiceNotEnabled":
		*nfr = NotificationsFailureReasonReasonemailservicenotenabled
	case "ReasonSMSTooLong":
		*nfr = NotificationsFailureReasonReasonsmstoolong
	case "ReasonSMSServiceNotEnabled":
		*nfr = NotificationsFailureReasonReasonsmsservicenotenabled
	case "ReasonSMSNotSent":
		*nfr = NotificationsFailureReasonReasonsmsnotsent
	case "ReasonSMSServiceError":
		*nfr = NotificationsFailureReasonReasonsmsserviceerror
	case "ReasonSMSConnectionException":
		*nfr = NotificationsFailureReasonReasonsmsconnectionexception
	case "ReasonWebhookNotificationsDisabled":
		*nfr = NotificationsFailureReasonReasonwebhooknotificationsdisabled
	case "ReasonInvalidHTTPResponse":
		*nfr = NotificationsFailureReasonReasoninvalidhttpresponse
	case "ReasonHTTPErrorWhileSending":
		*nfr = NotificationsFailureReasonReasonhttperrorwhilesending
	case "ReasonInvalidJSONBodySyntax":
		*nfr = NotificationsFailureReasonReasoninvalidjsonbodysyntax
	case "ReasonMissingTemplateID":
		*nfr = NotificationsFailureReasonReasonmissingtemplateid
	case "ReasonUndefinedDestination":
		*nfr = NotificationsFailureReasonReasonundefineddestination
	case "ReasonBlacklistedURL":
		*nfr = NotificationsFailureReasonReasonblacklistedurl
	case "ReasonInvalidSMSGatewayCredentials":
		*nfr = NotificationsFailureReasonReasoninvalidsmsgatewaycredentials
	case "ReasonMissingSMSRecipient":
		*nfr = NotificationsFailureReasonReasonmissingsmsrecipient
	case "ReasonSMSGatewayError":
		*nfr = NotificationsFailureReasonReasonsmsgatewayerror
	case "ReasonMissingEmailRecipientAddress":
		*nfr = NotificationsFailureReasonReasonmissingemailrecipientaddress
	case "ReasonOther":
		*nfr = NotificationsFailureReasonReasonother
	default:
		return ErrInvalidNotificationsFailureReason(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (nfr NotificationsFailureReason) String() string {
	switch nfr {
	case NotificationsFailureReasonReasonunsupportedencoding:
		return "ReasonUnsupportedEncoding"
	case NotificationsFailureReasonReasonemailservicenotenabled:
		return "ReasonEmailServiceNotEnabled"
	case NotificationsFailureReasonReasonsmstoolong:
		return "ReasonSMSTooLong"
	case NotificationsFailureReasonReasonsmsservicenotenabled:
		return "ReasonSMSServiceNotEnabled"
	case NotificationsFailureReasonReasonsmsnotsent:
		return "ReasonSMSNotSent"
	case NotificationsFailureReasonReasonsmsserviceerror:
		return "ReasonSMSServiceError"
	case NotificationsFailureReasonReasonsmsconnectionexception:
		return "ReasonSMSConnectionException"
	case NotificationsFailureReasonReasonwebhooknotificationsdisabled:
		return "ReasonWebhookNotificationsDisabled"
	case NotificationsFailureReasonReasoninvalidhttpresponse:
		return "ReasonInvalidHTTPResponse"
	case NotificationsFailureReasonReasonhttperrorwhilesending:
		return "ReasonHTTPErrorWhileSending"
	case NotificationsFailureReasonReasoninvalidjsonbodysyntax:
		return "ReasonInvalidJSONBodySyntax"
	case NotificationsFailureReasonReasonmissingtemplateid:
		return "ReasonMissingTemplateID"
	case NotificationsFailureReasonReasonundefineddestination:
		return "ReasonUndefinedDestination"
	case NotificationsFailureReasonReasonblacklistedurl:
		return "ReasonBlacklistedURL"
	case NotificationsFailureReasonReasoninvalidsmsgatewaycredentials:
		return "ReasonInvalidSMSGatewayCredentials"
	case NotificationsFailureReasonReasonmissingsmsrecipient:
		return "ReasonMissingSMSRecipient"
	case NotificationsFailureReasonReasonsmsgatewayerror:
		return "ReasonSMSGatewayError"
	case NotificationsFailureReasonReasonmissingemailrecipientaddress:
		return "ReasonMissingEmailRecipientAddress"
	case NotificationsFailureReasonReasonother:
		return "ReasonOther"
	}
	return fmt.Sprintf("NotificationsFailureReason(%d)", nfr)
}

// Value satisfies the driver.Valuer interface.
func (nfr NotificationsFailureReason) Value() (driver.Value, error) {
	return nfr.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (nfr *NotificationsFailureReason) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return nfr.UnmarshalText(buf)
	}
	return ErrInvalidNotificationsFailureReason(fmt.Sprintf("%T", v))
}

// ErrInvalidNotificationsFailureReason is the invalid NotificationsFailureReason error.
type ErrInvalidNotificationsFailureReason string

// Error satisfies the error interface.
func (err ErrInvalidNotificationsFailureReason) Error() string {
	return fmt.Sprintf("invalid NotificationsFailureReason(%s)", string(err))
}

// NotificationsType is the 'notifications_type' enum.
type NotificationsType int32

// NotificationsType values.
const (
	// NotificationsTypeEmail is the 'Email' notifications_type.
	NotificationsTypeEmail NotificationsType = 1
	// NotificationsTypeSms is the 'SMS' notifications_type.
	NotificationsTypeSms NotificationsType = 2
	// NotificationsTypeWebhook is the 'Webhook' notifications_type.
	NotificationsTypeWebhook NotificationsType = 3
	// NotificationsTypeEventstream is the 'EventStream' notifications_type.
	NotificationsTypeEventstream NotificationsType = 4
	// NotificationsTypeTask is the 'Task' notifications_type.
	NotificationsTypeTask NotificationsType = 5
)

func NewNotificationsType(nt notifications.Type) NotificationsType {
	return NotificationsType(nt + 1)
}

func (nt NotificationsType) PB() notifications.Type {
	return notifications.Type(nt - 1)
}

// UnmarshalText unmarshals NotificationsType from text.
func (nt *NotificationsType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Email":
		*nt = NotificationsTypeEmail
	case "SMS":
		*nt = NotificationsTypeSms
	case "Webhook":
		*nt = NotificationsTypeWebhook
	case "EventStream":
		*nt = NotificationsTypeEventstream
	case "Task":
		*nt = NotificationsTypeTask
	default:
		return ErrInvalidNotificationsType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (nt NotificationsType) String() string {
	switch nt {
	case NotificationsTypeEmail:
		return "Email"
	case NotificationsTypeSms:
		return "SMS"
	case NotificationsTypeWebhook:
		return "Webhook"
	case NotificationsTypeEventstream:
		return "EventStream"
	case NotificationsTypeTask:
		return "Task"
	}
	return fmt.Sprintf("NotificationsType(%d)", nt)
}

// Value satisfies the driver.Valuer interface.
func (nt NotificationsType) Value() (driver.Value, error) {
	return nt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (nt *NotificationsType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return nt.UnmarshalText(buf)
	}
	return ErrInvalidNotificationsType(fmt.Sprintf("%T", v))
}

// ErrInvalidNotificationsType is the invalid NotificationsType error.
type ErrInvalidNotificationsType string

// Error satisfies the error interface.
func (err ErrInvalidNotificationsType) Error() string {
	return fmt.Sprintf("invalid NotificationsType(%s)", string(err))
}

// Operator is the 'operator' enum.
type Operator int32

// Operator values.
const (
	// OperatorOpequals is the 'OpEquals' operator.
	OperatorOpequals Operator = 1
	// OperatorOpequalsignorecase is the 'OpEqualsIgnoreCase' operator.
	OperatorOpequalsignorecase Operator = 2
	// OperatorOpnotequals is the 'OpNotEquals' operator.
	OperatorOpnotequals Operator = 3
	// OperatorOpgreaterthan is the 'OpGreaterThan' operator.
	OperatorOpgreaterthan Operator = 4
	// OperatorOplessthan is the 'OpLessThan' operator.
	OperatorOplessthan Operator = 5
	// OperatorOpon is the 'OpOn' operator.
	OperatorOpon Operator = 6
	// OperatorOpafter is the 'OpAfter' operator.
	OperatorOpafter Operator = 7
	// OperatorOpbefore is the 'OpBefore' operator.
	OperatorOpbefore Operator = 8
	// OperatorOphasprefix is the 'OpHasPrefix' operator.
	OperatorOphasprefix Operator = 9
	// OperatorOphasprefixignorecase is the 'OpHasPrefixIgnoreCase' operator.
	OperatorOphasprefixignorecase Operator = 10
	// OperatorOplastdays is the 'OpLastDays' operator.
	OperatorOplastdays Operator = 11
	// OperatorOpbetween is the 'OpBetween' operator.
	OperatorOpbetween Operator = 12
	// OperatorOpin is the 'OpIn' operator.
	OperatorOpin Operator = 13
	// OperatorOptoday is the 'OpToday' operator.
	OperatorOptoday Operator = 14
	// OperatorOpthisweek is the 'OpThisWeek' operator.
	OperatorOpthisweek Operator = 15
	// OperatorOpthismonth is the 'OpThisMonth' operator.
	OperatorOpthismonth Operator = 16
	// OperatorOpthisyear is the 'OpThisYear' operator.
	OperatorOpthisyear Operator = 17
	// OperatorOpempty is the 'OpEmpty' operator.
	OperatorOpempty Operator = 18
	// OperatorOpnotempty is the 'OpNotEmpty' operator.
	OperatorOpnotempty Operator = 19
)

func NewOperator(o core.Operator) Operator {
	return Operator(o + 1)
}

func (o Operator) PB() core.Operator {
	return core.Operator(o - 1)
}

// UnmarshalText unmarshals Operator from text.
func (o *Operator) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "OpEquals":
		*o = OperatorOpequals
	case "OpEqualsIgnoreCase":
		*o = OperatorOpequalsignorecase
	case "OpNotEquals":
		*o = OperatorOpnotequals
	case "OpGreaterThan":
		*o = OperatorOpgreaterthan
	case "OpLessThan":
		*o = OperatorOplessthan
	case "OpOn":
		*o = OperatorOpon
	case "OpAfter":
		*o = OperatorOpafter
	case "OpBefore":
		*o = OperatorOpbefore
	case "OpHasPrefix":
		*o = OperatorOphasprefix
	case "OpHasPrefixIgnoreCase":
		*o = OperatorOphasprefixignorecase
	case "OpLastDays":
		*o = OperatorOplastdays
	case "OpBetween":
		*o = OperatorOpbetween
	case "OpIn":
		*o = OperatorOpin
	case "OpToday":
		*o = OperatorOptoday
	case "OpThisWeek":
		*o = OperatorOpthisweek
	case "OpThisMonth":
		*o = OperatorOpthismonth
	case "OpThisYear":
		*o = OperatorOpthisyear
	case "OpEmpty":
		*o = OperatorOpempty
	case "OpNotEmpty":
		*o = OperatorOpnotempty
	default:
		return ErrInvalidOperator(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (o Operator) String() string {
	switch o {
	case OperatorOpequals:
		return "OpEquals"
	case OperatorOpequalsignorecase:
		return "OpEqualsIgnoreCase"
	case OperatorOpnotequals:
		return "OpNotEquals"
	case OperatorOpgreaterthan:
		return "OpGreaterThan"
	case OperatorOplessthan:
		return "OpLessThan"
	case OperatorOpon:
		return "OpOn"
	case OperatorOpafter:
		return "OpAfter"
	case OperatorOpbefore:
		return "OpBefore"
	case OperatorOphasprefix:
		return "OpHasPrefix"
	case OperatorOphasprefixignorecase:
		return "OpHasPrefixIgnoreCase"
	case OperatorOplastdays:
		return "OpLastDays"
	case OperatorOpbetween:
		return "OpBetween"
	case OperatorOpin:
		return "OpIn"
	case OperatorOptoday:
		return "OpToday"
	case OperatorOpthisweek:
		return "OpThisWeek"
	case OperatorOpthismonth:
		return "OpThisMonth"
	case OperatorOpthisyear:
		return "OpThisYear"
	case OperatorOpempty:
		return "OpEmpty"
	case OperatorOpnotempty:
		return "OpNotEmpty"
	}
	return fmt.Sprintf("Operator(%d)", o)
}

// Value satisfies the driver.Valuer interface.
func (o Operator) Value() (driver.Value, error) {
	return o.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (o *Operator) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return o.UnmarshalText(buf)
	}
	return ErrInvalidOperator(fmt.Sprintf("%T", v))
}

// ErrInvalidOperator is the invalid Operator error.
type ErrInvalidOperator string

// Error satisfies the error interface.
func (err ErrInvalidOperator) Error() string {
	return fmt.Sprintf("invalid Operator(%s)", string(err))
}

// OrgAppComponent is the 'org_app_component' enum.
type OrgAppComponent int32

// OrgAppComponent values.
const (
	// OrgAppComponentComponentloans is the 'ComponentLoans' org_app_component.
	OrgAppComponentComponentloans OrgAppComponent = 1
	// OrgAppComponentComponentdeposits is the 'ComponentDeposits' org_app_component.
	OrgAppComponentComponentdeposits OrgAppComponent = 2
	// OrgAppComponentComponentbranches is the 'ComponentBranches' org_app_component.
	OrgAppComponentComponentbranches OrgAppComponent = 3
	// OrgAppComponentComponentcentres is the 'ComponentCentres' org_app_component.
	OrgAppComponentComponentcentres OrgAppComponent = 4
	// OrgAppComponentComponentclients is the 'ComponentClients' org_app_component.
	OrgAppComponentComponentclients OrgAppComponent = 5
	// OrgAppComponentComponentgroups is the 'ComponentGroups' org_app_component.
	OrgAppComponentComponentgroups OrgAppComponent = 6
	// OrgAppComponentComponentaccounting is the 'ComponentAccounting' org_app_component.
	OrgAppComponentComponentaccounting OrgAppComponent = 7
	// OrgAppComponentComponentcreditofficers is the 'ComponentCreditOfficers' org_app_component.
	OrgAppComponentComponentcreditofficers OrgAppComponent = 8
)

func NewOrgAppComponent(oac org.AppComponent) OrgAppComponent {
	return OrgAppComponent(oac + 1)
}

func (oac OrgAppComponent) PB() org.AppComponent {
	return org.AppComponent(oac - 1)
}

// UnmarshalText unmarshals OrgAppComponent from text.
func (oac *OrgAppComponent) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "ComponentLoans":
		*oac = OrgAppComponentComponentloans
	case "ComponentDeposits":
		*oac = OrgAppComponentComponentdeposits
	case "ComponentBranches":
		*oac = OrgAppComponentComponentbranches
	case "ComponentCentres":
		*oac = OrgAppComponentComponentcentres
	case "ComponentClients":
		*oac = OrgAppComponentComponentclients
	case "ComponentGroups":
		*oac = OrgAppComponentComponentgroups
	case "ComponentAccounting":
		*oac = OrgAppComponentComponentaccounting
	case "ComponentCreditOfficers":
		*oac = OrgAppComponentComponentcreditofficers
	default:
		return ErrInvalidOrgAppComponent(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (oac OrgAppComponent) String() string {
	switch oac {
	case OrgAppComponentComponentloans:
		return "ComponentLoans"
	case OrgAppComponentComponentdeposits:
		return "ComponentDeposits"
	case OrgAppComponentComponentbranches:
		return "ComponentBranches"
	case OrgAppComponentComponentcentres:
		return "ComponentCentres"
	case OrgAppComponentComponentclients:
		return "ComponentClients"
	case OrgAppComponentComponentgroups:
		return "ComponentGroups"
	case OrgAppComponentComponentaccounting:
		return "ComponentAccounting"
	case OrgAppComponentComponentcreditofficers:
		return "ComponentCreditOfficers"
	}
	return fmt.Sprintf("OrgAppComponent(%d)", oac)
}

// Value satisfies the driver.Valuer interface.
func (oac OrgAppComponent) Value() (driver.Value, error) {
	return oac.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (oac *OrgAppComponent) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return oac.UnmarshalText(buf)
	}
	return ErrInvalidOrgAppComponent(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgAppComponent is the invalid OrgAppComponent error.
type ErrInvalidOrgAppComponent string

// Error satisfies the error interface.
func (err ErrInvalidOrgAppComponent) Error() string {
	return fmt.Sprintf("invalid OrgAppComponent(%s)", string(err))
}

// OrgAssignmentConstraint is the 'org_assignment_constraint' enum.
type OrgAssignmentConstraint int32

// OrgAssignmentConstraint values.
const (
	// OrgAssignmentConstraintConstraintbranch is the 'ConstraintBranch' org_assignment_constraint.
	OrgAssignmentConstraintConstraintbranch OrgAssignmentConstraint = 1
	// OrgAssignmentConstraintConstraintcentre is the 'ConstraintCentre' org_assignment_constraint.
	OrgAssignmentConstraintConstraintcentre OrgAssignmentConstraint = 2
	// OrgAssignmentConstraintConstraintcreditofficer is the 'ConstraintCreditOfficer' org_assignment_constraint.
	OrgAssignmentConstraintConstraintcreditofficer OrgAssignmentConstraint = 3
	// OrgAssignmentConstraintConstraintgroup is the 'ConstraintGroup' org_assignment_constraint.
	OrgAssignmentConstraintConstraintgroup OrgAssignmentConstraint = 4
)

func NewOrgAssignmentConstraint(oac org.AssignmentConstraint) OrgAssignmentConstraint {
	return OrgAssignmentConstraint(oac + 1)
}

func (oac OrgAssignmentConstraint) PB() org.AssignmentConstraint {
	return org.AssignmentConstraint(oac - 1)
}

// UnmarshalText unmarshals OrgAssignmentConstraint from text.
func (oac *OrgAssignmentConstraint) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "ConstraintBranch":
		*oac = OrgAssignmentConstraintConstraintbranch
	case "ConstraintCentre":
		*oac = OrgAssignmentConstraintConstraintcentre
	case "ConstraintCreditOfficer":
		*oac = OrgAssignmentConstraintConstraintcreditofficer
	case "ConstraintGroup":
		*oac = OrgAssignmentConstraintConstraintgroup
	default:
		return ErrInvalidOrgAssignmentConstraint(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (oac OrgAssignmentConstraint) String() string {
	switch oac {
	case OrgAssignmentConstraintConstraintbranch:
		return "ConstraintBranch"
	case OrgAssignmentConstraintConstraintcentre:
		return "ConstraintCentre"
	case OrgAssignmentConstraintConstraintcreditofficer:
		return "ConstraintCreditOfficer"
	case OrgAssignmentConstraintConstraintgroup:
		return "ConstraintGroup"
	}
	return fmt.Sprintf("OrgAssignmentConstraint(%d)", oac)
}

// Value satisfies the driver.Valuer interface.
func (oac OrgAssignmentConstraint) Value() (driver.Value, error) {
	return oac.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (oac *OrgAssignmentConstraint) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return oac.UnmarshalText(buf)
	}
	return ErrInvalidOrgAssignmentConstraint(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgAssignmentConstraint is the invalid OrgAssignmentConstraint error.
type ErrInvalidOrgAssignmentConstraint string

// Error satisfies the error interface.
func (err ErrInvalidOrgAssignmentConstraint) Error() string {
	return fmt.Sprintf("invalid OrgAssignmentConstraint(%s)", string(err))
}

// OrgChannelConstraintCriteria is the 'org_channel_constraint_criteria' enum.
type OrgChannelConstraintCriteria int32

// OrgChannelConstraintCriteria values.
const (
	// OrgChannelConstraintCriteriaChannelconstraintamount is the 'ChannelConstraintAmount' org_channel_constraint_criteria.
	OrgChannelConstraintCriteriaChannelconstraintamount OrgChannelConstraintCriteria = 1
	// OrgChannelConstraintCriteriaChannelconstrainttype is the 'ChannelConstraintType' org_channel_constraint_criteria.
	OrgChannelConstraintCriteriaChannelconstrainttype OrgChannelConstraintCriteria = 2
	// OrgChannelConstraintCriteriaChannelconstraintproduct is the 'ChannelConstraintProduct' org_channel_constraint_criteria.
	OrgChannelConstraintCriteriaChannelconstraintproduct OrgChannelConstraintCriteria = 3
)

func NewOrgChannelConstraintCriteria(occc org.ChannelConstraintCriteria) OrgChannelConstraintCriteria {
	return OrgChannelConstraintCriteria(occc + 1)
}

func (occc OrgChannelConstraintCriteria) PB() org.ChannelConstraintCriteria {
	return org.ChannelConstraintCriteria(occc - 1)
}

// UnmarshalText unmarshals OrgChannelConstraintCriteria from text.
func (occc *OrgChannelConstraintCriteria) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "ChannelConstraintAmount":
		*occc = OrgChannelConstraintCriteriaChannelconstraintamount
	case "ChannelConstraintType":
		*occc = OrgChannelConstraintCriteriaChannelconstrainttype
	case "ChannelConstraintProduct":
		*occc = OrgChannelConstraintCriteriaChannelconstraintproduct
	default:
		return ErrInvalidOrgChannelConstraintCriteria(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (occc OrgChannelConstraintCriteria) String() string {
	switch occc {
	case OrgChannelConstraintCriteriaChannelconstraintamount:
		return "ChannelConstraintAmount"
	case OrgChannelConstraintCriteriaChannelconstrainttype:
		return "ChannelConstraintType"
	case OrgChannelConstraintCriteriaChannelconstraintproduct:
		return "ChannelConstraintProduct"
	}
	return fmt.Sprintf("OrgChannelConstraintCriteria(%d)", occc)
}

// Value satisfies the driver.Valuer interface.
func (occc OrgChannelConstraintCriteria) Value() (driver.Value, error) {
	return occc.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (occc *OrgChannelConstraintCriteria) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return occc.UnmarshalText(buf)
	}
	return ErrInvalidOrgChannelConstraintCriteria(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgChannelConstraintCriteria is the invalid OrgChannelConstraintCriteria error.
type ErrInvalidOrgChannelConstraintCriteria string

// Error satisfies the error interface.
func (err ErrInvalidOrgChannelConstraintCriteria) Error() string {
	return fmt.Sprintf("invalid OrgChannelConstraintCriteria(%s)", string(err))
}

// OrgChannelConstraintMode is the 'org_channel_constraint_mode' enum.
type OrgChannelConstraintMode int32

// OrgChannelConstraintMode values.
const (
	// OrgChannelConstraintModeMatchall is the 'MatchAll' org_channel_constraint_mode.
	OrgChannelConstraintModeMatchall OrgChannelConstraintMode = 1
	// OrgChannelConstraintModeMatchany is the 'MatchAny' org_channel_constraint_mode.
	OrgChannelConstraintModeMatchany OrgChannelConstraintMode = 2
)

func NewOrgChannelConstraintMode(occm org.ChannelConstraintMode) OrgChannelConstraintMode {
	return OrgChannelConstraintMode(occm + 1)
}

func (occm OrgChannelConstraintMode) PB() org.ChannelConstraintMode {
	return org.ChannelConstraintMode(occm - 1)
}

// UnmarshalText unmarshals OrgChannelConstraintMode from text.
func (occm *OrgChannelConstraintMode) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MatchAll":
		*occm = OrgChannelConstraintModeMatchall
	case "MatchAny":
		*occm = OrgChannelConstraintModeMatchany
	default:
		return ErrInvalidOrgChannelConstraintMode(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (occm OrgChannelConstraintMode) String() string {
	switch occm {
	case OrgChannelConstraintModeMatchall:
		return "MatchAll"
	case OrgChannelConstraintModeMatchany:
		return "MatchAny"
	}
	return fmt.Sprintf("OrgChannelConstraintMode(%d)", occm)
}

// Value satisfies the driver.Valuer interface.
func (occm OrgChannelConstraintMode) Value() (driver.Value, error) {
	return occm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (occm *OrgChannelConstraintMode) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return occm.UnmarshalText(buf)
	}
	return ErrInvalidOrgChannelConstraintMode(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgChannelConstraintMode is the invalid OrgChannelConstraintMode error.
type ErrInvalidOrgChannelConstraintMode string

// Error satisfies the error interface.
func (err ErrInvalidOrgChannelConstraintMode) Error() string {
	return fmt.Sprintf("invalid OrgChannelConstraintMode(%s)", string(err))
}

// OrgConstraintAction is the 'org_constraint_action' enum.
type OrgConstraintAction int32

// OrgConstraintAction values.
const (
	// OrgConstraintActionNone is the 'None' org_constraint_action.
	OrgConstraintActionNone OrgConstraintAction = 1
	// OrgConstraintActionWarning is the 'Warning' org_constraint_action.
	OrgConstraintActionWarning OrgConstraintAction = 2
	// OrgConstraintActionError is the 'Error' org_constraint_action.
	OrgConstraintActionError OrgConstraintAction = 3
)

func NewOrgConstraintAction(oca org.ConstraintAction) OrgConstraintAction {
	return OrgConstraintAction(oca + 1)
}

func (oca OrgConstraintAction) PB() org.ConstraintAction {
	return org.ConstraintAction(oca - 1)
}

// UnmarshalText unmarshals OrgConstraintAction from text.
func (oca *OrgConstraintAction) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "None":
		*oca = OrgConstraintActionNone
	case "Warning":
		*oca = OrgConstraintActionWarning
	case "Error":
		*oca = OrgConstraintActionError
	default:
		return ErrInvalidOrgConstraintAction(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (oca OrgConstraintAction) String() string {
	switch oca {
	case OrgConstraintActionNone:
		return "None"
	case OrgConstraintActionWarning:
		return "Warning"
	case OrgConstraintActionError:
		return "Error"
	}
	return fmt.Sprintf("OrgConstraintAction(%d)", oca)
}

// Value satisfies the driver.Valuer interface.
func (oca OrgConstraintAction) Value() (driver.Value, error) {
	return oca.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (oca *OrgConstraintAction) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return oca.UnmarshalText(buf)
	}
	return ErrInvalidOrgConstraintAction(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgConstraintAction is the invalid OrgConstraintAction error.
type ErrInvalidOrgConstraintAction string

// Error satisfies the error interface.
func (err ErrInvalidOrgConstraintAction) Error() string {
	return fmt.Sprintf("invalid OrgConstraintAction(%s)", string(err))
}

// OrgDashboardComponent is the 'org_dashboard_component' enum.
type OrgDashboardComponent int32

// OrgDashboardComponent values.
const (
	// OrgDashboardComponentDashboardlatestactivity is the 'DashboardLatestActivity' org_dashboard_component.
	OrgDashboardComponentDashboardlatestactivity OrgDashboardComponent = 1
	// OrgDashboardComponentDashboardtasks is the 'DashboardTasks' org_dashboard_component.
	OrgDashboardComponentDashboardtasks OrgDashboardComponent = 2
	// OrgDashboardComponentDashboardfavoriteviews is the 'DashboardFavoriteViews' org_dashboard_component.
	OrgDashboardComponentDashboardfavoriteviews OrgDashboardComponent = 3
	// OrgDashboardComponentDashboardindicators is the 'DashboardIndicators' org_dashboard_component.
	OrgDashboardComponentDashboardindicators OrgDashboardComponent = 4
	// OrgDashboardComponentDashboardcurrenttills is the 'DashboardCurrentTills' org_dashboard_component.
	OrgDashboardComponentDashboardcurrenttills OrgDashboardComponent = 5
	// OrgDashboardComponentDashboardclients is the 'DashboardClients' org_dashboard_component.
	OrgDashboardComponentDashboardclients OrgDashboardComponent = 6
	// OrgDashboardComponentDashboardupcomingrepayments is the 'DashboardUpcomingRepayments' org_dashboard_component.
	OrgDashboardComponentDashboardupcomingrepayments OrgDashboardComponent = 7
	// OrgDashboardComponentDashboardnone is the 'DashboardNone' org_dashboard_component.
	OrgDashboardComponentDashboardnone OrgDashboardComponent = 8
)

func NewOrgDashboardComponent(odc org.DashboardComponent) OrgDashboardComponent {
	return OrgDashboardComponent(odc + 1)
}

func (odc OrgDashboardComponent) PB() org.DashboardComponent {
	return org.DashboardComponent(odc - 1)
}

// UnmarshalText unmarshals OrgDashboardComponent from text.
func (odc *OrgDashboardComponent) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "DashboardLatestActivity":
		*odc = OrgDashboardComponentDashboardlatestactivity
	case "DashboardTasks":
		*odc = OrgDashboardComponentDashboardtasks
	case "DashboardFavoriteViews":
		*odc = OrgDashboardComponentDashboardfavoriteviews
	case "DashboardIndicators":
		*odc = OrgDashboardComponentDashboardindicators
	case "DashboardCurrentTills":
		*odc = OrgDashboardComponentDashboardcurrenttills
	case "DashboardClients":
		*odc = OrgDashboardComponentDashboardclients
	case "DashboardUpcomingRepayments":
		*odc = OrgDashboardComponentDashboardupcomingrepayments
	case "DashboardNone":
		*odc = OrgDashboardComponentDashboardnone
	default:
		return ErrInvalidOrgDashboardComponent(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (odc OrgDashboardComponent) String() string {
	switch odc {
	case OrgDashboardComponentDashboardlatestactivity:
		return "DashboardLatestActivity"
	case OrgDashboardComponentDashboardtasks:
		return "DashboardTasks"
	case OrgDashboardComponentDashboardfavoriteviews:
		return "DashboardFavoriteViews"
	case OrgDashboardComponentDashboardindicators:
		return "DashboardIndicators"
	case OrgDashboardComponentDashboardcurrenttills:
		return "DashboardCurrentTills"
	case OrgDashboardComponentDashboardclients:
		return "DashboardClients"
	case OrgDashboardComponentDashboardupcomingrepayments:
		return "DashboardUpcomingRepayments"
	case OrgDashboardComponentDashboardnone:
		return "DashboardNone"
	}
	return fmt.Sprintf("OrgDashboardComponent(%d)", odc)
}

// Value satisfies the driver.Valuer interface.
func (odc OrgDashboardComponent) Value() (driver.Value, error) {
	return odc.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (odc *OrgDashboardComponent) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return odc.UnmarshalText(buf)
	}
	return ErrInvalidOrgDashboardComponent(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgDashboardComponent is the invalid OrgDashboardComponent error.
type ErrInvalidOrgDashboardComponent string

// Error satisfies the error interface.
func (err ErrInvalidOrgDashboardComponent) Error() string {
	return fmt.Sprintf("invalid OrgDashboardComponent(%s)", string(err))
}

// OrgDay is the 'org_day' enum.
type OrgDay int32

// OrgDay values.
const (
	// OrgDayMonday is the 'Monday' org_day.
	OrgDayMonday OrgDay = 1
	// OrgDayTuesday is the 'Tuesday' org_day.
	OrgDayTuesday OrgDay = 2
	// OrgDayWednesday is the 'Wednesday' org_day.
	OrgDayWednesday OrgDay = 3
	// OrgDayThursday is the 'Thursday' org_day.
	OrgDayThursday OrgDay = 4
	// OrgDayFriday is the 'Friday' org_day.
	OrgDayFriday OrgDay = 5
	// OrgDaySaturday is the 'Saturday' org_day.
	OrgDaySaturday OrgDay = 6
	// OrgDaySunday is the 'Sunday' org_day.
	OrgDaySunday OrgDay = 7
)

func NewOrgDay(od org.Day) OrgDay {
	return OrgDay(od + 1)
}

func (od OrgDay) PB() org.Day {
	return org.Day(od - 1)
}

// UnmarshalText unmarshals OrgDay from text.
func (od *OrgDay) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Monday":
		*od = OrgDayMonday
	case "Tuesday":
		*od = OrgDayTuesday
	case "Wednesday":
		*od = OrgDayWednesday
	case "Thursday":
		*od = OrgDayThursday
	case "Friday":
		*od = OrgDayFriday
	case "Saturday":
		*od = OrgDaySaturday
	case "Sunday":
		*od = OrgDaySunday
	default:
		return ErrInvalidOrgDay(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (od OrgDay) String() string {
	switch od {
	case OrgDayMonday:
		return "Monday"
	case OrgDayTuesday:
		return "Tuesday"
	case OrgDayWednesday:
		return "Wednesday"
	case OrgDayThursday:
		return "Thursday"
	case OrgDayFriday:
		return "Friday"
	case OrgDaySaturday:
		return "Saturday"
	case OrgDaySunday:
		return "Sunday"
	}
	return fmt.Sprintf("OrgDay(%d)", od)
}

// Value satisfies the driver.Valuer interface.
func (od OrgDay) Value() (driver.Value, error) {
	return od.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (od *OrgDay) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return od.UnmarshalText(buf)
	}
	return ErrInvalidOrgDay(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgDay is the invalid OrgDay error.
type ErrInvalidOrgDay string

// Error satisfies the error interface.
func (err ErrInvalidOrgDay) Error() string {
	return fmt.Sprintf("invalid OrgDay(%s)", string(err))
}

// OrgDecimalSeparator is the 'org_decimal_separator' enum.
type OrgDecimalSeparator int32

// OrgDecimalSeparator values.
const (
	// OrgDecimalSeparatorComma is the 'Comma' org_decimal_separator.
	OrgDecimalSeparatorComma OrgDecimalSeparator = 1
	// OrgDecimalSeparatorPoint is the 'Point' org_decimal_separator.
	OrgDecimalSeparatorPoint OrgDecimalSeparator = 2
)

func NewOrgDecimalSeparator(ods org.DecimalSeparator) OrgDecimalSeparator {
	return OrgDecimalSeparator(ods + 1)
}

func (ods OrgDecimalSeparator) PB() org.DecimalSeparator {
	return org.DecimalSeparator(ods - 1)
}

// UnmarshalText unmarshals OrgDecimalSeparator from text.
func (ods *OrgDecimalSeparator) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Comma":
		*ods = OrgDecimalSeparatorComma
	case "Point":
		*ods = OrgDecimalSeparatorPoint
	default:
		return ErrInvalidOrgDecimalSeparator(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (ods OrgDecimalSeparator) String() string {
	switch ods {
	case OrgDecimalSeparatorComma:
		return "Comma"
	case OrgDecimalSeparatorPoint:
		return "Point"
	}
	return fmt.Sprintf("OrgDecimalSeparator(%d)", ods)
}

// Value satisfies the driver.Valuer interface.
func (ods OrgDecimalSeparator) Value() (driver.Value, error) {
	return ods.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ods *OrgDecimalSeparator) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ods.UnmarshalText(buf)
	}
	return ErrInvalidOrgDecimalSeparator(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgDecimalSeparator is the invalid OrgDecimalSeparator error.
type ErrInvalidOrgDecimalSeparator string

// Error satisfies the error interface.
func (err ErrInvalidOrgDecimalSeparator) Error() string {
	return fmt.Sprintf("invalid OrgDecimalSeparator(%s)", string(err))
}

// OrgDuplicateItemType is the 'org_duplicate_item_type' enum.
type OrgDuplicateItemType int32

// OrgDuplicateItemType values.
const (
	// OrgDuplicateItemTypeFieldloans is the 'FieldLoans' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldloans OrgDuplicateItemType = 1
	// OrgDuplicateItemTypeFieldsavings is the 'FieldSavings' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldsavings OrgDuplicateItemType = 2
	// OrgDuplicateItemTypeFieldclient is the 'FieldClient' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldclient OrgDuplicateItemType = 3
	// OrgDuplicateItemTypeFieldclientrole is the 'FieldClientRole' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldclientrole OrgDuplicateItemType = 4
	// OrgDuplicateItemTypeFieldgroup is the 'FieldGroup' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldgroup OrgDuplicateItemType = 5
	// OrgDuplicateItemTypeFieldgrouprole is the 'FieldGroupRole' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldgrouprole OrgDuplicateItemType = 6
	// OrgDuplicateItemTypeFieldtransaction is the 'FieldTransaction' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldtransaction OrgDuplicateItemType = 7
	// OrgDuplicateItemTypeFieldjournalentry is the 'FieldJournalEntry' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldjournalentry OrgDuplicateItemType = 8
	// OrgDuplicateItemTypeFieldinterestaccrualbreakdown is the 'FieldInterestAccrualBreakdown' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldinterestaccrualbreakdown OrgDuplicateItemType = 9
	// OrgDuplicateItemTypeFieldbranch is the 'FieldBranch' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldbranch OrgDuplicateItemType = 10
	// OrgDuplicateItemTypeFieldcentre is the 'FieldCentre' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldcentre OrgDuplicateItemType = 11
	// OrgDuplicateItemTypeFielduser is the 'FieldUser' org_duplicate_item_type.
	OrgDuplicateItemTypeFielduser OrgDuplicateItemType = 12
	// OrgDuplicateItemTypeFieldloanproduct is the 'FieldLoanProduct' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldloanproduct OrgDuplicateItemType = 13
	// OrgDuplicateItemTypeFieldsavingsproduct is the 'FieldSavingsProduct' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldsavingsproduct OrgDuplicateItemType = 14
	// OrgDuplicateItemTypeFieldnotificationmessage is the 'FieldNotificationMessage' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldnotificationmessage OrgDuplicateItemType = 15
	// OrgDuplicateItemTypeFieldnotificationtemplate is the 'FieldNotificationTemplate' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldnotificationtemplate OrgDuplicateItemType = 16
	// OrgDuplicateItemTypeFieldrepayment is the 'FieldRepayment' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldrepayment OrgDuplicateItemType = 17
	// OrgDuplicateItemTypeFieldrepaymentcollection is the 'FieldRepaymentCollection' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldrepaymentcollection OrgDuplicateItemType = 18
	// OrgDuplicateItemTypeFieldactivity is the 'FieldActivity' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldactivity OrgDuplicateItemType = 19
	// OrgDuplicateItemTypeFieldlineofcredit is the 'FieldLineOfCredit' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldlineofcredit OrgDuplicateItemType = 20
	// OrgDuplicateItemTypeFieldidentificationdocument is the 'FieldIdentificationDocument' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldidentificationdocument OrgDuplicateItemType = 21
	// OrgDuplicateItemTypeFieldattachment is the 'FieldAttachment' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldattachment OrgDuplicateItemType = 22
	// OrgDuplicateItemTypeFieldcurrency is the 'FieldCurrency' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldcurrency OrgDuplicateItemType = 23
	// OrgDuplicateItemTypeFieldproduct is the 'FieldProduct' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldproduct OrgDuplicateItemType = 24
	// OrgDuplicateItemTypeFieldrevenue is the 'FieldRevenue' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldrevenue OrgDuplicateItemType = 25
	// OrgDuplicateItemTypeFieldexpense is the 'FieldExpense' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldexpense OrgDuplicateItemType = 26
	// OrgDuplicateItemTypeFieldoutstandingportfolioaccounts is the 'FieldOutstandingPortfolioAccounts' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldoutstandingportfolioaccounts OrgDuplicateItemType = 27
	// OrgDuplicateItemTypeFieldoutstandingportfolioamounts is the 'FieldOutstandingPortfolioAmounts' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldoutstandingportfolioamounts OrgDuplicateItemType = 28
	// OrgDuplicateItemTypeFieldcreatedaccounts is the 'FieldCreatedAccounts' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldcreatedaccounts OrgDuplicateItemType = 29
	// OrgDuplicateItemTypeFieldwrittenoffloans is the 'FieldWrittenOffLoans' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldwrittenoffloans OrgDuplicateItemType = 30
	// OrgDuplicateItemTypeFielddisbursedloans is the 'FieldDisbursedLoans' org_duplicate_item_type.
	OrgDuplicateItemTypeFielddisbursedloans OrgDuplicateItemType = 31
	// OrgDuplicateItemTypeFieldloangroup is the 'FieldLoanGroup' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldloangroup OrgDuplicateItemType = 32
	// OrgDuplicateItemTypeFieldtranche is the 'FieldTranche' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldtranche OrgDuplicateItemType = 33
	// OrgDuplicateItemTypeFielddisbursementdetails is the 'FieldDisbursementDetails' org_duplicate_item_type.
	OrgDuplicateItemTypeFielddisbursementdetails OrgDuplicateItemType = 34
	// OrgDuplicateItemTypeFieldtransactiondetails is the 'FieldTransactionDetails' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldtransactiondetails OrgDuplicateItemType = 35
	// OrgDuplicateItemTypeFieldtransactionchannel is the 'FieldTransactionChannel' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldtransactionchannel OrgDuplicateItemType = 36
	// OrgDuplicateItemTypeFieldcustompredefinedfee is the 'FieldCustomPredefinedFee' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldcustompredefinedfee OrgDuplicateItemType = 37
	// OrgDuplicateItemTypeFieldcustomfieldselection is the 'FieldCustomFieldSelection' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldcustomfieldselection OrgDuplicateItemType = 38
	// OrgDuplicateItemTypeFieldpredefinedfee is the 'FieldPredefinedFee' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldpredefinedfee OrgDuplicateItemType = 39
	// OrgDuplicateItemTypeFieldloantransaction is the 'FieldLoanTransaction' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldloantransaction OrgDuplicateItemType = 40
	// OrgDuplicateItemTypeFieldsavingstransaction is the 'FieldSavingsTransaction' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldsavingstransaction OrgDuplicateItemType = 41
	// OrgDuplicateItemTypeFieldcardtransactionreversal is the 'FieldCardTransactionReversal' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldcardtransactionreversal OrgDuplicateItemType = 42
	// OrgDuplicateItemTypeFieldcomposedtransactions is the 'FieldComposedTransactions' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldcomposedtransactions OrgDuplicateItemType = 43
	// OrgDuplicateItemTypeFielduniontransactions is the 'FieldUnionTransactions' org_duplicate_item_type.
	OrgDuplicateItemTypeFielduniontransactions OrgDuplicateItemType = 44
	// OrgDuplicateItemTypeFieldinvestorfund is the 'FieldInvestorFund' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldinvestorfund OrgDuplicateItemType = 45
	// OrgDuplicateItemTypeFieldprincipalpaymentsettings is the 'FieldPrincipalPaymentSettings' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldprincipalpaymentsettings OrgDuplicateItemType = 46
	// OrgDuplicateItemTypeFieldloanaccountguaranty is the 'FieldLoanAccountGuaranty' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldloanaccountguaranty OrgDuplicateItemType = 47
	// OrgDuplicateItemTypeFieldtask is the 'FieldTask' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldtask OrgDuplicateItemType = 48
	// OrgDuplicateItemTypeFielddocumenttemplate is the 'FieldDocumentTemplate' org_duplicate_item_type.
	OrgDuplicateItemTypeFielddocumenttemplate OrgDuplicateItemType = 49
	// OrgDuplicateItemTypeFieldindexrate is the 'FieldIndexRate' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldindexrate OrgDuplicateItemType = 50
	// OrgDuplicateItemTypeFieldindexratesource is the 'FieldIndexRateSource' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldindexratesource OrgDuplicateItemType = 51
	// OrgDuplicateItemTypeFieldinterestproductsettings is the 'FieldInterestProductSettings' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldinterestproductsettings OrgDuplicateItemType = 52
	// OrgDuplicateItemTypeFieldmccexpiration is the 'FieldMccExpiration' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldmccexpiration OrgDuplicateItemType = 53
	// OrgDuplicateItemTypeFieldproductarrearssettings is the 'FieldProductArrearsSettings' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldproductarrearssettings OrgDuplicateItemType = 54
	// OrgDuplicateItemTypeFielddocumentidandtype is the 'FieldDocumentIDAndType' org_duplicate_item_type.
	OrgDuplicateItemTypeFielddocumentidandtype OrgDuplicateItemType = 55
	// OrgDuplicateItemTypeFieldhomephone is the 'FieldHomePhone' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldhomephone OrgDuplicateItemType = 56
	// OrgDuplicateItemTypeFieldmobilephone is the 'FieldMobilePhone' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldmobilephone OrgDuplicateItemType = 57
	// OrgDuplicateItemTypeFieldemail is the 'FieldEmail' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldemail OrgDuplicateItemType = 58
	// OrgDuplicateItemTypeFieldfullname is the 'FieldFullName' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldfullname OrgDuplicateItemType = 59
	// OrgDuplicateItemTypeFieldlastnamedob is the 'FieldLastNameDOB' org_duplicate_item_type.
	OrgDuplicateItemTypeFieldlastnamedob OrgDuplicateItemType = 60
)

func NewOrgDuplicateItemType(odit org.DuplicateItemType) OrgDuplicateItemType {
	return OrgDuplicateItemType(odit + 1)
}

func (odit OrgDuplicateItemType) PB() org.DuplicateItemType {
	return org.DuplicateItemType(odit - 1)
}

// UnmarshalText unmarshals OrgDuplicateItemType from text.
func (odit *OrgDuplicateItemType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "FieldLoans":
		*odit = OrgDuplicateItemTypeFieldloans
	case "FieldSavings":
		*odit = OrgDuplicateItemTypeFieldsavings
	case "FieldClient":
		*odit = OrgDuplicateItemTypeFieldclient
	case "FieldClientRole":
		*odit = OrgDuplicateItemTypeFieldclientrole
	case "FieldGroup":
		*odit = OrgDuplicateItemTypeFieldgroup
	case "FieldGroupRole":
		*odit = OrgDuplicateItemTypeFieldgrouprole
	case "FieldTransaction":
		*odit = OrgDuplicateItemTypeFieldtransaction
	case "FieldJournalEntry":
		*odit = OrgDuplicateItemTypeFieldjournalentry
	case "FieldInterestAccrualBreakdown":
		*odit = OrgDuplicateItemTypeFieldinterestaccrualbreakdown
	case "FieldBranch":
		*odit = OrgDuplicateItemTypeFieldbranch
	case "FieldCentre":
		*odit = OrgDuplicateItemTypeFieldcentre
	case "FieldUser":
		*odit = OrgDuplicateItemTypeFielduser
	case "FieldLoanProduct":
		*odit = OrgDuplicateItemTypeFieldloanproduct
	case "FieldSavingsProduct":
		*odit = OrgDuplicateItemTypeFieldsavingsproduct
	case "FieldNotificationMessage":
		*odit = OrgDuplicateItemTypeFieldnotificationmessage
	case "FieldNotificationTemplate":
		*odit = OrgDuplicateItemTypeFieldnotificationtemplate
	case "FieldRepayment":
		*odit = OrgDuplicateItemTypeFieldrepayment
	case "FieldRepaymentCollection":
		*odit = OrgDuplicateItemTypeFieldrepaymentcollection
	case "FieldActivity":
		*odit = OrgDuplicateItemTypeFieldactivity
	case "FieldLineOfCredit":
		*odit = OrgDuplicateItemTypeFieldlineofcredit
	case "FieldIdentificationDocument":
		*odit = OrgDuplicateItemTypeFieldidentificationdocument
	case "FieldAttachment":
		*odit = OrgDuplicateItemTypeFieldattachment
	case "FieldCurrency":
		*odit = OrgDuplicateItemTypeFieldcurrency
	case "FieldProduct":
		*odit = OrgDuplicateItemTypeFieldproduct
	case "FieldRevenue":
		*odit = OrgDuplicateItemTypeFieldrevenue
	case "FieldExpense":
		*odit = OrgDuplicateItemTypeFieldexpense
	case "FieldOutstandingPortfolioAccounts":
		*odit = OrgDuplicateItemTypeFieldoutstandingportfolioaccounts
	case "FieldOutstandingPortfolioAmounts":
		*odit = OrgDuplicateItemTypeFieldoutstandingportfolioamounts
	case "FieldCreatedAccounts":
		*odit = OrgDuplicateItemTypeFieldcreatedaccounts
	case "FieldWrittenOffLoans":
		*odit = OrgDuplicateItemTypeFieldwrittenoffloans
	case "FieldDisbursedLoans":
		*odit = OrgDuplicateItemTypeFielddisbursedloans
	case "FieldLoanGroup":
		*odit = OrgDuplicateItemTypeFieldloangroup
	case "FieldTranche":
		*odit = OrgDuplicateItemTypeFieldtranche
	case "FieldDisbursementDetails":
		*odit = OrgDuplicateItemTypeFielddisbursementdetails
	case "FieldTransactionDetails":
		*odit = OrgDuplicateItemTypeFieldtransactiondetails
	case "FieldTransactionChannel":
		*odit = OrgDuplicateItemTypeFieldtransactionchannel
	case "FieldCustomPredefinedFee":
		*odit = OrgDuplicateItemTypeFieldcustompredefinedfee
	case "FieldCustomFieldSelection":
		*odit = OrgDuplicateItemTypeFieldcustomfieldselection
	case "FieldPredefinedFee":
		*odit = OrgDuplicateItemTypeFieldpredefinedfee
	case "FieldLoanTransaction":
		*odit = OrgDuplicateItemTypeFieldloantransaction
	case "FieldSavingsTransaction":
		*odit = OrgDuplicateItemTypeFieldsavingstransaction
	case "FieldCardTransactionReversal":
		*odit = OrgDuplicateItemTypeFieldcardtransactionreversal
	case "FieldComposedTransactions":
		*odit = OrgDuplicateItemTypeFieldcomposedtransactions
	case "FieldUnionTransactions":
		*odit = OrgDuplicateItemTypeFielduniontransactions
	case "FieldInvestorFund":
		*odit = OrgDuplicateItemTypeFieldinvestorfund
	case "FieldPrincipalPaymentSettings":
		*odit = OrgDuplicateItemTypeFieldprincipalpaymentsettings
	case "FieldLoanAccountGuaranty":
		*odit = OrgDuplicateItemTypeFieldloanaccountguaranty
	case "FieldTask":
		*odit = OrgDuplicateItemTypeFieldtask
	case "FieldDocumentTemplate":
		*odit = OrgDuplicateItemTypeFielddocumenttemplate
	case "FieldIndexRate":
		*odit = OrgDuplicateItemTypeFieldindexrate
	case "FieldIndexRateSource":
		*odit = OrgDuplicateItemTypeFieldindexratesource
	case "FieldInterestProductSettings":
		*odit = OrgDuplicateItemTypeFieldinterestproductsettings
	case "FieldMccExpiration":
		*odit = OrgDuplicateItemTypeFieldmccexpiration
	case "FieldProductArrearsSettings":
		*odit = OrgDuplicateItemTypeFieldproductarrearssettings
	case "FieldDocumentIDAndType":
		*odit = OrgDuplicateItemTypeFielddocumentidandtype
	case "FieldHomePhone":
		*odit = OrgDuplicateItemTypeFieldhomephone
	case "FieldMobilePhone":
		*odit = OrgDuplicateItemTypeFieldmobilephone
	case "FieldEmail":
		*odit = OrgDuplicateItemTypeFieldemail
	case "FieldFullName":
		*odit = OrgDuplicateItemTypeFieldfullname
	case "FieldLastNameDOB":
		*odit = OrgDuplicateItemTypeFieldlastnamedob
	default:
		return ErrInvalidOrgDuplicateItemType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (odit OrgDuplicateItemType) String() string {
	switch odit {
	case OrgDuplicateItemTypeFieldloans:
		return "FieldLoans"
	case OrgDuplicateItemTypeFieldsavings:
		return "FieldSavings"
	case OrgDuplicateItemTypeFieldclient:
		return "FieldClient"
	case OrgDuplicateItemTypeFieldclientrole:
		return "FieldClientRole"
	case OrgDuplicateItemTypeFieldgroup:
		return "FieldGroup"
	case OrgDuplicateItemTypeFieldgrouprole:
		return "FieldGroupRole"
	case OrgDuplicateItemTypeFieldtransaction:
		return "FieldTransaction"
	case OrgDuplicateItemTypeFieldjournalentry:
		return "FieldJournalEntry"
	case OrgDuplicateItemTypeFieldinterestaccrualbreakdown:
		return "FieldInterestAccrualBreakdown"
	case OrgDuplicateItemTypeFieldbranch:
		return "FieldBranch"
	case OrgDuplicateItemTypeFieldcentre:
		return "FieldCentre"
	case OrgDuplicateItemTypeFielduser:
		return "FieldUser"
	case OrgDuplicateItemTypeFieldloanproduct:
		return "FieldLoanProduct"
	case OrgDuplicateItemTypeFieldsavingsproduct:
		return "FieldSavingsProduct"
	case OrgDuplicateItemTypeFieldnotificationmessage:
		return "FieldNotificationMessage"
	case OrgDuplicateItemTypeFieldnotificationtemplate:
		return "FieldNotificationTemplate"
	case OrgDuplicateItemTypeFieldrepayment:
		return "FieldRepayment"
	case OrgDuplicateItemTypeFieldrepaymentcollection:
		return "FieldRepaymentCollection"
	case OrgDuplicateItemTypeFieldactivity:
		return "FieldActivity"
	case OrgDuplicateItemTypeFieldlineofcredit:
		return "FieldLineOfCredit"
	case OrgDuplicateItemTypeFieldidentificationdocument:
		return "FieldIdentificationDocument"
	case OrgDuplicateItemTypeFieldattachment:
		return "FieldAttachment"
	case OrgDuplicateItemTypeFieldcurrency:
		return "FieldCurrency"
	case OrgDuplicateItemTypeFieldproduct:
		return "FieldProduct"
	case OrgDuplicateItemTypeFieldrevenue:
		return "FieldRevenue"
	case OrgDuplicateItemTypeFieldexpense:
		return "FieldExpense"
	case OrgDuplicateItemTypeFieldoutstandingportfolioaccounts:
		return "FieldOutstandingPortfolioAccounts"
	case OrgDuplicateItemTypeFieldoutstandingportfolioamounts:
		return "FieldOutstandingPortfolioAmounts"
	case OrgDuplicateItemTypeFieldcreatedaccounts:
		return "FieldCreatedAccounts"
	case OrgDuplicateItemTypeFieldwrittenoffloans:
		return "FieldWrittenOffLoans"
	case OrgDuplicateItemTypeFielddisbursedloans:
		return "FieldDisbursedLoans"
	case OrgDuplicateItemTypeFieldloangroup:
		return "FieldLoanGroup"
	case OrgDuplicateItemTypeFieldtranche:
		return "FieldTranche"
	case OrgDuplicateItemTypeFielddisbursementdetails:
		return "FieldDisbursementDetails"
	case OrgDuplicateItemTypeFieldtransactiondetails:
		return "FieldTransactionDetails"
	case OrgDuplicateItemTypeFieldtransactionchannel:
		return "FieldTransactionChannel"
	case OrgDuplicateItemTypeFieldcustompredefinedfee:
		return "FieldCustomPredefinedFee"
	case OrgDuplicateItemTypeFieldcustomfieldselection:
		return "FieldCustomFieldSelection"
	case OrgDuplicateItemTypeFieldpredefinedfee:
		return "FieldPredefinedFee"
	case OrgDuplicateItemTypeFieldloantransaction:
		return "FieldLoanTransaction"
	case OrgDuplicateItemTypeFieldsavingstransaction:
		return "FieldSavingsTransaction"
	case OrgDuplicateItemTypeFieldcardtransactionreversal:
		return "FieldCardTransactionReversal"
	case OrgDuplicateItemTypeFieldcomposedtransactions:
		return "FieldComposedTransactions"
	case OrgDuplicateItemTypeFielduniontransactions:
		return "FieldUnionTransactions"
	case OrgDuplicateItemTypeFieldinvestorfund:
		return "FieldInvestorFund"
	case OrgDuplicateItemTypeFieldprincipalpaymentsettings:
		return "FieldPrincipalPaymentSettings"
	case OrgDuplicateItemTypeFieldloanaccountguaranty:
		return "FieldLoanAccountGuaranty"
	case OrgDuplicateItemTypeFieldtask:
		return "FieldTask"
	case OrgDuplicateItemTypeFielddocumenttemplate:
		return "FieldDocumentTemplate"
	case OrgDuplicateItemTypeFieldindexrate:
		return "FieldIndexRate"
	case OrgDuplicateItemTypeFieldindexratesource:
		return "FieldIndexRateSource"
	case OrgDuplicateItemTypeFieldinterestproductsettings:
		return "FieldInterestProductSettings"
	case OrgDuplicateItemTypeFieldmccexpiration:
		return "FieldMccExpiration"
	case OrgDuplicateItemTypeFieldproductarrearssettings:
		return "FieldProductArrearsSettings"
	case OrgDuplicateItemTypeFielddocumentidandtype:
		return "FieldDocumentIDAndType"
	case OrgDuplicateItemTypeFieldhomephone:
		return "FieldHomePhone"
	case OrgDuplicateItemTypeFieldmobilephone:
		return "FieldMobilePhone"
	case OrgDuplicateItemTypeFieldemail:
		return "FieldEmail"
	case OrgDuplicateItemTypeFieldfullname:
		return "FieldFullName"
	case OrgDuplicateItemTypeFieldlastnamedob:
		return "FieldLastNameDOB"
	}
	return fmt.Sprintf("OrgDuplicateItemType(%d)", odit)
}

// Value satisfies the driver.Valuer interface.
func (odit OrgDuplicateItemType) Value() (driver.Value, error) {
	return odit.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (odit *OrgDuplicateItemType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return odit.UnmarshalText(buf)
	}
	return ErrInvalidOrgDuplicateItemType(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgDuplicateItemType is the invalid OrgDuplicateItemType error.
type ErrInvalidOrgDuplicateItemType string

// Error satisfies the error interface.
func (err ErrInvalidOrgDuplicateItemType) Error() string {
	return fmt.Sprintf("invalid OrgDuplicateItemType(%s)", string(err))
}

// OrgEndOfDayMode is the 'org_end_of_day_mode' enum.
type OrgEndOfDayMode int32

// OrgEndOfDayMode values.
const (
	// OrgEndOfDayModeEndofdayauto is the 'EndOfDayAuto' org_end_of_day_mode.
	OrgEndOfDayModeEndofdayauto OrgEndOfDayMode = 1
	// OrgEndOfDayModeEndofdaymanual is the 'EndOfDayManual' org_end_of_day_mode.
	OrgEndOfDayModeEndofdaymanual OrgEndOfDayMode = 2
)

func NewOrgEndOfDayMode(oeodm org.EndOfDayMode) OrgEndOfDayMode {
	return OrgEndOfDayMode(oeodm + 1)
}

func (oeodm OrgEndOfDayMode) PB() org.EndOfDayMode {
	return org.EndOfDayMode(oeodm - 1)
}

// UnmarshalText unmarshals OrgEndOfDayMode from text.
func (oeodm *OrgEndOfDayMode) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "EndOfDayAuto":
		*oeodm = OrgEndOfDayModeEndofdayauto
	case "EndOfDayManual":
		*oeodm = OrgEndOfDayModeEndofdaymanual
	default:
		return ErrInvalidOrgEndOfDayMode(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (oeodm OrgEndOfDayMode) String() string {
	switch oeodm {
	case OrgEndOfDayModeEndofdayauto:
		return "EndOfDayAuto"
	case OrgEndOfDayModeEndofdaymanual:
		return "EndOfDayManual"
	}
	return fmt.Sprintf("OrgEndOfDayMode(%d)", oeodm)
}

// Value satisfies the driver.Valuer interface.
func (oeodm OrgEndOfDayMode) Value() (driver.Value, error) {
	return oeodm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (oeodm *OrgEndOfDayMode) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return oeodm.UnmarshalText(buf)
	}
	return ErrInvalidOrgEndOfDayMode(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgEndOfDayMode is the invalid OrgEndOfDayMode error.
type ErrInvalidOrgEndOfDayMode string

// Error satisfies the error interface.
func (err ErrInvalidOrgEndOfDayMode) Error() string {
	return fmt.Sprintf("invalid OrgEndOfDayMode(%s)", string(err))
}

// OrgExposureType is the 'org_exposure_type' enum.
type OrgExposureType int32

// OrgExposureType values.
const (
	// OrgExposureTypeExposureunlimited is the 'ExposureUnlimited' org_exposure_type.
	OrgExposureTypeExposureunlimited OrgExposureType = 1
	// OrgExposureTypeExposuresumofloans is the 'ExposureSumOfLoans' org_exposure_type.
	OrgExposureTypeExposuresumofloans OrgExposureType = 2
	// OrgExposureTypeExposuresumofloansminussavings is the 'ExposureSumOfLoansMinusSavings' org_exposure_type.
	OrgExposureTypeExposuresumofloansminussavings OrgExposureType = 3
)

func NewOrgExposureType(oet org.ExposureType) OrgExposureType {
	return OrgExposureType(oet + 1)
}

func (oet OrgExposureType) PB() org.ExposureType {
	return org.ExposureType(oet - 1)
}

// UnmarshalText unmarshals OrgExposureType from text.
func (oet *OrgExposureType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "ExposureUnlimited":
		*oet = OrgExposureTypeExposureunlimited
	case "ExposureSumOfLoans":
		*oet = OrgExposureTypeExposuresumofloans
	case "ExposureSumOfLoansMinusSavings":
		*oet = OrgExposureTypeExposuresumofloansminussavings
	default:
		return ErrInvalidOrgExposureType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (oet OrgExposureType) String() string {
	switch oet {
	case OrgExposureTypeExposureunlimited:
		return "ExposureUnlimited"
	case OrgExposureTypeExposuresumofloans:
		return "ExposureSumOfLoans"
	case OrgExposureTypeExposuresumofloansminussavings:
		return "ExposureSumOfLoansMinusSavings"
	}
	return fmt.Sprintf("OrgExposureType(%d)", oet)
}

// Value satisfies the driver.Valuer interface.
func (oet OrgExposureType) Value() (driver.Value, error) {
	return oet.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (oet *OrgExposureType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return oet.UnmarshalText(buf)
	}
	return ErrInvalidOrgExposureType(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgExposureType is the invalid OrgExposureType error.
type ErrInvalidOrgExposureType string

// Error satisfies the error interface.
func (err ErrInvalidOrgExposureType) Error() string {
	return fmt.Sprintf("invalid OrgExposureType(%s)", string(err))
}

// OrgGroupSizeLimitType is the 'org_group_size_limit_type' enum.
type OrgGroupSizeLimitType int32

// OrgGroupSizeLimitType values.
const (
	// OrgGroupSizeLimitTypeLimithard is the 'LimitHard' org_group_size_limit_type.
	OrgGroupSizeLimitTypeLimithard OrgGroupSizeLimitType = 1
	// OrgGroupSizeLimitTypeLimitwarning is the 'LimitWarning' org_group_size_limit_type.
	OrgGroupSizeLimitTypeLimitwarning OrgGroupSizeLimitType = 2
	// OrgGroupSizeLimitTypeLimitnone is the 'LimitNone' org_group_size_limit_type.
	OrgGroupSizeLimitTypeLimitnone OrgGroupSizeLimitType = 3
)

func NewOrgGroupSizeLimitType(ogslt org.GroupSizeLimitType) OrgGroupSizeLimitType {
	return OrgGroupSizeLimitType(ogslt + 1)
}

func (ogslt OrgGroupSizeLimitType) PB() org.GroupSizeLimitType {
	return org.GroupSizeLimitType(ogslt - 1)
}

// UnmarshalText unmarshals OrgGroupSizeLimitType from text.
func (ogslt *OrgGroupSizeLimitType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "LimitHard":
		*ogslt = OrgGroupSizeLimitTypeLimithard
	case "LimitWarning":
		*ogslt = OrgGroupSizeLimitTypeLimitwarning
	case "LimitNone":
		*ogslt = OrgGroupSizeLimitTypeLimitnone
	default:
		return ErrInvalidOrgGroupSizeLimitType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (ogslt OrgGroupSizeLimitType) String() string {
	switch ogslt {
	case OrgGroupSizeLimitTypeLimithard:
		return "LimitHard"
	case OrgGroupSizeLimitTypeLimitwarning:
		return "LimitWarning"
	case OrgGroupSizeLimitTypeLimitnone:
		return "LimitNone"
	}
	return fmt.Sprintf("OrgGroupSizeLimitType(%d)", ogslt)
}

// Value satisfies the driver.Valuer interface.
func (ogslt OrgGroupSizeLimitType) Value() (driver.Value, error) {
	return ogslt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ogslt *OrgGroupSizeLimitType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ogslt.UnmarshalText(buf)
	}
	return ErrInvalidOrgGroupSizeLimitType(fmt.Sprintf("%T", v))
}

// ErrInvalidOrgGroupSizeLimitType is the invalid OrgGroupSizeLimitType error.
type ErrInvalidOrgGroupSizeLimitType string

// Error satisfies the error interface.
func (err ErrInvalidOrgGroupSizeLimitType) Error() string {
	return fmt.Sprintf("invalid OrgGroupSizeLimitType(%s)", string(err))
}

// Permission is the 'permission' enum.
type Permission int32

// Permission values.
const (
	// PermissionPermissionaudittransactions is the 'PermissionAuditTransactions' permission.
	PermissionPermissionaudittransactions Permission = 1
	// PermissionPermissionviewcomments is the 'PermissionViewComments' permission.
	PermissionPermissionviewcomments Permission = 2
	// PermissionPermissioncreatecomments is the 'PermissionCreateComments' permission.
	PermissionPermissioncreatecomments Permission = 3
	// PermissionPermissioneditcomments is the 'PermissionEditComments' permission.
	PermissionPermissioneditcomments Permission = 4
	// PermissionPermissiondeletecomments is the 'PermissionDeleteComments' permission.
	PermissionPermissiondeletecomments Permission = 5
	// PermissionPermissioncreateindexrate is the 'PermissionCreateIndexRate' permission.
	PermissionPermissioncreateindexrate Permission = 6
	// PermissionPermissiondownloadbackups is the 'PermissionDownloadBackups' permission.
	PermissionPermissiondownloadbackups Permission = 7
	// PermissionPermissionimportdata is the 'PermissionImportData' permission.
	PermissionPermissionimportdata Permission = 8
	// PermissionPermissionviewexchangerates is the 'PermissionViewExchangeRates' permission.
	PermissionPermissionviewexchangerates Permission = 9
	// PermissionPermissioncreateexchangerate is the 'PermissionCreateExchangeRate' permission.
	PermissionPermissioncreateexchangerate Permission = 10
	// PermissionPermissionviewcentredetails is the 'PermissionViewCentreDetails' permission.
	PermissionPermissionviewcentredetails Permission = 11
	// PermissionPermissioncreatecentre is the 'PermissionCreateCentre' permission.
	PermissionPermissioncreatecentre Permission = 12
	// PermissionPermissioneditcentre is the 'PermissionEditCentre' permission.
	PermissionPermissioneditcentre Permission = 13
	// PermissionPermissiondeletecentre is the 'PermissionDeleteCentre' permission.
	PermissionPermissiondeletecentre Permission = 14
	// PermissionPermissionmanageconfigurationascode is the 'PermissionManageConfigurationAsCode' permission.
	PermissionPermissionmanageconfigurationascode Permission = 15
	// PermissionPermissionviewbranchdetails is the 'PermissionViewBranchDetails' permission.
	PermissionPermissionviewbranchdetails Permission = 16
	// PermissionPermissioncreatebranch is the 'PermissionCreateBranch' permission.
	PermissionPermissioncreatebranch Permission = 17
	// PermissionPermissioneditbranch is the 'PermissionEditBranch' permission.
	PermissionPermissioneditbranch Permission = 18
	// PermissionPermissioncreatecommunicationtemplates is the 'PermissionCreateCommunicationTemplates' permission.
	PermissionPermissioncreatecommunicationtemplates Permission = 19
	// PermissionPermissioneditcommunicationtemplates is the 'PermissionEditCommunicationTemplates' permission.
	PermissionPermissioneditcommunicationtemplates Permission = 20
	// PermissionPermissionsendmanualsms is the 'PermissionSendManualSms' permission.
	PermissionPermissionsendmanualsms Permission = 21
	// PermissionPermissionsendmanualemail is the 'PermissionSendManualEmail' permission.
	PermissionPermissionsendmanualemail Permission = 22
	// PermissionPermissionviewcommunicationhistory is the 'PermissionViewCommunicationHistory' permission.
	PermissionPermissionviewcommunicationhistory Permission = 23
	// PermissionPermissionresendfailedmessages is the 'PermissionResendFailedMessages' permission.
	PermissionPermissionresendfailedmessages Permission = 24
	// PermissionPermissionviewtransactionchannels is the 'PermissionViewTransactionChannels' permission.
	PermissionPermissionviewtransactionchannels Permission = 25
	// PermissionPermissioncreatetransactionchannels is the 'PermissionCreateTransactionChannels' permission.
	PermissionPermissioncreatetransactionchannels Permission = 26
	// PermissionPermissionedittransactionchannels is the 'PermissionEditTransactionChannels' permission.
	PermissionPermissionedittransactionchannels Permission = 27
	// PermissionPermissiondeletetransactionchannels is the 'PermissionDeleteTransactionChannels' permission.
	PermissionPermissiondeletetransactionchannels Permission = 28
	// PermissionPermissionmanageholidays is the 'PermissionManageHolidays' permission.
	PermissionPermissionmanageholidays Permission = 29
	// PermissionPermissionmanageeodprocessing is the 'PermissionManageEodProcessing' permission.
	PermissionPermissionmanageeodprocessing Permission = 30
	// PermissionPermissionmanagerisklevels is the 'PermissionManageRiskLevels' permission.
	PermissionPermissionmanagerisklevels Permission = 31
	// PermissionPermissionviewloanproductdetails is the 'PermissionViewLoanProductDetails' permission.
	PermissionPermissionviewloanproductdetails Permission = 32
	// PermissionPermissioncreateloanproduct is the 'PermissionCreateLoanProduct' permission.
	PermissionPermissioncreateloanproduct Permission = 33
	// PermissionPermissioneditloanproduct is the 'PermissionEditLoanProduct' permission.
	PermissionPermissioneditloanproduct Permission = 34
	// PermissionPermissiondeleteloanproducts is the 'PermissionDeleteLoanProducts' permission.
	PermissionPermissiondeleteloanproducts Permission = 35
	// PermissionPermissionviewsavingsproductdetails is the 'PermissionViewSavingsProductDetails' permission.
	PermissionPermissionviewsavingsproductdetails Permission = 36
	// PermissionPermissioncreatesavingsproduct is the 'PermissionCreateSavingsProduct' permission.
	PermissionPermissioncreatesavingsproduct Permission = 37
	// PermissionPermissioneditsavingsproduct is the 'PermissionEditSavingsProduct' permission.
	PermissionPermissioneditsavingsproduct Permission = 38
	// PermissionPermissiondeletesavingsproduct is the 'PermissionDeleteSavingsProduct' permission.
	PermissionPermissiondeletesavingsproduct Permission = 39
	// PermissionPermissioncreateproductdocumenttemplates is the 'PermissionCreateProductDocumentTemplates' permission.
	PermissionPermissioncreateproductdocumenttemplates Permission = 40
	// PermissionPermissioneditproductdocumenttemplates is the 'PermissionEditProductDocumentTemplates' permission.
	PermissionPermissioneditproductdocumenttemplates Permission = 41
	// PermissionPermissiondeleteproductdocumenttemplates is the 'PermissionDeleteProductDocumentTemplates' permission.
	PermissionPermissiondeleteproductdocumenttemplates Permission = 42
	// PermissionPermissionviewclientdetails is the 'PermissionViewClientDetails' permission.
	PermissionPermissionviewclientdetails Permission = 43
	// PermissionPermissioncreateclient is the 'PermissionCreateClient' permission.
	PermissionPermissioncreateclient Permission = 44
	// PermissionPermissioneditclient is the 'PermissionEditClient' permission.
	PermissionPermissioneditclient Permission = 45
	// PermissionPermissiondeleteclients is the 'PermissionDeleteClients' permission.
	PermissionPermissiondeleteclients Permission = 46
	// PermissionPermissionapproveclient is the 'PermissionApproveClient' permission.
	PermissionPermissionapproveclient Permission = 47
	// PermissionPermissionrejectclient is the 'PermissionRejectClient' permission.
	PermissionPermissionrejectclient Permission = 48
	// PermissionPermissionexitclient is the 'PermissionExitClient' permission.
	PermissionPermissionexitclient Permission = 49
	// PermissionPermissionanonymizeclient is the 'PermissionAnonymizeClient' permission.
	PermissionPermissionanonymizeclient Permission = 50
	// PermissionPermissionblacklistclient is the 'PermissionBlacklistClient' permission.
	PermissionPermissionblacklistclient Permission = 51
	// PermissionPermissionundoclientstatechanged is the 'PermissionUndoClientStateChanged' permission.
	PermissionPermissionundoclientstatechanged Permission = 52
	// PermissionPermissioneditclientid is the 'PermissionEditClientID' permission.
	PermissionPermissioneditclientid Permission = 53
	// PermissionPermissioneditblacklistedclientcfv is the 'PermissionEditBlacklistedClientCfv' permission.
	PermissionPermissioneditblacklistedclientcfv Permission = 54
	// PermissionPermissioneditgroupid is the 'PermissionEditGroupID' permission.
	PermissionPermissioneditgroupid Permission = 55
	// PermissionPermissionchangeclienttype is the 'PermissionChangeClientType' permission.
	PermissionPermissionchangeclienttype Permission = 56
	// PermissionPermissionviewgroupdetails is the 'PermissionViewGroupDetails' permission.
	PermissionPermissionviewgroupdetails Permission = 57
	// PermissionPermissioncreategroup is the 'PermissionCreateGroup' permission.
	PermissionPermissioncreategroup Permission = 58
	// PermissionPermissioneditgroup is the 'PermissionEditGroup' permission.
	PermissionPermissioneditgroup Permission = 59
	// PermissionPermissiondeletegroup is the 'PermissionDeleteGroup' permission.
	PermissionPermissiondeletegroup Permission = 60
	// PermissionPermissionchangegrouptype is the 'PermissionChangeGroupType' permission.
	PermissionPermissionchangegrouptype Permission = 61
	// PermissionPermissionviewlineofcreditdetails is the 'PermissionViewLineOfCreditDetails' permission.
	PermissionPermissionviewlineofcreditdetails Permission = 62
	// PermissionPermissioncreatelinesofcredit is the 'PermissionCreateLinesOfCredit' permission.
	PermissionPermissioncreatelinesofcredit Permission = 63
	// PermissionPermissioneditlinesofcredit is the 'PermissionEditLinesOfCredit' permission.
	PermissionPermissioneditlinesofcredit Permission = 64
	// PermissionPermissionaddaccountstolineofcredit is the 'PermissionAddAccountsToLineOfCredit' permission.
	PermissionPermissionaddaccountstolineofcredit Permission = 65
	// PermissionPermissionremoveaccountsfromlineofcredit is the 'PermissionRemoveAccountsFromLineOfCredit' permission.
	PermissionPermissionremoveaccountsfromlineofcredit Permission = 66
	// PermissionPermissionapprovelineofcredit is the 'PermissionApproveLineOfCredit' permission.
	PermissionPermissionapprovelineofcredit Permission = 67
	// PermissionPermissionundoapprovelineofcredit is the 'PermissionUndoApproveLineOfCredit' permission.
	PermissionPermissionundoapprovelineofcredit Permission = 68
	// PermissionPermissionwithdrawlineofcredit is the 'PermissionWithdrawLineOfCredit' permission.
	PermissionPermissionwithdrawlineofcredit Permission = 69
	// PermissionPermissionundowithdrawlineofcredit is the 'PermissionUndoWithdrawLineOfCredit' permission.
	PermissionPermissionundowithdrawlineofcredit Permission = 70
	// PermissionPermissionrejectlineofcredit is the 'PermissionRejectLineOfCredit' permission.
	PermissionPermissionrejectlineofcredit Permission = 71
	// PermissionPermissionundorejectlineofcredit is the 'PermissionUndoRejectLineOfCredit' permission.
	PermissionPermissionundorejectlineofcredit Permission = 72
	// PermissionPermissioncloselinesofcredit is the 'PermissionCloseLinesOfCredit' permission.
	PermissionPermissioncloselinesofcredit Permission = 73
	// PermissionPermissiondeletelinesofcredit is the 'PermissionDeleteLinesOfCredit' permission.
	PermissionPermissiondeletelinesofcredit Permission = 74
	// PermissionPermissionviewloanaccountdetails is the 'PermissionViewLoanAccountDetails' permission.
	PermissionPermissionviewloanaccountdetails Permission = 75
	// PermissionPermissioncreateloanaccount is the 'PermissionCreateLoanAccount' permission.
	PermissionPermissioncreateloanaccount Permission = 76
	// PermissionPermissioneditloanaccount is the 'PermissionEditLoanAccount' permission.
	PermissionPermissioneditloanaccount Permission = 77
	// PermissionPermissiondeleteloanaccount is the 'PermissionDeleteLoanAccount' permission.
	PermissionPermissiondeleteloanaccount Permission = 78
	// PermissionPermissionenterrepayment is the 'PermissionEnterRepayment' permission.
	PermissionPermissionenterrepayment Permission = 79
	// PermissionPermissioneditrepaymentschedule is the 'PermissionEditRepaymentSchedule' permission.
	PermissionPermissioneditrepaymentschedule Permission = 80
	// PermissionPermissionapproveloans is the 'PermissionApproveLoans' permission.
	PermissionPermissionapproveloans Permission = 81
	// PermissionPermissionrequestloanapproval is the 'PermissionRequestLoanApproval' permission.
	PermissionPermissionrequestloanapproval Permission = 82
	// PermissionPermissiondiburseloans is the 'PermissionDiburseLoans' permission.
	PermissionPermissiondiburseloans Permission = 83
	// PermissionPermissionwithdrawloanaccounts is the 'PermissionWithdrawLoanAccounts' permission.
	PermissionPermissionwithdrawloanaccounts Permission = 84
	// PermissionPermissionundowithdrawloanaccounts is the 'PermissionUndoWithdrawLoanAccounts' permission.
	PermissionPermissionundowithdrawloanaccounts Permission = 85
	// PermissionPermissionsetloanincomplete is the 'PermissionSetLoanIncomplete' permission.
	PermissionPermissionsetloanincomplete Permission = 86
	// PermissionPermissionrejectloans is the 'PermissionRejectLoans' permission.
	PermissionPermissionrejectloans Permission = 87
	// PermissionPermissionundorejectloans is the 'PermissionUndoRejectLoans' permission.
	PermissionPermissionundorejectloans Permission = 88
	// PermissionPermissioncloseloanaccounts is the 'PermissionCloseLoanAccounts' permission.
	PermissionPermissioncloseloanaccounts Permission = 89
	// PermissionPermissionwriteoffloanaccounts is the 'PermissionWriteOffLoanAccounts' permission.
	PermissionPermissionwriteoffloanaccounts Permission = 90
	// PermissionPermissionterminateloanaccounts is the 'PermissionTerminateLoanAccounts' permission.
	PermissionPermissionterminateloanaccounts Permission = 91
	// PermissionPermissionpayoffloan is the 'PermissionPayOffLoan' permission.
	PermissionPermissionpayoffloan Permission = 92
	// PermissionPermissionundoloanaccountclosure is the 'PermissionUndoLoanAccountClosure' permission.
	PermissionPermissionundoloanaccountclosure Permission = 93
	// PermissionPermissionreverseloanaccountwriteoff is the 'PermissionReverseLoanAccountWriteOff' permission.
	PermissionPermissionreverseloanaccountwriteoff Permission = 94
	// PermissionPermissionrefinanceloanaccount is the 'PermissionRefinanceLoanAccount' permission.
	PermissionPermissionrefinanceloanaccount Permission = 95
	// PermissionPermissionrescheduleloanaccount is the 'PermissionRescheduleLoanAccount' permission.
	PermissionPermissionrescheduleloanaccount Permission = 96
	// PermissionPermissionapplyaccruedloaninterest is the 'PermissionApplyAccruedLoanInterest' permission.
	PermissionPermissionapplyaccruedloaninterest Permission = 97
	// PermissionPermissionapplyloanfees is the 'PermissionApplyLoanFees' permission.
	PermissionPermissionapplyloanfees Permission = 98
	// PermissionPermissionapplyloanadjustments is the 'PermissionApplyLoanAdjustments' permission.
	PermissionPermissionapplyloanadjustments Permission = 99
	// PermissionPermissionbackdateloantransactions is the 'PermissionBackdateLoanTransactions' permission.
	PermissionPermissionbackdateloantransactions Permission = 100
	// PermissionPermissionlinkaccounts is the 'PermissionLinkAccounts' permission.
	PermissionPermissionlinkaccounts Permission = 101
	// PermissionPermissioncollectguaranties is the 'PermissionCollectGuaranties' permission.
	PermissionPermissioncollectguaranties Permission = 102
	// PermissionPermissionviewsecuritiesdetails is the 'PermissionViewSecuritiesDetails' permission.
	PermissionPermissionviewsecuritiesdetails Permission = 103
	// PermissionPermissioncreatesecurities is the 'PermissionCreateSecurities' permission.
	PermissionPermissioncreatesecurities Permission = 104
	// PermissionPermissioneditsecurities is the 'PermissionEditSecurities' permission.
	PermissionPermissioneditsecurities Permission = 105
	// PermissionPermissiondeletesecurities is the 'PermissionDeleteSecurities' permission.
	PermissionPermissiondeletesecurities Permission = 106
	// PermissionPermissionlockloanaccounts is the 'PermissionLockLoanAccounts' permission.
	PermissionPermissionlockloanaccounts Permission = 107
	// PermissionPermissionposttransactionsonlockedloanaccounts is the 'PermissionPostTransactionsOnLockedLoanAccounts' permission.
	PermissionPermissionposttransactionsonlockedloanaccounts Permission = 108
	// PermissionPermissioneditloantranches is the 'PermissionEditLoanTranches' permission.
	PermissionPermissioneditloantranches Permission = 109
	// PermissionPermissioneditpenaltyrate is the 'PermissionEditPenaltyRate' permission.
	PermissionPermissioneditpenaltyrate Permission = 110
	// PermissionPermissionsetdisbursementconditions is the 'PermissionSetDisbursementConditions' permission.
	PermissionPermissionsetdisbursementconditions Permission = 111
	// PermissionPermissioneditloantransactions is the 'PermissionEditLoanTransactions' permission.
	PermissionPermissioneditloantransactions Permission = 112
	// PermissionPermissionbulkloancorrections is the 'PermissionBulkLoanCorrections' permission.
	PermissionPermissionbulkloancorrections Permission = 113
	// PermissionPermissioneditinterestrate is the 'PermissionEditInterestRate' permission.
	PermissionPermissioneditinterestrate Permission = 114
	// PermissionPermissioneditrepaymentmethodvalue is the 'PermissionEditRepaymentMethodValue' permission.
	PermissionPermissioneditrepaymentmethodvalue Permission = 115
	// PermissionPermissioneditperiodicpaymentforactiveaccount is the 'PermissionEditPeriodicPaymentForActiveAccount' permission.
	PermissionPermissioneditperiodicpaymentforactiveaccount Permission = 116
	// PermissionPermissionmanageloanassociation is the 'PermissionManageLoanAssociation' permission.
	PermissionPermissionmanageloanassociation Permission = 117
	// PermissionPermissionmakewithdrawalredraw is the 'PermissionMakeWithdrawalRedraw' permission.
	PermissionPermissionmakewithdrawalredraw Permission = 118
	// PermissionPermissionviewsavingsaccountdetails is the 'PermissionViewSavingsAccountDetails' permission.
	PermissionPermissionviewsavingsaccountdetails Permission = 119
	// PermissionPermissioncreatesavingsaccount is the 'PermissionCreateSavingsAccount' permission.
	PermissionPermissioncreatesavingsaccount Permission = 120
	// PermissionPermissioneditsavingsaccount is the 'PermissionEditSavingsAccount' permission.
	PermissionPermissioneditsavingsaccount Permission = 121
	// PermissionPermissiondeletesavingsaccount is the 'PermissionDeleteSavingsAccount' permission.
	PermissionPermissiondeletesavingsaccount Permission = 122
	// PermissionPermissionmakedeposit is the 'PermissionMakeDeposit' permission.
	PermissionPermissionmakedeposit Permission = 123
	// PermissionPermissionmakewithdrawal is the 'PermissionMakeWithdrawal' permission.
	PermissionPermissionmakewithdrawal Permission = 124
	// PermissionPermissionmakeearlywithdrawals is the 'PermissionMakeEarlyWithdrawals' permission.
	PermissionPermissionmakeearlywithdrawals Permission = 125
	// PermissionPermissionapprovesavings is the 'PermissionApproveSavings' permission.
	PermissionPermissionapprovesavings Permission = 126
	// PermissionPermissionactivatematurity is the 'PermissionActivateMaturity' permission.
	PermissionPermissionactivatematurity Permission = 127
	// PermissionPermissionundomaturity is the 'PermissionUndoMaturity' permission.
	PermissionPermissionundomaturity Permission = 128
	// PermissionPermissionclosesavingsaccounts is the 'PermissionCloseSavingsAccounts' permission.
	PermissionPermissionclosesavingsaccounts Permission = 129
	// PermissionPermissionapplysavingsfees is the 'PermissionApplySavingsFees' permission.
	PermissionPermissionapplysavingsfees Permission = 130
	// PermissionPermissionreopensavingsaccount is the 'PermissionReopenSavingsAccount' permission.
	PermissionPermissionreopensavingsaccount Permission = 131
	// PermissionPermissionapplysavingsadjustments is the 'PermissionApplySavingsAdjustments' permission.
	PermissionPermissionapplysavingsadjustments Permission = 132
	// PermissionPermissionlocksavingsaccount is the 'PermissionLockSavingsAccount' permission.
	PermissionPermissionlocksavingsaccount Permission = 133
	// PermissionPermissionunlocksavingsaccount is the 'PermissionUnlockSavingsAccount' permission.
	PermissionPermissionunlocksavingsaccount Permission = 134
	// PermissionPermissionreversesavingsaccountwriteoff is the 'PermissionReverseSavingsAccountWriteOff' permission.
	PermissionPermissionreversesavingsaccountwriteoff Permission = 135
	// PermissionPermissionbackdatesavingstransactions is the 'PermissionBackdateSavingsTransactions' permission.
	PermissionPermissionbackdatesavingstransactions Permission = 136
	// PermissionPermissionmaketransfer is the 'PermissionMakeTransfer' permission.
	PermissionPermissionmaketransfer Permission = 137
	// PermissionPermissionmakeinterclientstransfers is the 'PermissionMakeInterClientsTransfers' permission.
	PermissionPermissionmakeinterclientstransfers Permission = 138
	// PermissionPermissionposttransactionsondormantaccounts is the 'PermissionPostTransactionsOnDormantAccounts' permission.
	PermissionPermissionposttransactionsondormantaccounts Permission = 139
	// PermissionPermissionapplyaccruedsavingsinterest is the 'PermissionApplyAccruedSavingsInterest' permission.
	PermissionPermissionapplyaccruedsavingsinterest Permission = 140
	// PermissionPermissioneditsavingstransactions is the 'PermissionEditSavingsTransactions' permission.
	PermissionPermissioneditsavingstransactions Permission = 141
	// PermissionPermissionbulkdepositcorrections is the 'PermissionBulkDepositCorrections' permission.
	PermissionPermissionbulkdepositcorrections Permission = 142
	// PermissionPermissionblockandseizefunds is the 'PermissionBlockAndSeizeFunds' permission.
	PermissionPermissionblockandseizefunds Permission = 143
	// PermissionPermissionwithdrawblockedfunds is the 'PermissionWithdrawBlockedFunds' permission.
	PermissionPermissionwithdrawblockedfunds Permission = 144
	// PermissionPermissioncreatecards is the 'PermissionCreateCards' permission.
	PermissionPermissioncreatecards Permission = 145
	// PermissionPermissionviewcards is the 'PermissionViewCards' permission.
	PermissionPermissionviewcards Permission = 146
	// PermissionPermissiondeletecards is the 'PermissionDeleteCards' permission.
	PermissionPermissiondeletecards Permission = 147
	// PermissionPermissionreversecardwithdrawaltransaction is the 'PermissionReverseCardWithdrawalTransaction' permission.
	PermissionPermissionreversecardwithdrawaltransaction Permission = 148
	// PermissionPermissionreversecardtransaction is the 'PermissionReverseCardTransaction' permission.
	PermissionPermissionreversecardtransaction Permission = 149
	// PermissionPermissioncardbalanceinquiry is the 'PermissionCardBalanceInquiry' permission.
	PermissionPermissioncardbalanceinquiry Permission = 150
	// PermissionPermissioncreateauthorizationhold is the 'PermissionCreateAuthorizationHold' permission.
	PermissionPermissioncreateauthorizationhold Permission = 151
	// PermissionPermissionupdateauthorizationhold is the 'PermissionUpdateAuthorizationHold' permission.
	PermissionPermissionupdateauthorizationhold Permission = 152
	// PermissionPermissionviewauthorizationhold is the 'PermissionViewAuthorizationHold' permission.
	PermissionPermissionviewauthorizationhold Permission = 153
	// PermissionPermissioncreatecardtransaction is the 'PermissionCreateCardTransaction' permission.
	PermissionPermissioncreatecardtransaction Permission = 154
	// PermissionPermissionviewdocuments is the 'PermissionViewDocuments' permission.
	PermissionPermissionviewdocuments Permission = 155
	// PermissionPermissioncreatedocuments is the 'PermissionCreateDocuments' permission.
	PermissionPermissioncreatedocuments Permission = 156
	// PermissionPermissioneditdocuments is the 'PermissionEditDocuments' permission.
	PermissionPermissioneditdocuments Permission = 157
	// PermissionPermissiondeletedocuments is the 'PermissionDeleteDocuments' permission.
	PermissionPermissiondeletedocuments Permission = 158
	// PermissionPermissionviewtask is the 'PermissionViewTask' permission.
	PermissionPermissionviewtask Permission = 159
	// PermissionPermissioncreatetask is the 'PermissionCreateTask' permission.
	PermissionPermissioncreatetask Permission = 160
	// PermissionPermissionedittask is the 'PermissionEditTask' permission.
	PermissionPermissionedittask Permission = 161
	// PermissionPermissiondeletetask is the 'PermissionDeleteTask' permission.
	PermissionPermissiondeletetask Permission = 162
	// PermissionPermissionviewintelligence is the 'PermissionViewIntelligence' permission.
	PermissionPermissionviewintelligence Permission = 163
	// PermissionPermissionviewreports is the 'PermissionViewReports' permission.
	PermissionPermissionviewreports Permission = 164
	// PermissionPermissioncreatereports is the 'PermissionCreateReports' permission.
	PermissionPermissioncreatereports Permission = 165
	// PermissionPermissioneditreports is the 'PermissionEditReports' permission.
	PermissionPermissioneditreports Permission = 166
	// PermissionPermissiondeletereports is the 'PermissionDeleteReports' permission.
	PermissionPermissiondeletereports Permission = 167
	// PermissionPermissionviewchartofaccounts is the 'PermissionViewChartOfAccounts' permission.
	PermissionPermissionviewchartofaccounts Permission = 168
	// PermissionPermissionmanageaccounts is the 'PermissionManageAccounts' permission.
	PermissionPermissionmanageaccounts Permission = 169
	// PermissionPermissionviewjournalentries is the 'PermissionViewJournalEntries' permission.
	PermissionPermissionviewjournalentries Permission = 170
	// PermissionPermissionlogjournalentries is the 'PermissionLogJournalEntries' permission.
	PermissionPermissionlogjournalentries Permission = 171
	// PermissionPermissionviewaccountingreports is the 'PermissionViewAccountingReports' permission.
	PermissionPermissionviewaccountingreports Permission = 172
	// PermissionPermissionmakeaccountingclosure is the 'PermissionMakeAccountingClosure' permission.
	PermissionPermissionmakeaccountingclosure Permission = 173
	// PermissionPermissionapplyaccountingadjustments is the 'PermissionApplyAccountingAdjustments' permission.
	PermissionPermissionapplyaccountingadjustments Permission = 174
	// PermissionPermissionbookingdateloansgl is the 'PermissionBookingDateLoansGL' permission.
	PermissionPermissionbookingdateloansgl Permission = 175
	// PermissionPermissionbookingdatesavingsgl is the 'PermissionBookingDateSavingsGL' permission.
	PermissionPermissionbookingdatesavingsgl Permission = 176
	// PermissionPermissionrectifyadjustment is the 'PermissionRectifyAdjustment' permission.
	PermissionPermissionrectifyadjustment Permission = 177
	// PermissionPermissionviewaccountingrates is the 'PermissionViewAccountingRates' permission.
	PermissionPermissionviewaccountingrates Permission = 178
	// PermissionPermissioncreateaccountingrates is the 'PermissionCreateAccountingRates' permission.
	PermissionPermissioncreateaccountingrates Permission = 179
	// PermissionPermissionopentill is the 'PermissionOpenTill' permission.
	PermissionPermissionopentill Permission = 180
	// PermissionPermissionclosetill is the 'PermissionCloseTill' permission.
	PermissionPermissionclosetill Permission = 181
	// PermissionPermissionaddcash is the 'PermissionAddCash' permission.
	PermissionPermissionaddcash Permission = 182
	// PermissionPermissionremovecash is the 'PermissionRemoveCash' permission.
	PermissionPermissionremovecash Permission = 183
	// PermissionPermissionposttransactionswithoutopenedtill is the 'PermissionPostTransactionsWithoutOpenedTill' permission.
	PermissionPermissionposttransactionswithoutopenedtill Permission = 184
	// PermissionPermissionviewinvestorfundsdetails is the 'PermissionViewInvestorFundsDetails' permission.
	PermissionPermissionviewinvestorfundsdetails Permission = 185
	// PermissionPermissioncreateinvestorfunds is the 'PermissionCreateInvestorFunds' permission.
	PermissionPermissioncreateinvestorfunds Permission = 186
	// PermissionPermissioneditinvestorfunds is the 'PermissionEditInvestorFunds' permission.
	PermissionPermissioneditinvestorfunds Permission = 187
	// PermissionPermissiondeleteinvestorfunds is the 'PermissionDeleteInvestorFunds' permission.
	PermissionPermissiondeleteinvestorfunds Permission = 188
	// PermissionPermissionsellloanfraction is the 'PermissionSellLoanFraction' permission.
	PermissionPermissionsellloanfraction Permission = 189
	// PermissionPermissioncreateuser is the 'PermissionCreateUser' permission.
	PermissionPermissioncreateuser Permission = 190
	// PermissionPermissionedituser is the 'PermissionEditUser' permission.
	PermissionPermissionedituser Permission = 191
	// PermissionPermissionviewuserdetails is the 'PermissionViewUserDetails' permission.
	PermissionPermissionviewuserdetails Permission = 192
	// PermissionPermissiondeleteuser is the 'PermissionDeleteUser' permission.
	PermissionPermissiondeleteuser Permission = 193
	// PermissionPermissionmanageclientassociation is the 'PermissionManageClientAssociation' permission.
	PermissionPermissionmanageclientassociation Permission = 194
	// PermissionPermissionmanagegroupassociation is the 'PermissionManageGroupAssociation' permission.
	PermissionPermissionmanagegroupassociation Permission = 195
	// PermissionPermissioneditprincipalpaymentactiverevolvingcredit is the 'PermissionEditPrincipalPaymentActiveRevolvingCredit' permission.
	PermissionPermissioneditprincipalpaymentactiverevolvingcredit Permission = 196
	// PermissionPermissionperformrepaymentswithcustomamountsallocation is the 'PermissionPerformRepaymentsWithCustomAmountsAllocation' permission.
	PermissionPermissionperformrepaymentswithcustomamountsallocation Permission = 197
	// PermissionPermissionexporttoexcel is the 'PermissionExportToExcel' permission.
	PermissionPermissionexporttoexcel Permission = 198
	// PermissionPermissionviewadministrationdetails is the 'PermissionViewAdministrationDetails' permission.
	PermissionPermissionviewadministrationdetails Permission = 199
	// PermissionPermissionmanageeventsstreaming is the 'PermissionManageEventsStreaming' permission.
	PermissionPermissionmanageeventsstreaming Permission = 200
	// PermissionPermissionmanageapps is the 'PermissionManageApps' permission.
	PermissionPermissionmanageapps Permission = 201
	// PermissionPermissionadmin is the 'PermissionAdmin' permission.
	PermissionPermissionadmin Permission = 202
	// PermissionPermissioncreaterole is the 'PermissionCreateRole' permission.
	PermissionPermissioncreaterole Permission = 203
	// PermissionPermissioneditrole is the 'PermissionEditRole' permission.
	PermissionPermissioneditrole Permission = 204
	// PermissionPermissiondeleterole is the 'PermissionDeleteRole' permission.
	PermissionPermissiondeleterole Permission = 205
	// PermissionPermissionviewrole is the 'PermissionViewRole' permission.
	PermissionPermissionviewrole Permission = 206
	// PermissionPermissionmanagefederatedauthentication is the 'PermissionManageFederatedAuthentication' permission.
	PermissionPermissionmanagefederatedauthentication Permission = 207
	// PermissionPermissionmanageaccesspreferences is the 'PermissionManageAccessPreferences' permission.
	PermissionPermissionmanageaccesspreferences Permission = 208
	// PermissionPermissionviewapiconsumersandkeys is the 'PermissionViewAPIConsumersAndKeys' permission.
	PermissionPermissionviewapiconsumersandkeys Permission = 209
	// PermissionPermissioncreateapiconsumersandkeys is the 'PermissionCreateAPIConsumersAndKeys' permission.
	PermissionPermissioncreateapiconsumersandkeys Permission = 210
	// PermissionPermissioneditapiconsumersandkeys is the 'PermissionEditAPIConsumersAndKeys' permission.
	PermissionPermissioneditapiconsumersandkeys Permission = 211
	// PermissionPermissiondeleteapiconsumersandkeys is the 'PermissionDeleteAPIConsumersAndKeys' permission.
	PermissionPermissiondeleteapiconsumersandkeys Permission = 212
	// PermissionPermissionviewcustomfield is the 'PermissionViewCustomField' permission.
	PermissionPermissionviewcustomfield Permission = 213
	// PermissionPermissioncreatecustomfield is the 'PermissionCreateCustomField' permission.
	PermissionPermissioncreatecustomfield Permission = 214
	// PermissionPermissioneditcustomfield is the 'PermissionEditCustomField' permission.
	PermissionPermissioneditcustomfield Permission = 215
	// PermissionPermissiondeletecustomfield is the 'PermissionDeleteCustomField' permission.
	PermissionPermissiondeletecustomfield Permission = 216
)

func NewPermission(p core.Permission) Permission {
	return Permission(p + 1)
}

func (p Permission) PB() core.Permission {
	return core.Permission(p - 1)
}

// UnmarshalText unmarshals Permission from text.
func (p *Permission) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "PermissionAuditTransactions":
		*p = PermissionPermissionaudittransactions
	case "PermissionViewComments":
		*p = PermissionPermissionviewcomments
	case "PermissionCreateComments":
		*p = PermissionPermissioncreatecomments
	case "PermissionEditComments":
		*p = PermissionPermissioneditcomments
	case "PermissionDeleteComments":
		*p = PermissionPermissiondeletecomments
	case "PermissionCreateIndexRate":
		*p = PermissionPermissioncreateindexrate
	case "PermissionDownloadBackups":
		*p = PermissionPermissiondownloadbackups
	case "PermissionImportData":
		*p = PermissionPermissionimportdata
	case "PermissionViewExchangeRates":
		*p = PermissionPermissionviewexchangerates
	case "PermissionCreateExchangeRate":
		*p = PermissionPermissioncreateexchangerate
	case "PermissionViewCentreDetails":
		*p = PermissionPermissionviewcentredetails
	case "PermissionCreateCentre":
		*p = PermissionPermissioncreatecentre
	case "PermissionEditCentre":
		*p = PermissionPermissioneditcentre
	case "PermissionDeleteCentre":
		*p = PermissionPermissiondeletecentre
	case "PermissionManageConfigurationAsCode":
		*p = PermissionPermissionmanageconfigurationascode
	case "PermissionViewBranchDetails":
		*p = PermissionPermissionviewbranchdetails
	case "PermissionCreateBranch":
		*p = PermissionPermissioncreatebranch
	case "PermissionEditBranch":
		*p = PermissionPermissioneditbranch
	case "PermissionCreateCommunicationTemplates":
		*p = PermissionPermissioncreatecommunicationtemplates
	case "PermissionEditCommunicationTemplates":
		*p = PermissionPermissioneditcommunicationtemplates
	case "PermissionSendManualSms":
		*p = PermissionPermissionsendmanualsms
	case "PermissionSendManualEmail":
		*p = PermissionPermissionsendmanualemail
	case "PermissionViewCommunicationHistory":
		*p = PermissionPermissionviewcommunicationhistory
	case "PermissionResendFailedMessages":
		*p = PermissionPermissionresendfailedmessages
	case "PermissionViewTransactionChannels":
		*p = PermissionPermissionviewtransactionchannels
	case "PermissionCreateTransactionChannels":
		*p = PermissionPermissioncreatetransactionchannels
	case "PermissionEditTransactionChannels":
		*p = PermissionPermissionedittransactionchannels
	case "PermissionDeleteTransactionChannels":
		*p = PermissionPermissiondeletetransactionchannels
	case "PermissionManageHolidays":
		*p = PermissionPermissionmanageholidays
	case "PermissionManageEodProcessing":
		*p = PermissionPermissionmanageeodprocessing
	case "PermissionManageRiskLevels":
		*p = PermissionPermissionmanagerisklevels
	case "PermissionViewLoanProductDetails":
		*p = PermissionPermissionviewloanproductdetails
	case "PermissionCreateLoanProduct":
		*p = PermissionPermissioncreateloanproduct
	case "PermissionEditLoanProduct":
		*p = PermissionPermissioneditloanproduct
	case "PermissionDeleteLoanProducts":
		*p = PermissionPermissiondeleteloanproducts
	case "PermissionViewSavingsProductDetails":
		*p = PermissionPermissionviewsavingsproductdetails
	case "PermissionCreateSavingsProduct":
		*p = PermissionPermissioncreatesavingsproduct
	case "PermissionEditSavingsProduct":
		*p = PermissionPermissioneditsavingsproduct
	case "PermissionDeleteSavingsProduct":
		*p = PermissionPermissiondeletesavingsproduct
	case "PermissionCreateProductDocumentTemplates":
		*p = PermissionPermissioncreateproductdocumenttemplates
	case "PermissionEditProductDocumentTemplates":
		*p = PermissionPermissioneditproductdocumenttemplates
	case "PermissionDeleteProductDocumentTemplates":
		*p = PermissionPermissiondeleteproductdocumenttemplates
	case "PermissionViewClientDetails":
		*p = PermissionPermissionviewclientdetails
	case "PermissionCreateClient":
		*p = PermissionPermissioncreateclient
	case "PermissionEditClient":
		*p = PermissionPermissioneditclient
	case "PermissionDeleteClients":
		*p = PermissionPermissiondeleteclients
	case "PermissionApproveClient":
		*p = PermissionPermissionapproveclient
	case "PermissionRejectClient":
		*p = PermissionPermissionrejectclient
	case "PermissionExitClient":
		*p = PermissionPermissionexitclient
	case "PermissionAnonymizeClient":
		*p = PermissionPermissionanonymizeclient
	case "PermissionBlacklistClient":
		*p = PermissionPermissionblacklistclient
	case "PermissionUndoClientStateChanged":
		*p = PermissionPermissionundoclientstatechanged
	case "PermissionEditClientID":
		*p = PermissionPermissioneditclientid
	case "PermissionEditBlacklistedClientCfv":
		*p = PermissionPermissioneditblacklistedclientcfv
	case "PermissionEditGroupID":
		*p = PermissionPermissioneditgroupid
	case "PermissionChangeClientType":
		*p = PermissionPermissionchangeclienttype
	case "PermissionViewGroupDetails":
		*p = PermissionPermissionviewgroupdetails
	case "PermissionCreateGroup":
		*p = PermissionPermissioncreategroup
	case "PermissionEditGroup":
		*p = PermissionPermissioneditgroup
	case "PermissionDeleteGroup":
		*p = PermissionPermissiondeletegroup
	case "PermissionChangeGroupType":
		*p = PermissionPermissionchangegrouptype
	case "PermissionViewLineOfCreditDetails":
		*p = PermissionPermissionviewlineofcreditdetails
	case "PermissionCreateLinesOfCredit":
		*p = PermissionPermissioncreatelinesofcredit
	case "PermissionEditLinesOfCredit":
		*p = PermissionPermissioneditlinesofcredit
	case "PermissionAddAccountsToLineOfCredit":
		*p = PermissionPermissionaddaccountstolineofcredit
	case "PermissionRemoveAccountsFromLineOfCredit":
		*p = PermissionPermissionremoveaccountsfromlineofcredit
	case "PermissionApproveLineOfCredit":
		*p = PermissionPermissionapprovelineofcredit
	case "PermissionUndoApproveLineOfCredit":
		*p = PermissionPermissionundoapprovelineofcredit
	case "PermissionWithdrawLineOfCredit":
		*p = PermissionPermissionwithdrawlineofcredit
	case "PermissionUndoWithdrawLineOfCredit":
		*p = PermissionPermissionundowithdrawlineofcredit
	case "PermissionRejectLineOfCredit":
		*p = PermissionPermissionrejectlineofcredit
	case "PermissionUndoRejectLineOfCredit":
		*p = PermissionPermissionundorejectlineofcredit
	case "PermissionCloseLinesOfCredit":
		*p = PermissionPermissioncloselinesofcredit
	case "PermissionDeleteLinesOfCredit":
		*p = PermissionPermissiondeletelinesofcredit
	case "PermissionViewLoanAccountDetails":
		*p = PermissionPermissionviewloanaccountdetails
	case "PermissionCreateLoanAccount":
		*p = PermissionPermissioncreateloanaccount
	case "PermissionEditLoanAccount":
		*p = PermissionPermissioneditloanaccount
	case "PermissionDeleteLoanAccount":
		*p = PermissionPermissiondeleteloanaccount
	case "PermissionEnterRepayment":
		*p = PermissionPermissionenterrepayment
	case "PermissionEditRepaymentSchedule":
		*p = PermissionPermissioneditrepaymentschedule
	case "PermissionApproveLoans":
		*p = PermissionPermissionapproveloans
	case "PermissionRequestLoanApproval":
		*p = PermissionPermissionrequestloanapproval
	case "PermissionDiburseLoans":
		*p = PermissionPermissiondiburseloans
	case "PermissionWithdrawLoanAccounts":
		*p = PermissionPermissionwithdrawloanaccounts
	case "PermissionUndoWithdrawLoanAccounts":
		*p = PermissionPermissionundowithdrawloanaccounts
	case "PermissionSetLoanIncomplete":
		*p = PermissionPermissionsetloanincomplete
	case "PermissionRejectLoans":
		*p = PermissionPermissionrejectloans
	case "PermissionUndoRejectLoans":
		*p = PermissionPermissionundorejectloans
	case "PermissionCloseLoanAccounts":
		*p = PermissionPermissioncloseloanaccounts
	case "PermissionWriteOffLoanAccounts":
		*p = PermissionPermissionwriteoffloanaccounts
	case "PermissionTerminateLoanAccounts":
		*p = PermissionPermissionterminateloanaccounts
	case "PermissionPayOffLoan":
		*p = PermissionPermissionpayoffloan
	case "PermissionUndoLoanAccountClosure":
		*p = PermissionPermissionundoloanaccountclosure
	case "PermissionReverseLoanAccountWriteOff":
		*p = PermissionPermissionreverseloanaccountwriteoff
	case "PermissionRefinanceLoanAccount":
		*p = PermissionPermissionrefinanceloanaccount
	case "PermissionRescheduleLoanAccount":
		*p = PermissionPermissionrescheduleloanaccount
	case "PermissionApplyAccruedLoanInterest":
		*p = PermissionPermissionapplyaccruedloaninterest
	case "PermissionApplyLoanFees":
		*p = PermissionPermissionapplyloanfees
	case "PermissionApplyLoanAdjustments":
		*p = PermissionPermissionapplyloanadjustments
	case "PermissionBackdateLoanTransactions":
		*p = PermissionPermissionbackdateloantransactions
	case "PermissionLinkAccounts":
		*p = PermissionPermissionlinkaccounts
	case "PermissionCollectGuaranties":
		*p = PermissionPermissioncollectguaranties
	case "PermissionViewSecuritiesDetails":
		*p = PermissionPermissionviewsecuritiesdetails
	case "PermissionCreateSecurities":
		*p = PermissionPermissioncreatesecurities
	case "PermissionEditSecurities":
		*p = PermissionPermissioneditsecurities
	case "PermissionDeleteSecurities":
		*p = PermissionPermissiondeletesecurities
	case "PermissionLockLoanAccounts":
		*p = PermissionPermissionlockloanaccounts
	case "PermissionPostTransactionsOnLockedLoanAccounts":
		*p = PermissionPermissionposttransactionsonlockedloanaccounts
	case "PermissionEditLoanTranches":
		*p = PermissionPermissioneditloantranches
	case "PermissionEditPenaltyRate":
		*p = PermissionPermissioneditpenaltyrate
	case "PermissionSetDisbursementConditions":
		*p = PermissionPermissionsetdisbursementconditions
	case "PermissionEditLoanTransactions":
		*p = PermissionPermissioneditloantransactions
	case "PermissionBulkLoanCorrections":
		*p = PermissionPermissionbulkloancorrections
	case "PermissionEditInterestRate":
		*p = PermissionPermissioneditinterestrate
	case "PermissionEditRepaymentMethodValue":
		*p = PermissionPermissioneditrepaymentmethodvalue
	case "PermissionEditPeriodicPaymentForActiveAccount":
		*p = PermissionPermissioneditperiodicpaymentforactiveaccount
	case "PermissionManageLoanAssociation":
		*p = PermissionPermissionmanageloanassociation
	case "PermissionMakeWithdrawalRedraw":
		*p = PermissionPermissionmakewithdrawalredraw
	case "PermissionViewSavingsAccountDetails":
		*p = PermissionPermissionviewsavingsaccountdetails
	case "PermissionCreateSavingsAccount":
		*p = PermissionPermissioncreatesavingsaccount
	case "PermissionEditSavingsAccount":
		*p = PermissionPermissioneditsavingsaccount
	case "PermissionDeleteSavingsAccount":
		*p = PermissionPermissiondeletesavingsaccount
	case "PermissionMakeDeposit":
		*p = PermissionPermissionmakedeposit
	case "PermissionMakeWithdrawal":
		*p = PermissionPermissionmakewithdrawal
	case "PermissionMakeEarlyWithdrawals":
		*p = PermissionPermissionmakeearlywithdrawals
	case "PermissionApproveSavings":
		*p = PermissionPermissionapprovesavings
	case "PermissionActivateMaturity":
		*p = PermissionPermissionactivatematurity
	case "PermissionUndoMaturity":
		*p = PermissionPermissionundomaturity
	case "PermissionCloseSavingsAccounts":
		*p = PermissionPermissionclosesavingsaccounts
	case "PermissionApplySavingsFees":
		*p = PermissionPermissionapplysavingsfees
	case "PermissionReopenSavingsAccount":
		*p = PermissionPermissionreopensavingsaccount
	case "PermissionApplySavingsAdjustments":
		*p = PermissionPermissionapplysavingsadjustments
	case "PermissionLockSavingsAccount":
		*p = PermissionPermissionlocksavingsaccount
	case "PermissionUnlockSavingsAccount":
		*p = PermissionPermissionunlocksavingsaccount
	case "PermissionReverseSavingsAccountWriteOff":
		*p = PermissionPermissionreversesavingsaccountwriteoff
	case "PermissionBackdateSavingsTransactions":
		*p = PermissionPermissionbackdatesavingstransactions
	case "PermissionMakeTransfer":
		*p = PermissionPermissionmaketransfer
	case "PermissionMakeInterClientsTransfers":
		*p = PermissionPermissionmakeinterclientstransfers
	case "PermissionPostTransactionsOnDormantAccounts":
		*p = PermissionPermissionposttransactionsondormantaccounts
	case "PermissionApplyAccruedSavingsInterest":
		*p = PermissionPermissionapplyaccruedsavingsinterest
	case "PermissionEditSavingsTransactions":
		*p = PermissionPermissioneditsavingstransactions
	case "PermissionBulkDepositCorrections":
		*p = PermissionPermissionbulkdepositcorrections
	case "PermissionBlockAndSeizeFunds":
		*p = PermissionPermissionblockandseizefunds
	case "PermissionWithdrawBlockedFunds":
		*p = PermissionPermissionwithdrawblockedfunds
	case "PermissionCreateCards":
		*p = PermissionPermissioncreatecards
	case "PermissionViewCards":
		*p = PermissionPermissionviewcards
	case "PermissionDeleteCards":
		*p = PermissionPermissiondeletecards
	case "PermissionReverseCardWithdrawalTransaction":
		*p = PermissionPermissionreversecardwithdrawaltransaction
	case "PermissionReverseCardTransaction":
		*p = PermissionPermissionreversecardtransaction
	case "PermissionCardBalanceInquiry":
		*p = PermissionPermissioncardbalanceinquiry
	case "PermissionCreateAuthorizationHold":
		*p = PermissionPermissioncreateauthorizationhold
	case "PermissionUpdateAuthorizationHold":
		*p = PermissionPermissionupdateauthorizationhold
	case "PermissionViewAuthorizationHold":
		*p = PermissionPermissionviewauthorizationhold
	case "PermissionCreateCardTransaction":
		*p = PermissionPermissioncreatecardtransaction
	case "PermissionViewDocuments":
		*p = PermissionPermissionviewdocuments
	case "PermissionCreateDocuments":
		*p = PermissionPermissioncreatedocuments
	case "PermissionEditDocuments":
		*p = PermissionPermissioneditdocuments
	case "PermissionDeleteDocuments":
		*p = PermissionPermissiondeletedocuments
	case "PermissionViewTask":
		*p = PermissionPermissionviewtask
	case "PermissionCreateTask":
		*p = PermissionPermissioncreatetask
	case "PermissionEditTask":
		*p = PermissionPermissionedittask
	case "PermissionDeleteTask":
		*p = PermissionPermissiondeletetask
	case "PermissionViewIntelligence":
		*p = PermissionPermissionviewintelligence
	case "PermissionViewReports":
		*p = PermissionPermissionviewreports
	case "PermissionCreateReports":
		*p = PermissionPermissioncreatereports
	case "PermissionEditReports":
		*p = PermissionPermissioneditreports
	case "PermissionDeleteReports":
		*p = PermissionPermissiondeletereports
	case "PermissionViewChartOfAccounts":
		*p = PermissionPermissionviewchartofaccounts
	case "PermissionManageAccounts":
		*p = PermissionPermissionmanageaccounts
	case "PermissionViewJournalEntries":
		*p = PermissionPermissionviewjournalentries
	case "PermissionLogJournalEntries":
		*p = PermissionPermissionlogjournalentries
	case "PermissionViewAccountingReports":
		*p = PermissionPermissionviewaccountingreports
	case "PermissionMakeAccountingClosure":
		*p = PermissionPermissionmakeaccountingclosure
	case "PermissionApplyAccountingAdjustments":
		*p = PermissionPermissionapplyaccountingadjustments
	case "PermissionBookingDateLoansGL":
		*p = PermissionPermissionbookingdateloansgl
	case "PermissionBookingDateSavingsGL":
		*p = PermissionPermissionbookingdatesavingsgl
	case "PermissionRectifyAdjustment":
		*p = PermissionPermissionrectifyadjustment
	case "PermissionViewAccountingRates":
		*p = PermissionPermissionviewaccountingrates
	case "PermissionCreateAccountingRates":
		*p = PermissionPermissioncreateaccountingrates
	case "PermissionOpenTill":
		*p = PermissionPermissionopentill
	case "PermissionCloseTill":
		*p = PermissionPermissionclosetill
	case "PermissionAddCash":
		*p = PermissionPermissionaddcash
	case "PermissionRemoveCash":
		*p = PermissionPermissionremovecash
	case "PermissionPostTransactionsWithoutOpenedTill":
		*p = PermissionPermissionposttransactionswithoutopenedtill
	case "PermissionViewInvestorFundsDetails":
		*p = PermissionPermissionviewinvestorfundsdetails
	case "PermissionCreateInvestorFunds":
		*p = PermissionPermissioncreateinvestorfunds
	case "PermissionEditInvestorFunds":
		*p = PermissionPermissioneditinvestorfunds
	case "PermissionDeleteInvestorFunds":
		*p = PermissionPermissiondeleteinvestorfunds
	case "PermissionSellLoanFraction":
		*p = PermissionPermissionsellloanfraction
	case "PermissionCreateUser":
		*p = PermissionPermissioncreateuser
	case "PermissionEditUser":
		*p = PermissionPermissionedituser
	case "PermissionViewUserDetails":
		*p = PermissionPermissionviewuserdetails
	case "PermissionDeleteUser":
		*p = PermissionPermissiondeleteuser
	case "PermissionManageClientAssociation":
		*p = PermissionPermissionmanageclientassociation
	case "PermissionManageGroupAssociation":
		*p = PermissionPermissionmanagegroupassociation
	case "PermissionEditPrincipalPaymentActiveRevolvingCredit":
		*p = PermissionPermissioneditprincipalpaymentactiverevolvingcredit
	case "PermissionPerformRepaymentsWithCustomAmountsAllocation":
		*p = PermissionPermissionperformrepaymentswithcustomamountsallocation
	case "PermissionExportToExcel":
		*p = PermissionPermissionexporttoexcel
	case "PermissionViewAdministrationDetails":
		*p = PermissionPermissionviewadministrationdetails
	case "PermissionManageEventsStreaming":
		*p = PermissionPermissionmanageeventsstreaming
	case "PermissionManageApps":
		*p = PermissionPermissionmanageapps
	case "PermissionAdmin":
		*p = PermissionPermissionadmin
	case "PermissionCreateRole":
		*p = PermissionPermissioncreaterole
	case "PermissionEditRole":
		*p = PermissionPermissioneditrole
	case "PermissionDeleteRole":
		*p = PermissionPermissiondeleterole
	case "PermissionViewRole":
		*p = PermissionPermissionviewrole
	case "PermissionManageFederatedAuthentication":
		*p = PermissionPermissionmanagefederatedauthentication
	case "PermissionManageAccessPreferences":
		*p = PermissionPermissionmanageaccesspreferences
	case "PermissionViewAPIConsumersAndKeys":
		*p = PermissionPermissionviewapiconsumersandkeys
	case "PermissionCreateAPIConsumersAndKeys":
		*p = PermissionPermissioncreateapiconsumersandkeys
	case "PermissionEditAPIConsumersAndKeys":
		*p = PermissionPermissioneditapiconsumersandkeys
	case "PermissionDeleteAPIConsumersAndKeys":
		*p = PermissionPermissiondeleteapiconsumersandkeys
	case "PermissionViewCustomField":
		*p = PermissionPermissionviewcustomfield
	case "PermissionCreateCustomField":
		*p = PermissionPermissioncreatecustomfield
	case "PermissionEditCustomField":
		*p = PermissionPermissioneditcustomfield
	case "PermissionDeleteCustomField":
		*p = PermissionPermissiondeletecustomfield
	default:
		return ErrInvalidPermission(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (p Permission) String() string {
	switch p {
	case PermissionPermissionaudittransactions:
		return "PermissionAuditTransactions"
	case PermissionPermissionviewcomments:
		return "PermissionViewComments"
	case PermissionPermissioncreatecomments:
		return "PermissionCreateComments"
	case PermissionPermissioneditcomments:
		return "PermissionEditComments"
	case PermissionPermissiondeletecomments:
		return "PermissionDeleteComments"
	case PermissionPermissioncreateindexrate:
		return "PermissionCreateIndexRate"
	case PermissionPermissiondownloadbackups:
		return "PermissionDownloadBackups"
	case PermissionPermissionimportdata:
		return "PermissionImportData"
	case PermissionPermissionviewexchangerates:
		return "PermissionViewExchangeRates"
	case PermissionPermissioncreateexchangerate:
		return "PermissionCreateExchangeRate"
	case PermissionPermissionviewcentredetails:
		return "PermissionViewCentreDetails"
	case PermissionPermissioncreatecentre:
		return "PermissionCreateCentre"
	case PermissionPermissioneditcentre:
		return "PermissionEditCentre"
	case PermissionPermissiondeletecentre:
		return "PermissionDeleteCentre"
	case PermissionPermissionmanageconfigurationascode:
		return "PermissionManageConfigurationAsCode"
	case PermissionPermissionviewbranchdetails:
		return "PermissionViewBranchDetails"
	case PermissionPermissioncreatebranch:
		return "PermissionCreateBranch"
	case PermissionPermissioneditbranch:
		return "PermissionEditBranch"
	case PermissionPermissioncreatecommunicationtemplates:
		return "PermissionCreateCommunicationTemplates"
	case PermissionPermissioneditcommunicationtemplates:
		return "PermissionEditCommunicationTemplates"
	case PermissionPermissionsendmanualsms:
		return "PermissionSendManualSms"
	case PermissionPermissionsendmanualemail:
		return "PermissionSendManualEmail"
	case PermissionPermissionviewcommunicationhistory:
		return "PermissionViewCommunicationHistory"
	case PermissionPermissionresendfailedmessages:
		return "PermissionResendFailedMessages"
	case PermissionPermissionviewtransactionchannels:
		return "PermissionViewTransactionChannels"
	case PermissionPermissioncreatetransactionchannels:
		return "PermissionCreateTransactionChannels"
	case PermissionPermissionedittransactionchannels:
		return "PermissionEditTransactionChannels"
	case PermissionPermissiondeletetransactionchannels:
		return "PermissionDeleteTransactionChannels"
	case PermissionPermissionmanageholidays:
		return "PermissionManageHolidays"
	case PermissionPermissionmanageeodprocessing:
		return "PermissionManageEodProcessing"
	case PermissionPermissionmanagerisklevels:
		return "PermissionManageRiskLevels"
	case PermissionPermissionviewloanproductdetails:
		return "PermissionViewLoanProductDetails"
	case PermissionPermissioncreateloanproduct:
		return "PermissionCreateLoanProduct"
	case PermissionPermissioneditloanproduct:
		return "PermissionEditLoanProduct"
	case PermissionPermissiondeleteloanproducts:
		return "PermissionDeleteLoanProducts"
	case PermissionPermissionviewsavingsproductdetails:
		return "PermissionViewSavingsProductDetails"
	case PermissionPermissioncreatesavingsproduct:
		return "PermissionCreateSavingsProduct"
	case PermissionPermissioneditsavingsproduct:
		return "PermissionEditSavingsProduct"
	case PermissionPermissiondeletesavingsproduct:
		return "PermissionDeleteSavingsProduct"
	case PermissionPermissioncreateproductdocumenttemplates:
		return "PermissionCreateProductDocumentTemplates"
	case PermissionPermissioneditproductdocumenttemplates:
		return "PermissionEditProductDocumentTemplates"
	case PermissionPermissiondeleteproductdocumenttemplates:
		return "PermissionDeleteProductDocumentTemplates"
	case PermissionPermissionviewclientdetails:
		return "PermissionViewClientDetails"
	case PermissionPermissioncreateclient:
		return "PermissionCreateClient"
	case PermissionPermissioneditclient:
		return "PermissionEditClient"
	case PermissionPermissiondeleteclients:
		return "PermissionDeleteClients"
	case PermissionPermissionapproveclient:
		return "PermissionApproveClient"
	case PermissionPermissionrejectclient:
		return "PermissionRejectClient"
	case PermissionPermissionexitclient:
		return "PermissionExitClient"
	case PermissionPermissionanonymizeclient:
		return "PermissionAnonymizeClient"
	case PermissionPermissionblacklistclient:
		return "PermissionBlacklistClient"
	case PermissionPermissionundoclientstatechanged:
		return "PermissionUndoClientStateChanged"
	case PermissionPermissioneditclientid:
		return "PermissionEditClientID"
	case PermissionPermissioneditblacklistedclientcfv:
		return "PermissionEditBlacklistedClientCfv"
	case PermissionPermissioneditgroupid:
		return "PermissionEditGroupID"
	case PermissionPermissionchangeclienttype:
		return "PermissionChangeClientType"
	case PermissionPermissionviewgroupdetails:
		return "PermissionViewGroupDetails"
	case PermissionPermissioncreategroup:
		return "PermissionCreateGroup"
	case PermissionPermissioneditgroup:
		return "PermissionEditGroup"
	case PermissionPermissiondeletegroup:
		return "PermissionDeleteGroup"
	case PermissionPermissionchangegrouptype:
		return "PermissionChangeGroupType"
	case PermissionPermissionviewlineofcreditdetails:
		return "PermissionViewLineOfCreditDetails"
	case PermissionPermissioncreatelinesofcredit:
		return "PermissionCreateLinesOfCredit"
	case PermissionPermissioneditlinesofcredit:
		return "PermissionEditLinesOfCredit"
	case PermissionPermissionaddaccountstolineofcredit:
		return "PermissionAddAccountsToLineOfCredit"
	case PermissionPermissionremoveaccountsfromlineofcredit:
		return "PermissionRemoveAccountsFromLineOfCredit"
	case PermissionPermissionapprovelineofcredit:
		return "PermissionApproveLineOfCredit"
	case PermissionPermissionundoapprovelineofcredit:
		return "PermissionUndoApproveLineOfCredit"
	case PermissionPermissionwithdrawlineofcredit:
		return "PermissionWithdrawLineOfCredit"
	case PermissionPermissionundowithdrawlineofcredit:
		return "PermissionUndoWithdrawLineOfCredit"
	case PermissionPermissionrejectlineofcredit:
		return "PermissionRejectLineOfCredit"
	case PermissionPermissionundorejectlineofcredit:
		return "PermissionUndoRejectLineOfCredit"
	case PermissionPermissioncloselinesofcredit:
		return "PermissionCloseLinesOfCredit"
	case PermissionPermissiondeletelinesofcredit:
		return "PermissionDeleteLinesOfCredit"
	case PermissionPermissionviewloanaccountdetails:
		return "PermissionViewLoanAccountDetails"
	case PermissionPermissioncreateloanaccount:
		return "PermissionCreateLoanAccount"
	case PermissionPermissioneditloanaccount:
		return "PermissionEditLoanAccount"
	case PermissionPermissiondeleteloanaccount:
		return "PermissionDeleteLoanAccount"
	case PermissionPermissionenterrepayment:
		return "PermissionEnterRepayment"
	case PermissionPermissioneditrepaymentschedule:
		return "PermissionEditRepaymentSchedule"
	case PermissionPermissionapproveloans:
		return "PermissionApproveLoans"
	case PermissionPermissionrequestloanapproval:
		return "PermissionRequestLoanApproval"
	case PermissionPermissiondiburseloans:
		return "PermissionDiburseLoans"
	case PermissionPermissionwithdrawloanaccounts:
		return "PermissionWithdrawLoanAccounts"
	case PermissionPermissionundowithdrawloanaccounts:
		return "PermissionUndoWithdrawLoanAccounts"
	case PermissionPermissionsetloanincomplete:
		return "PermissionSetLoanIncomplete"
	case PermissionPermissionrejectloans:
		return "PermissionRejectLoans"
	case PermissionPermissionundorejectloans:
		return "PermissionUndoRejectLoans"
	case PermissionPermissioncloseloanaccounts:
		return "PermissionCloseLoanAccounts"
	case PermissionPermissionwriteoffloanaccounts:
		return "PermissionWriteOffLoanAccounts"
	case PermissionPermissionterminateloanaccounts:
		return "PermissionTerminateLoanAccounts"
	case PermissionPermissionpayoffloan:
		return "PermissionPayOffLoan"
	case PermissionPermissionundoloanaccountclosure:
		return "PermissionUndoLoanAccountClosure"
	case PermissionPermissionreverseloanaccountwriteoff:
		return "PermissionReverseLoanAccountWriteOff"
	case PermissionPermissionrefinanceloanaccount:
		return "PermissionRefinanceLoanAccount"
	case PermissionPermissionrescheduleloanaccount:
		return "PermissionRescheduleLoanAccount"
	case PermissionPermissionapplyaccruedloaninterest:
		return "PermissionApplyAccruedLoanInterest"
	case PermissionPermissionapplyloanfees:
		return "PermissionApplyLoanFees"
	case PermissionPermissionapplyloanadjustments:
		return "PermissionApplyLoanAdjustments"
	case PermissionPermissionbackdateloantransactions:
		return "PermissionBackdateLoanTransactions"
	case PermissionPermissionlinkaccounts:
		return "PermissionLinkAccounts"
	case PermissionPermissioncollectguaranties:
		return "PermissionCollectGuaranties"
	case PermissionPermissionviewsecuritiesdetails:
		return "PermissionViewSecuritiesDetails"
	case PermissionPermissioncreatesecurities:
		return "PermissionCreateSecurities"
	case PermissionPermissioneditsecurities:
		return "PermissionEditSecurities"
	case PermissionPermissiondeletesecurities:
		return "PermissionDeleteSecurities"
	case PermissionPermissionlockloanaccounts:
		return "PermissionLockLoanAccounts"
	case PermissionPermissionposttransactionsonlockedloanaccounts:
		return "PermissionPostTransactionsOnLockedLoanAccounts"
	case PermissionPermissioneditloantranches:
		return "PermissionEditLoanTranches"
	case PermissionPermissioneditpenaltyrate:
		return "PermissionEditPenaltyRate"
	case PermissionPermissionsetdisbursementconditions:
		return "PermissionSetDisbursementConditions"
	case PermissionPermissioneditloantransactions:
		return "PermissionEditLoanTransactions"
	case PermissionPermissionbulkloancorrections:
		return "PermissionBulkLoanCorrections"
	case PermissionPermissioneditinterestrate:
		return "PermissionEditInterestRate"
	case PermissionPermissioneditrepaymentmethodvalue:
		return "PermissionEditRepaymentMethodValue"
	case PermissionPermissioneditperiodicpaymentforactiveaccount:
		return "PermissionEditPeriodicPaymentForActiveAccount"
	case PermissionPermissionmanageloanassociation:
		return "PermissionManageLoanAssociation"
	case PermissionPermissionmakewithdrawalredraw:
		return "PermissionMakeWithdrawalRedraw"
	case PermissionPermissionviewsavingsaccountdetails:
		return "PermissionViewSavingsAccountDetails"
	case PermissionPermissioncreatesavingsaccount:
		return "PermissionCreateSavingsAccount"
	case PermissionPermissioneditsavingsaccount:
		return "PermissionEditSavingsAccount"
	case PermissionPermissiondeletesavingsaccount:
		return "PermissionDeleteSavingsAccount"
	case PermissionPermissionmakedeposit:
		return "PermissionMakeDeposit"
	case PermissionPermissionmakewithdrawal:
		return "PermissionMakeWithdrawal"
	case PermissionPermissionmakeearlywithdrawals:
		return "PermissionMakeEarlyWithdrawals"
	case PermissionPermissionapprovesavings:
		return "PermissionApproveSavings"
	case PermissionPermissionactivatematurity:
		return "PermissionActivateMaturity"
	case PermissionPermissionundomaturity:
		return "PermissionUndoMaturity"
	case PermissionPermissionclosesavingsaccounts:
		return "PermissionCloseSavingsAccounts"
	case PermissionPermissionapplysavingsfees:
		return "PermissionApplySavingsFees"
	case PermissionPermissionreopensavingsaccount:
		return "PermissionReopenSavingsAccount"
	case PermissionPermissionapplysavingsadjustments:
		return "PermissionApplySavingsAdjustments"
	case PermissionPermissionlocksavingsaccount:
		return "PermissionLockSavingsAccount"
	case PermissionPermissionunlocksavingsaccount:
		return "PermissionUnlockSavingsAccount"
	case PermissionPermissionreversesavingsaccountwriteoff:
		return "PermissionReverseSavingsAccountWriteOff"
	case PermissionPermissionbackdatesavingstransactions:
		return "PermissionBackdateSavingsTransactions"
	case PermissionPermissionmaketransfer:
		return "PermissionMakeTransfer"
	case PermissionPermissionmakeinterclientstransfers:
		return "PermissionMakeInterClientsTransfers"
	case PermissionPermissionposttransactionsondormantaccounts:
		return "PermissionPostTransactionsOnDormantAccounts"
	case PermissionPermissionapplyaccruedsavingsinterest:
		return "PermissionApplyAccruedSavingsInterest"
	case PermissionPermissioneditsavingstransactions:
		return "PermissionEditSavingsTransactions"
	case PermissionPermissionbulkdepositcorrections:
		return "PermissionBulkDepositCorrections"
	case PermissionPermissionblockandseizefunds:
		return "PermissionBlockAndSeizeFunds"
	case PermissionPermissionwithdrawblockedfunds:
		return "PermissionWithdrawBlockedFunds"
	case PermissionPermissioncreatecards:
		return "PermissionCreateCards"
	case PermissionPermissionviewcards:
		return "PermissionViewCards"
	case PermissionPermissiondeletecards:
		return "PermissionDeleteCards"
	case PermissionPermissionreversecardwithdrawaltransaction:
		return "PermissionReverseCardWithdrawalTransaction"
	case PermissionPermissionreversecardtransaction:
		return "PermissionReverseCardTransaction"
	case PermissionPermissioncardbalanceinquiry:
		return "PermissionCardBalanceInquiry"
	case PermissionPermissioncreateauthorizationhold:
		return "PermissionCreateAuthorizationHold"
	case PermissionPermissionupdateauthorizationhold:
		return "PermissionUpdateAuthorizationHold"
	case PermissionPermissionviewauthorizationhold:
		return "PermissionViewAuthorizationHold"
	case PermissionPermissioncreatecardtransaction:
		return "PermissionCreateCardTransaction"
	case PermissionPermissionviewdocuments:
		return "PermissionViewDocuments"
	case PermissionPermissioncreatedocuments:
		return "PermissionCreateDocuments"
	case PermissionPermissioneditdocuments:
		return "PermissionEditDocuments"
	case PermissionPermissiondeletedocuments:
		return "PermissionDeleteDocuments"
	case PermissionPermissionviewtask:
		return "PermissionViewTask"
	case PermissionPermissioncreatetask:
		return "PermissionCreateTask"
	case PermissionPermissionedittask:
		return "PermissionEditTask"
	case PermissionPermissiondeletetask:
		return "PermissionDeleteTask"
	case PermissionPermissionviewintelligence:
		return "PermissionViewIntelligence"
	case PermissionPermissionviewreports:
		return "PermissionViewReports"
	case PermissionPermissioncreatereports:
		return "PermissionCreateReports"
	case PermissionPermissioneditreports:
		return "PermissionEditReports"
	case PermissionPermissiondeletereports:
		return "PermissionDeleteReports"
	case PermissionPermissionviewchartofaccounts:
		return "PermissionViewChartOfAccounts"
	case PermissionPermissionmanageaccounts:
		return "PermissionManageAccounts"
	case PermissionPermissionviewjournalentries:
		return "PermissionViewJournalEntries"
	case PermissionPermissionlogjournalentries:
		return "PermissionLogJournalEntries"
	case PermissionPermissionviewaccountingreports:
		return "PermissionViewAccountingReports"
	case PermissionPermissionmakeaccountingclosure:
		return "PermissionMakeAccountingClosure"
	case PermissionPermissionapplyaccountingadjustments:
		return "PermissionApplyAccountingAdjustments"
	case PermissionPermissionbookingdateloansgl:
		return "PermissionBookingDateLoansGL"
	case PermissionPermissionbookingdatesavingsgl:
		return "PermissionBookingDateSavingsGL"
	case PermissionPermissionrectifyadjustment:
		return "PermissionRectifyAdjustment"
	case PermissionPermissionviewaccountingrates:
		return "PermissionViewAccountingRates"
	case PermissionPermissioncreateaccountingrates:
		return "PermissionCreateAccountingRates"
	case PermissionPermissionopentill:
		return "PermissionOpenTill"
	case PermissionPermissionclosetill:
		return "PermissionCloseTill"
	case PermissionPermissionaddcash:
		return "PermissionAddCash"
	case PermissionPermissionremovecash:
		return "PermissionRemoveCash"
	case PermissionPermissionposttransactionswithoutopenedtill:
		return "PermissionPostTransactionsWithoutOpenedTill"
	case PermissionPermissionviewinvestorfundsdetails:
		return "PermissionViewInvestorFundsDetails"
	case PermissionPermissioncreateinvestorfunds:
		return "PermissionCreateInvestorFunds"
	case PermissionPermissioneditinvestorfunds:
		return "PermissionEditInvestorFunds"
	case PermissionPermissiondeleteinvestorfunds:
		return "PermissionDeleteInvestorFunds"
	case PermissionPermissionsellloanfraction:
		return "PermissionSellLoanFraction"
	case PermissionPermissioncreateuser:
		return "PermissionCreateUser"
	case PermissionPermissionedituser:
		return "PermissionEditUser"
	case PermissionPermissionviewuserdetails:
		return "PermissionViewUserDetails"
	case PermissionPermissiondeleteuser:
		return "PermissionDeleteUser"
	case PermissionPermissionmanageclientassociation:
		return "PermissionManageClientAssociation"
	case PermissionPermissionmanagegroupassociation:
		return "PermissionManageGroupAssociation"
	case PermissionPermissioneditprincipalpaymentactiverevolvingcredit:
		return "PermissionEditPrincipalPaymentActiveRevolvingCredit"
	case PermissionPermissionperformrepaymentswithcustomamountsallocation:
		return "PermissionPerformRepaymentsWithCustomAmountsAllocation"
	case PermissionPermissionexporttoexcel:
		return "PermissionExportToExcel"
	case PermissionPermissionviewadministrationdetails:
		return "PermissionViewAdministrationDetails"
	case PermissionPermissionmanageeventsstreaming:
		return "PermissionManageEventsStreaming"
	case PermissionPermissionmanageapps:
		return "PermissionManageApps"
	case PermissionPermissionadmin:
		return "PermissionAdmin"
	case PermissionPermissioncreaterole:
		return "PermissionCreateRole"
	case PermissionPermissioneditrole:
		return "PermissionEditRole"
	case PermissionPermissiondeleterole:
		return "PermissionDeleteRole"
	case PermissionPermissionviewrole:
		return "PermissionViewRole"
	case PermissionPermissionmanagefederatedauthentication:
		return "PermissionManageFederatedAuthentication"
	case PermissionPermissionmanageaccesspreferences:
		return "PermissionManageAccessPreferences"
	case PermissionPermissionviewapiconsumersandkeys:
		return "PermissionViewAPIConsumersAndKeys"
	case PermissionPermissioncreateapiconsumersandkeys:
		return "PermissionCreateAPIConsumersAndKeys"
	case PermissionPermissioneditapiconsumersandkeys:
		return "PermissionEditAPIConsumersAndKeys"
	case PermissionPermissiondeleteapiconsumersandkeys:
		return "PermissionDeleteAPIConsumersAndKeys"
	case PermissionPermissionviewcustomfield:
		return "PermissionViewCustomField"
	case PermissionPermissioncreatecustomfield:
		return "PermissionCreateCustomField"
	case PermissionPermissioneditcustomfield:
		return "PermissionEditCustomField"
	case PermissionPermissiondeletecustomfield:
		return "PermissionDeleteCustomField"
	}
	return fmt.Sprintf("Permission(%d)", p)
}

// Value satisfies the driver.Valuer interface.
func (p Permission) Value() (driver.Value, error) {
	return p.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (p *Permission) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return p.UnmarshalText(buf)
	}
	return ErrInvalidPermission(fmt.Sprintf("%T", v))
}

// ErrInvalidPermission is the invalid Permission error.
type ErrInvalidPermission string

// Error satisfies the error interface.
func (err ErrInvalidPermission) Error() string {
	return fmt.Sprintf("invalid Permission(%s)", string(err))
}

// ProductsAccountingMethod is the 'products_accounting_method' enum.
type ProductsAccountingMethod int32

// ProductsAccountingMethod values.
const (
	// ProductsAccountingMethodNone is the 'None' products_accounting_method.
	ProductsAccountingMethodNone ProductsAccountingMethod = 1
	// ProductsAccountingMethodCash is the 'Cash' products_accounting_method.
	ProductsAccountingMethodCash ProductsAccountingMethod = 2
	// ProductsAccountingMethodAccrual is the 'Accrual' products_accounting_method.
	ProductsAccountingMethodAccrual ProductsAccountingMethod = 3
)

func NewProductsAccountingMethod(pam products.AccountingMethod) ProductsAccountingMethod {
	return ProductsAccountingMethod(pam + 1)
}

func (pam ProductsAccountingMethod) PB() products.AccountingMethod {
	return products.AccountingMethod(pam - 1)
}

// UnmarshalText unmarshals ProductsAccountingMethod from text.
func (pam *ProductsAccountingMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "None":
		*pam = ProductsAccountingMethodNone
	case "Cash":
		*pam = ProductsAccountingMethodCash
	case "Accrual":
		*pam = ProductsAccountingMethodAccrual
	default:
		return ErrInvalidProductsAccountingMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pam ProductsAccountingMethod) String() string {
	switch pam {
	case ProductsAccountingMethodNone:
		return "None"
	case ProductsAccountingMethodCash:
		return "Cash"
	case ProductsAccountingMethodAccrual:
		return "Accrual"
	}
	return fmt.Sprintf("ProductsAccountingMethod(%d)", pam)
}

// Value satisfies the driver.Valuer interface.
func (pam ProductsAccountingMethod) Value() (driver.Value, error) {
	return pam.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pam *ProductsAccountingMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pam.UnmarshalText(buf)
	}
	return ErrInvalidProductsAccountingMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsAccountingMethod is the invalid ProductsAccountingMethod error.
type ErrInvalidProductsAccountingMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsAccountingMethod) Error() string {
	return fmt.Sprintf("invalid ProductsAccountingMethod(%s)", string(err))
}

// ProductsAmortizationMethod is the 'products_amortization_method' enum.
type ProductsAmortizationMethod int32

// ProductsAmortizationMethod values.
const (
	// ProductsAmortizationMethodMethodstandardpayments is the 'MethodStandardPayments' products_amortization_method.
	ProductsAmortizationMethodMethodstandardpayments ProductsAmortizationMethod = 1
	// ProductsAmortizationMethodMethodballoonpayments is the 'MethodBalloonPayments' products_amortization_method.
	ProductsAmortizationMethodMethodballoonpayments ProductsAmortizationMethod = 2
	// ProductsAmortizationMethodMethodoptimizedpayments is the 'MethodOptimizedPayments' products_amortization_method.
	ProductsAmortizationMethodMethodoptimizedpayments ProductsAmortizationMethod = 3
	// ProductsAmortizationMethodMethodpaymentplan is the 'MethodPaymentPlan' products_amortization_method.
	ProductsAmortizationMethodMethodpaymentplan ProductsAmortizationMethod = 4
)

func NewProductsAmortizationMethod(pam products.AmortizationMethod) ProductsAmortizationMethod {
	return ProductsAmortizationMethod(pam + 1)
}

func (pam ProductsAmortizationMethod) PB() products.AmortizationMethod {
	return products.AmortizationMethod(pam - 1)
}

// UnmarshalText unmarshals ProductsAmortizationMethod from text.
func (pam *ProductsAmortizationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodStandardPayments":
		*pam = ProductsAmortizationMethodMethodstandardpayments
	case "MethodBalloonPayments":
		*pam = ProductsAmortizationMethodMethodballoonpayments
	case "MethodOptimizedPayments":
		*pam = ProductsAmortizationMethodMethodoptimizedpayments
	case "MethodPaymentPlan":
		*pam = ProductsAmortizationMethodMethodpaymentplan
	default:
		return ErrInvalidProductsAmortizationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pam ProductsAmortizationMethod) String() string {
	switch pam {
	case ProductsAmortizationMethodMethodstandardpayments:
		return "MethodStandardPayments"
	case ProductsAmortizationMethodMethodballoonpayments:
		return "MethodBalloonPayments"
	case ProductsAmortizationMethodMethodoptimizedpayments:
		return "MethodOptimizedPayments"
	case ProductsAmortizationMethodMethodpaymentplan:
		return "MethodPaymentPlan"
	}
	return fmt.Sprintf("ProductsAmortizationMethod(%d)", pam)
}

// Value satisfies the driver.Valuer interface.
func (pam ProductsAmortizationMethod) Value() (driver.Value, error) {
	return pam.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pam *ProductsAmortizationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pam.UnmarshalText(buf)
	}
	return ErrInvalidProductsAmortizationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsAmortizationMethod is the invalid ProductsAmortizationMethod error.
type ErrInvalidProductsAmortizationMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsAmortizationMethod) Error() string {
	return fmt.Sprintf("invalid ProductsAmortizationMethod(%s)", string(err))
}

// ProductsAmortizationType is the 'products_amortization_type' enum.
type ProductsAmortizationType int32

// ProductsAmortizationType values.
const (
	// ProductsAmortizationTypeProfilenone is the 'ProfileNone' products_amortization_type.
	ProductsAmortizationTypeProfilenone ProductsAmortizationType = 1
	// ProductsAmortizationTypeProfilesumofyearsdigits is the 'ProfileSumOfYearsDigits' products_amortization_type.
	ProductsAmortizationTypeProfilesumofyearsdigits ProductsAmortizationType = 2
	// ProductsAmortizationTypeProfilestraightline is the 'ProfileStraightLine' products_amortization_type.
	ProductsAmortizationTypeProfilestraightline ProductsAmortizationType = 3
	// ProductsAmortizationTypeProfileeffectiveinterestrate is the 'ProfileEffectiveInterestRate' products_amortization_type.
	ProductsAmortizationTypeProfileeffectiveinterestrate ProductsAmortizationType = 4
)

func NewProductsAmortizationType(pat products.AmortizationType) ProductsAmortizationType {
	return ProductsAmortizationType(pat + 1)
}

func (pat ProductsAmortizationType) PB() products.AmortizationType {
	return products.AmortizationType(pat - 1)
}

// UnmarshalText unmarshals ProductsAmortizationType from text.
func (pat *ProductsAmortizationType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "ProfileNone":
		*pat = ProductsAmortizationTypeProfilenone
	case "ProfileSumOfYearsDigits":
		*pat = ProductsAmortizationTypeProfilesumofyearsdigits
	case "ProfileStraightLine":
		*pat = ProductsAmortizationTypeProfilestraightline
	case "ProfileEffectiveInterestRate":
		*pat = ProductsAmortizationTypeProfileeffectiveinterestrate
	default:
		return ErrInvalidProductsAmortizationType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pat ProductsAmortizationType) String() string {
	switch pat {
	case ProductsAmortizationTypeProfilenone:
		return "ProfileNone"
	case ProductsAmortizationTypeProfilesumofyearsdigits:
		return "ProfileSumOfYearsDigits"
	case ProductsAmortizationTypeProfilestraightline:
		return "ProfileStraightLine"
	case ProductsAmortizationTypeProfileeffectiveinterestrate:
		return "ProfileEffectiveInterestRate"
	}
	return fmt.Sprintf("ProductsAmortizationType(%d)", pat)
}

// Value satisfies the driver.Valuer interface.
func (pat ProductsAmortizationType) Value() (driver.Value, error) {
	return pat.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pat *ProductsAmortizationType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pat.UnmarshalText(buf)
	}
	return ErrInvalidProductsAmortizationType(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsAmortizationType is the invalid ProductsAmortizationType error.
type ErrInvalidProductsAmortizationType string

// Error satisfies the error interface.
func (err ErrInvalidProductsAmortizationType) Error() string {
	return fmt.Sprintf("invalid ProductsAmortizationType(%s)", string(err))
}

// ProductsAvailableFor is the 'products_available_for' enum.
type ProductsAvailableFor int32

// ProductsAvailableFor values.
const (
	// ProductsAvailableForAvailableforindividuals is the 'AvailableForIndividuals' products_available_for.
	ProductsAvailableForAvailableforindividuals ProductsAvailableFor = 1
	// ProductsAvailableForAvailableforpuregroups is the 'AvailableForPureGroups' products_available_for.
	ProductsAvailableForAvailableforpuregroups ProductsAvailableFor = 2
	// ProductsAvailableForAvailableforsolidaritygroups is the 'AvailableForSolidarityGroups' products_available_for.
	ProductsAvailableForAvailableforsolidaritygroups ProductsAvailableFor = 3
)

func NewProductsAvailableFor(paf products.AvailableFor) ProductsAvailableFor {
	return ProductsAvailableFor(paf + 1)
}

func (paf ProductsAvailableFor) PB() products.AvailableFor {
	return products.AvailableFor(paf - 1)
}

// UnmarshalText unmarshals ProductsAvailableFor from text.
func (paf *ProductsAvailableFor) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "AvailableForIndividuals":
		*paf = ProductsAvailableForAvailableforindividuals
	case "AvailableForPureGroups":
		*paf = ProductsAvailableForAvailableforpuregroups
	case "AvailableForSolidarityGroups":
		*paf = ProductsAvailableForAvailableforsolidaritygroups
	default:
		return ErrInvalidProductsAvailableFor(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (paf ProductsAvailableFor) String() string {
	switch paf {
	case ProductsAvailableForAvailableforindividuals:
		return "AvailableForIndividuals"
	case ProductsAvailableForAvailableforpuregroups:
		return "AvailableForPureGroups"
	case ProductsAvailableForAvailableforsolidaritygroups:
		return "AvailableForSolidarityGroups"
	}
	return fmt.Sprintf("ProductsAvailableFor(%d)", paf)
}

// Value satisfies the driver.Valuer interface.
func (paf ProductsAvailableFor) Value() (driver.Value, error) {
	return paf.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (paf *ProductsAvailableFor) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return paf.UnmarshalText(buf)
	}
	return ErrInvalidProductsAvailableFor(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsAvailableFor is the invalid ProductsAvailableFor error.
type ErrInvalidProductsAvailableFor string

// Error satisfies the error interface.
func (err ErrInvalidProductsAvailableFor) Error() string {
	return fmt.Sprintf("invalid ProductsAvailableFor(%s)", string(err))
}

// ProductsBalanceCalculationMethod is the 'products_balance_calculation_method' enum.
type ProductsBalanceCalculationMethod int32

// ProductsBalanceCalculationMethod values.
const (
	// ProductsBalanceCalculationMethodMethodprincipal is the 'MethodPrincipal' products_balance_calculation_method.
	ProductsBalanceCalculationMethodMethodprincipal ProductsBalanceCalculationMethod = 1
	// ProductsBalanceCalculationMethodMethodprincipalandinterest is the 'MethodPrincipalAndInterest' products_balance_calculation_method.
	ProductsBalanceCalculationMethodMethodprincipalandinterest ProductsBalanceCalculationMethod = 2
)

func NewProductsBalanceCalculationMethod(pbcm products.BalanceCalculationMethod) ProductsBalanceCalculationMethod {
	return ProductsBalanceCalculationMethod(pbcm + 1)
}

func (pbcm ProductsBalanceCalculationMethod) PB() products.BalanceCalculationMethod {
	return products.BalanceCalculationMethod(pbcm - 1)
}

// UnmarshalText unmarshals ProductsBalanceCalculationMethod from text.
func (pbcm *ProductsBalanceCalculationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodPrincipal":
		*pbcm = ProductsBalanceCalculationMethodMethodprincipal
	case "MethodPrincipalAndInterest":
		*pbcm = ProductsBalanceCalculationMethodMethodprincipalandinterest
	default:
		return ErrInvalidProductsBalanceCalculationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pbcm ProductsBalanceCalculationMethod) String() string {
	switch pbcm {
	case ProductsBalanceCalculationMethodMethodprincipal:
		return "MethodPrincipal"
	case ProductsBalanceCalculationMethodMethodprincipalandinterest:
		return "MethodPrincipalAndInterest"
	}
	return fmt.Sprintf("ProductsBalanceCalculationMethod(%d)", pbcm)
}

// Value satisfies the driver.Valuer interface.
func (pbcm ProductsBalanceCalculationMethod) Value() (driver.Value, error) {
	return pbcm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pbcm *ProductsBalanceCalculationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pbcm.UnmarshalText(buf)
	}
	return ErrInvalidProductsBalanceCalculationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsBalanceCalculationMethod is the invalid ProductsBalanceCalculationMethod error.
type ErrInvalidProductsBalanceCalculationMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsBalanceCalculationMethod) Error() string {
	return fmt.Sprintf("invalid ProductsBalanceCalculationMethod(%s)", string(err))
}

// ProductsBatchUpdateAction is the 'products_batch_update_action' enum.
type ProductsBatchUpdateAction int32

// ProductsBatchUpdateAction values.
const (
	// ProductsBatchUpdateActionUpdateinterestsettings is the 'UpdateInterestSettings' products_batch_update_action.
	ProductsBatchUpdateActionUpdateinterestsettings ProductsBatchUpdateAction = 1
)

func NewProductsBatchUpdateAction(pbua products.BatchUpdateAction) ProductsBatchUpdateAction {
	return ProductsBatchUpdateAction(pbua + 1)
}

func (pbua ProductsBatchUpdateAction) PB() products.BatchUpdateAction {
	return products.BatchUpdateAction(pbua - 1)
}

// UnmarshalText unmarshals ProductsBatchUpdateAction from text.
func (pbua *ProductsBatchUpdateAction) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "UpdateInterestSettings":
		*pbua = ProductsBatchUpdateActionUpdateinterestsettings
	default:
		return ErrInvalidProductsBatchUpdateAction(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pbua ProductsBatchUpdateAction) String() string {
	switch pbua {
	case ProductsBatchUpdateActionUpdateinterestsettings:
		return "UpdateInterestSettings"
	}
	return fmt.Sprintf("ProductsBatchUpdateAction(%d)", pbua)
}

// Value satisfies the driver.Valuer interface.
func (pbua ProductsBatchUpdateAction) Value() (driver.Value, error) {
	return pbua.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pbua *ProductsBatchUpdateAction) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pbua.UnmarshalText(buf)
	}
	return ErrInvalidProductsBatchUpdateAction(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsBatchUpdateAction is the invalid ProductsBatchUpdateAction error.
type ErrInvalidProductsBatchUpdateAction string

// Error satisfies the error interface.
func (err ErrInvalidProductsBatchUpdateAction) Error() string {
	return fmt.Sprintf("invalid ProductsBatchUpdateAction(%s)", string(err))
}

// ProductsCappingConstraintType is the 'products_capping_constraint_type' enum.
type ProductsCappingConstraintType int32

// ProductsCappingConstraintType values.
const (
	// ProductsCappingConstraintTypeSoftcap is the 'SoftCap' products_capping_constraint_type.
	ProductsCappingConstraintTypeSoftcap ProductsCappingConstraintType = 1
	// ProductsCappingConstraintTypeHardcap is the 'HardCap' products_capping_constraint_type.
	ProductsCappingConstraintTypeHardcap ProductsCappingConstraintType = 2
)

func NewProductsCappingConstraintType(pcct products.CappingConstraintType) ProductsCappingConstraintType {
	return ProductsCappingConstraintType(pcct + 1)
}

func (pcct ProductsCappingConstraintType) PB() products.CappingConstraintType {
	return products.CappingConstraintType(pcct - 1)
}

// UnmarshalText unmarshals ProductsCappingConstraintType from text.
func (pcct *ProductsCappingConstraintType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "SoftCap":
		*pcct = ProductsCappingConstraintTypeSoftcap
	case "HardCap":
		*pcct = ProductsCappingConstraintTypeHardcap
	default:
		return ErrInvalidProductsCappingConstraintType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pcct ProductsCappingConstraintType) String() string {
	switch pcct {
	case ProductsCappingConstraintTypeSoftcap:
		return "SoftCap"
	case ProductsCappingConstraintTypeHardcap:
		return "HardCap"
	}
	return fmt.Sprintf("ProductsCappingConstraintType(%d)", pcct)
}

// Value satisfies the driver.Valuer interface.
func (pcct ProductsCappingConstraintType) Value() (driver.Value, error) {
	return pcct.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pcct *ProductsCappingConstraintType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pcct.UnmarshalText(buf)
	}
	return ErrInvalidProductsCappingConstraintType(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsCappingConstraintType is the invalid ProductsCappingConstraintType error.
type ErrInvalidProductsCappingConstraintType string

// Error satisfies the error interface.
func (err ErrInvalidProductsCappingConstraintType) Error() string {
	return fmt.Sprintf("invalid ProductsCappingConstraintType(%s)", string(err))
}

// ProductsCommissionAllocationType is the 'products_commission_allocation_type' enum.
type ProductsCommissionAllocationType int32

// ProductsCommissionAllocationType values.
const (
	// ProductsCommissionAllocationTypeTypepercentageofloanfunding is the 'TypePercentageOfLoanFunding' products_commission_allocation_type.
	ProductsCommissionAllocationTypeTypepercentageofloanfunding ProductsCommissionAllocationType = 1
	// ProductsCommissionAllocationTypeTypefixedinterestcommissions is the 'TypeFixedInterestCommissions' products_commission_allocation_type.
	ProductsCommissionAllocationTypeTypefixedinterestcommissions ProductsCommissionAllocationType = 2
)

func NewProductsCommissionAllocationType(pcat products.CommissionAllocationType) ProductsCommissionAllocationType {
	return ProductsCommissionAllocationType(pcat + 1)
}

func (pcat ProductsCommissionAllocationType) PB() products.CommissionAllocationType {
	return products.CommissionAllocationType(pcat - 1)
}

// UnmarshalText unmarshals ProductsCommissionAllocationType from text.
func (pcat *ProductsCommissionAllocationType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "TypePercentageOfLoanFunding":
		*pcat = ProductsCommissionAllocationTypeTypepercentageofloanfunding
	case "TypeFixedInterestCommissions":
		*pcat = ProductsCommissionAllocationTypeTypefixedinterestcommissions
	default:
		return ErrInvalidProductsCommissionAllocationType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pcat ProductsCommissionAllocationType) String() string {
	switch pcat {
	case ProductsCommissionAllocationTypeTypepercentageofloanfunding:
		return "TypePercentageOfLoanFunding"
	case ProductsCommissionAllocationTypeTypefixedinterestcommissions:
		return "TypeFixedInterestCommissions"
	}
	return fmt.Sprintf("ProductsCommissionAllocationType(%d)", pcat)
}

// Value satisfies the driver.Valuer interface.
func (pcat ProductsCommissionAllocationType) Value() (driver.Value, error) {
	return pcat.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pcat *ProductsCommissionAllocationType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pcat.UnmarshalText(buf)
	}
	return ErrInvalidProductsCommissionAllocationType(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsCommissionAllocationType is the invalid ProductsCommissionAllocationType error.
type ErrInvalidProductsCommissionAllocationType string

// Error satisfies the error interface.
func (err ErrInvalidProductsCommissionAllocationType) Error() string {
	return fmt.Sprintf("invalid ProductsCommissionAllocationType(%s)", string(err))
}

// ProductsDateCalculationMethod is the 'products_date_calculation_method' enum.
type ProductsDateCalculationMethod int32

// ProductsDateCalculationMethod values.
const (
	// ProductsDateCalculationMethodDateaccountfirstwenttoarrears is the 'DateAccountFirstWentToArrears' products_date_calculation_method.
	ProductsDateCalculationMethodDateaccountfirstwenttoarrears ProductsDateCalculationMethod = 1
	// ProductsDateCalculationMethodDatelastlaterepayment is the 'DateLastLateRepayment' products_date_calculation_method.
	ProductsDateCalculationMethodDatelastlaterepayment ProductsDateCalculationMethod = 2
	// ProductsDateCalculationMethodDateaccountfirstbreachedmaterialitythreshold is the 'DateAccountFirstBreachedMaterialityThreshold' products_date_calculation_method.
	ProductsDateCalculationMethodDateaccountfirstbreachedmaterialitythreshold ProductsDateCalculationMethod = 3
)

func NewProductsDateCalculationMethod(pdcm products.DateCalculationMethod) ProductsDateCalculationMethod {
	return ProductsDateCalculationMethod(pdcm + 1)
}

func (pdcm ProductsDateCalculationMethod) PB() products.DateCalculationMethod {
	return products.DateCalculationMethod(pdcm - 1)
}

// UnmarshalText unmarshals ProductsDateCalculationMethod from text.
func (pdcm *ProductsDateCalculationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "DateAccountFirstWentToArrears":
		*pdcm = ProductsDateCalculationMethodDateaccountfirstwenttoarrears
	case "DateLastLateRepayment":
		*pdcm = ProductsDateCalculationMethodDatelastlaterepayment
	case "DateAccountFirstBreachedMaterialityThreshold":
		*pdcm = ProductsDateCalculationMethodDateaccountfirstbreachedmaterialitythreshold
	default:
		return ErrInvalidProductsDateCalculationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pdcm ProductsDateCalculationMethod) String() string {
	switch pdcm {
	case ProductsDateCalculationMethodDateaccountfirstwenttoarrears:
		return "DateAccountFirstWentToArrears"
	case ProductsDateCalculationMethodDatelastlaterepayment:
		return "DateLastLateRepayment"
	case ProductsDateCalculationMethodDateaccountfirstbreachedmaterialitythreshold:
		return "DateAccountFirstBreachedMaterialityThreshold"
	}
	return fmt.Sprintf("ProductsDateCalculationMethod(%d)", pdcm)
}

// Value satisfies the driver.Valuer interface.
func (pdcm ProductsDateCalculationMethod) Value() (driver.Value, error) {
	return pdcm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pdcm *ProductsDateCalculationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pdcm.UnmarshalText(buf)
	}
	return ErrInvalidProductsDateCalculationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsDateCalculationMethod is the invalid ProductsDateCalculationMethod error.
type ErrInvalidProductsDateCalculationMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsDateCalculationMethod) Error() string {
	return fmt.Sprintf("invalid ProductsDateCalculationMethod(%s)", string(err))
}

// ProductsDaysCountMethod is the 'products_days_count_method' enum.
type ProductsDaysCountMethod int32

// ProductsDaysCountMethod values.
const (
	// ProductsDaysCountMethodMethodrepaymentperiodicity is the 'MethodRepaymentPeriodicity' products_days_count_method.
	ProductsDaysCountMethodMethodrepaymentperiodicity ProductsDaysCountMethod = 1
	// ProductsDaysCountMethodMethodactualdaycount is the 'MethodActualDayCount' products_days_count_method.
	ProductsDaysCountMethodMethodactualdaycount ProductsDaysCountMethod = 2
)

func NewProductsDaysCountMethod(pdcm products.DaysCountMethod) ProductsDaysCountMethod {
	return ProductsDaysCountMethod(pdcm + 1)
}

func (pdcm ProductsDaysCountMethod) PB() products.DaysCountMethod {
	return products.DaysCountMethod(pdcm - 1)
}

// UnmarshalText unmarshals ProductsDaysCountMethod from text.
func (pdcm *ProductsDaysCountMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodRepaymentPeriodicity":
		*pdcm = ProductsDaysCountMethodMethodrepaymentperiodicity
	case "MethodActualDayCount":
		*pdcm = ProductsDaysCountMethodMethodactualdaycount
	default:
		return ErrInvalidProductsDaysCountMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pdcm ProductsDaysCountMethod) String() string {
	switch pdcm {
	case ProductsDaysCountMethodMethodrepaymentperiodicity:
		return "MethodRepaymentPeriodicity"
	case ProductsDaysCountMethodMethodactualdaycount:
		return "MethodActualDayCount"
	}
	return fmt.Sprintf("ProductsDaysCountMethod(%d)", pdcm)
}

// Value satisfies the driver.Valuer interface.
func (pdcm ProductsDaysCountMethod) Value() (driver.Value, error) {
	return pdcm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pdcm *ProductsDaysCountMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pdcm.UnmarshalText(buf)
	}
	return ErrInvalidProductsDaysCountMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsDaysCountMethod is the invalid ProductsDaysCountMethod error.
type ErrInvalidProductsDaysCountMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsDaysCountMethod) Error() string {
	return fmt.Sprintf("invalid ProductsDaysCountMethod(%s)", string(err))
}

// ProductsDaysInYear is the 'products_days_in_year' enum.
type ProductsDaysInYear int32

// ProductsDaysInYear values.
const (
	// ProductsDaysInYearYearactual365fixed is the 'YearActual365Fixed' products_days_in_year.
	ProductsDaysInYearYearactual365fixed ProductsDaysInYear = 1
	// ProductsDaysInYearYearactual364 is the 'YearActual364' products_days_in_year.
	ProductsDaysInYearYearactual364 ProductsDaysInYear = 2
	// ProductsDaysInYearYearactual360 is the 'YearActual360' products_days_in_year.
	ProductsDaysInYearYearactual360 ProductsDaysInYear = 3
	// ProductsDaysInYearYearactualactualisda is the 'YearActualActualIsda' products_days_in_year.
	ProductsDaysInYearYearactualactualisda ProductsDaysInYear = 4
	// ProductsDaysInYearYeare30360 is the 'YearE30360' products_days_in_year.
	ProductsDaysInYearYeare30360 ProductsDaysInYear = 5
	// ProductsDaysInYearYeare3042365 is the 'YearE3042365' products_days_in_year.
	ProductsDaysInYearYeare3042365 ProductsDaysInYear = 6
)

func NewProductsDaysInYear(pdiy products.DaysInYear) ProductsDaysInYear {
	return ProductsDaysInYear(pdiy + 1)
}

func (pdiy ProductsDaysInYear) PB() products.DaysInYear {
	return products.DaysInYear(pdiy - 1)
}

// UnmarshalText unmarshals ProductsDaysInYear from text.
func (pdiy *ProductsDaysInYear) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "YearActual365Fixed":
		*pdiy = ProductsDaysInYearYearactual365fixed
	case "YearActual364":
		*pdiy = ProductsDaysInYearYearactual364
	case "YearActual360":
		*pdiy = ProductsDaysInYearYearactual360
	case "YearActualActualIsda":
		*pdiy = ProductsDaysInYearYearactualactualisda
	case "YearE30360":
		*pdiy = ProductsDaysInYearYeare30360
	case "YearE3042365":
		*pdiy = ProductsDaysInYearYeare3042365
	default:
		return ErrInvalidProductsDaysInYear(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pdiy ProductsDaysInYear) String() string {
	switch pdiy {
	case ProductsDaysInYearYearactual365fixed:
		return "YearActual365Fixed"
	case ProductsDaysInYearYearactual364:
		return "YearActual364"
	case ProductsDaysInYearYearactual360:
		return "YearActual360"
	case ProductsDaysInYearYearactualactualisda:
		return "YearActualActualIsda"
	case ProductsDaysInYearYeare30360:
		return "YearE30360"
	case ProductsDaysInYearYeare3042365:
		return "YearE3042365"
	}
	return fmt.Sprintf("ProductsDaysInYear(%d)", pdiy)
}

// Value satisfies the driver.Valuer interface.
func (pdiy ProductsDaysInYear) Value() (driver.Value, error) {
	return pdiy.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pdiy *ProductsDaysInYear) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pdiy.UnmarshalText(buf)
	}
	return ErrInvalidProductsDaysInYear(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsDaysInYear is the invalid ProductsDaysInYear error.
type ErrInvalidProductsDaysInYear string

// Error satisfies the error interface.
func (err ErrInvalidProductsDaysInYear) Error() string {
	return fmt.Sprintf("invalid ProductsDaysInYear(%s)", string(err))
}

// ProductsDepositCategory is the 'products_deposit_category' enum.
type ProductsDepositCategory int32

// ProductsDepositCategory values.
const (
	// ProductsDepositCategoryDepositcategorypersonaldeposit is the 'DepositCategoryPersonalDeposit' products_deposit_category.
	ProductsDepositCategoryDepositcategorypersonaldeposit ProductsDepositCategory = 1
	// ProductsDepositCategoryDepositcategorybusinessdeposit is the 'DepositCategoryBusinessDeposit' products_deposit_category.
	ProductsDepositCategoryDepositcategorybusinessdeposit ProductsDepositCategory = 2
	// ProductsDepositCategoryDepositcategorydailybankingaccounts is the 'DepositCategoryDailyBankingAccounts' products_deposit_category.
	ProductsDepositCategoryDepositcategorydailybankingaccounts ProductsDepositCategory = 3
	// ProductsDepositCategoryDepositcategorybusinessbankingaccounts is the 'DepositCategoryBusinessBankingAccounts' products_deposit_category.
	ProductsDepositCategoryDepositcategorybusinessbankingaccounts ProductsDepositCategory = 4
	// ProductsDepositCategoryDepositcategorystoredvalueaccounts is the 'DepositCategoryStoredValueAccounts' products_deposit_category.
	ProductsDepositCategoryDepositcategorystoredvalueaccounts ProductsDepositCategory = 5
	// ProductsDepositCategoryDepositcategoryuncategorized is the 'DepositCategoryUncategorized' products_deposit_category.
	ProductsDepositCategoryDepositcategoryuncategorized ProductsDepositCategory = 6
)

func NewProductsDepositCategory(pdc products.DepositCategory) ProductsDepositCategory {
	return ProductsDepositCategory(pdc + 1)
}

func (pdc ProductsDepositCategory) PB() products.DepositCategory {
	return products.DepositCategory(pdc - 1)
}

// UnmarshalText unmarshals ProductsDepositCategory from text.
func (pdc *ProductsDepositCategory) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "DepositCategoryPersonalDeposit":
		*pdc = ProductsDepositCategoryDepositcategorypersonaldeposit
	case "DepositCategoryBusinessDeposit":
		*pdc = ProductsDepositCategoryDepositcategorybusinessdeposit
	case "DepositCategoryDailyBankingAccounts":
		*pdc = ProductsDepositCategoryDepositcategorydailybankingaccounts
	case "DepositCategoryBusinessBankingAccounts":
		*pdc = ProductsDepositCategoryDepositcategorybusinessbankingaccounts
	case "DepositCategoryStoredValueAccounts":
		*pdc = ProductsDepositCategoryDepositcategorystoredvalueaccounts
	case "DepositCategoryUncategorized":
		*pdc = ProductsDepositCategoryDepositcategoryuncategorized
	default:
		return ErrInvalidProductsDepositCategory(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pdc ProductsDepositCategory) String() string {
	switch pdc {
	case ProductsDepositCategoryDepositcategorypersonaldeposit:
		return "DepositCategoryPersonalDeposit"
	case ProductsDepositCategoryDepositcategorybusinessdeposit:
		return "DepositCategoryBusinessDeposit"
	case ProductsDepositCategoryDepositcategorydailybankingaccounts:
		return "DepositCategoryDailyBankingAccounts"
	case ProductsDepositCategoryDepositcategorybusinessbankingaccounts:
		return "DepositCategoryBusinessBankingAccounts"
	case ProductsDepositCategoryDepositcategorystoredvalueaccounts:
		return "DepositCategoryStoredValueAccounts"
	case ProductsDepositCategoryDepositcategoryuncategorized:
		return "DepositCategoryUncategorized"
	}
	return fmt.Sprintf("ProductsDepositCategory(%d)", pdc)
}

// Value satisfies the driver.Valuer interface.
func (pdc ProductsDepositCategory) Value() (driver.Value, error) {
	return pdc.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pdc *ProductsDepositCategory) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pdc.UnmarshalText(buf)
	}
	return ErrInvalidProductsDepositCategory(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsDepositCategory is the invalid ProductsDepositCategory error.
type ErrInvalidProductsDepositCategory string

// Error satisfies the error interface.
func (err ErrInvalidProductsDepositCategory) Error() string {
	return fmt.Sprintf("invalid ProductsDepositCategory(%s)", string(err))
}

// ProductsDepositProductType is the 'products_deposit_product_type' enum.
type ProductsDepositProductType int32

// ProductsDepositProductType values.
const (
	// ProductsDepositProductTypeTypecurrentaccount is the 'TypeCurrentAccount' products_deposit_product_type.
	ProductsDepositProductTypeTypecurrentaccount ProductsDepositProductType = 1
	// ProductsDepositProductTypeTyperegularsavings is the 'TypeRegularSavings' products_deposit_product_type.
	ProductsDepositProductTypeTyperegularsavings ProductsDepositProductType = 2
	// ProductsDepositProductTypeTypefixeddeposit is the 'TypeFixedDeposit' products_deposit_product_type.
	ProductsDepositProductTypeTypefixeddeposit ProductsDepositProductType = 3
	// ProductsDepositProductTypeTypesavingsplan is the 'TypeSavingsPlan' products_deposit_product_type.
	ProductsDepositProductTypeTypesavingsplan ProductsDepositProductType = 4
	// ProductsDepositProductTypeTypeinvestoraccount is the 'TypeInvestorAccount' products_deposit_product_type.
	ProductsDepositProductTypeTypeinvestoraccount ProductsDepositProductType = 5
)

func NewProductsDepositProductType(pdpt products.DepositProductType) ProductsDepositProductType {
	return ProductsDepositProductType(pdpt + 1)
}

func (pdpt ProductsDepositProductType) PB() products.DepositProductType {
	return products.DepositProductType(pdpt - 1)
}

// UnmarshalText unmarshals ProductsDepositProductType from text.
func (pdpt *ProductsDepositProductType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "TypeCurrentAccount":
		*pdpt = ProductsDepositProductTypeTypecurrentaccount
	case "TypeRegularSavings":
		*pdpt = ProductsDepositProductTypeTyperegularsavings
	case "TypeFixedDeposit":
		*pdpt = ProductsDepositProductTypeTypefixeddeposit
	case "TypeSavingsPlan":
		*pdpt = ProductsDepositProductTypeTypesavingsplan
	case "TypeInvestorAccount":
		*pdpt = ProductsDepositProductTypeTypeinvestoraccount
	default:
		return ErrInvalidProductsDepositProductType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pdpt ProductsDepositProductType) String() string {
	switch pdpt {
	case ProductsDepositProductTypeTypecurrentaccount:
		return "TypeCurrentAccount"
	case ProductsDepositProductTypeTyperegularsavings:
		return "TypeRegularSavings"
	case ProductsDepositProductTypeTypefixeddeposit:
		return "TypeFixedDeposit"
	case ProductsDepositProductTypeTypesavingsplan:
		return "TypeSavingsPlan"
	case ProductsDepositProductTypeTypeinvestoraccount:
		return "TypeInvestorAccount"
	}
	return fmt.Sprintf("ProductsDepositProductType(%d)", pdpt)
}

// Value satisfies the driver.Valuer interface.
func (pdpt ProductsDepositProductType) Value() (driver.Value, error) {
	return pdpt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pdpt *ProductsDepositProductType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pdpt.UnmarshalText(buf)
	}
	return ErrInvalidProductsDepositProductType(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsDepositProductType is the invalid ProductsDepositProductType error.
type ErrInvalidProductsDepositProductType string

// Error satisfies the error interface.
func (err ErrInvalidProductsDepositProductType) Error() string {
	return fmt.Sprintf("invalid ProductsDepositProductType(%s)", string(err))
}

// ProductsDueDateScheduleMethod is the 'products_due_date_schedule_method' enum.
type ProductsDueDateScheduleMethod int32

// ProductsDueDateScheduleMethod values.
const (
	// ProductsDueDateScheduleMethodIntervalduedates is the 'IntervalDueDates' products_due_date_schedule_method.
	ProductsDueDateScheduleMethodIntervalduedates ProductsDueDateScheduleMethod = 1
	// ProductsDueDateScheduleMethodIntervalfixeddaysofmonth is the 'IntervalFixedDaysOfMonth' products_due_date_schedule_method.
	ProductsDueDateScheduleMethodIntervalfixeddaysofmonth ProductsDueDateScheduleMethod = 2
)

func NewProductsDueDateScheduleMethod(pddsm products.DueDateScheduleMethod) ProductsDueDateScheduleMethod {
	return ProductsDueDateScheduleMethod(pddsm + 1)
}

func (pddsm ProductsDueDateScheduleMethod) PB() products.DueDateScheduleMethod {
	return products.DueDateScheduleMethod(pddsm - 1)
}

// UnmarshalText unmarshals ProductsDueDateScheduleMethod from text.
func (pddsm *ProductsDueDateScheduleMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "IntervalDueDates":
		*pddsm = ProductsDueDateScheduleMethodIntervalduedates
	case "IntervalFixedDaysOfMonth":
		*pddsm = ProductsDueDateScheduleMethodIntervalfixeddaysofmonth
	default:
		return ErrInvalidProductsDueDateScheduleMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pddsm ProductsDueDateScheduleMethod) String() string {
	switch pddsm {
	case ProductsDueDateScheduleMethodIntervalduedates:
		return "IntervalDueDates"
	case ProductsDueDateScheduleMethodIntervalfixeddaysofmonth:
		return "IntervalFixedDaysOfMonth"
	}
	return fmt.Sprintf("ProductsDueDateScheduleMethod(%d)", pddsm)
}

// Value satisfies the driver.Valuer interface.
func (pddsm ProductsDueDateScheduleMethod) Value() (driver.Value, error) {
	return pddsm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pddsm *ProductsDueDateScheduleMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pddsm.UnmarshalText(buf)
	}
	return ErrInvalidProductsDueDateScheduleMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsDueDateScheduleMethod is the invalid ProductsDueDateScheduleMethod error.
type ErrInvalidProductsDueDateScheduleMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsDueDateScheduleMethod) Error() string {
	return fmt.Sprintf("invalid ProductsDueDateScheduleMethod(%s)", string(err))
}

// ProductsElementsRecalculationMethod is the 'products_elements_recalculation_method' enum.
type ProductsElementsRecalculationMethod int32

// ProductsElementsRecalculationMethod values.
const (
	// ProductsElementsRecalculationMethodMethodprincipalexpectedfixed is the 'MethodPrincipalExpectedFixed' products_elements_recalculation_method.
	ProductsElementsRecalculationMethodMethodprincipalexpectedfixed ProductsElementsRecalculationMethod = 1
	// ProductsElementsRecalculationMethodMethodtotalexpectedfixed is the 'MethodTotalExpectedFixed' products_elements_recalculation_method.
	ProductsElementsRecalculationMethodMethodtotalexpectedfixed ProductsElementsRecalculationMethod = 2
)

func NewProductsElementsRecalculationMethod(perm products.ElementsRecalculationMethod) ProductsElementsRecalculationMethod {
	return ProductsElementsRecalculationMethod(perm + 1)
}

func (perm ProductsElementsRecalculationMethod) PB() products.ElementsRecalculationMethod {
	return products.ElementsRecalculationMethod(perm - 1)
}

// UnmarshalText unmarshals ProductsElementsRecalculationMethod from text.
func (perm *ProductsElementsRecalculationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodPrincipalExpectedFixed":
		*perm = ProductsElementsRecalculationMethodMethodprincipalexpectedfixed
	case "MethodTotalExpectedFixed":
		*perm = ProductsElementsRecalculationMethodMethodtotalexpectedfixed
	default:
		return ErrInvalidProductsElementsRecalculationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (perm ProductsElementsRecalculationMethod) String() string {
	switch perm {
	case ProductsElementsRecalculationMethodMethodprincipalexpectedfixed:
		return "MethodPrincipalExpectedFixed"
	case ProductsElementsRecalculationMethodMethodtotalexpectedfixed:
		return "MethodTotalExpectedFixed"
	}
	return fmt.Sprintf("ProductsElementsRecalculationMethod(%d)", perm)
}

// Value satisfies the driver.Valuer interface.
func (perm ProductsElementsRecalculationMethod) Value() (driver.Value, error) {
	return perm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (perm *ProductsElementsRecalculationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return perm.UnmarshalText(buf)
	}
	return ErrInvalidProductsElementsRecalculationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsElementsRecalculationMethod is the invalid ProductsElementsRecalculationMethod error.
type ErrInvalidProductsElementsRecalculationMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsElementsRecalculationMethod) Error() string {
	return fmt.Sprintf("invalid ProductsElementsRecalculationMethod(%s)", string(err))
}

// ProductsFeeApplyDateMethod is the 'products_fee_apply_date_method' enum.
type ProductsFeeApplyDateMethod int32

// ProductsFeeApplyDateMethod values.
const (
	// ProductsFeeApplyDateMethodMonthlyfromactivation is the 'MonthlyFromActivation' products_fee_apply_date_method.
	ProductsFeeApplyDateMethodMonthlyfromactivation ProductsFeeApplyDateMethod = 1
	// ProductsFeeApplyDateMethodFirstofeverymonth is the 'FirstOfEveryMonth' products_fee_apply_date_method.
	ProductsFeeApplyDateMethodFirstofeverymonth ProductsFeeApplyDateMethod = 2
)

func NewProductsFeeApplyDateMethod(pfadm products.FeeApplyDateMethod) ProductsFeeApplyDateMethod {
	return ProductsFeeApplyDateMethod(pfadm + 1)
}

func (pfadm ProductsFeeApplyDateMethod) PB() products.FeeApplyDateMethod {
	return products.FeeApplyDateMethod(pfadm - 1)
}

// UnmarshalText unmarshals ProductsFeeApplyDateMethod from text.
func (pfadm *ProductsFeeApplyDateMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MonthlyFromActivation":
		*pfadm = ProductsFeeApplyDateMethodMonthlyfromactivation
	case "FirstOfEveryMonth":
		*pfadm = ProductsFeeApplyDateMethodFirstofeverymonth
	default:
		return ErrInvalidProductsFeeApplyDateMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pfadm ProductsFeeApplyDateMethod) String() string {
	switch pfadm {
	case ProductsFeeApplyDateMethodMonthlyfromactivation:
		return "MonthlyFromActivation"
	case ProductsFeeApplyDateMethodFirstofeverymonth:
		return "FirstOfEveryMonth"
	}
	return fmt.Sprintf("ProductsFeeApplyDateMethod(%d)", pfadm)
}

// Value satisfies the driver.Valuer interface.
func (pfadm ProductsFeeApplyDateMethod) Value() (driver.Value, error) {
	return pfadm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pfadm *ProductsFeeApplyDateMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pfadm.UnmarshalText(buf)
	}
	return ErrInvalidProductsFeeApplyDateMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsFeeApplyDateMethod is the invalid ProductsFeeApplyDateMethod error.
type ErrInvalidProductsFeeApplyDateMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsFeeApplyDateMethod) Error() string {
	return fmt.Sprintf("invalid ProductsFeeApplyDateMethod(%s)", string(err))
}

// ProductsFeeCalculationMethod is the 'products_fee_calculation_method' enum.
type ProductsFeeCalculationMethod int32

// ProductsFeeCalculationMethod values.
const (
	// ProductsFeeCalculationMethodMethodflat is the 'MethodFlat' products_fee_calculation_method.
	ProductsFeeCalculationMethodMethodflat ProductsFeeCalculationMethod = 1
	// ProductsFeeCalculationMethodMethodloanamountpercentage is the 'MethodLoanAmountPercentage' products_fee_calculation_method.
	ProductsFeeCalculationMethodMethodloanamountpercentage ProductsFeeCalculationMethod = 2
	// ProductsFeeCalculationMethodMethodrepaymentprincipalamountpercentage is the 'MethodRepaymentPrincipalAmountPercentage' products_fee_calculation_method.
	ProductsFeeCalculationMethodMethodrepaymentprincipalamountpercentage ProductsFeeCalculationMethod = 3
	// ProductsFeeCalculationMethodMethodloanamountpercentagenumberofinstallments is the 'MethodLoanAmountPercentageNumberOfInstallments' products_fee_calculation_method.
	ProductsFeeCalculationMethodMethodloanamountpercentagenumberofinstallments ProductsFeeCalculationMethod = 4
	// ProductsFeeCalculationMethodMethodflatnumberofinstallments is the 'MethodFlatNumberOfInstallments' products_fee_calculation_method.
	ProductsFeeCalculationMethodMethodflatnumberofinstallments ProductsFeeCalculationMethod = 5
)

func NewProductsFeeCalculationMethod(pfcm products.FeeCalculationMethod) ProductsFeeCalculationMethod {
	return ProductsFeeCalculationMethod(pfcm + 1)
}

func (pfcm ProductsFeeCalculationMethod) PB() products.FeeCalculationMethod {
	return products.FeeCalculationMethod(pfcm - 1)
}

// UnmarshalText unmarshals ProductsFeeCalculationMethod from text.
func (pfcm *ProductsFeeCalculationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodFlat":
		*pfcm = ProductsFeeCalculationMethodMethodflat
	case "MethodLoanAmountPercentage":
		*pfcm = ProductsFeeCalculationMethodMethodloanamountpercentage
	case "MethodRepaymentPrincipalAmountPercentage":
		*pfcm = ProductsFeeCalculationMethodMethodrepaymentprincipalamountpercentage
	case "MethodLoanAmountPercentageNumberOfInstallments":
		*pfcm = ProductsFeeCalculationMethodMethodloanamountpercentagenumberofinstallments
	case "MethodFlatNumberOfInstallments":
		*pfcm = ProductsFeeCalculationMethodMethodflatnumberofinstallments
	default:
		return ErrInvalidProductsFeeCalculationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pfcm ProductsFeeCalculationMethod) String() string {
	switch pfcm {
	case ProductsFeeCalculationMethodMethodflat:
		return "MethodFlat"
	case ProductsFeeCalculationMethodMethodloanamountpercentage:
		return "MethodLoanAmountPercentage"
	case ProductsFeeCalculationMethodMethodrepaymentprincipalamountpercentage:
		return "MethodRepaymentPrincipalAmountPercentage"
	case ProductsFeeCalculationMethodMethodloanamountpercentagenumberofinstallments:
		return "MethodLoanAmountPercentageNumberOfInstallments"
	case ProductsFeeCalculationMethodMethodflatnumberofinstallments:
		return "MethodFlatNumberOfInstallments"
	}
	return fmt.Sprintf("ProductsFeeCalculationMethod(%d)", pfcm)
}

// Value satisfies the driver.Valuer interface.
func (pfcm ProductsFeeCalculationMethod) Value() (driver.Value, error) {
	return pfcm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pfcm *ProductsFeeCalculationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pfcm.UnmarshalText(buf)
	}
	return ErrInvalidProductsFeeCalculationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsFeeCalculationMethod is the invalid ProductsFeeCalculationMethod error.
type ErrInvalidProductsFeeCalculationMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsFeeCalculationMethod) Error() string {
	return fmt.Sprintf("invalid ProductsFeeCalculationMethod(%s)", string(err))
}

// ProductsFeeTrigger is the 'products_fee_trigger' enum.
type ProductsFeeTrigger int32

// ProductsFeeTrigger values.
const (
	// ProductsFeeTriggerManual is the 'Manual' products_fee_trigger.
	ProductsFeeTriggerManual ProductsFeeTrigger = 1
	// ProductsFeeTriggerManualplanned is the 'ManualPlanned' products_fee_trigger.
	ProductsFeeTriggerManualplanned ProductsFeeTrigger = 2
	// ProductsFeeTriggerDisbursement is the 'Disbursement' products_fee_trigger.
	ProductsFeeTriggerDisbursement ProductsFeeTrigger = 3
	// ProductsFeeTriggerCapitalizeddisbursement is the 'CapitalizedDisbursement' products_fee_trigger.
	ProductsFeeTriggerCapitalizeddisbursement ProductsFeeTrigger = 4
	// ProductsFeeTriggerUpfrontdisbursement is the 'UpfrontDisbursement' products_fee_trigger.
	ProductsFeeTriggerUpfrontdisbursement ProductsFeeTrigger = 5
	// ProductsFeeTriggerLaterepayment is the 'LateRepayment' products_fee_trigger.
	ProductsFeeTriggerLaterepayment ProductsFeeTrigger = 6
	// ProductsFeeTriggerMonthlyfee is the 'MonthlyFee' products_fee_trigger.
	ProductsFeeTriggerMonthlyfee ProductsFeeTrigger = 7
	// ProductsFeeTriggerPaymentdue is the 'PaymentDue' products_fee_trigger.
	ProductsFeeTriggerPaymentdue ProductsFeeTrigger = 8
	// ProductsFeeTriggerPaymentdueappliedonduedates is the 'PaymentDueAppliedOnDueDates' products_fee_trigger.
	ProductsFeeTriggerPaymentdueappliedonduedates ProductsFeeTrigger = 9
)

func NewProductsFeeTrigger(pft products.FeeTrigger) ProductsFeeTrigger {
	return ProductsFeeTrigger(pft + 1)
}

func (pft ProductsFeeTrigger) PB() products.FeeTrigger {
	return products.FeeTrigger(pft - 1)
}

// UnmarshalText unmarshals ProductsFeeTrigger from text.
func (pft *ProductsFeeTrigger) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Manual":
		*pft = ProductsFeeTriggerManual
	case "ManualPlanned":
		*pft = ProductsFeeTriggerManualplanned
	case "Disbursement":
		*pft = ProductsFeeTriggerDisbursement
	case "CapitalizedDisbursement":
		*pft = ProductsFeeTriggerCapitalizeddisbursement
	case "UpfrontDisbursement":
		*pft = ProductsFeeTriggerUpfrontdisbursement
	case "LateRepayment":
		*pft = ProductsFeeTriggerLaterepayment
	case "MonthlyFee":
		*pft = ProductsFeeTriggerMonthlyfee
	case "PaymentDue":
		*pft = ProductsFeeTriggerPaymentdue
	case "PaymentDueAppliedOnDueDates":
		*pft = ProductsFeeTriggerPaymentdueappliedonduedates
	default:
		return ErrInvalidProductsFeeTrigger(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pft ProductsFeeTrigger) String() string {
	switch pft {
	case ProductsFeeTriggerManual:
		return "Manual"
	case ProductsFeeTriggerManualplanned:
		return "ManualPlanned"
	case ProductsFeeTriggerDisbursement:
		return "Disbursement"
	case ProductsFeeTriggerCapitalizeddisbursement:
		return "CapitalizedDisbursement"
	case ProductsFeeTriggerUpfrontdisbursement:
		return "UpfrontDisbursement"
	case ProductsFeeTriggerLaterepayment:
		return "LateRepayment"
	case ProductsFeeTriggerMonthlyfee:
		return "MonthlyFee"
	case ProductsFeeTriggerPaymentdue:
		return "PaymentDue"
	case ProductsFeeTriggerPaymentdueappliedonduedates:
		return "PaymentDueAppliedOnDueDates"
	}
	return fmt.Sprintf("ProductsFeeTrigger(%d)", pft)
}

// Value satisfies the driver.Valuer interface.
func (pft ProductsFeeTrigger) Value() (driver.Value, error) {
	return pft.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pft *ProductsFeeTrigger) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pft.UnmarshalText(buf)
	}
	return ErrInvalidProductsFeeTrigger(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsFeeTrigger is the invalid ProductsFeeTrigger error.
type ErrInvalidProductsFeeTrigger string

// Error satisfies the error interface.
func (err ErrInvalidProductsFeeTrigger) Error() string {
	return fmt.Sprintf("invalid ProductsFeeTrigger(%s)", string(err))
}

// ProductsFinancialResource is the 'products_financial_resource' enum.
type ProductsFinancialResource int32

// ProductsFinancialResource values.
const (
	// ProductsFinancialResourceResourceportfoliocontrol is the 'ResourcePortfolioControl' products_financial_resource.
	ProductsFinancialResourceResourceportfoliocontrol ProductsFinancialResource = 1
	// ProductsFinancialResourceResourcefundsource is the 'ResourceFundSource' products_financial_resource.
	ProductsFinancialResourceResourcefundsource ProductsFinancialResource = 2
	// ProductsFinancialResourceResourcewriteoffexpense is the 'ResourceWriteOffExpense' products_financial_resource.
	ProductsFinancialResourceResourcewriteoffexpense ProductsFinancialResource = 3
	// ProductsFinancialResourceResourceinterestincome is the 'ResourceInterestIncome' products_financial_resource.
	ProductsFinancialResourceResourceinterestincome ProductsFinancialResource = 4
	// ProductsFinancialResourceResourcetaxespayable is the 'ResourceTaxesPayable' products_financial_resource.
	ProductsFinancialResourceResourcetaxespayable ProductsFinancialResource = 5
	// ProductsFinancialResourceResourcefeeincome is the 'ResourceFeeIncome' products_financial_resource.
	ProductsFinancialResourceResourcefeeincome ProductsFinancialResource = 6
	// ProductsFinancialResourceResourcepenaltyincome is the 'ResourcePenaltyIncome' products_financial_resource.
	ProductsFinancialResourceResourcepenaltyincome ProductsFinancialResource = 7
	// ProductsFinancialResourceResourcenegativeinterestpayablereceivable is the 'ResourceNegativeInterestPayableReceivable' products_financial_resource.
	ProductsFinancialResourceResourcenegativeinterestpayablereceivable ProductsFinancialResource = 8
	// ProductsFinancialResourceResourcenegativeinterestpayable is the 'ResourceNegativeInterestPayable' products_financial_resource.
	ProductsFinancialResourceResourcenegativeinterestpayable ProductsFinancialResource = 9
	// ProductsFinancialResourceResourceinterestreceivable is the 'ResourceInterestReceivable' products_financial_resource.
	ProductsFinancialResourceResourceinterestreceivable ProductsFinancialResource = 10
	// ProductsFinancialResourceResourcefeereceivable is the 'ResourceFeeReceivable' products_financial_resource.
	ProductsFinancialResourceResourcefeereceivable ProductsFinancialResource = 11
	// ProductsFinancialResourceResourcepenaltyreceivable is the 'ResourcePenaltyReceivable' products_financial_resource.
	ProductsFinancialResourceResourcepenaltyreceivable ProductsFinancialResource = 12
	// ProductsFinancialResourceResourcetaxesreceivable is the 'ResourceTaxesReceivable' products_financial_resource.
	ProductsFinancialResourceResourcetaxesreceivable ProductsFinancialResource = 13
	// ProductsFinancialResourceResourcedeferredinterestsincome is the 'ResourceDeferredInterestsIncome' products_financial_resource.
	ProductsFinancialResourceResourcedeferredinterestsincome ProductsFinancialResource = 14
	// ProductsFinancialResourceResourcedeferredfeeincome is the 'ResourceDeferredFeeIncome' products_financial_resource.
	ProductsFinancialResourceResourcedeferredfeeincome ProductsFinancialResource = 15
	// ProductsFinancialResourceResourcedeferredtaxes is the 'ResourceDeferredTaxes' products_financial_resource.
	ProductsFinancialResourceResourcedeferredtaxes ProductsFinancialResource = 16
	// ProductsFinancialResourceResourcedepositreference is the 'ResourceDepositReference' products_financial_resource.
	ProductsFinancialResourceResourcedepositreference ProductsFinancialResource = 17
	// ProductsFinancialResourceResourcesavingscontrol is the 'ResourceSavingsControl' products_financial_resource.
	ProductsFinancialResourceResourcesavingscontrol ProductsFinancialResource = 18
	// ProductsFinancialResourceResourceinterestexpense is the 'ResourceInterestExpense' products_financial_resource.
	ProductsFinancialResourceResourceinterestexpense ProductsFinancialResource = 19
	// ProductsFinancialResourceResourceinterestpayable is the 'ResourceInterestPayable' products_financial_resource.
	ProductsFinancialResourceResourceinterestpayable ProductsFinancialResource = 20
	// ProductsFinancialResourceResourcenegativeinterestincome is the 'ResourceNegativeInterestIncome' products_financial_resource.
	ProductsFinancialResourceResourcenegativeinterestincome ProductsFinancialResource = 21
	// ProductsFinancialResourceResourcenegativeinterestreceivable is the 'ResourceNegativeInterestReceivable' products_financial_resource.
	ProductsFinancialResourceResourcenegativeinterestreceivable ProductsFinancialResource = 22
	// ProductsFinancialResourceResourceoverdraftportfoliocontrol is the 'ResourceOverdraftPortfolioControl' products_financial_resource.
	ProductsFinancialResourceResourceoverdraftportfoliocontrol ProductsFinancialResource = 23
	// ProductsFinancialResourceResourceoverdraftinterestincome is the 'ResourceOverdraftInterestIncome' products_financial_resource.
	ProductsFinancialResourceResourceoverdraftinterestincome ProductsFinancialResource = 24
	// ProductsFinancialResourceResourceoverdraftwriteoffexpense is the 'ResourceOverdraftWriteOffExpense' products_financial_resource.
	ProductsFinancialResourceResourceoverdraftwriteoffexpense ProductsFinancialResource = 25
	// ProductsFinancialResourceResourceoverdraftinterestreceivable is the 'ResourceOverdraftInterestReceivable' products_financial_resource.
	ProductsFinancialResourceResourceoverdraftinterestreceivable ProductsFinancialResource = 26
	// ProductsFinancialResourceResourceinterbranchtransfer is the 'ResourceInterBranchTransfer' products_financial_resource.
	ProductsFinancialResourceResourceinterbranchtransfer ProductsFinancialResource = 27
)

func NewProductsFinancialResource(pfr products.FinancialResource) ProductsFinancialResource {
	return ProductsFinancialResource(pfr + 1)
}

func (pfr ProductsFinancialResource) PB() products.FinancialResource {
	return products.FinancialResource(pfr - 1)
}

// UnmarshalText unmarshals ProductsFinancialResource from text.
func (pfr *ProductsFinancialResource) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "ResourcePortfolioControl":
		*pfr = ProductsFinancialResourceResourceportfoliocontrol
	case "ResourceFundSource":
		*pfr = ProductsFinancialResourceResourcefundsource
	case "ResourceWriteOffExpense":
		*pfr = ProductsFinancialResourceResourcewriteoffexpense
	case "ResourceInterestIncome":
		*pfr = ProductsFinancialResourceResourceinterestincome
	case "ResourceTaxesPayable":
		*pfr = ProductsFinancialResourceResourcetaxespayable
	case "ResourceFeeIncome":
		*pfr = ProductsFinancialResourceResourcefeeincome
	case "ResourcePenaltyIncome":
		*pfr = ProductsFinancialResourceResourcepenaltyincome
	case "ResourceNegativeInterestPayableReceivable":
		*pfr = ProductsFinancialResourceResourcenegativeinterestpayablereceivable
	case "ResourceNegativeInterestPayable":
		*pfr = ProductsFinancialResourceResourcenegativeinterestpayable
	case "ResourceInterestReceivable":
		*pfr = ProductsFinancialResourceResourceinterestreceivable
	case "ResourceFeeReceivable":
		*pfr = ProductsFinancialResourceResourcefeereceivable
	case "ResourcePenaltyReceivable":
		*pfr = ProductsFinancialResourceResourcepenaltyreceivable
	case "ResourceTaxesReceivable":
		*pfr = ProductsFinancialResourceResourcetaxesreceivable
	case "ResourceDeferredInterestsIncome":
		*pfr = ProductsFinancialResourceResourcedeferredinterestsincome
	case "ResourceDeferredFeeIncome":
		*pfr = ProductsFinancialResourceResourcedeferredfeeincome
	case "ResourceDeferredTaxes":
		*pfr = ProductsFinancialResourceResourcedeferredtaxes
	case "ResourceDepositReference":
		*pfr = ProductsFinancialResourceResourcedepositreference
	case "ResourceSavingsControl":
		*pfr = ProductsFinancialResourceResourcesavingscontrol
	case "ResourceInterestExpense":
		*pfr = ProductsFinancialResourceResourceinterestexpense
	case "ResourceInterestPayable":
		*pfr = ProductsFinancialResourceResourceinterestpayable
	case "ResourceNegativeInterestIncome":
		*pfr = ProductsFinancialResourceResourcenegativeinterestincome
	case "ResourceNegativeInterestReceivable":
		*pfr = ProductsFinancialResourceResourcenegativeinterestreceivable
	case "ResourceOverdraftPortfolioControl":
		*pfr = ProductsFinancialResourceResourceoverdraftportfoliocontrol
	case "ResourceOverdraftInterestIncome":
		*pfr = ProductsFinancialResourceResourceoverdraftinterestincome
	case "ResourceOverdraftWriteOffExpense":
		*pfr = ProductsFinancialResourceResourceoverdraftwriteoffexpense
	case "ResourceOverdraftInterestReceivable":
		*pfr = ProductsFinancialResourceResourceoverdraftinterestreceivable
	case "ResourceInterBranchTransfer":
		*pfr = ProductsFinancialResourceResourceinterbranchtransfer
	default:
		return ErrInvalidProductsFinancialResource(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pfr ProductsFinancialResource) String() string {
	switch pfr {
	case ProductsFinancialResourceResourceportfoliocontrol:
		return "ResourcePortfolioControl"
	case ProductsFinancialResourceResourcefundsource:
		return "ResourceFundSource"
	case ProductsFinancialResourceResourcewriteoffexpense:
		return "ResourceWriteOffExpense"
	case ProductsFinancialResourceResourceinterestincome:
		return "ResourceInterestIncome"
	case ProductsFinancialResourceResourcetaxespayable:
		return "ResourceTaxesPayable"
	case ProductsFinancialResourceResourcefeeincome:
		return "ResourceFeeIncome"
	case ProductsFinancialResourceResourcepenaltyincome:
		return "ResourcePenaltyIncome"
	case ProductsFinancialResourceResourcenegativeinterestpayablereceivable:
		return "ResourceNegativeInterestPayableReceivable"
	case ProductsFinancialResourceResourcenegativeinterestpayable:
		return "ResourceNegativeInterestPayable"
	case ProductsFinancialResourceResourceinterestreceivable:
		return "ResourceInterestReceivable"
	case ProductsFinancialResourceResourcefeereceivable:
		return "ResourceFeeReceivable"
	case ProductsFinancialResourceResourcepenaltyreceivable:
		return "ResourcePenaltyReceivable"
	case ProductsFinancialResourceResourcetaxesreceivable:
		return "ResourceTaxesReceivable"
	case ProductsFinancialResourceResourcedeferredinterestsincome:
		return "ResourceDeferredInterestsIncome"
	case ProductsFinancialResourceResourcedeferredfeeincome:
		return "ResourceDeferredFeeIncome"
	case ProductsFinancialResourceResourcedeferredtaxes:
		return "ResourceDeferredTaxes"
	case ProductsFinancialResourceResourcedepositreference:
		return "ResourceDepositReference"
	case ProductsFinancialResourceResourcesavingscontrol:
		return "ResourceSavingsControl"
	case ProductsFinancialResourceResourceinterestexpense:
		return "ResourceInterestExpense"
	case ProductsFinancialResourceResourceinterestpayable:
		return "ResourceInterestPayable"
	case ProductsFinancialResourceResourcenegativeinterestincome:
		return "ResourceNegativeInterestIncome"
	case ProductsFinancialResourceResourcenegativeinterestreceivable:
		return "ResourceNegativeInterestReceivable"
	case ProductsFinancialResourceResourceoverdraftportfoliocontrol:
		return "ResourceOverdraftPortfolioControl"
	case ProductsFinancialResourceResourceoverdraftinterestincome:
		return "ResourceOverdraftInterestIncome"
	case ProductsFinancialResourceResourceoverdraftwriteoffexpense:
		return "ResourceOverdraftWriteOffExpense"
	case ProductsFinancialResourceResourceoverdraftinterestreceivable:
		return "ResourceOverdraftInterestReceivable"
	case ProductsFinancialResourceResourceinterbranchtransfer:
		return "ResourceInterBranchTransfer"
	}
	return fmt.Sprintf("ProductsFinancialResource(%d)", pfr)
}

// Value satisfies the driver.Valuer interface.
func (pfr ProductsFinancialResource) Value() (driver.Value, error) {
	return pfr.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pfr *ProductsFinancialResource) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pfr.UnmarshalText(buf)
	}
	return ErrInvalidProductsFinancialResource(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsFinancialResource is the invalid ProductsFinancialResource error.
type ErrInvalidProductsFinancialResource string

// Error satisfies the error interface.
func (err ErrInvalidProductsFinancialResource) Error() string {
	return fmt.Sprintf("invalid ProductsFinancialResource(%s)", string(err))
}

// ProductsFuturePaymentsAcceptance is the 'products_future_payments_acceptance' enum.
type ProductsFuturePaymentsAcceptance int32

// ProductsFuturePaymentsAcceptance values.
const (
	// ProductsFuturePaymentsAcceptanceNofuturepayments is the 'NoFuturePayments' products_future_payments_acceptance.
	ProductsFuturePaymentsAcceptanceNofuturepayments ProductsFuturePaymentsAcceptance = 1
	// ProductsFuturePaymentsAcceptanceAcceptanceacceptfuturepayments is the 'AcceptanceAcceptFuturePayments' products_future_payments_acceptance.
	ProductsFuturePaymentsAcceptanceAcceptanceacceptfuturepayments ProductsFuturePaymentsAcceptance = 2
	// ProductsFuturePaymentsAcceptanceAcceptanceacceptoverpayments is the 'AcceptanceAcceptOverpayments' products_future_payments_acceptance.
	ProductsFuturePaymentsAcceptanceAcceptanceacceptoverpayments ProductsFuturePaymentsAcceptance = 3
)

func NewProductsFuturePaymentsAcceptance(pfpa products.FuturePaymentsAcceptance) ProductsFuturePaymentsAcceptance {
	return ProductsFuturePaymentsAcceptance(pfpa + 1)
}

func (pfpa ProductsFuturePaymentsAcceptance) PB() products.FuturePaymentsAcceptance {
	return products.FuturePaymentsAcceptance(pfpa - 1)
}

// UnmarshalText unmarshals ProductsFuturePaymentsAcceptance from text.
func (pfpa *ProductsFuturePaymentsAcceptance) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "NoFuturePayments":
		*pfpa = ProductsFuturePaymentsAcceptanceNofuturepayments
	case "AcceptanceAcceptFuturePayments":
		*pfpa = ProductsFuturePaymentsAcceptanceAcceptanceacceptfuturepayments
	case "AcceptanceAcceptOverpayments":
		*pfpa = ProductsFuturePaymentsAcceptanceAcceptanceacceptoverpayments
	default:
		return ErrInvalidProductsFuturePaymentsAcceptance(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pfpa ProductsFuturePaymentsAcceptance) String() string {
	switch pfpa {
	case ProductsFuturePaymentsAcceptanceNofuturepayments:
		return "NoFuturePayments"
	case ProductsFuturePaymentsAcceptanceAcceptanceacceptfuturepayments:
		return "AcceptanceAcceptFuturePayments"
	case ProductsFuturePaymentsAcceptanceAcceptanceacceptoverpayments:
		return "AcceptanceAcceptOverpayments"
	}
	return fmt.Sprintf("ProductsFuturePaymentsAcceptance(%d)", pfpa)
}

// Value satisfies the driver.Valuer interface.
func (pfpa ProductsFuturePaymentsAcceptance) Value() (driver.Value, error) {
	return pfpa.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pfpa *ProductsFuturePaymentsAcceptance) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pfpa.UnmarshalText(buf)
	}
	return ErrInvalidProductsFuturePaymentsAcceptance(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsFuturePaymentsAcceptance is the invalid ProductsFuturePaymentsAcceptance error.
type ErrInvalidProductsFuturePaymentsAcceptance string

// Error satisfies the error interface.
func (err ErrInvalidProductsFuturePaymentsAcceptance) Error() string {
	return fmt.Sprintf("invalid ProductsFuturePaymentsAcceptance(%s)", string(err))
}

// ProductsGracePeriodType is the 'products_grace_period_type' enum.
type ProductsGracePeriodType int32

// ProductsGracePeriodType values.
const (
	// ProductsGracePeriodTypeNograceperiod is the 'NoGracePeriod' products_grace_period_type.
	ProductsGracePeriodTypeNograceperiod ProductsGracePeriodType = 1
	// ProductsGracePeriodTypePayinterestonly is the 'PayInterestOnly' products_grace_period_type.
	ProductsGracePeriodTypePayinterestonly ProductsGracePeriodType = 2
	// ProductsGracePeriodTypeInterestforgiveness is the 'InterestForgiveness' products_grace_period_type.
	ProductsGracePeriodTypeInterestforgiveness ProductsGracePeriodType = 3
)

func NewProductsGracePeriodType(pgpt products.GracePeriodType) ProductsGracePeriodType {
	return ProductsGracePeriodType(pgpt + 1)
}

func (pgpt ProductsGracePeriodType) PB() products.GracePeriodType {
	return products.GracePeriodType(pgpt - 1)
}

// UnmarshalText unmarshals ProductsGracePeriodType from text.
func (pgpt *ProductsGracePeriodType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "NoGracePeriod":
		*pgpt = ProductsGracePeriodTypeNograceperiod
	case "PayInterestOnly":
		*pgpt = ProductsGracePeriodTypePayinterestonly
	case "InterestForgiveness":
		*pgpt = ProductsGracePeriodTypeInterestforgiveness
	default:
		return ErrInvalidProductsGracePeriodType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pgpt ProductsGracePeriodType) String() string {
	switch pgpt {
	case ProductsGracePeriodTypeNograceperiod:
		return "NoGracePeriod"
	case ProductsGracePeriodTypePayinterestonly:
		return "PayInterestOnly"
	case ProductsGracePeriodTypeInterestforgiveness:
		return "InterestForgiveness"
	}
	return fmt.Sprintf("ProductsGracePeriodType(%d)", pgpt)
}

// Value satisfies the driver.Valuer interface.
func (pgpt ProductsGracePeriodType) Value() (driver.Value, error) {
	return pgpt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pgpt *ProductsGracePeriodType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pgpt.UnmarshalText(buf)
	}
	return ErrInvalidProductsGracePeriodType(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsGracePeriodType is the invalid ProductsGracePeriodType error.
type ErrInvalidProductsGracePeriodType string

// Error satisfies the error interface.
func (err ErrInvalidProductsGracePeriodType) Error() string {
	return fmt.Sprintf("invalid ProductsGracePeriodType(%s)", string(err))
}

// ProductsIDGeneratorType is the 'products_id_generator_type' enum.
type ProductsIDGeneratorType int32

// ProductsIDGeneratorType values.
const (
	// ProductsIDGeneratorTypeTypeincrementalnumber is the 'TypeIncrementalNumber' products_id_generator_type.
	ProductsIDGeneratorTypeTypeincrementalnumber ProductsIDGeneratorType = 1
	// ProductsIDGeneratorTypeTyperandompattern is the 'TypeRandomPattern' products_id_generator_type.
	ProductsIDGeneratorTypeTyperandompattern ProductsIDGeneratorType = 2
)

func NewProductsIDGeneratorType(pgt products.IDGeneratorType) ProductsIDGeneratorType {
	return ProductsIDGeneratorType(pgt + 1)
}

func (pgt ProductsIDGeneratorType) PB() products.IDGeneratorType {
	return products.IDGeneratorType(pgt - 1)
}

// UnmarshalText unmarshals ProductsIDGeneratorType from text.
func (pgt *ProductsIDGeneratorType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "TypeIncrementalNumber":
		*pgt = ProductsIDGeneratorTypeTypeincrementalnumber
	case "TypeRandomPattern":
		*pgt = ProductsIDGeneratorTypeTyperandompattern
	default:
		return ErrInvalidProductsIDGeneratorType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pgt ProductsIDGeneratorType) String() string {
	switch pgt {
	case ProductsIDGeneratorTypeTypeincrementalnumber:
		return "TypeIncrementalNumber"
	case ProductsIDGeneratorTypeTyperandompattern:
		return "TypeRandomPattern"
	}
	return fmt.Sprintf("ProductsIDGeneratorType(%d)", pgt)
}

// Value satisfies the driver.Valuer interface.
func (pgt ProductsIDGeneratorType) Value() (driver.Value, error) {
	return pgt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pgt *ProductsIDGeneratorType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pgt.UnmarshalText(buf)
	}
	return ErrInvalidProductsIDGeneratorType(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsIDGeneratorType is the invalid ProductsIDGeneratorType error.
type ErrInvalidProductsIDGeneratorType string

// Error satisfies the error interface.
func (err ErrInvalidProductsIDGeneratorType) Error() string {
	return fmt.Sprintf("invalid ProductsIDGeneratorType(%s)", string(err))
}

// ProductsInitialAccountState is the 'products_initial_account_state' enum.
type ProductsInitialAccountState int32

// ProductsInitialAccountState values.
const (
	// ProductsInitialAccountStateStatepartialapplication is the 'StatePartialApplication' products_initial_account_state.
	ProductsInitialAccountStateStatepartialapplication ProductsInitialAccountState = 1
	// ProductsInitialAccountStateStatependingapproval is the 'StatePendingApproval' products_initial_account_state.
	ProductsInitialAccountStateStatependingapproval ProductsInitialAccountState = 2
	// ProductsInitialAccountStateStateapproved is the 'StateApproved' products_initial_account_state.
	ProductsInitialAccountStateStateapproved ProductsInitialAccountState = 3
	// ProductsInitialAccountStateStateactive is the 'StateActive' products_initial_account_state.
	ProductsInitialAccountStateStateactive ProductsInitialAccountState = 4
	// ProductsInitialAccountStateStateactiveinarrears is the 'StateActiveInArrears' products_initial_account_state.
	ProductsInitialAccountStateStateactiveinarrears ProductsInitialAccountState = 5
	// ProductsInitialAccountStateStateclosed is the 'StateClosed' products_initial_account_state.
	ProductsInitialAccountStateStateclosed ProductsInitialAccountState = 6
)

func NewProductsInitialAccountState(pias products.InitialAccountState) ProductsInitialAccountState {
	return ProductsInitialAccountState(pias + 1)
}

func (pias ProductsInitialAccountState) PB() products.InitialAccountState {
	return products.InitialAccountState(pias - 1)
}

// UnmarshalText unmarshals ProductsInitialAccountState from text.
func (pias *ProductsInitialAccountState) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "StatePartialApplication":
		*pias = ProductsInitialAccountStateStatepartialapplication
	case "StatePendingApproval":
		*pias = ProductsInitialAccountStateStatependingapproval
	case "StateApproved":
		*pias = ProductsInitialAccountStateStateapproved
	case "StateActive":
		*pias = ProductsInitialAccountStateStateactive
	case "StateActiveInArrears":
		*pias = ProductsInitialAccountStateStateactiveinarrears
	case "StateClosed":
		*pias = ProductsInitialAccountStateStateclosed
	default:
		return ErrInvalidProductsInitialAccountState(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pias ProductsInitialAccountState) String() string {
	switch pias {
	case ProductsInitialAccountStateStatepartialapplication:
		return "StatePartialApplication"
	case ProductsInitialAccountStateStatependingapproval:
		return "StatePendingApproval"
	case ProductsInitialAccountStateStateapproved:
		return "StateApproved"
	case ProductsInitialAccountStateStateactive:
		return "StateActive"
	case ProductsInitialAccountStateStateactiveinarrears:
		return "StateActiveInArrears"
	case ProductsInitialAccountStateStateclosed:
		return "StateClosed"
	}
	return fmt.Sprintf("ProductsInitialAccountState(%d)", pias)
}

// Value satisfies the driver.Valuer interface.
func (pias ProductsInitialAccountState) Value() (driver.Value, error) {
	return pias.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pias *ProductsInitialAccountState) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pias.UnmarshalText(buf)
	}
	return ErrInvalidProductsInitialAccountState(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsInitialAccountState is the invalid ProductsInitialAccountState error.
type ErrInvalidProductsInitialAccountState string

// Error satisfies the error interface.
func (err ErrInvalidProductsInitialAccountState) Error() string {
	return fmt.Sprintf("invalid ProductsInitialAccountState(%s)", string(err))
}

// ProductsInterestAccrued is the 'products_interest_accrued' enum.
type ProductsInterestAccrued int32

// ProductsInterestAccrued values.
const (
	// ProductsInterestAccruedNever is the 'Never' products_interest_accrued.
	ProductsInterestAccruedNever ProductsInterestAccrued = 1
	// ProductsInterestAccruedDaily is the 'Daily' products_interest_accrued.
	ProductsInterestAccruedDaily ProductsInterestAccrued = 2
	// ProductsInterestAccruedEndofmonth is the 'EndOfMonth' products_interest_accrued.
	ProductsInterestAccruedEndofmonth ProductsInterestAccrued = 3
)

func NewProductsInterestAccrued(pia products.InterestAccrued) ProductsInterestAccrued {
	return ProductsInterestAccrued(pia + 1)
}

func (pia ProductsInterestAccrued) PB() products.InterestAccrued {
	return products.InterestAccrued(pia - 1)
}

// UnmarshalText unmarshals ProductsInterestAccrued from text.
func (pia *ProductsInterestAccrued) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Never":
		*pia = ProductsInterestAccruedNever
	case "Daily":
		*pia = ProductsInterestAccruedDaily
	case "EndOfMonth":
		*pia = ProductsInterestAccruedEndofmonth
	default:
		return ErrInvalidProductsInterestAccrued(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pia ProductsInterestAccrued) String() string {
	switch pia {
	case ProductsInterestAccruedNever:
		return "Never"
	case ProductsInterestAccruedDaily:
		return "Daily"
	case ProductsInterestAccruedEndofmonth:
		return "EndOfMonth"
	}
	return fmt.Sprintf("ProductsInterestAccrued(%d)", pia)
}

// Value satisfies the driver.Valuer interface.
func (pia ProductsInterestAccrued) Value() (driver.Value, error) {
	return pia.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pia *ProductsInterestAccrued) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pia.UnmarshalText(buf)
	}
	return ErrInvalidProductsInterestAccrued(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsInterestAccrued is the invalid ProductsInterestAccrued error.
type ErrInvalidProductsInterestAccrued string

// Error satisfies the error interface.
func (err ErrInvalidProductsInterestAccrued) Error() string {
	return fmt.Sprintf("invalid ProductsInterestAccrued(%s)", string(err))
}

// ProductsInterestApplicationMethod is the 'products_interest_application_method' enum.
type ProductsInterestApplicationMethod int32

// ProductsInterestApplicationMethod values.
const (
	// ProductsInterestApplicationMethodMethodafterdisbursement is the 'MethodAfterDisbursement' products_interest_application_method.
	ProductsInterestApplicationMethodMethodafterdisbursement ProductsInterestApplicationMethod = 1
	// ProductsInterestApplicationMethodMethodrepaymentduedate is the 'MethodRepaymentDueDate' products_interest_application_method.
	ProductsInterestApplicationMethodMethodrepaymentduedate ProductsInterestApplicationMethod = 2
)

func NewProductsInterestApplicationMethod(piam products.InterestApplicationMethod) ProductsInterestApplicationMethod {
	return ProductsInterestApplicationMethod(piam + 1)
}

func (piam ProductsInterestApplicationMethod) PB() products.InterestApplicationMethod {
	return products.InterestApplicationMethod(piam - 1)
}

// UnmarshalText unmarshals ProductsInterestApplicationMethod from text.
func (piam *ProductsInterestApplicationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodAfterDisbursement":
		*piam = ProductsInterestApplicationMethodMethodafterdisbursement
	case "MethodRepaymentDueDate":
		*piam = ProductsInterestApplicationMethodMethodrepaymentduedate
	default:
		return ErrInvalidProductsInterestApplicationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (piam ProductsInterestApplicationMethod) String() string {
	switch piam {
	case ProductsInterestApplicationMethodMethodafterdisbursement:
		return "MethodAfterDisbursement"
	case ProductsInterestApplicationMethodMethodrepaymentduedate:
		return "MethodRepaymentDueDate"
	}
	return fmt.Sprintf("ProductsInterestApplicationMethod(%d)", piam)
}

// Value satisfies the driver.Valuer interface.
func (piam ProductsInterestApplicationMethod) Value() (driver.Value, error) {
	return piam.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (piam *ProductsInterestApplicationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return piam.UnmarshalText(buf)
	}
	return ErrInvalidProductsInterestApplicationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsInterestApplicationMethod is the invalid ProductsInterestApplicationMethod error.
type ErrInvalidProductsInterestApplicationMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsInterestApplicationMethod) Error() string {
	return fmt.Sprintf("invalid ProductsInterestApplicationMethod(%s)", string(err))
}

// ProductsInterestCalculationBalance is the 'products_interest_calculation_balance' enum.
type ProductsInterestCalculationBalance int32

// ProductsInterestCalculationBalance values.
const (
	// ProductsInterestCalculationBalanceBalanceminimum is the 'BalanceMinimum' products_interest_calculation_balance.
	ProductsInterestCalculationBalanceBalanceminimum ProductsInterestCalculationBalance = 1
	// ProductsInterestCalculationBalanceBalanceaverage is the 'BalanceAverage' products_interest_calculation_balance.
	ProductsInterestCalculationBalanceBalanceaverage ProductsInterestCalculationBalance = 2
	// ProductsInterestCalculationBalanceBalanceendofday is the 'BalanceEndOfDay' products_interest_calculation_balance.
	ProductsInterestCalculationBalanceBalanceendofday ProductsInterestCalculationBalance = 3
	// ProductsInterestCalculationBalanceBalanceminimumtoendofday is the 'BalanceMinimumToEndOfDay' products_interest_calculation_balance.
	ProductsInterestCalculationBalanceBalanceminimumtoendofday ProductsInterestCalculationBalance = 4
)

func NewProductsInterestCalculationBalance(picb products.InterestCalculationBalance) ProductsInterestCalculationBalance {
	return ProductsInterestCalculationBalance(picb + 1)
}

func (picb ProductsInterestCalculationBalance) PB() products.InterestCalculationBalance {
	return products.InterestCalculationBalance(picb - 1)
}

// UnmarshalText unmarshals ProductsInterestCalculationBalance from text.
func (picb *ProductsInterestCalculationBalance) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "BalanceMinimum":
		*picb = ProductsInterestCalculationBalanceBalanceminimum
	case "BalanceAverage":
		*picb = ProductsInterestCalculationBalanceBalanceaverage
	case "BalanceEndOfDay":
		*picb = ProductsInterestCalculationBalanceBalanceendofday
	case "BalanceMinimumToEndOfDay":
		*picb = ProductsInterestCalculationBalanceBalanceminimumtoendofday
	default:
		return ErrInvalidProductsInterestCalculationBalance(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (picb ProductsInterestCalculationBalance) String() string {
	switch picb {
	case ProductsInterestCalculationBalanceBalanceminimum:
		return "BalanceMinimum"
	case ProductsInterestCalculationBalanceBalanceaverage:
		return "BalanceAverage"
	case ProductsInterestCalculationBalanceBalanceendofday:
		return "BalanceEndOfDay"
	case ProductsInterestCalculationBalanceBalanceminimumtoendofday:
		return "BalanceMinimumToEndOfDay"
	}
	return fmt.Sprintf("ProductsInterestCalculationBalance(%d)", picb)
}

// Value satisfies the driver.Valuer interface.
func (picb ProductsInterestCalculationBalance) Value() (driver.Value, error) {
	return picb.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (picb *ProductsInterestCalculationBalance) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return picb.UnmarshalText(buf)
	}
	return ErrInvalidProductsInterestCalculationBalance(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsInterestCalculationBalance is the invalid ProductsInterestCalculationBalance error.
type ErrInvalidProductsInterestCalculationBalance string

// Error satisfies the error interface.
func (err ErrInvalidProductsInterestCalculationBalance) Error() string {
	return fmt.Sprintf("invalid ProductsInterestCalculationBalance(%s)", string(err))
}

// ProductsInterestCalculationMethod is the 'products_interest_calculation_method' enum.
type ProductsInterestCalculationMethod int32

// ProductsInterestCalculationMethod values.
const (
	// ProductsInterestCalculationMethodMethodflatinterest is the 'MethodFlatInterest' products_interest_calculation_method.
	ProductsInterestCalculationMethodMethodflatinterest ProductsInterestCalculationMethod = 1
	// ProductsInterestCalculationMethodMethoddecliningbalance is the 'MethodDecliningBalance' products_interest_calculation_method.
	ProductsInterestCalculationMethodMethoddecliningbalance ProductsInterestCalculationMethod = 2
	// ProductsInterestCalculationMethodMethoddecliningbalancediscounted is the 'MethodDecliningBalanceDiscounted' products_interest_calculation_method.
	ProductsInterestCalculationMethodMethoddecliningbalancediscounted ProductsInterestCalculationMethod = 3
)

func NewProductsInterestCalculationMethod(picm products.InterestCalculationMethod) ProductsInterestCalculationMethod {
	return ProductsInterestCalculationMethod(picm + 1)
}

func (picm ProductsInterestCalculationMethod) PB() products.InterestCalculationMethod {
	return products.InterestCalculationMethod(picm - 1)
}

// UnmarshalText unmarshals ProductsInterestCalculationMethod from text.
func (picm *ProductsInterestCalculationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodFlatInterest":
		*picm = ProductsInterestCalculationMethodMethodflatinterest
	case "MethodDecliningBalance":
		*picm = ProductsInterestCalculationMethodMethoddecliningbalance
	case "MethodDecliningBalanceDiscounted":
		*picm = ProductsInterestCalculationMethodMethoddecliningbalancediscounted
	default:
		return ErrInvalidProductsInterestCalculationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (picm ProductsInterestCalculationMethod) String() string {
	switch picm {
	case ProductsInterestCalculationMethodMethodflatinterest:
		return "MethodFlatInterest"
	case ProductsInterestCalculationMethodMethoddecliningbalance:
		return "MethodDecliningBalance"
	case ProductsInterestCalculationMethodMethoddecliningbalancediscounted:
		return "MethodDecliningBalanceDiscounted"
	}
	return fmt.Sprintf("ProductsInterestCalculationMethod(%d)", picm)
}

// Value satisfies the driver.Valuer interface.
func (picm ProductsInterestCalculationMethod) Value() (driver.Value, error) {
	return picm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (picm *ProductsInterestCalculationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return picm.UnmarshalText(buf)
	}
	return ErrInvalidProductsInterestCalculationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsInterestCalculationMethod is the invalid ProductsInterestCalculationMethod error.
type ErrInvalidProductsInterestCalculationMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsInterestCalculationMethod) Error() string {
	return fmt.Sprintf("invalid ProductsInterestCalculationMethod(%s)", string(err))
}

// ProductsInterestRateSource is the 'products_interest_rate_source' enum.
type ProductsInterestRateSource int32

// ProductsInterestRateSource values.
const (
	// ProductsInterestRateSourceFixedinterestrate is the 'FixedInterestRate' products_interest_rate_source.
	ProductsInterestRateSourceFixedinterestrate ProductsInterestRateSource = 1
	// ProductsInterestRateSourceIndexinterestrate is the 'IndexInterestRate' products_interest_rate_source.
	ProductsInterestRateSourceIndexinterestrate ProductsInterestRateSource = 2
)

func NewProductsInterestRateSource(pirs products.InterestRateSource) ProductsInterestRateSource {
	return ProductsInterestRateSource(pirs + 1)
}

func (pirs ProductsInterestRateSource) PB() products.InterestRateSource {
	return products.InterestRateSource(pirs - 1)
}

// UnmarshalText unmarshals ProductsInterestRateSource from text.
func (pirs *ProductsInterestRateSource) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "FixedInterestRate":
		*pirs = ProductsInterestRateSourceFixedinterestrate
	case "IndexInterestRate":
		*pirs = ProductsInterestRateSourceIndexinterestrate
	default:
		return ErrInvalidProductsInterestRateSource(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pirs ProductsInterestRateSource) String() string {
	switch pirs {
	case ProductsInterestRateSourceFixedinterestrate:
		return "FixedInterestRate"
	case ProductsInterestRateSourceIndexinterestrate:
		return "IndexInterestRate"
	}
	return fmt.Sprintf("ProductsInterestRateSource(%d)", pirs)
}

// Value satisfies the driver.Valuer interface.
func (pirs ProductsInterestRateSource) Value() (driver.Value, error) {
	return pirs.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pirs *ProductsInterestRateSource) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pirs.UnmarshalText(buf)
	}
	return ErrInvalidProductsInterestRateSource(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsInterestRateSource is the invalid ProductsInterestRateSource error.
type ErrInvalidProductsInterestRateSource string

// Error satisfies the error interface.
func (err ErrInvalidProductsInterestRateSource) Error() string {
	return fmt.Sprintf("invalid ProductsInterestRateSource(%s)", string(err))
}

// ProductsInterestRateTerms is the 'products_interest_rate_terms' enum.
type ProductsInterestRateTerms int32

// ProductsInterestRateTerms values.
const (
	// ProductsInterestRateTermsFixed is the 'Fixed' products_interest_rate_terms.
	ProductsInterestRateTermsFixed ProductsInterestRateTerms = 1
	// ProductsInterestRateTermsTiered is the 'Tiered' products_interest_rate_terms.
	ProductsInterestRateTermsTiered ProductsInterestRateTerms = 2
	// ProductsInterestRateTermsTieredperiod is the 'TieredPeriod' products_interest_rate_terms.
	ProductsInterestRateTermsTieredperiod ProductsInterestRateTerms = 3
	// ProductsInterestRateTermsTieredband is the 'TieredBand' products_interest_rate_terms.
	ProductsInterestRateTermsTieredband ProductsInterestRateTerms = 4
)

func NewProductsInterestRateTerms(pirt products.InterestRateTerms) ProductsInterestRateTerms {
	return ProductsInterestRateTerms(pirt + 1)
}

func (pirt ProductsInterestRateTerms) PB() products.InterestRateTerms {
	return products.InterestRateTerms(pirt - 1)
}

// UnmarshalText unmarshals ProductsInterestRateTerms from text.
func (pirt *ProductsInterestRateTerms) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Fixed":
		*pirt = ProductsInterestRateTermsFixed
	case "Tiered":
		*pirt = ProductsInterestRateTermsTiered
	case "TieredPeriod":
		*pirt = ProductsInterestRateTermsTieredperiod
	case "TieredBand":
		*pirt = ProductsInterestRateTermsTieredband
	default:
		return ErrInvalidProductsInterestRateTerms(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pirt ProductsInterestRateTerms) String() string {
	switch pirt {
	case ProductsInterestRateTermsFixed:
		return "Fixed"
	case ProductsInterestRateTermsTiered:
		return "Tiered"
	case ProductsInterestRateTermsTieredperiod:
		return "TieredPeriod"
	case ProductsInterestRateTermsTieredband:
		return "TieredBand"
	}
	return fmt.Sprintf("ProductsInterestRateTerms(%d)", pirt)
}

// Value satisfies the driver.Valuer interface.
func (pirt ProductsInterestRateTerms) Value() (driver.Value, error) {
	return pirt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pirt *ProductsInterestRateTerms) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pirt.UnmarshalText(buf)
	}
	return ErrInvalidProductsInterestRateTerms(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsInterestRateTerms is the invalid ProductsInterestRateTerms error.
type ErrInvalidProductsInterestRateTerms string

// Error satisfies the error interface.
func (err ErrInvalidProductsInterestRateTerms) Error() string {
	return fmt.Sprintf("invalid ProductsInterestRateTerms(%s)", string(err))
}

// ProductsInterestType is the 'products_interest_type' enum.
type ProductsInterestType int32

// ProductsInterestType values.
const (
	// ProductsInterestTypeSimple is the 'Simple' products_interest_type.
	ProductsInterestTypeSimple ProductsInterestType = 1
	// ProductsInterestTypeCapitalized is the 'Capitalized' products_interest_type.
	ProductsInterestTypeCapitalized ProductsInterestType = 2
	// ProductsInterestTypeCompounding is the 'Compounding' products_interest_type.
	ProductsInterestTypeCompounding ProductsInterestType = 3
)

func NewProductsInterestType(pit products.InterestType) ProductsInterestType {
	return ProductsInterestType(pit + 1)
}

func (pit ProductsInterestType) PB() products.InterestType {
	return products.InterestType(pit - 1)
}

// UnmarshalText unmarshals ProductsInterestType from text.
func (pit *ProductsInterestType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Simple":
		*pit = ProductsInterestTypeSimple
	case "Capitalized":
		*pit = ProductsInterestTypeCapitalized
	case "Compounding":
		*pit = ProductsInterestTypeCompounding
	default:
		return ErrInvalidProductsInterestType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pit ProductsInterestType) String() string {
	switch pit {
	case ProductsInterestTypeSimple:
		return "Simple"
	case ProductsInterestTypeCapitalized:
		return "Capitalized"
	case ProductsInterestTypeCompounding:
		return "Compounding"
	}
	return fmt.Sprintf("ProductsInterestType(%d)", pit)
}

// Value satisfies the driver.Valuer interface.
func (pit ProductsInterestType) Value() (driver.Value, error) {
	return pit.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pit *ProductsInterestType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pit.UnmarshalText(buf)
	}
	return ErrInvalidProductsInterestType(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsInterestType is the invalid ProductsInterestType error.
type ErrInvalidProductsInterestType string

// Error satisfies the error interface.
func (err ErrInvalidProductsInterestType) Error() string {
	return fmt.Sprintf("invalid ProductsInterestType(%s)", string(err))
}

// ProductsIntervalType is the 'products_interval_type' enum.
type ProductsIntervalType int32

// ProductsIntervalType values.
const (
	// ProductsIntervalTypePredefinedintervals is the 'PredefinedIntervals' products_interval_type.
	ProductsIntervalTypePredefinedintervals ProductsIntervalType = 1
	// ProductsIntervalTypeFullterm is the 'FullTerm' products_interval_type.
	ProductsIntervalTypeFullterm ProductsIntervalType = 2
)

func NewProductsIntervalType(pit products.IntervalType) ProductsIntervalType {
	return ProductsIntervalType(pit + 1)
}

func (pit ProductsIntervalType) PB() products.IntervalType {
	return products.IntervalType(pit - 1)
}

// UnmarshalText unmarshals ProductsIntervalType from text.
func (pit *ProductsIntervalType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "PredefinedIntervals":
		*pit = ProductsIntervalTypePredefinedintervals
	case "FullTerm":
		*pit = ProductsIntervalTypeFullterm
	default:
		return ErrInvalidProductsIntervalType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pit ProductsIntervalType) String() string {
	switch pit {
	case ProductsIntervalTypePredefinedintervals:
		return "PredefinedIntervals"
	case ProductsIntervalTypeFullterm:
		return "FullTerm"
	}
	return fmt.Sprintf("ProductsIntervalType(%d)", pit)
}

// Value satisfies the driver.Valuer interface.
func (pit ProductsIntervalType) Value() (driver.Value, error) {
	return pit.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pit *ProductsIntervalType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pit.UnmarshalText(buf)
	}
	return ErrInvalidProductsIntervalType(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsIntervalType is the invalid ProductsIntervalType error.
type ErrInvalidProductsIntervalType string

// Error satisfies the error interface.
func (err ErrInvalidProductsIntervalType) Error() string {
	return fmt.Sprintf("invalid ProductsIntervalType(%s)", string(err))
}

// ProductsLatePaymentsRecalculationMethod is the 'products_late_payments_recalculation_method' enum.
type ProductsLatePaymentsRecalculationMethod int32

// ProductsLatePaymentsRecalculationMethod values.
const (
	// ProductsLatePaymentsRecalculationMethodMethodoverdueinstallmentsincrease is the 'MethodOverdueInstallmentsIncrease' products_late_payments_recalculation_method.
	ProductsLatePaymentsRecalculationMethodMethodoverdueinstallmentsincrease ProductsLatePaymentsRecalculationMethod = 1
	// ProductsLatePaymentsRecalculationMethodMethodlastinstallmentincrease is the 'MethodLastInstallmentIncrease' products_late_payments_recalculation_method.
	ProductsLatePaymentsRecalculationMethodMethodlastinstallmentincrease ProductsLatePaymentsRecalculationMethod = 2
)

func NewProductsLatePaymentsRecalculationMethod(plprm products.LatePaymentsRecalculationMethod) ProductsLatePaymentsRecalculationMethod {
	return ProductsLatePaymentsRecalculationMethod(plprm + 1)
}

func (plprm ProductsLatePaymentsRecalculationMethod) PB() products.LatePaymentsRecalculationMethod {
	return products.LatePaymentsRecalculationMethod(plprm - 1)
}

// UnmarshalText unmarshals ProductsLatePaymentsRecalculationMethod from text.
func (plprm *ProductsLatePaymentsRecalculationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodOverdueInstallmentsIncrease":
		*plprm = ProductsLatePaymentsRecalculationMethodMethodoverdueinstallmentsincrease
	case "MethodLastInstallmentIncrease":
		*plprm = ProductsLatePaymentsRecalculationMethodMethodlastinstallmentincrease
	default:
		return ErrInvalidProductsLatePaymentsRecalculationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (plprm ProductsLatePaymentsRecalculationMethod) String() string {
	switch plprm {
	case ProductsLatePaymentsRecalculationMethodMethodoverdueinstallmentsincrease:
		return "MethodOverdueInstallmentsIncrease"
	case ProductsLatePaymentsRecalculationMethodMethodlastinstallmentincrease:
		return "MethodLastInstallmentIncrease"
	}
	return fmt.Sprintf("ProductsLatePaymentsRecalculationMethod(%d)", plprm)
}

// Value satisfies the driver.Valuer interface.
func (plprm ProductsLatePaymentsRecalculationMethod) Value() (driver.Value, error) {
	return plprm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (plprm *ProductsLatePaymentsRecalculationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return plprm.UnmarshalText(buf)
	}
	return ErrInvalidProductsLatePaymentsRecalculationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsLatePaymentsRecalculationMethod is the invalid ProductsLatePaymentsRecalculationMethod error.
type ErrInvalidProductsLatePaymentsRecalculationMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsLatePaymentsRecalculationMethod) Error() string {
	return fmt.Sprintf("invalid ProductsLatePaymentsRecalculationMethod(%s)", string(err))
}

// ProductsLinkedAccountOptions is the 'products_linked_account_options' enum.
type ProductsLinkedAccountOptions int32

// ProductsLinkedAccountOptions values.
const (
	// ProductsLinkedAccountOptionsAutolinkaccounts is the 'AutoLinkAccounts' products_linked_account_options.
	ProductsLinkedAccountOptionsAutolinkaccounts ProductsLinkedAccountOptions = 1
	// ProductsLinkedAccountOptionsAutocreatelinkedaccounts is the 'AutoCreateLinkedAccounts' products_linked_account_options.
	ProductsLinkedAccountOptionsAutocreatelinkedaccounts ProductsLinkedAccountOptions = 2
)

func NewProductsLinkedAccountOptions(plao products.LinkedAccountOptions) ProductsLinkedAccountOptions {
	return ProductsLinkedAccountOptions(plao + 1)
}

func (plao ProductsLinkedAccountOptions) PB() products.LinkedAccountOptions {
	return products.LinkedAccountOptions(plao - 1)
}

// UnmarshalText unmarshals ProductsLinkedAccountOptions from text.
func (plao *ProductsLinkedAccountOptions) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "AutoLinkAccounts":
		*plao = ProductsLinkedAccountOptionsAutolinkaccounts
	case "AutoCreateLinkedAccounts":
		*plao = ProductsLinkedAccountOptionsAutocreatelinkedaccounts
	default:
		return ErrInvalidProductsLinkedAccountOptions(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (plao ProductsLinkedAccountOptions) String() string {
	switch plao {
	case ProductsLinkedAccountOptionsAutolinkaccounts:
		return "AutoLinkAccounts"
	case ProductsLinkedAccountOptionsAutocreatelinkedaccounts:
		return "AutoCreateLinkedAccounts"
	}
	return fmt.Sprintf("ProductsLinkedAccountOptions(%d)", plao)
}

// Value satisfies the driver.Valuer interface.
func (plao ProductsLinkedAccountOptions) Value() (driver.Value, error) {
	return plao.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (plao *ProductsLinkedAccountOptions) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return plao.UnmarshalText(buf)
	}
	return ErrInvalidProductsLinkedAccountOptions(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsLinkedAccountOptions is the invalid ProductsLinkedAccountOptions error.
type ErrInvalidProductsLinkedAccountOptions string

// Error satisfies the error interface.
func (err ErrInvalidProductsLinkedAccountOptions) Error() string {
	return fmt.Sprintf("invalid ProductsLinkedAccountOptions(%s)", string(err))
}

// ProductsLoanCategory is the 'products_loan_category' enum.
type ProductsLoanCategory int32

// ProductsLoanCategory values.
const (
	// ProductsLoanCategoryCategorypersonallending is the 'CategoryPersonalLending' products_loan_category.
	ProductsLoanCategoryCategorypersonallending ProductsLoanCategory = 1
	// ProductsLoanCategoryCategorypurchasefinancing is the 'CategoryPurchaseFinancing' products_loan_category.
	ProductsLoanCategoryCategorypurchasefinancing ProductsLoanCategory = 2
	// ProductsLoanCategoryCategoryretailmortgages is the 'CategoryRetailMortgages' products_loan_category.
	ProductsLoanCategoryCategoryretailmortgages ProductsLoanCategory = 3
	// ProductsLoanCategoryCategorysmelending is the 'CategorySmeLending' products_loan_category.
	ProductsLoanCategoryCategorysmelending ProductsLoanCategory = 4
	// ProductsLoanCategoryCategorycommercial is the 'CategoryCommercial' products_loan_category.
	ProductsLoanCategoryCategorycommercial ProductsLoanCategory = 5
	// ProductsLoanCategoryCategoryuncategorized is the 'CategoryUncategorized' products_loan_category.
	ProductsLoanCategoryCategoryuncategorized ProductsLoanCategory = 6
)

func NewProductsLoanCategory(plc products.LoanCategory) ProductsLoanCategory {
	return ProductsLoanCategory(plc + 1)
}

func (plc ProductsLoanCategory) PB() products.LoanCategory {
	return products.LoanCategory(plc - 1)
}

// UnmarshalText unmarshals ProductsLoanCategory from text.
func (plc *ProductsLoanCategory) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "CategoryPersonalLending":
		*plc = ProductsLoanCategoryCategorypersonallending
	case "CategoryPurchaseFinancing":
		*plc = ProductsLoanCategoryCategorypurchasefinancing
	case "CategoryRetailMortgages":
		*plc = ProductsLoanCategoryCategoryretailmortgages
	case "CategorySmeLending":
		*plc = ProductsLoanCategoryCategorysmelending
	case "CategoryCommercial":
		*plc = ProductsLoanCategoryCategorycommercial
	case "CategoryUncategorized":
		*plc = ProductsLoanCategoryCategoryuncategorized
	default:
		return ErrInvalidProductsLoanCategory(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (plc ProductsLoanCategory) String() string {
	switch plc {
	case ProductsLoanCategoryCategorypersonallending:
		return "CategoryPersonalLending"
	case ProductsLoanCategoryCategorypurchasefinancing:
		return "CategoryPurchaseFinancing"
	case ProductsLoanCategoryCategoryretailmortgages:
		return "CategoryRetailMortgages"
	case ProductsLoanCategoryCategorysmelending:
		return "CategorySmeLending"
	case ProductsLoanCategoryCategorycommercial:
		return "CategoryCommercial"
	case ProductsLoanCategoryCategoryuncategorized:
		return "CategoryUncategorized"
	}
	return fmt.Sprintf("ProductsLoanCategory(%d)", plc)
}

// Value satisfies the driver.Valuer interface.
func (plc ProductsLoanCategory) Value() (driver.Value, error) {
	return plc.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (plc *ProductsLoanCategory) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return plc.UnmarshalText(buf)
	}
	return ErrInvalidProductsLoanCategory(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsLoanCategory is the invalid ProductsLoanCategory error.
type ErrInvalidProductsLoanCategory string

// Error satisfies the error interface.
func (err ErrInvalidProductsLoanCategory) Error() string {
	return fmt.Sprintf("invalid ProductsLoanCategory(%s)", string(err))
}

// ProductsLoanPenaltyCalculationMethod is the 'products_loan_penalty_calculation_method' enum.
type ProductsLoanPenaltyCalculationMethod int32

// ProductsLoanPenaltyCalculationMethod values.
const (
	// ProductsLoanPenaltyCalculationMethodMethodnorecalculate is the 'MethodNoRecalculate' products_loan_penalty_calculation_method.
	ProductsLoanPenaltyCalculationMethodMethodnorecalculate ProductsLoanPenaltyCalculationMethod = 1
	// ProductsLoanPenaltyCalculationMethodMethodoverduebalance is the 'MethodOverdueBalance' products_loan_penalty_calculation_method.
	ProductsLoanPenaltyCalculationMethodMethodoverduebalance ProductsLoanPenaltyCalculationMethod = 2
	// ProductsLoanPenaltyCalculationMethodMethodoverduebalanceandinterest is the 'MethodOverdueBalanceAndInterest' products_loan_penalty_calculation_method.
	ProductsLoanPenaltyCalculationMethodMethodoverduebalanceandinterest ProductsLoanPenaltyCalculationMethod = 3
	// ProductsLoanPenaltyCalculationMethodMethodoutstandingprincipal is the 'MethodOutstandingPrincipal' products_loan_penalty_calculation_method.
	ProductsLoanPenaltyCalculationMethodMethodoutstandingprincipal ProductsLoanPenaltyCalculationMethod = 4
)

func NewProductsLoanPenaltyCalculationMethod(plpcm products.LoanPenaltyCalculationMethod) ProductsLoanPenaltyCalculationMethod {
	return ProductsLoanPenaltyCalculationMethod(plpcm + 1)
}

func (plpcm ProductsLoanPenaltyCalculationMethod) PB() products.LoanPenaltyCalculationMethod {
	return products.LoanPenaltyCalculationMethod(plpcm - 1)
}

// UnmarshalText unmarshals ProductsLoanPenaltyCalculationMethod from text.
func (plpcm *ProductsLoanPenaltyCalculationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodNoRecalculate":
		*plpcm = ProductsLoanPenaltyCalculationMethodMethodnorecalculate
	case "MethodOverdueBalance":
		*plpcm = ProductsLoanPenaltyCalculationMethodMethodoverduebalance
	case "MethodOverdueBalanceAndInterest":
		*plpcm = ProductsLoanPenaltyCalculationMethodMethodoverduebalanceandinterest
	case "MethodOutstandingPrincipal":
		*plpcm = ProductsLoanPenaltyCalculationMethodMethodoutstandingprincipal
	default:
		return ErrInvalidProductsLoanPenaltyCalculationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (plpcm ProductsLoanPenaltyCalculationMethod) String() string {
	switch plpcm {
	case ProductsLoanPenaltyCalculationMethodMethodnorecalculate:
		return "MethodNoRecalculate"
	case ProductsLoanPenaltyCalculationMethodMethodoverduebalance:
		return "MethodOverdueBalance"
	case ProductsLoanPenaltyCalculationMethodMethodoverduebalanceandinterest:
		return "MethodOverdueBalanceAndInterest"
	case ProductsLoanPenaltyCalculationMethodMethodoutstandingprincipal:
		return "MethodOutstandingPrincipal"
	}
	return fmt.Sprintf("ProductsLoanPenaltyCalculationMethod(%d)", plpcm)
}

// Value satisfies the driver.Valuer interface.
func (plpcm ProductsLoanPenaltyCalculationMethod) Value() (driver.Value, error) {
	return plpcm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (plpcm *ProductsLoanPenaltyCalculationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return plpcm.UnmarshalText(buf)
	}
	return ErrInvalidProductsLoanPenaltyCalculationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsLoanPenaltyCalculationMethod is the invalid ProductsLoanPenaltyCalculationMethod error.
type ErrInvalidProductsLoanPenaltyCalculationMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsLoanPenaltyCalculationMethod) Error() string {
	return fmt.Sprintf("invalid ProductsLoanPenaltyCalculationMethod(%s)", string(err))
}

// ProductsLoanType is the 'products_loan_type' enum.
type ProductsLoanType int32

// ProductsLoanType values.
const (
	// ProductsLoanTypeTypefixedtermloan is the 'TypeFixedTermLoan' products_loan_type.
	ProductsLoanTypeTypefixedtermloan ProductsLoanType = 1
	// ProductsLoanTypeTypedynamictermloan is the 'TypeDynamicTermLoan' products_loan_type.
	ProductsLoanTypeTypedynamictermloan ProductsLoanType = 2
	// ProductsLoanTypeTypeinterestfreeloan is the 'TypeInterestFreeLoan' products_loan_type.
	ProductsLoanTypeTypeinterestfreeloan ProductsLoanType = 3
	// ProductsLoanTypeTypetranchedloan is the 'TypeTranchedLoan' products_loan_type.
	ProductsLoanTypeTypetranchedloan ProductsLoanType = 4
	// ProductsLoanTypeTyperevolvingcredit is the 'TypeRevolvingCredit' products_loan_type.
	ProductsLoanTypeTyperevolvingcredit ProductsLoanType = 5
)

func NewProductsLoanType(plt products.LoanType) ProductsLoanType {
	return ProductsLoanType(plt + 1)
}

func (plt ProductsLoanType) PB() products.LoanType {
	return products.LoanType(plt - 1)
}

// UnmarshalText unmarshals ProductsLoanType from text.
func (plt *ProductsLoanType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "TypeFixedTermLoan":
		*plt = ProductsLoanTypeTypefixedtermloan
	case "TypeDynamicTermLoan":
		*plt = ProductsLoanTypeTypedynamictermloan
	case "TypeInterestFreeLoan":
		*plt = ProductsLoanTypeTypeinterestfreeloan
	case "TypeTranchedLoan":
		*plt = ProductsLoanTypeTypetranchedloan
	case "TypeRevolvingCredit":
		*plt = ProductsLoanTypeTyperevolvingcredit
	default:
		return ErrInvalidProductsLoanType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (plt ProductsLoanType) String() string {
	switch plt {
	case ProductsLoanTypeTypefixedtermloan:
		return "TypeFixedTermLoan"
	case ProductsLoanTypeTypedynamictermloan:
		return "TypeDynamicTermLoan"
	case ProductsLoanTypeTypeinterestfreeloan:
		return "TypeInterestFreeLoan"
	case ProductsLoanTypeTypetranchedloan:
		return "TypeTranchedLoan"
	case ProductsLoanTypeTyperevolvingcredit:
		return "TypeRevolvingCredit"
	}
	return fmt.Sprintf("ProductsLoanType(%d)", plt)
}

// Value satisfies the driver.Valuer interface.
func (plt ProductsLoanType) Value() (driver.Value, error) {
	return plt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (plt *ProductsLoanType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return plt.UnmarshalText(buf)
	}
	return ErrInvalidProductsLoanType(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsLoanType is the invalid ProductsLoanType error.
type ErrInvalidProductsLoanType string

// Error satisfies the error interface.
func (err ErrInvalidProductsLoanType) Error() string {
	return fmt.Sprintf("invalid ProductsLoanType(%s)", string(err))
}

// ProductsMonthHandlingMethod is the 'products_month_handling_method' enum.
type ProductsMonthHandlingMethod int32

// ProductsMonthHandlingMethod values.
const (
	// ProductsMonthHandlingMethodLastdayinmonth is the 'LastDayInMonth' products_month_handling_method.
	ProductsMonthHandlingMethodLastdayinmonth ProductsMonthHandlingMethod = 1
	// ProductsMonthHandlingMethodFirstdayofnextmonth is the 'FirstDayOfNextMonth' products_month_handling_method.
	ProductsMonthHandlingMethodFirstdayofnextmonth ProductsMonthHandlingMethod = 2
)

func NewProductsMonthHandlingMethod(pmhm products.MonthHandlingMethod) ProductsMonthHandlingMethod {
	return ProductsMonthHandlingMethod(pmhm + 1)
}

func (pmhm ProductsMonthHandlingMethod) PB() products.MonthHandlingMethod {
	return products.MonthHandlingMethod(pmhm - 1)
}

// UnmarshalText unmarshals ProductsMonthHandlingMethod from text.
func (pmhm *ProductsMonthHandlingMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "LastDayInMonth":
		*pmhm = ProductsMonthHandlingMethodLastdayinmonth
	case "FirstDayOfNextMonth":
		*pmhm = ProductsMonthHandlingMethodFirstdayofnextmonth
	default:
		return ErrInvalidProductsMonthHandlingMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pmhm ProductsMonthHandlingMethod) String() string {
	switch pmhm {
	case ProductsMonthHandlingMethodLastdayinmonth:
		return "LastDayInMonth"
	case ProductsMonthHandlingMethodFirstdayofnextmonth:
		return "FirstDayOfNextMonth"
	}
	return fmt.Sprintf("ProductsMonthHandlingMethod(%d)", pmhm)
}

// Value satisfies the driver.Valuer interface.
func (pmhm ProductsMonthHandlingMethod) Value() (driver.Value, error) {
	return pmhm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pmhm *ProductsMonthHandlingMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pmhm.UnmarshalText(buf)
	}
	return ErrInvalidProductsMonthHandlingMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsMonthHandlingMethod is the invalid ProductsMonthHandlingMethod error.
type ErrInvalidProductsMonthHandlingMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsMonthHandlingMethod) Error() string {
	return fmt.Sprintf("invalid ProductsMonthHandlingMethod(%s)", string(err))
}

// ProductsPaymentType is the 'products_payment_type' enum.
type ProductsPaymentType int32

// ProductsPaymentType values.
const (
	// ProductsPaymentTypeMethodhorizontal is the 'MethodHorizontal' products_payment_type.
	ProductsPaymentTypeMethodhorizontal ProductsPaymentType = 1
	// ProductsPaymentTypeMethodvertical is the 'MethodVertical' products_payment_type.
	ProductsPaymentTypeMethodvertical ProductsPaymentType = 2
)

func NewProductsPaymentType(ppt products.PaymentType) ProductsPaymentType {
	return ProductsPaymentType(ppt + 1)
}

func (ppt ProductsPaymentType) PB() products.PaymentType {
	return products.PaymentType(ppt - 1)
}

// UnmarshalText unmarshals ProductsPaymentType from text.
func (ppt *ProductsPaymentType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodHorizontal":
		*ppt = ProductsPaymentTypeMethodhorizontal
	case "MethodVertical":
		*ppt = ProductsPaymentTypeMethodvertical
	default:
		return ErrInvalidProductsPaymentType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (ppt ProductsPaymentType) String() string {
	switch ppt {
	case ProductsPaymentTypeMethodhorizontal:
		return "MethodHorizontal"
	case ProductsPaymentTypeMethodvertical:
		return "MethodVertical"
	}
	return fmt.Sprintf("ProductsPaymentType(%d)", ppt)
}

// Value satisfies the driver.Valuer interface.
func (ppt ProductsPaymentType) Value() (driver.Value, error) {
	return ppt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ppt *ProductsPaymentType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ppt.UnmarshalText(buf)
	}
	return ErrInvalidProductsPaymentType(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsPaymentType is the invalid ProductsPaymentType error.
type ErrInvalidProductsPaymentType string

// Error satisfies the error interface.
func (err ErrInvalidProductsPaymentType) Error() string {
	return fmt.Sprintf("invalid ProductsPaymentType(%s)", string(err))
}

// ProductsPeriodFrequency is the 'products_period_frequency' enum.
type ProductsPeriodFrequency int32

// ProductsPeriodFrequency values.
const (
	// ProductsPeriodFrequencyAccountinstallmentsduedates is the 'AccountInstallmentsDueDates' products_period_frequency.
	ProductsPeriodFrequencyAccountinstallmentsduedates ProductsPeriodFrequency = 1
	// ProductsPeriodFrequencyAccountinstallmentsduedatesdailybooking is the 'AccountInstallmentsDueDatesDailyBooking' products_period_frequency.
	ProductsPeriodFrequencyAccountinstallmentsduedatesdailybooking ProductsPeriodFrequency = 2
	// ProductsPeriodFrequencyCustominterval is the 'CustomInterval' products_period_frequency.
	ProductsPeriodFrequencyCustominterval ProductsPeriodFrequency = 3
)

func NewProductsPeriodFrequency(ppf products.PeriodFrequency) ProductsPeriodFrequency {
	return ProductsPeriodFrequency(ppf + 1)
}

func (ppf ProductsPeriodFrequency) PB() products.PeriodFrequency {
	return products.PeriodFrequency(ppf - 1)
}

// UnmarshalText unmarshals ProductsPeriodFrequency from text.
func (ppf *ProductsPeriodFrequency) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "AccountInstallmentsDueDates":
		*ppf = ProductsPeriodFrequencyAccountinstallmentsduedates
	case "AccountInstallmentsDueDatesDailyBooking":
		*ppf = ProductsPeriodFrequencyAccountinstallmentsduedatesdailybooking
	case "CustomInterval":
		*ppf = ProductsPeriodFrequencyCustominterval
	default:
		return ErrInvalidProductsPeriodFrequency(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (ppf ProductsPeriodFrequency) String() string {
	switch ppf {
	case ProductsPeriodFrequencyAccountinstallmentsduedates:
		return "AccountInstallmentsDueDates"
	case ProductsPeriodFrequencyAccountinstallmentsduedatesdailybooking:
		return "AccountInstallmentsDueDatesDailyBooking"
	case ProductsPeriodFrequencyCustominterval:
		return "CustomInterval"
	}
	return fmt.Sprintf("ProductsPeriodFrequency(%d)", ppf)
}

// Value satisfies the driver.Valuer interface.
func (ppf ProductsPeriodFrequency) Value() (driver.Value, error) {
	return ppf.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ppf *ProductsPeriodFrequency) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ppf.UnmarshalText(buf)
	}
	return ErrInvalidProductsPeriodFrequency(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsPeriodFrequency is the invalid ProductsPeriodFrequency error.
type ErrInvalidProductsPeriodFrequency string

// Error satisfies the error interface.
func (err ErrInvalidProductsPeriodFrequency) Error() string {
	return fmt.Sprintf("invalid ProductsPeriodFrequency(%s)", string(err))
}

// ProductsPrepaymentRecalculationMethod is the 'products_prepayment_recalculation_method' enum.
type ProductsPrepaymentRecalculationMethod int32

// ProductsPrepaymentRecalculationMethod values.
const (
	// ProductsPrepaymentRecalculationMethodNorecalculation is the 'NoRecalculation' products_prepayment_recalculation_method.
	ProductsPrepaymentRecalculationMethodNorecalculation ProductsPrepaymentRecalculationMethod = 1
	// ProductsPrepaymentRecalculationMethodRescheduleremainingrepayments is the 'RescheduleRemainingRepayments' products_prepayment_recalculation_method.
	ProductsPrepaymentRecalculationMethodRescheduleremainingrepayments ProductsPrepaymentRecalculationMethod = 2
	// ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsamenumberofterms is the 'RecalculateScheduleKeepSameNumberOfTerms' products_prepayment_recalculation_method.
	ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsamenumberofterms ProductsPrepaymentRecalculationMethod = 3
	// ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsameprincipalamount is the 'RecalculateScheduleKeepSamePrincipalAmount' products_prepayment_recalculation_method.
	ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsameprincipalamount ProductsPrepaymentRecalculationMethod = 4
	// ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsametotalrepaymentamount is the 'RecalculateScheduleKeepSameTotalRepaymentAmount' products_prepayment_recalculation_method.
	ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsametotalrepaymentamount ProductsPrepaymentRecalculationMethod = 5
	// ProductsPrepaymentRecalculationMethodReduceamountperinstallment is the 'ReduceAmountPerInstallment' products_prepayment_recalculation_method.
	ProductsPrepaymentRecalculationMethodReduceamountperinstallment ProductsPrepaymentRecalculationMethod = 6
	// ProductsPrepaymentRecalculationMethodReducenumberofinstallments is the 'ReduceNumberOfInstallments' products_prepayment_recalculation_method.
	ProductsPrepaymentRecalculationMethodReducenumberofinstallments ProductsPrepaymentRecalculationMethod = 7
	// ProductsPrepaymentRecalculationMethodReducenumberofinstallmentsnew is the 'ReduceNumberOfInstallmentsNew' products_prepayment_recalculation_method.
	ProductsPrepaymentRecalculationMethodReducenumberofinstallmentsnew ProductsPrepaymentRecalculationMethod = 8
)

func NewProductsPrepaymentRecalculationMethod(pprm products.PrepaymentRecalculationMethod) ProductsPrepaymentRecalculationMethod {
	return ProductsPrepaymentRecalculationMethod(pprm + 1)
}

func (pprm ProductsPrepaymentRecalculationMethod) PB() products.PrepaymentRecalculationMethod {
	return products.PrepaymentRecalculationMethod(pprm - 1)
}

// UnmarshalText unmarshals ProductsPrepaymentRecalculationMethod from text.
func (pprm *ProductsPrepaymentRecalculationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "NoRecalculation":
		*pprm = ProductsPrepaymentRecalculationMethodNorecalculation
	case "RescheduleRemainingRepayments":
		*pprm = ProductsPrepaymentRecalculationMethodRescheduleremainingrepayments
	case "RecalculateScheduleKeepSameNumberOfTerms":
		*pprm = ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsamenumberofterms
	case "RecalculateScheduleKeepSamePrincipalAmount":
		*pprm = ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsameprincipalamount
	case "RecalculateScheduleKeepSameTotalRepaymentAmount":
		*pprm = ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsametotalrepaymentamount
	case "ReduceAmountPerInstallment":
		*pprm = ProductsPrepaymentRecalculationMethodReduceamountperinstallment
	case "ReduceNumberOfInstallments":
		*pprm = ProductsPrepaymentRecalculationMethodReducenumberofinstallments
	case "ReduceNumberOfInstallmentsNew":
		*pprm = ProductsPrepaymentRecalculationMethodReducenumberofinstallmentsnew
	default:
		return ErrInvalidProductsPrepaymentRecalculationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pprm ProductsPrepaymentRecalculationMethod) String() string {
	switch pprm {
	case ProductsPrepaymentRecalculationMethodNorecalculation:
		return "NoRecalculation"
	case ProductsPrepaymentRecalculationMethodRescheduleremainingrepayments:
		return "RescheduleRemainingRepayments"
	case ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsamenumberofterms:
		return "RecalculateScheduleKeepSameNumberOfTerms"
	case ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsameprincipalamount:
		return "RecalculateScheduleKeepSamePrincipalAmount"
	case ProductsPrepaymentRecalculationMethodRecalculateschedulekeepsametotalrepaymentamount:
		return "RecalculateScheduleKeepSameTotalRepaymentAmount"
	case ProductsPrepaymentRecalculationMethodReduceamountperinstallment:
		return "ReduceAmountPerInstallment"
	case ProductsPrepaymentRecalculationMethodReducenumberofinstallments:
		return "ReduceNumberOfInstallments"
	case ProductsPrepaymentRecalculationMethodReducenumberofinstallmentsnew:
		return "ReduceNumberOfInstallmentsNew"
	}
	return fmt.Sprintf("ProductsPrepaymentRecalculationMethod(%d)", pprm)
}

// Value satisfies the driver.Valuer interface.
func (pprm ProductsPrepaymentRecalculationMethod) Value() (driver.Value, error) {
	return pprm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pprm *ProductsPrepaymentRecalculationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pprm.UnmarshalText(buf)
	}
	return ErrInvalidProductsPrepaymentRecalculationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsPrepaymentRecalculationMethod is the invalid ProductsPrepaymentRecalculationMethod error.
type ErrInvalidProductsPrepaymentRecalculationMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsPrepaymentRecalculationMethod) Error() string {
	return fmt.Sprintf("invalid ProductsPrepaymentRecalculationMethod(%s)", string(err))
}

// ProductsPrincipalCapMethod is the 'products_principal_cap_method' enum.
type ProductsPrincipalCapMethod int32

// ProductsPrincipalCapMethod values.
const (
	// ProductsPrincipalCapMethodOutstandingprincipalpercentage is the 'OutstandingPrincipalPercentage' products_principal_cap_method.
	ProductsPrincipalCapMethodOutstandingprincipalpercentage ProductsPrincipalCapMethod = 1
	// ProductsPrincipalCapMethodOriginalprincipalpercentage is the 'OriginalPrincipalPercentage' products_principal_cap_method.
	ProductsPrincipalCapMethodOriginalprincipalpercentage ProductsPrincipalCapMethod = 2
)

func NewProductsPrincipalCapMethod(ppcm products.PrincipalCapMethod) ProductsPrincipalCapMethod {
	return ProductsPrincipalCapMethod(ppcm + 1)
}

func (ppcm ProductsPrincipalCapMethod) PB() products.PrincipalCapMethod {
	return products.PrincipalCapMethod(ppcm - 1)
}

// UnmarshalText unmarshals ProductsPrincipalCapMethod from text.
func (ppcm *ProductsPrincipalCapMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "OutstandingPrincipalPercentage":
		*ppcm = ProductsPrincipalCapMethodOutstandingprincipalpercentage
	case "OriginalPrincipalPercentage":
		*ppcm = ProductsPrincipalCapMethodOriginalprincipalpercentage
	default:
		return ErrInvalidProductsPrincipalCapMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (ppcm ProductsPrincipalCapMethod) String() string {
	switch ppcm {
	case ProductsPrincipalCapMethodOutstandingprincipalpercentage:
		return "OutstandingPrincipalPercentage"
	case ProductsPrincipalCapMethodOriginalprincipalpercentage:
		return "OriginalPrincipalPercentage"
	}
	return fmt.Sprintf("ProductsPrincipalCapMethod(%d)", ppcm)
}

// Value satisfies the driver.Valuer interface.
func (ppcm ProductsPrincipalCapMethod) Value() (driver.Value, error) {
	return ppcm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ppcm *ProductsPrincipalCapMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ppcm.UnmarshalText(buf)
	}
	return ErrInvalidProductsPrincipalCapMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsPrincipalCapMethod is the invalid ProductsPrincipalCapMethod error.
type ErrInvalidProductsPrincipalCapMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsPrincipalCapMethod) Error() string {
	return fmt.Sprintf("invalid ProductsPrincipalCapMethod(%s)", string(err))
}

// ProductsPrincipalPaidInstallmentStatus is the 'products_principal_paid_installment_status' enum.
type ProductsPrincipalPaidInstallmentStatus int32

// ProductsPrincipalPaidInstallmentStatus values.
const (
	// ProductsPrincipalPaidInstallmentStatusStatuspartiallypaid is the 'StatusPartiallyPaid' products_principal_paid_installment_status.
	ProductsPrincipalPaidInstallmentStatusStatuspartiallypaid ProductsPrincipalPaidInstallmentStatus = 1
	// ProductsPrincipalPaidInstallmentStatusStatuspaid is the 'StatusPaid' products_principal_paid_installment_status.
	ProductsPrincipalPaidInstallmentStatusStatuspaid ProductsPrincipalPaidInstallmentStatus = 2
	// ProductsPrincipalPaidInstallmentStatusStatusoriginaltotalexpectedpaid is the 'StatusOriginalTotalExpectedPaid' products_principal_paid_installment_status.
	ProductsPrincipalPaidInstallmentStatusStatusoriginaltotalexpectedpaid ProductsPrincipalPaidInstallmentStatus = 3
)

func NewProductsPrincipalPaidInstallmentStatus(pppis products.PrincipalPaidInstallmentStatus) ProductsPrincipalPaidInstallmentStatus {
	return ProductsPrincipalPaidInstallmentStatus(pppis + 1)
}

func (pppis ProductsPrincipalPaidInstallmentStatus) PB() products.PrincipalPaidInstallmentStatus {
	return products.PrincipalPaidInstallmentStatus(pppis - 1)
}

// UnmarshalText unmarshals ProductsPrincipalPaidInstallmentStatus from text.
func (pppis *ProductsPrincipalPaidInstallmentStatus) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "StatusPartiallyPaid":
		*pppis = ProductsPrincipalPaidInstallmentStatusStatuspartiallypaid
	case "StatusPaid":
		*pppis = ProductsPrincipalPaidInstallmentStatusStatuspaid
	case "StatusOriginalTotalExpectedPaid":
		*pppis = ProductsPrincipalPaidInstallmentStatusStatusoriginaltotalexpectedpaid
	default:
		return ErrInvalidProductsPrincipalPaidInstallmentStatus(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pppis ProductsPrincipalPaidInstallmentStatus) String() string {
	switch pppis {
	case ProductsPrincipalPaidInstallmentStatusStatuspartiallypaid:
		return "StatusPartiallyPaid"
	case ProductsPrincipalPaidInstallmentStatusStatuspaid:
		return "StatusPaid"
	case ProductsPrincipalPaidInstallmentStatusStatusoriginaltotalexpectedpaid:
		return "StatusOriginalTotalExpectedPaid"
	}
	return fmt.Sprintf("ProductsPrincipalPaidInstallmentStatus(%d)", pppis)
}

// Value satisfies the driver.Valuer interface.
func (pppis ProductsPrincipalPaidInstallmentStatus) Value() (driver.Value, error) {
	return pppis.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pppis *ProductsPrincipalPaidInstallmentStatus) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pppis.UnmarshalText(buf)
	}
	return ErrInvalidProductsPrincipalPaidInstallmentStatus(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsPrincipalPaidInstallmentStatus is the invalid ProductsPrincipalPaidInstallmentStatus error.
type ErrInvalidProductsPrincipalPaidInstallmentStatus string

// Error satisfies the error interface.
func (err ErrInvalidProductsPrincipalPaidInstallmentStatus) Error() string {
	return fmt.Sprintf("invalid ProductsPrincipalPaidInstallmentStatus(%s)", string(err))
}

// ProductsPrincipalPaymentMethod is the 'products_principal_payment_method' enum.
type ProductsPrincipalPaymentMethod int32

// ProductsPrincipalPaymentMethod values.
const (
	// ProductsPrincipalPaymentMethodMethodflatpayment is the 'MethodFlatPayment' products_principal_payment_method.
	ProductsPrincipalPaymentMethodMethodflatpayment ProductsPrincipalPaymentMethod = 1
	// ProductsPrincipalPaymentMethodMethodoutstandingprincipalpercentage is the 'MethodOutstandingPrincipalPercentage' products_principal_payment_method.
	ProductsPrincipalPaymentMethodMethodoutstandingprincipalpercentage ProductsPrincipalPaymentMethod = 2
	// ProductsPrincipalPaymentMethodMethodprincipalpercentagelastdisb is the 'MethodPrincipalPercentageLastDisb' products_principal_payment_method.
	ProductsPrincipalPaymentMethodMethodprincipalpercentagelastdisb ProductsPrincipalPaymentMethod = 3
	// ProductsPrincipalPaymentMethodMethodtotalbalancepercentage is the 'MethodTotalBalancePercentage' products_principal_payment_method.
	ProductsPrincipalPaymentMethodMethodtotalbalancepercentage ProductsPrincipalPaymentMethod = 4
	// ProductsPrincipalPaymentMethodMethodtotalbalanceflat is the 'MethodTotalBalanceFlat' products_principal_payment_method.
	ProductsPrincipalPaymentMethodMethodtotalbalanceflat ProductsPrincipalPaymentMethod = 5
	// ProductsPrincipalPaymentMethodMethodtotalprincipalpercentage is the 'MethodTotalPrincipalPercentage' products_principal_payment_method.
	ProductsPrincipalPaymentMethodMethodtotalprincipalpercentage ProductsPrincipalPaymentMethod = 6
)

func NewProductsPrincipalPaymentMethod(pppm products.PrincipalPaymentMethod) ProductsPrincipalPaymentMethod {
	return ProductsPrincipalPaymentMethod(pppm + 1)
}

func (pppm ProductsPrincipalPaymentMethod) PB() products.PrincipalPaymentMethod {
	return products.PrincipalPaymentMethod(pppm - 1)
}

// UnmarshalText unmarshals ProductsPrincipalPaymentMethod from text.
func (pppm *ProductsPrincipalPaymentMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodFlatPayment":
		*pppm = ProductsPrincipalPaymentMethodMethodflatpayment
	case "MethodOutstandingPrincipalPercentage":
		*pppm = ProductsPrincipalPaymentMethodMethodoutstandingprincipalpercentage
	case "MethodPrincipalPercentageLastDisb":
		*pppm = ProductsPrincipalPaymentMethodMethodprincipalpercentagelastdisb
	case "MethodTotalBalancePercentage":
		*pppm = ProductsPrincipalPaymentMethodMethodtotalbalancepercentage
	case "MethodTotalBalanceFlat":
		*pppm = ProductsPrincipalPaymentMethodMethodtotalbalanceflat
	case "MethodTotalPrincipalPercentage":
		*pppm = ProductsPrincipalPaymentMethodMethodtotalprincipalpercentage
	default:
		return ErrInvalidProductsPrincipalPaymentMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (pppm ProductsPrincipalPaymentMethod) String() string {
	switch pppm {
	case ProductsPrincipalPaymentMethodMethodflatpayment:
		return "MethodFlatPayment"
	case ProductsPrincipalPaymentMethodMethodoutstandingprincipalpercentage:
		return "MethodOutstandingPrincipalPercentage"
	case ProductsPrincipalPaymentMethodMethodprincipalpercentagelastdisb:
		return "MethodPrincipalPercentageLastDisb"
	case ProductsPrincipalPaymentMethodMethodtotalbalancepercentage:
		return "MethodTotalBalancePercentage"
	case ProductsPrincipalPaymentMethodMethodtotalbalanceflat:
		return "MethodTotalBalanceFlat"
	case ProductsPrincipalPaymentMethodMethodtotalprincipalpercentage:
		return "MethodTotalPrincipalPercentage"
	}
	return fmt.Sprintf("ProductsPrincipalPaymentMethod(%d)", pppm)
}

// Value satisfies the driver.Valuer interface.
func (pppm ProductsPrincipalPaymentMethod) Value() (driver.Value, error) {
	return pppm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (pppm *ProductsPrincipalPaymentMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return pppm.UnmarshalText(buf)
	}
	return ErrInvalidProductsPrincipalPaymentMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsPrincipalPaymentMethod is the invalid ProductsPrincipalPaymentMethod error.
type ErrInvalidProductsPrincipalPaymentMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsPrincipalPaymentMethod) Error() string {
	return fmt.Sprintf("invalid ProductsPrincipalPaymentMethod(%s)", string(err))
}

// ProductsRepaymentAllocationOrder is the 'products_repayment_allocation_order' enum.
type ProductsRepaymentAllocationOrder int32

// ProductsRepaymentAllocationOrder values.
const (
	// ProductsRepaymentAllocationOrderOrderprincipal is the 'OrderPrincipal' products_repayment_allocation_order.
	ProductsRepaymentAllocationOrderOrderprincipal ProductsRepaymentAllocationOrder = 1
	// ProductsRepaymentAllocationOrderOrderinterest is the 'OrderInterest' products_repayment_allocation_order.
	ProductsRepaymentAllocationOrderOrderinterest ProductsRepaymentAllocationOrder = 2
	// ProductsRepaymentAllocationOrderOrderfee is the 'OrderFee' products_repayment_allocation_order.
	ProductsRepaymentAllocationOrderOrderfee ProductsRepaymentAllocationOrder = 3
	// ProductsRepaymentAllocationOrderOrderpenalty is the 'OrderPenalty' products_repayment_allocation_order.
	ProductsRepaymentAllocationOrderOrderpenalty ProductsRepaymentAllocationOrder = 4
)

func NewProductsRepaymentAllocationOrder(prao products.RepaymentAllocationOrder) ProductsRepaymentAllocationOrder {
	return ProductsRepaymentAllocationOrder(prao + 1)
}

func (prao ProductsRepaymentAllocationOrder) PB() products.RepaymentAllocationOrder {
	return products.RepaymentAllocationOrder(prao - 1)
}

// UnmarshalText unmarshals ProductsRepaymentAllocationOrder from text.
func (prao *ProductsRepaymentAllocationOrder) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "OrderPrincipal":
		*prao = ProductsRepaymentAllocationOrderOrderprincipal
	case "OrderInterest":
		*prao = ProductsRepaymentAllocationOrderOrderinterest
	case "OrderFee":
		*prao = ProductsRepaymentAllocationOrderOrderfee
	case "OrderPenalty":
		*prao = ProductsRepaymentAllocationOrderOrderpenalty
	default:
		return ErrInvalidProductsRepaymentAllocationOrder(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (prao ProductsRepaymentAllocationOrder) String() string {
	switch prao {
	case ProductsRepaymentAllocationOrderOrderprincipal:
		return "OrderPrincipal"
	case ProductsRepaymentAllocationOrderOrderinterest:
		return "OrderInterest"
	case ProductsRepaymentAllocationOrderOrderfee:
		return "OrderFee"
	case ProductsRepaymentAllocationOrderOrderpenalty:
		return "OrderPenalty"
	}
	return fmt.Sprintf("ProductsRepaymentAllocationOrder(%d)", prao)
}

// Value satisfies the driver.Valuer interface.
func (prao ProductsRepaymentAllocationOrder) Value() (driver.Value, error) {
	return prao.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (prao *ProductsRepaymentAllocationOrder) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return prao.UnmarshalText(buf)
	}
	return ErrInvalidProductsRepaymentAllocationOrder(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsRepaymentAllocationOrder is the invalid ProductsRepaymentAllocationOrder error.
type ErrInvalidProductsRepaymentAllocationOrder string

// Error satisfies the error interface.
func (err ErrInvalidProductsRepaymentAllocationOrder) Error() string {
	return fmt.Sprintf("invalid ProductsRepaymentAllocationOrder(%s)", string(err))
}

// ProductsRepaymentCurrencyRounding is the 'products_repayment_currency_rounding' enum.
type ProductsRepaymentCurrencyRounding int32

// ProductsRepaymentCurrencyRounding values.
const (
	// ProductsRepaymentCurrencyRoundingNocurrencyrounding is the 'NoCurrencyRounding' products_repayment_currency_rounding.
	ProductsRepaymentCurrencyRoundingNocurrencyrounding ProductsRepaymentCurrencyRounding = 1
	// ProductsRepaymentCurrencyRoundingRoundtonearestwholeunit is the 'RoundToNearestWholeUnit' products_repayment_currency_rounding.
	ProductsRepaymentCurrencyRoundingRoundtonearestwholeunit ProductsRepaymentCurrencyRounding = 2
	// ProductsRepaymentCurrencyRoundingRounduptonearestwholeunit is the 'RoundUpToNearestWholeUnit' products_repayment_currency_rounding.
	ProductsRepaymentCurrencyRoundingRounduptonearestwholeunit ProductsRepaymentCurrencyRounding = 3
)

func NewProductsRepaymentCurrencyRounding(prcr products.RepaymentCurrencyRounding) ProductsRepaymentCurrencyRounding {
	return ProductsRepaymentCurrencyRounding(prcr + 1)
}

func (prcr ProductsRepaymentCurrencyRounding) PB() products.RepaymentCurrencyRounding {
	return products.RepaymentCurrencyRounding(prcr - 1)
}

// UnmarshalText unmarshals ProductsRepaymentCurrencyRounding from text.
func (prcr *ProductsRepaymentCurrencyRounding) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "NoCurrencyRounding":
		*prcr = ProductsRepaymentCurrencyRoundingNocurrencyrounding
	case "RoundToNearestWholeUnit":
		*prcr = ProductsRepaymentCurrencyRoundingRoundtonearestwholeunit
	case "RoundUpToNearestWholeUnit":
		*prcr = ProductsRepaymentCurrencyRoundingRounduptonearestwholeunit
	default:
		return ErrInvalidProductsRepaymentCurrencyRounding(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (prcr ProductsRepaymentCurrencyRounding) String() string {
	switch prcr {
	case ProductsRepaymentCurrencyRoundingNocurrencyrounding:
		return "NoCurrencyRounding"
	case ProductsRepaymentCurrencyRoundingRoundtonearestwholeunit:
		return "RoundToNearestWholeUnit"
	case ProductsRepaymentCurrencyRoundingRounduptonearestwholeunit:
		return "RoundUpToNearestWholeUnit"
	}
	return fmt.Sprintf("ProductsRepaymentCurrencyRounding(%d)", prcr)
}

// Value satisfies the driver.Valuer interface.
func (prcr ProductsRepaymentCurrencyRounding) Value() (driver.Value, error) {
	return prcr.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (prcr *ProductsRepaymentCurrencyRounding) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return prcr.UnmarshalText(buf)
	}
	return ErrInvalidProductsRepaymentCurrencyRounding(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsRepaymentCurrencyRounding is the invalid ProductsRepaymentCurrencyRounding error.
type ErrInvalidProductsRepaymentCurrencyRounding string

// Error satisfies the error interface.
func (err ErrInvalidProductsRepaymentCurrencyRounding) Error() string {
	return fmt.Sprintf("invalid ProductsRepaymentCurrencyRounding(%s)", string(err))
}

// ProductsRepaymentElementsRounding is the 'products_repayment_elements_rounding' enum.
type ProductsRepaymentElementsRounding int32

// ProductsRepaymentElementsRounding values.
const (
	// ProductsRepaymentElementsRoundingNorepaymentrounding is the 'NoRepaymentRounding' products_repayment_elements_rounding.
	ProductsRepaymentElementsRoundingNorepaymentrounding ProductsRepaymentElementsRounding = 1
	// ProductsRepaymentElementsRoundingRoundall is the 'RoundAll' products_repayment_elements_rounding.
	ProductsRepaymentElementsRoundingRoundall ProductsRepaymentElementsRounding = 2
	// ProductsRepaymentElementsRoundingRoundpaymentdue is the 'RoundPaymentDue' products_repayment_elements_rounding.
	ProductsRepaymentElementsRoundingRoundpaymentdue ProductsRepaymentElementsRounding = 3
)

func NewProductsRepaymentElementsRounding(prer products.RepaymentElementsRounding) ProductsRepaymentElementsRounding {
	return ProductsRepaymentElementsRounding(prer + 1)
}

func (prer ProductsRepaymentElementsRounding) PB() products.RepaymentElementsRounding {
	return products.RepaymentElementsRounding(prer - 1)
}

// UnmarshalText unmarshals ProductsRepaymentElementsRounding from text.
func (prer *ProductsRepaymentElementsRounding) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "NoRepaymentRounding":
		*prer = ProductsRepaymentElementsRoundingNorepaymentrounding
	case "RoundAll":
		*prer = ProductsRepaymentElementsRoundingRoundall
	case "RoundPaymentDue":
		*prer = ProductsRepaymentElementsRoundingRoundpaymentdue
	default:
		return ErrInvalidProductsRepaymentElementsRounding(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (prer ProductsRepaymentElementsRounding) String() string {
	switch prer {
	case ProductsRepaymentElementsRoundingNorepaymentrounding:
		return "NoRepaymentRounding"
	case ProductsRepaymentElementsRoundingRoundall:
		return "RoundAll"
	case ProductsRepaymentElementsRoundingRoundpaymentdue:
		return "RoundPaymentDue"
	}
	return fmt.Sprintf("ProductsRepaymentElementsRounding(%d)", prer)
}

// Value satisfies the driver.Valuer interface.
func (prer ProductsRepaymentElementsRounding) Value() (driver.Value, error) {
	return prer.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (prer *ProductsRepaymentElementsRounding) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return prer.UnmarshalText(buf)
	}
	return ErrInvalidProductsRepaymentElementsRounding(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsRepaymentElementsRounding is the invalid ProductsRepaymentElementsRounding error.
type ErrInvalidProductsRepaymentElementsRounding string

// Error satisfies the error interface.
func (err ErrInvalidProductsRepaymentElementsRounding) Error() string {
	return fmt.Sprintf("invalid ProductsRepaymentElementsRounding(%s)", string(err))
}

// ProductsRepaymentReschedulingMethod is the 'products_repayment_rescheduling_method' enum.
type ProductsRepaymentReschedulingMethod int32

// ProductsRepaymentReschedulingMethod values.
const (
	// ProductsRepaymentReschedulingMethodNoreschedulerepayment is the 'NoRescheduleRepayment' products_repayment_rescheduling_method.
	ProductsRepaymentReschedulingMethodNoreschedulerepayment ProductsRepaymentReschedulingMethod = 1
	// ProductsRepaymentReschedulingMethodNextworkingday is the 'NextWorkingDay' products_repayment_rescheduling_method.
	ProductsRepaymentReschedulingMethodNextworkingday ProductsRepaymentReschedulingMethod = 2
	// ProductsRepaymentReschedulingMethodPreviousworkingday is the 'PreviousWorkingDay' products_repayment_rescheduling_method.
	ProductsRepaymentReschedulingMethodPreviousworkingday ProductsRepaymentReschedulingMethod = 3
	// ProductsRepaymentReschedulingMethodExtendschedule is the 'ExtendSchedule' products_repayment_rescheduling_method.
	ProductsRepaymentReschedulingMethodExtendschedule ProductsRepaymentReschedulingMethod = 4
)

func NewProductsRepaymentReschedulingMethod(prrm products.RepaymentReschedulingMethod) ProductsRepaymentReschedulingMethod {
	return ProductsRepaymentReschedulingMethod(prrm + 1)
}

func (prrm ProductsRepaymentReschedulingMethod) PB() products.RepaymentReschedulingMethod {
	return products.RepaymentReschedulingMethod(prrm - 1)
}

// UnmarshalText unmarshals ProductsRepaymentReschedulingMethod from text.
func (prrm *ProductsRepaymentReschedulingMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "NoRescheduleRepayment":
		*prrm = ProductsRepaymentReschedulingMethodNoreschedulerepayment
	case "NextWorkingDay":
		*prrm = ProductsRepaymentReschedulingMethodNextworkingday
	case "PreviousWorkingDay":
		*prrm = ProductsRepaymentReschedulingMethodPreviousworkingday
	case "ExtendSchedule":
		*prrm = ProductsRepaymentReschedulingMethodExtendschedule
	default:
		return ErrInvalidProductsRepaymentReschedulingMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (prrm ProductsRepaymentReschedulingMethod) String() string {
	switch prrm {
	case ProductsRepaymentReschedulingMethodNoreschedulerepayment:
		return "NoRescheduleRepayment"
	case ProductsRepaymentReschedulingMethodNextworkingday:
		return "NextWorkingDay"
	case ProductsRepaymentReschedulingMethodPreviousworkingday:
		return "PreviousWorkingDay"
	case ProductsRepaymentReschedulingMethodExtendschedule:
		return "ExtendSchedule"
	}
	return fmt.Sprintf("ProductsRepaymentReschedulingMethod(%d)", prrm)
}

// Value satisfies the driver.Valuer interface.
func (prrm ProductsRepaymentReschedulingMethod) Value() (driver.Value, error) {
	return prrm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (prrm *ProductsRepaymentReschedulingMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return prrm.UnmarshalText(buf)
	}
	return ErrInvalidProductsRepaymentReschedulingMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsRepaymentReschedulingMethod is the invalid ProductsRepaymentReschedulingMethod error.
type ErrInvalidProductsRepaymentReschedulingMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsRepaymentReschedulingMethod) Error() string {
	return fmt.Sprintf("invalid ProductsRepaymentReschedulingMethod(%s)", string(err))
}

// ProductsRepaymentScheduleEditOptions is the 'products_repayment_schedule_edit_options' enum.
type ProductsRepaymentScheduleEditOptions int32

// ProductsRepaymentScheduleEditOptions values.
const (
	// ProductsRepaymentScheduleEditOptionsAdjustpaymentdates is the 'AdjustPaymentDates' products_repayment_schedule_edit_options.
	ProductsRepaymentScheduleEditOptionsAdjustpaymentdates ProductsRepaymentScheduleEditOptions = 1
	// ProductsRepaymentScheduleEditOptionsAdjustprincipalpaymentschedule is the 'AdjustPrincipalPaymentSchedule' products_repayment_schedule_edit_options.
	ProductsRepaymentScheduleEditOptionsAdjustprincipalpaymentschedule ProductsRepaymentScheduleEditOptions = 2
	// ProductsRepaymentScheduleEditOptionsAdjustinterestpaymentschedule is the 'AdjustInterestPaymentSchedule' products_repayment_schedule_edit_options.
	ProductsRepaymentScheduleEditOptionsAdjustinterestpaymentschedule ProductsRepaymentScheduleEditOptions = 3
	// ProductsRepaymentScheduleEditOptionsAdjustfeepaymentschedule is the 'AdjustFeePaymentSchedule' products_repayment_schedule_edit_options.
	ProductsRepaymentScheduleEditOptionsAdjustfeepaymentschedule ProductsRepaymentScheduleEditOptions = 4
	// ProductsRepaymentScheduleEditOptionsAdjustpenaltypaymentschedule is the 'AdjustPenaltyPaymentSchedule' products_repayment_schedule_edit_options.
	ProductsRepaymentScheduleEditOptionsAdjustpenaltypaymentschedule ProductsRepaymentScheduleEditOptions = 5
	// ProductsRepaymentScheduleEditOptionsAdjustnumberofinstallments is the 'AdjustNumberOfInstallments' products_repayment_schedule_edit_options.
	ProductsRepaymentScheduleEditOptionsAdjustnumberofinstallments ProductsRepaymentScheduleEditOptions = 6
	// ProductsRepaymentScheduleEditOptionsAdjustpaymentholidays is the 'AdjustPaymentHolidays' products_repayment_schedule_edit_options.
	ProductsRepaymentScheduleEditOptionsAdjustpaymentholidays ProductsRepaymentScheduleEditOptions = 7
)

func NewProductsRepaymentScheduleEditOptions(prseo products.RepaymentScheduleEditOptions) ProductsRepaymentScheduleEditOptions {
	return ProductsRepaymentScheduleEditOptions(prseo + 1)
}

func (prseo ProductsRepaymentScheduleEditOptions) PB() products.RepaymentScheduleEditOptions {
	return products.RepaymentScheduleEditOptions(prseo - 1)
}

// UnmarshalText unmarshals ProductsRepaymentScheduleEditOptions from text.
func (prseo *ProductsRepaymentScheduleEditOptions) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "AdjustPaymentDates":
		*prseo = ProductsRepaymentScheduleEditOptionsAdjustpaymentdates
	case "AdjustPrincipalPaymentSchedule":
		*prseo = ProductsRepaymentScheduleEditOptionsAdjustprincipalpaymentschedule
	case "AdjustInterestPaymentSchedule":
		*prseo = ProductsRepaymentScheduleEditOptionsAdjustinterestpaymentschedule
	case "AdjustFeePaymentSchedule":
		*prseo = ProductsRepaymentScheduleEditOptionsAdjustfeepaymentschedule
	case "AdjustPenaltyPaymentSchedule":
		*prseo = ProductsRepaymentScheduleEditOptionsAdjustpenaltypaymentschedule
	case "AdjustNumberOfInstallments":
		*prseo = ProductsRepaymentScheduleEditOptionsAdjustnumberofinstallments
	case "AdjustPaymentHolidays":
		*prseo = ProductsRepaymentScheduleEditOptionsAdjustpaymentholidays
	default:
		return ErrInvalidProductsRepaymentScheduleEditOptions(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (prseo ProductsRepaymentScheduleEditOptions) String() string {
	switch prseo {
	case ProductsRepaymentScheduleEditOptionsAdjustpaymentdates:
		return "AdjustPaymentDates"
	case ProductsRepaymentScheduleEditOptionsAdjustprincipalpaymentschedule:
		return "AdjustPrincipalPaymentSchedule"
	case ProductsRepaymentScheduleEditOptionsAdjustinterestpaymentschedule:
		return "AdjustInterestPaymentSchedule"
	case ProductsRepaymentScheduleEditOptionsAdjustfeepaymentschedule:
		return "AdjustFeePaymentSchedule"
	case ProductsRepaymentScheduleEditOptionsAdjustpenaltypaymentschedule:
		return "AdjustPenaltyPaymentSchedule"
	case ProductsRepaymentScheduleEditOptionsAdjustnumberofinstallments:
		return "AdjustNumberOfInstallments"
	case ProductsRepaymentScheduleEditOptionsAdjustpaymentholidays:
		return "AdjustPaymentHolidays"
	}
	return fmt.Sprintf("ProductsRepaymentScheduleEditOptions(%d)", prseo)
}

// Value satisfies the driver.Valuer interface.
func (prseo ProductsRepaymentScheduleEditOptions) Value() (driver.Value, error) {
	return prseo.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (prseo *ProductsRepaymentScheduleEditOptions) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return prseo.UnmarshalText(buf)
	}
	return ErrInvalidProductsRepaymentScheduleEditOptions(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsRepaymentScheduleEditOptions is the invalid ProductsRepaymentScheduleEditOptions error.
type ErrInvalidProductsRepaymentScheduleEditOptions string

// Error satisfies the error interface.
func (err ErrInvalidProductsRepaymentScheduleEditOptions) Error() string {
	return fmt.Sprintf("invalid ProductsRepaymentScheduleEditOptions(%s)", string(err))
}

// ProductsRepaymentScheduleRounding is the 'products_repayment_schedule_rounding' enum.
type ProductsRepaymentScheduleRounding int32

// ProductsRepaymentScheduleRounding values.
const (
	// ProductsRepaymentScheduleRoundingNoschedulerounding is the 'NoScheduleRounding' products_repayment_schedule_rounding.
	ProductsRepaymentScheduleRoundingNoschedulerounding ProductsRepaymentScheduleRounding = 1
	// ProductsRepaymentScheduleRoundingRoundremainderintolastrepayment is the 'RoundRemainderIntoLastRepayment' products_repayment_schedule_rounding.
	ProductsRepaymentScheduleRoundingRoundremainderintolastrepayment ProductsRepaymentScheduleRounding = 2
	// ProductsRepaymentScheduleRoundingRoundprincipalandinterestremainderintolastrepayment is the 'RoundPrincipalAndInterestRemainderIntoLastRepayment' products_repayment_schedule_rounding.
	ProductsRepaymentScheduleRoundingRoundprincipalandinterestremainderintolastrepayment ProductsRepaymentScheduleRounding = 3
)

func NewProductsRepaymentScheduleRounding(prsr products.RepaymentScheduleRounding) ProductsRepaymentScheduleRounding {
	return ProductsRepaymentScheduleRounding(prsr + 1)
}

func (prsr ProductsRepaymentScheduleRounding) PB() products.RepaymentScheduleRounding {
	return products.RepaymentScheduleRounding(prsr - 1)
}

// UnmarshalText unmarshals ProductsRepaymentScheduleRounding from text.
func (prsr *ProductsRepaymentScheduleRounding) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "NoScheduleRounding":
		*prsr = ProductsRepaymentScheduleRoundingNoschedulerounding
	case "RoundRemainderIntoLastRepayment":
		*prsr = ProductsRepaymentScheduleRoundingRoundremainderintolastrepayment
	case "RoundPrincipalAndInterestRemainderIntoLastRepayment":
		*prsr = ProductsRepaymentScheduleRoundingRoundprincipalandinterestremainderintolastrepayment
	default:
		return ErrInvalidProductsRepaymentScheduleRounding(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (prsr ProductsRepaymentScheduleRounding) String() string {
	switch prsr {
	case ProductsRepaymentScheduleRoundingNoschedulerounding:
		return "NoScheduleRounding"
	case ProductsRepaymentScheduleRoundingRoundremainderintolastrepayment:
		return "RoundRemainderIntoLastRepayment"
	case ProductsRepaymentScheduleRoundingRoundprincipalandinterestremainderintolastrepayment:
		return "RoundPrincipalAndInterestRemainderIntoLastRepayment"
	}
	return fmt.Sprintf("ProductsRepaymentScheduleRounding(%d)", prsr)
}

// Value satisfies the driver.Valuer interface.
func (prsr ProductsRepaymentScheduleRounding) Value() (driver.Value, error) {
	return prsr.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (prsr *ProductsRepaymentScheduleRounding) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return prsr.UnmarshalText(buf)
	}
	return ErrInvalidProductsRepaymentScheduleRounding(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsRepaymentScheduleRounding is the invalid ProductsRepaymentScheduleRounding error.
type ErrInvalidProductsRepaymentScheduleRounding string

// Error satisfies the error interface.
func (err ErrInvalidProductsRepaymentScheduleRounding) Error() string {
	return fmt.Sprintf("invalid ProductsRepaymentScheduleRounding(%s)", string(err))
}

// ProductsRepaymentScheduleType is the 'products_repayment_schedule_type' enum.
type ProductsRepaymentScheduleType int32

// ProductsRepaymentScheduleType values.
const (
	// ProductsRepaymentScheduleTypeNorepaymentschedule is the 'NoRepaymentSchedule' products_repayment_schedule_type.
	ProductsRepaymentScheduleTypeNorepaymentschedule ProductsRepaymentScheduleType = 1
	// ProductsRepaymentScheduleTypeFixedrepaymentschedule is the 'FixedRepaymentSchedule' products_repayment_schedule_type.
	ProductsRepaymentScheduleTypeFixedrepaymentschedule ProductsRepaymentScheduleType = 2
	// ProductsRepaymentScheduleTypeDynamicrepaymentschedule is the 'DynamicRepaymentSchedule' products_repayment_schedule_type.
	ProductsRepaymentScheduleTypeDynamicrepaymentschedule ProductsRepaymentScheduleType = 3
)

func NewProductsRepaymentScheduleType(prst products.RepaymentScheduleType) ProductsRepaymentScheduleType {
	return ProductsRepaymentScheduleType(prst + 1)
}

func (prst ProductsRepaymentScheduleType) PB() products.RepaymentScheduleType {
	return products.RepaymentScheduleType(prst - 1)
}

// UnmarshalText unmarshals ProductsRepaymentScheduleType from text.
func (prst *ProductsRepaymentScheduleType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "NoRepaymentSchedule":
		*prst = ProductsRepaymentScheduleTypeNorepaymentschedule
	case "FixedRepaymentSchedule":
		*prst = ProductsRepaymentScheduleTypeFixedrepaymentschedule
	case "DynamicRepaymentSchedule":
		*prst = ProductsRepaymentScheduleTypeDynamicrepaymentschedule
	default:
		return ErrInvalidProductsRepaymentScheduleType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (prst ProductsRepaymentScheduleType) String() string {
	switch prst {
	case ProductsRepaymentScheduleTypeNorepaymentschedule:
		return "NoRepaymentSchedule"
	case ProductsRepaymentScheduleTypeFixedrepaymentschedule:
		return "FixedRepaymentSchedule"
	case ProductsRepaymentScheduleTypeDynamicrepaymentschedule:
		return "DynamicRepaymentSchedule"
	}
	return fmt.Sprintf("ProductsRepaymentScheduleType(%d)", prst)
}

// Value satisfies the driver.Valuer interface.
func (prst ProductsRepaymentScheduleType) Value() (driver.Value, error) {
	return prst.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (prst *ProductsRepaymentScheduleType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return prst.UnmarshalText(buf)
	}
	return ErrInvalidProductsRepaymentScheduleType(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsRepaymentScheduleType is the invalid ProductsRepaymentScheduleType error.
type ErrInvalidProductsRepaymentScheduleType string

// Error satisfies the error interface.
func (err ErrInvalidProductsRepaymentScheduleType) Error() string {
	return fmt.Sprintf("invalid ProductsRepaymentScheduleType(%s)", string(err))
}

// ProductsRevolvingAccountRequirement is the 'products_revolving_account_requirement' enum.
type ProductsRevolvingAccountRequirement int32

// ProductsRevolvingAccountRequirement values.
const (
	// ProductsRevolvingAccountRequirementRequirementoptional is the 'RequirementOptional' products_revolving_account_requirement.
	ProductsRevolvingAccountRequirementRequirementoptional ProductsRevolvingAccountRequirement = 1
	// ProductsRevolvingAccountRequirementRequirementrequired is the 'RequirementRequired' products_revolving_account_requirement.
	ProductsRevolvingAccountRequirementRequirementrequired ProductsRevolvingAccountRequirement = 2
	// ProductsRevolvingAccountRequirementRequirementnotrequired is the 'RequirementNotRequired' products_revolving_account_requirement.
	ProductsRevolvingAccountRequirementRequirementnotrequired ProductsRevolvingAccountRequirement = 3
)

func NewProductsRevolvingAccountRequirement(prar products.RevolvingAccountRequirement) ProductsRevolvingAccountRequirement {
	return ProductsRevolvingAccountRequirement(prar + 1)
}

func (prar ProductsRevolvingAccountRequirement) PB() products.RevolvingAccountRequirement {
	return products.RevolvingAccountRequirement(prar - 1)
}

// UnmarshalText unmarshals ProductsRevolvingAccountRequirement from text.
func (prar *ProductsRevolvingAccountRequirement) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "RequirementOptional":
		*prar = ProductsRevolvingAccountRequirementRequirementoptional
	case "RequirementRequired":
		*prar = ProductsRevolvingAccountRequirementRequirementrequired
	case "RequirementNotRequired":
		*prar = ProductsRevolvingAccountRequirementRequirementnotrequired
	default:
		return ErrInvalidProductsRevolvingAccountRequirement(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (prar ProductsRevolvingAccountRequirement) String() string {
	switch prar {
	case ProductsRevolvingAccountRequirementRequirementoptional:
		return "RequirementOptional"
	case ProductsRevolvingAccountRequirementRequirementrequired:
		return "RequirementRequired"
	case ProductsRevolvingAccountRequirementRequirementnotrequired:
		return "RequirementNotRequired"
	}
	return fmt.Sprintf("ProductsRevolvingAccountRequirement(%d)", prar)
}

// Value satisfies the driver.Valuer interface.
func (prar ProductsRevolvingAccountRequirement) Value() (driver.Value, error) {
	return prar.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (prar *ProductsRevolvingAccountRequirement) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return prar.UnmarshalText(buf)
	}
	return ErrInvalidProductsRevolvingAccountRequirement(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsRevolvingAccountRequirement is the invalid ProductsRevolvingAccountRequirement error.
type ErrInvalidProductsRevolvingAccountRequirement string

// Error satisfies the error interface.
func (err ErrInvalidProductsRevolvingAccountRequirement) Error() string {
	return fmt.Sprintf("invalid ProductsRevolvingAccountRequirement(%s)", string(err))
}

// ProductsSettlementMethod is the 'products_settlement_method' enum.
type ProductsSettlementMethod int32

// ProductsSettlementMethod values.
const (
	// ProductsSettlementMethodMethodfulldueamounts is the 'MethodFullDueAmounts' products_settlement_method.
	ProductsSettlementMethodMethodfulldueamounts ProductsSettlementMethod = 1
	// ProductsSettlementMethodMethodpartialdueamounts is the 'MethodPartialDueAmounts' products_settlement_method.
	ProductsSettlementMethodMethodpartialdueamounts ProductsSettlementMethod = 2
	// ProductsSettlementMethodMethodnoautomatedtransfers is the 'MethodNoAutomatedTransfers' products_settlement_method.
	ProductsSettlementMethodMethodnoautomatedtransfers ProductsSettlementMethod = 3
)

func NewProductsSettlementMethod(psm products.SettlementMethod) ProductsSettlementMethod {
	return ProductsSettlementMethod(psm + 1)
}

func (psm ProductsSettlementMethod) PB() products.SettlementMethod {
	return products.SettlementMethod(psm - 1)
}

// UnmarshalText unmarshals ProductsSettlementMethod from text.
func (psm *ProductsSettlementMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "MethodFullDueAmounts":
		*psm = ProductsSettlementMethodMethodfulldueamounts
	case "MethodPartialDueAmounts":
		*psm = ProductsSettlementMethodMethodpartialdueamounts
	case "MethodNoAutomatedTransfers":
		*psm = ProductsSettlementMethodMethodnoautomatedtransfers
	default:
		return ErrInvalidProductsSettlementMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (psm ProductsSettlementMethod) String() string {
	switch psm {
	case ProductsSettlementMethodMethodfulldueamounts:
		return "MethodFullDueAmounts"
	case ProductsSettlementMethodMethodpartialdueamounts:
		return "MethodPartialDueAmounts"
	case ProductsSettlementMethodMethodnoautomatedtransfers:
		return "MethodNoAutomatedTransfers"
	}
	return fmt.Sprintf("ProductsSettlementMethod(%d)", psm)
}

// Value satisfies the driver.Valuer interface.
func (psm ProductsSettlementMethod) Value() (driver.Value, error) {
	return psm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (psm *ProductsSettlementMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return psm.UnmarshalText(buf)
	}
	return ErrInvalidProductsSettlementMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsSettlementMethod is the invalid ProductsSettlementMethod error.
type ErrInvalidProductsSettlementMethod string

// Error satisfies the error interface.
func (err ErrInvalidProductsSettlementMethod) Error() string {
	return fmt.Sprintf("invalid ProductsSettlementMethod(%s)", string(err))
}

// ProductsToleranceCalculation is the 'products_tolerance_calculation' enum.
type ProductsToleranceCalculation int32

// ProductsToleranceCalculation values.
const (
	// ProductsToleranceCalculationArrearstoleranceperiod is the 'ArrearsTolerancePeriod' products_tolerance_calculation.
	ProductsToleranceCalculationArrearstoleranceperiod ProductsToleranceCalculation = 1
	// ProductsToleranceCalculationMonthlyarrearstoleranceday is the 'MonthlyArrearsToleranceDay' products_tolerance_calculation.
	ProductsToleranceCalculationMonthlyarrearstoleranceday ProductsToleranceCalculation = 2
)

func NewProductsToleranceCalculation(ptc products.ToleranceCalculation) ProductsToleranceCalculation {
	return ProductsToleranceCalculation(ptc + 1)
}

func (ptc ProductsToleranceCalculation) PB() products.ToleranceCalculation {
	return products.ToleranceCalculation(ptc - 1)
}

// UnmarshalText unmarshals ProductsToleranceCalculation from text.
func (ptc *ProductsToleranceCalculation) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "ArrearsTolerancePeriod":
		*ptc = ProductsToleranceCalculationArrearstoleranceperiod
	case "MonthlyArrearsToleranceDay":
		*ptc = ProductsToleranceCalculationMonthlyarrearstoleranceday
	default:
		return ErrInvalidProductsToleranceCalculation(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (ptc ProductsToleranceCalculation) String() string {
	switch ptc {
	case ProductsToleranceCalculationArrearstoleranceperiod:
		return "ArrearsTolerancePeriod"
	case ProductsToleranceCalculationMonthlyarrearstoleranceday:
		return "MonthlyArrearsToleranceDay"
	}
	return fmt.Sprintf("ProductsToleranceCalculation(%d)", ptc)
}

// Value satisfies the driver.Valuer interface.
func (ptc ProductsToleranceCalculation) Value() (driver.Value, error) {
	return ptc.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ptc *ProductsToleranceCalculation) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ptc.UnmarshalText(buf)
	}
	return ErrInvalidProductsToleranceCalculation(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsToleranceCalculation is the invalid ProductsToleranceCalculation error.
type ErrInvalidProductsToleranceCalculation string

// Error satisfies the error interface.
func (err ErrInvalidProductsToleranceCalculation) Error() string {
	return fmt.Sprintf("invalid ProductsToleranceCalculation(%s)", string(err))
}

// ProductsTotalDuePayment is the 'products_total_due_payment' enum.
type ProductsTotalDuePayment int32

// ProductsTotalDuePayment values.
const (
	// ProductsTotalDuePaymentPaymentflat is the 'PaymentFlat' products_total_due_payment.
	ProductsTotalDuePaymentPaymentflat ProductsTotalDuePayment = 1
	// ProductsTotalDuePaymentPaymentoutstandingprincipalpercentage is the 'PaymentOutstandingPrincipalPercentage' products_total_due_payment.
	ProductsTotalDuePaymentPaymentoutstandingprincipalpercentage ProductsTotalDuePayment = 2
	// ProductsTotalDuePaymentPaymentprincipalpercentagelastdisb is the 'PaymentPrincipalPercentageLastDisb' products_total_due_payment.
	ProductsTotalDuePaymentPaymentprincipalpercentagelastdisb ProductsTotalDuePayment = 3
	// ProductsTotalDuePaymentPaymenttotalbalancepercentage is the 'PaymentTotalBalancePercentage' products_total_due_payment.
	ProductsTotalDuePaymentPaymenttotalbalancepercentage ProductsTotalDuePayment = 4
	// ProductsTotalDuePaymentPaymenttotalbalanceflat is the 'PaymentTotalBalanceFlat' products_total_due_payment.
	ProductsTotalDuePaymentPaymenttotalbalanceflat ProductsTotalDuePayment = 5
	// ProductsTotalDuePaymentPaymenttotalprincipalpercentage is the 'PaymentTotalPrincipalPercentage' products_total_due_payment.
	ProductsTotalDuePaymentPaymenttotalprincipalpercentage ProductsTotalDuePayment = 6
)

func NewProductsTotalDuePayment(ptdp products.TotalDuePayment) ProductsTotalDuePayment {
	return ProductsTotalDuePayment(ptdp + 1)
}

func (ptdp ProductsTotalDuePayment) PB() products.TotalDuePayment {
	return products.TotalDuePayment(ptdp - 1)
}

// UnmarshalText unmarshals ProductsTotalDuePayment from text.
func (ptdp *ProductsTotalDuePayment) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "PaymentFlat":
		*ptdp = ProductsTotalDuePaymentPaymentflat
	case "PaymentOutstandingPrincipalPercentage":
		*ptdp = ProductsTotalDuePaymentPaymentoutstandingprincipalpercentage
	case "PaymentPrincipalPercentageLastDisb":
		*ptdp = ProductsTotalDuePaymentPaymentprincipalpercentagelastdisb
	case "PaymentTotalBalancePercentage":
		*ptdp = ProductsTotalDuePaymentPaymenttotalbalancepercentage
	case "PaymentTotalBalanceFlat":
		*ptdp = ProductsTotalDuePaymentPaymenttotalbalanceflat
	case "PaymentTotalPrincipalPercentage":
		*ptdp = ProductsTotalDuePaymentPaymenttotalprincipalpercentage
	default:
		return ErrInvalidProductsTotalDuePayment(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (ptdp ProductsTotalDuePayment) String() string {
	switch ptdp {
	case ProductsTotalDuePaymentPaymentflat:
		return "PaymentFlat"
	case ProductsTotalDuePaymentPaymentoutstandingprincipalpercentage:
		return "PaymentOutstandingPrincipalPercentage"
	case ProductsTotalDuePaymentPaymentprincipalpercentagelastdisb:
		return "PaymentPrincipalPercentageLastDisb"
	case ProductsTotalDuePaymentPaymenttotalbalancepercentage:
		return "PaymentTotalBalancePercentage"
	case ProductsTotalDuePaymentPaymenttotalbalanceflat:
		return "PaymentTotalBalanceFlat"
	case ProductsTotalDuePaymentPaymenttotalprincipalpercentage:
		return "PaymentTotalPrincipalPercentage"
	}
	return fmt.Sprintf("ProductsTotalDuePayment(%d)", ptdp)
}

// Value satisfies the driver.Valuer interface.
func (ptdp ProductsTotalDuePayment) Value() (driver.Value, error) {
	return ptdp.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ptdp *ProductsTotalDuePayment) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ptdp.UnmarshalText(buf)
	}
	return ErrInvalidProductsTotalDuePayment(fmt.Sprintf("%T", v))
}

// ErrInvalidProductsTotalDuePayment is the invalid ProductsTotalDuePayment error.
type ErrInvalidProductsTotalDuePayment string

// Error satisfies the error interface.
func (err ErrInvalidProductsTotalDuePayment) Error() string {
	return fmt.Sprintf("invalid ProductsTotalDuePayment(%s)", string(err))
}

// RatesSourceType is the 'rates_source_type' enum.
type RatesSourceType int32

// RatesSourceType values.
const (
	// RatesSourceTypeInterestrate is the 'InterestRate' rates_source_type.
	RatesSourceTypeInterestrate RatesSourceType = 1
	// RatesSourceTypeTaxrate is the 'TaxRate' rates_source_type.
	RatesSourceTypeTaxrate RatesSourceType = 2
	// RatesSourceTypeWithholdingtaxrate is the 'WithholdingTaxRate' rates_source_type.
	RatesSourceTypeWithholdingtaxrate RatesSourceType = 3
	// RatesSourceTypePrincipaltaxrate is the 'PrincipalTaxRate' rates_source_type.
	RatesSourceTypePrincipaltaxrate RatesSourceType = 4
)

func NewRatesSourceType(rst rates.SourceType) RatesSourceType {
	return RatesSourceType(rst + 1)
}

func (rst RatesSourceType) PB() rates.SourceType {
	return rates.SourceType(rst - 1)
}

// UnmarshalText unmarshals RatesSourceType from text.
func (rst *RatesSourceType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "InterestRate":
		*rst = RatesSourceTypeInterestrate
	case "TaxRate":
		*rst = RatesSourceTypeTaxrate
	case "WithholdingTaxRate":
		*rst = RatesSourceTypeWithholdingtaxrate
	case "PrincipalTaxRate":
		*rst = RatesSourceTypePrincipaltaxrate
	default:
		return ErrInvalidRatesSourceType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (rst RatesSourceType) String() string {
	switch rst {
	case RatesSourceTypeInterestrate:
		return "InterestRate"
	case RatesSourceTypeTaxrate:
		return "TaxRate"
	case RatesSourceTypeWithholdingtaxrate:
		return "WithholdingTaxRate"
	case RatesSourceTypePrincipaltaxrate:
		return "PrincipalTaxRate"
	}
	return fmt.Sprintf("RatesSourceType(%d)", rst)
}

// Value satisfies the driver.Valuer interface.
func (rst RatesSourceType) Value() (driver.Value, error) {
	return rst.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (rst *RatesSourceType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return rst.UnmarshalText(buf)
	}
	return ErrInvalidRatesSourceType(fmt.Sprintf("%T", v))
}

// ErrInvalidRatesSourceType is the invalid RatesSourceType error.
type ErrInvalidRatesSourceType string

// Error satisfies the error interface.
func (err ErrInvalidRatesSourceType) Error() string {
	return fmt.Sprintf("invalid RatesSourceType(%s)", string(err))
}

// ReportsBalanceType is the 'reports_balance_type' enum.
type ReportsBalanceType int32

// ReportsBalanceType values.
const (
	// ReportsBalanceTypeOpeningbalance is the 'OpeningBalance' reports_balance_type.
	ReportsBalanceTypeOpeningbalance ReportsBalanceType = 1
	// ReportsBalanceTypeNetchange is the 'NetChange' reports_balance_type.
	ReportsBalanceTypeNetchange ReportsBalanceType = 2
	// ReportsBalanceTypeClosingbalance is the 'ClosingBalance' reports_balance_type.
	ReportsBalanceTypeClosingbalance ReportsBalanceType = 3
)

func NewReportsBalanceType(rbt reports.BalanceType) ReportsBalanceType {
	return ReportsBalanceType(rbt + 1)
}

func (rbt ReportsBalanceType) PB() reports.BalanceType {
	return reports.BalanceType(rbt - 1)
}

// UnmarshalText unmarshals ReportsBalanceType from text.
func (rbt *ReportsBalanceType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "OpeningBalance":
		*rbt = ReportsBalanceTypeOpeningbalance
	case "NetChange":
		*rbt = ReportsBalanceTypeNetchange
	case "ClosingBalance":
		*rbt = ReportsBalanceTypeClosingbalance
	default:
		return ErrInvalidReportsBalanceType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (rbt ReportsBalanceType) String() string {
	switch rbt {
	case ReportsBalanceTypeOpeningbalance:
		return "OpeningBalance"
	case ReportsBalanceTypeNetchange:
		return "NetChange"
	case ReportsBalanceTypeClosingbalance:
		return "ClosingBalance"
	}
	return fmt.Sprintf("ReportsBalanceType(%d)", rbt)
}

// Value satisfies the driver.Valuer interface.
func (rbt ReportsBalanceType) Value() (driver.Value, error) {
	return rbt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (rbt *ReportsBalanceType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return rbt.UnmarshalText(buf)
	}
	return ErrInvalidReportsBalanceType(fmt.Sprintf("%T", v))
}

// ErrInvalidReportsBalanceType is the invalid ReportsBalanceType error.
type ErrInvalidReportsBalanceType string

// Error satisfies the error interface.
func (err ErrInvalidReportsBalanceType) Error() string {
	return fmt.Sprintf("invalid ReportsBalanceType(%s)", string(err))
}

// RevolvingExposureLimit is the 'revolving_exposure_limit' enum.
type RevolvingExposureLimit int32

// RevolvingExposureLimit values.
const (
	// RevolvingExposureLimitApprovedamount is the 'ApprovedAmount' revolving_exposure_limit.
	RevolvingExposureLimitApprovedamount RevolvingExposureLimit = 1
	// RevolvingExposureLimitOutstandingamount is the 'OutstandingAmount' revolving_exposure_limit.
	RevolvingExposureLimitOutstandingamount RevolvingExposureLimit = 2
)

func NewRevolvingExposureLimit(rel revolving.ExposureLimit) RevolvingExposureLimit {
	return RevolvingExposureLimit(rel + 1)
}

func (rel RevolvingExposureLimit) PB() revolving.ExposureLimit {
	return revolving.ExposureLimit(rel - 1)
}

// UnmarshalText unmarshals RevolvingExposureLimit from text.
func (rel *RevolvingExposureLimit) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "ApprovedAmount":
		*rel = RevolvingExposureLimitApprovedamount
	case "OutstandingAmount":
		*rel = RevolvingExposureLimitOutstandingamount
	default:
		return ErrInvalidRevolvingExposureLimit(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (rel RevolvingExposureLimit) String() string {
	switch rel {
	case RevolvingExposureLimitApprovedamount:
		return "ApprovedAmount"
	case RevolvingExposureLimitOutstandingamount:
		return "OutstandingAmount"
	}
	return fmt.Sprintf("RevolvingExposureLimit(%d)", rel)
}

// Value satisfies the driver.Valuer interface.
func (rel RevolvingExposureLimit) Value() (driver.Value, error) {
	return rel.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (rel *RevolvingExposureLimit) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return rel.UnmarshalText(buf)
	}
	return ErrInvalidRevolvingExposureLimit(fmt.Sprintf("%T", v))
}

// ErrInvalidRevolvingExposureLimit is the invalid RevolvingExposureLimit error.
type ErrInvalidRevolvingExposureLimit string

// Error satisfies the error interface.
func (err ErrInvalidRevolvingExposureLimit) Error() string {
	return fmt.Sprintf("invalid RevolvingExposureLimit(%s)", string(err))
}

// State is the 'state' enum.
type State int32

// State values.
const (
	// StatePendingapproval is the 'PendingApproval' state.
	StatePendingapproval State = 1
	// StateInactive is the 'Inactive' state.
	StateInactive State = 2
	// StateActive is the 'Active' state.
	StateActive State = 3
	// StateExited is the 'Exited' state.
	StateExited State = 4
	// StateBlacklisted is the 'Blacklisted' state.
	StateBlacklisted State = 5
	// StateRejected is the 'Rejected' state.
	StateRejected State = 6
)

func NewState(s core.State) State {
	return State(s + 1)
}

func (s State) PB() core.State {
	return core.State(s - 1)
}

// UnmarshalText unmarshals State from text.
func (s *State) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "PendingApproval":
		*s = StatePendingapproval
	case "Inactive":
		*s = StateInactive
	case "Active":
		*s = StateActive
	case "Exited":
		*s = StateExited
	case "Blacklisted":
		*s = StateBlacklisted
	case "Rejected":
		*s = StateRejected
	default:
		return ErrInvalidState(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (s State) String() string {
	switch s {
	case StatePendingapproval:
		return "PendingApproval"
	case StateInactive:
		return "Inactive"
	case StateActive:
		return "Active"
	case StateExited:
		return "Exited"
	case StateBlacklisted:
		return "Blacklisted"
	case StateRejected:
		return "Rejected"
	}
	return fmt.Sprintf("State(%d)", s)
}

// Value satisfies the driver.Valuer interface.
func (s State) Value() (driver.Value, error) {
	return s.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (s *State) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return s.UnmarshalText(buf)
	}
	return ErrInvalidState(fmt.Sprintf("%T", v))
}

// ErrInvalidState is the invalid State error.
type ErrInvalidState string

// Error satisfies the error interface.
func (err ErrInvalidState) Error() string {
	return fmt.Sprintf("invalid State(%s)", string(err))
}

// Status is the 'status' enum.
type Status int32

// Status values.
const (
	// StatusError is the 'Error' status.
	StatusError Status = 1
	// StatusQueued is the 'Queued' status.
	StatusQueued Status = 2
	// StatusInprogress is the 'InProgress' status.
	StatusInprogress Status = 3
	// StatusPending is the 'Pending' status.
	StatusPending Status = 4
	// StatusComplete is the 'Complete' status.
	StatusComplete Status = 5
	// StatusNotfound is the 'NotFound' status.
	StatusNotfound Status = 6
	// StatusCancel is the 'Cancel' status.
	StatusCancel Status = 7
	// StatusTobecanceled is the 'ToBeCanceled' status.
	StatusTobecanceled Status = 8
	// StatusTimedout is the 'TimedOut' status.
	StatusTimedout Status = 9
	// StatusTransienterror is the 'TransientError' status.
	StatusTransienterror Status = 10
	// StatusOverridden is the 'Overridden' status.
	StatusOverridden Status = 11
)

func NewStatus(s core.Status) Status {
	return Status(s + 1)
}

func (s Status) PB() core.Status {
	return core.Status(s - 1)
}

// UnmarshalText unmarshals Status from text.
func (s *Status) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Error":
		*s = StatusError
	case "Queued":
		*s = StatusQueued
	case "InProgress":
		*s = StatusInprogress
	case "Pending":
		*s = StatusPending
	case "Complete":
		*s = StatusComplete
	case "NotFound":
		*s = StatusNotfound
	case "Cancel":
		*s = StatusCancel
	case "ToBeCanceled":
		*s = StatusTobecanceled
	case "TimedOut":
		*s = StatusTimedout
	case "TransientError":
		*s = StatusTransienterror
	case "Overridden":
		*s = StatusOverridden
	default:
		return ErrInvalidStatus(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (s Status) String() string {
	switch s {
	case StatusError:
		return "Error"
	case StatusQueued:
		return "Queued"
	case StatusInprogress:
		return "InProgress"
	case StatusPending:
		return "Pending"
	case StatusComplete:
		return "Complete"
	case StatusNotfound:
		return "NotFound"
	case StatusCancel:
		return "Cancel"
	case StatusTobecanceled:
		return "ToBeCanceled"
	case StatusTimedout:
		return "TimedOut"
	case StatusTransienterror:
		return "TransientError"
	case StatusOverridden:
		return "Overridden"
	}
	return fmt.Sprintf("Status(%d)", s)
}

// Value satisfies the driver.Valuer interface.
func (s Status) Value() (driver.Value, error) {
	return s.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (s *Status) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return s.UnmarshalText(buf)
	}
	return ErrInvalidStatus(fmt.Sprintf("%T", v))
}

// ErrInvalidStatus is the invalid Status error.
type ErrInvalidStatus string

// Error satisfies the error interface.
func (err ErrInvalidStatus) Error() string {
	return fmt.Sprintf("invalid Status(%s)", string(err))
}

// TasksLinkedType is the 'tasks_linked_type' enum.
type TasksLinkedType int32

// TasksLinkedType values.
const (
	// TasksLinkedTypeNone is the 'None' tasks_linked_type.
	TasksLinkedTypeNone TasksLinkedType = 1
	// TasksLinkedTypeClient is the 'Client' tasks_linked_type.
	TasksLinkedTypeClient TasksLinkedType = 2
	// TasksLinkedTypeGroup is the 'Group' tasks_linked_type.
	TasksLinkedTypeGroup TasksLinkedType = 3
	// TasksLinkedTypeLoanproduct is the 'LoanProduct' tasks_linked_type.
	TasksLinkedTypeLoanproduct TasksLinkedType = 4
	// TasksLinkedTypeSavingsproduct is the 'SavingsProduct' tasks_linked_type.
	TasksLinkedTypeSavingsproduct TasksLinkedType = 5
	// TasksLinkedTypeCentre is the 'Centre' tasks_linked_type.
	TasksLinkedTypeCentre TasksLinkedType = 6
	// TasksLinkedTypeBranch is the 'Branch' tasks_linked_type.
	TasksLinkedTypeBranch TasksLinkedType = 7
	// TasksLinkedTypeUser is the 'User' tasks_linked_type.
	TasksLinkedTypeUser TasksLinkedType = 8
	// TasksLinkedTypeLoanaccount is the 'LoanAccount' tasks_linked_type.
	TasksLinkedTypeLoanaccount TasksLinkedType = 9
	// TasksLinkedTypeDepositaccount is the 'DepositAccount' tasks_linked_type.
	TasksLinkedTypeDepositaccount TasksLinkedType = 10
	// TasksLinkedTypeIddocument is the 'IDDocument' tasks_linked_type.
	TasksLinkedTypeIddocument TasksLinkedType = 11
	// TasksLinkedTypeLineofcredit is the 'LineOfCredit' tasks_linked_type.
	TasksLinkedTypeLineofcredit TasksLinkedType = 12
	// TasksLinkedTypeGljournalentry is the 'GLJournalEntry' tasks_linked_type.
	TasksLinkedTypeGljournalentry TasksLinkedType = 13
)

func NewTasksLinkedType(tlt tasks.LinkedType) TasksLinkedType {
	return TasksLinkedType(tlt + 1)
}

func (tlt TasksLinkedType) PB() tasks.LinkedType {
	return tasks.LinkedType(tlt - 1)
}

// UnmarshalText unmarshals TasksLinkedType from text.
func (tlt *TasksLinkedType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "None":
		*tlt = TasksLinkedTypeNone
	case "Client":
		*tlt = TasksLinkedTypeClient
	case "Group":
		*tlt = TasksLinkedTypeGroup
	case "LoanProduct":
		*tlt = TasksLinkedTypeLoanproduct
	case "SavingsProduct":
		*tlt = TasksLinkedTypeSavingsproduct
	case "Centre":
		*tlt = TasksLinkedTypeCentre
	case "Branch":
		*tlt = TasksLinkedTypeBranch
	case "User":
		*tlt = TasksLinkedTypeUser
	case "LoanAccount":
		*tlt = TasksLinkedTypeLoanaccount
	case "DepositAccount":
		*tlt = TasksLinkedTypeDepositaccount
	case "IDDocument":
		*tlt = TasksLinkedTypeIddocument
	case "LineOfCredit":
		*tlt = TasksLinkedTypeLineofcredit
	case "GLJournalEntry":
		*tlt = TasksLinkedTypeGljournalentry
	default:
		return ErrInvalidTasksLinkedType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (tlt TasksLinkedType) String() string {
	switch tlt {
	case TasksLinkedTypeNone:
		return "None"
	case TasksLinkedTypeClient:
		return "Client"
	case TasksLinkedTypeGroup:
		return "Group"
	case TasksLinkedTypeLoanproduct:
		return "LoanProduct"
	case TasksLinkedTypeSavingsproduct:
		return "SavingsProduct"
	case TasksLinkedTypeCentre:
		return "Centre"
	case TasksLinkedTypeBranch:
		return "Branch"
	case TasksLinkedTypeUser:
		return "User"
	case TasksLinkedTypeLoanaccount:
		return "LoanAccount"
	case TasksLinkedTypeDepositaccount:
		return "DepositAccount"
	case TasksLinkedTypeIddocument:
		return "IDDocument"
	case TasksLinkedTypeLineofcredit:
		return "LineOfCredit"
	case TasksLinkedTypeGljournalentry:
		return "GLJournalEntry"
	}
	return fmt.Sprintf("TasksLinkedType(%d)", tlt)
}

// Value satisfies the driver.Valuer interface.
func (tlt TasksLinkedType) Value() (driver.Value, error) {
	return tlt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (tlt *TasksLinkedType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return tlt.UnmarshalText(buf)
	}
	return ErrInvalidTasksLinkedType(fmt.Sprintf("%T", v))
}

// ErrInvalidTasksLinkedType is the invalid TasksLinkedType error.
type ErrInvalidTasksLinkedType string

// Error satisfies the error interface.
func (err ErrInvalidTasksLinkedType) Error() string {
	return fmt.Sprintf("invalid TasksLinkedType(%s)", string(err))
}

// TasksStatus is the 'tasks_status' enum.
type TasksStatus int32

// TasksStatus values.
const (
	// TasksStatusOpen is the 'Open' tasks_status.
	TasksStatusOpen TasksStatus = 1
	// TasksStatusCompleted is the 'Completed' tasks_status.
	TasksStatusCompleted TasksStatus = 2
)

func NewTasksStatus(ts tasks.Status) TasksStatus {
	return TasksStatus(ts + 1)
}

func (ts TasksStatus) PB() tasks.Status {
	return tasks.Status(ts - 1)
}

// UnmarshalText unmarshals TasksStatus from text.
func (ts *TasksStatus) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Open":
		*ts = TasksStatusOpen
	case "Completed":
		*ts = TasksStatusCompleted
	default:
		return ErrInvalidTasksStatus(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (ts TasksStatus) String() string {
	switch ts {
	case TasksStatusOpen:
		return "Open"
	case TasksStatusCompleted:
		return "Completed"
	}
	return fmt.Sprintf("TasksStatus(%d)", ts)
}

// Value satisfies the driver.Valuer interface.
func (ts TasksStatus) Value() (driver.Value, error) {
	return ts.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (ts *TasksStatus) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return ts.UnmarshalText(buf)
	}
	return ErrInvalidTasksStatus(fmt.Sprintf("%T", v))
}

// ErrInvalidTasksStatus is the invalid TasksStatus error.
type ErrInvalidTasksStatus string

// Error satisfies the error interface.
func (err ErrInvalidTasksStatus) Error() string {
	return fmt.Sprintf("invalid TasksStatus(%s)", string(err))
}

// TransactionsCalculationMethod is the 'transactions_calculation_method' enum.
type TransactionsCalculationMethod int32

// TransactionsCalculationMethod values.
const (
	// TransactionsCalculationMethodNorecalculation is the 'NoRecalculation' transactions_calculation_method.
	TransactionsCalculationMethodNorecalculation TransactionsCalculationMethod = 1
	// TransactionsCalculationMethodRescheduleremainingrepayments is the 'RescheduleRemainingRepayments' transactions_calculation_method.
	TransactionsCalculationMethodRescheduleremainingrepayments TransactionsCalculationMethod = 2
	// TransactionsCalculationMethodRecalculateschedulekeepsamenumberofterms is the 'RecalculateScheduleKeepSameNumberOfTerms' transactions_calculation_method.
	TransactionsCalculationMethodRecalculateschedulekeepsamenumberofterms TransactionsCalculationMethod = 3
	// TransactionsCalculationMethodRecalculateschedulekeepsameprincipalamount is the 'RecalculateScheduleKeepSamePrincipalAmount' transactions_calculation_method.
	TransactionsCalculationMethodRecalculateschedulekeepsameprincipalamount TransactionsCalculationMethod = 4
	// TransactionsCalculationMethodRecalculateschedulekeepsametotalrepaymentamount is the 'RecalculateScheduleKeepSameTotalRepaymentAmount' transactions_calculation_method.
	TransactionsCalculationMethodRecalculateschedulekeepsametotalrepaymentamount TransactionsCalculationMethod = 5
	// TransactionsCalculationMethodReduceamountperinstallment is the 'ReduceAmountPerInstallment' transactions_calculation_method.
	TransactionsCalculationMethodReduceamountperinstallment TransactionsCalculationMethod = 6
	// TransactionsCalculationMethodReducenumberofinstallments is the 'ReduceNumberOfInstallments' transactions_calculation_method.
	TransactionsCalculationMethodReducenumberofinstallments TransactionsCalculationMethod = 7
	// TransactionsCalculationMethodReducenumberofinstallmentsnew is the 'ReduceNumberOfInstallmentsNew' transactions_calculation_method.
	TransactionsCalculationMethodReducenumberofinstallmentsnew TransactionsCalculationMethod = 8
)

func NewTransactionsCalculationMethod(tcm transactions.CalculationMethod) TransactionsCalculationMethod {
	return TransactionsCalculationMethod(tcm + 1)
}

func (tcm TransactionsCalculationMethod) PB() transactions.CalculationMethod {
	return transactions.CalculationMethod(tcm - 1)
}

// UnmarshalText unmarshals TransactionsCalculationMethod from text.
func (tcm *TransactionsCalculationMethod) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "NoRecalculation":
		*tcm = TransactionsCalculationMethodNorecalculation
	case "RescheduleRemainingRepayments":
		*tcm = TransactionsCalculationMethodRescheduleremainingrepayments
	case "RecalculateScheduleKeepSameNumberOfTerms":
		*tcm = TransactionsCalculationMethodRecalculateschedulekeepsamenumberofterms
	case "RecalculateScheduleKeepSamePrincipalAmount":
		*tcm = TransactionsCalculationMethodRecalculateschedulekeepsameprincipalamount
	case "RecalculateScheduleKeepSameTotalRepaymentAmount":
		*tcm = TransactionsCalculationMethodRecalculateschedulekeepsametotalrepaymentamount
	case "ReduceAmountPerInstallment":
		*tcm = TransactionsCalculationMethodReduceamountperinstallment
	case "ReduceNumberOfInstallments":
		*tcm = TransactionsCalculationMethodReducenumberofinstallments
	case "ReduceNumberOfInstallmentsNew":
		*tcm = TransactionsCalculationMethodReducenumberofinstallmentsnew
	default:
		return ErrInvalidTransactionsCalculationMethod(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (tcm TransactionsCalculationMethod) String() string {
	switch tcm {
	case TransactionsCalculationMethodNorecalculation:
		return "NoRecalculation"
	case TransactionsCalculationMethodRescheduleremainingrepayments:
		return "RescheduleRemainingRepayments"
	case TransactionsCalculationMethodRecalculateschedulekeepsamenumberofterms:
		return "RecalculateScheduleKeepSameNumberOfTerms"
	case TransactionsCalculationMethodRecalculateschedulekeepsameprincipalamount:
		return "RecalculateScheduleKeepSamePrincipalAmount"
	case TransactionsCalculationMethodRecalculateschedulekeepsametotalrepaymentamount:
		return "RecalculateScheduleKeepSameTotalRepaymentAmount"
	case TransactionsCalculationMethodReduceamountperinstallment:
		return "ReduceAmountPerInstallment"
	case TransactionsCalculationMethodReducenumberofinstallments:
		return "ReduceNumberOfInstallments"
	case TransactionsCalculationMethodReducenumberofinstallmentsnew:
		return "ReduceNumberOfInstallmentsNew"
	}
	return fmt.Sprintf("TransactionsCalculationMethod(%d)", tcm)
}

// Value satisfies the driver.Valuer interface.
func (tcm TransactionsCalculationMethod) Value() (driver.Value, error) {
	return tcm.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (tcm *TransactionsCalculationMethod) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return tcm.UnmarshalText(buf)
	}
	return ErrInvalidTransactionsCalculationMethod(fmt.Sprintf("%T", v))
}

// ErrInvalidTransactionsCalculationMethod is the invalid TransactionsCalculationMethod error.
type ErrInvalidTransactionsCalculationMethod string

// Error satisfies the error interface.
func (err ErrInvalidTransactionsCalculationMethod) Error() string {
	return fmt.Sprintf("invalid TransactionsCalculationMethod(%s)", string(err))
}

// TransactionsDepositType is the 'transactions_deposit_type' enum.
type TransactionsDepositType int32

// TransactionsDepositType values.
const (
	// TransactionsDepositTypeDepositimport is the 'DepositImport' transactions_deposit_type.
	TransactionsDepositTypeDepositimport TransactionsDepositType = 1
	// TransactionsDepositTypeDepositwriteoff is the 'DepositWriteOff' transactions_deposit_type.
	TransactionsDepositTypeDepositwriteoff TransactionsDepositType = 2
	// TransactionsDepositTypeDepositwriteoffadjustment is the 'DepositWriteOffAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDepositwriteoffadjustment TransactionsDepositType = 3
	// TransactionsDepositTypeDepositdeposit is the 'DepositDeposit' transactions_deposit_type.
	TransactionsDepositTypeDepositdeposit TransactionsDepositType = 4
	// TransactionsDepositTypeDepositadjustment is the 'DepositAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDepositadjustment TransactionsDepositType = 5
	// TransactionsDepositTypeDepositwithdrawal is the 'DepositWithdrawal' transactions_deposit_type.
	TransactionsDepositTypeDepositwithdrawal TransactionsDepositType = 6
	// TransactionsDepositTypeDepositwithdrawaladjustment is the 'DepositWithdrawalAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDepositwithdrawaladjustment TransactionsDepositType = 7
	// TransactionsDepositTypeDepositcardtransactionreversal is the 'DepositCardTransactionReversal' transactions_deposit_type.
	TransactionsDepositTypeDepositcardtransactionreversal TransactionsDepositType = 8
	// TransactionsDepositTypeDepositcardtransactionreversaladjustment is the 'DepositCardTransactionReversalAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDepositcardtransactionreversaladjustment TransactionsDepositType = 9
	// TransactionsDepositTypeDeposittransfer is the 'DepositTransfer' transactions_deposit_type.
	TransactionsDepositTypeDeposittransfer TransactionsDepositType = 10
	// TransactionsDepositTypeDeposittransferadjustment is the 'DepositTransferAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDeposittransferadjustment TransactionsDepositType = 11
	// TransactionsDepositTypeDepositfeeapplied is the 'DepositFeeApplied' transactions_deposit_type.
	TransactionsDepositTypeDepositfeeapplied TransactionsDepositType = 12
	// TransactionsDepositTypeDepositfeeadjusted is the 'DepositFeeAdjusted' transactions_deposit_type.
	TransactionsDepositTypeDepositfeeadjusted TransactionsDepositType = 13
	// TransactionsDepositTypeDepositfeesduereduced is the 'DepositFeesDueReduced' transactions_deposit_type.
	TransactionsDepositTypeDepositfeesduereduced TransactionsDepositType = 14
	// TransactionsDepositTypeDepositinterestapplied is the 'DepositInterestApplied' transactions_deposit_type.
	TransactionsDepositTypeDepositinterestapplied TransactionsDepositType = 15
	// TransactionsDepositTypeDepositinterestappliedadjustment is the 'DepositInterestAppliedAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDepositinterestappliedadjustment TransactionsDepositType = 16
	// TransactionsDepositTypeDepositfeereductionadjustment is the 'DepositFeeReductionAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDepositfeereductionadjustment TransactionsDepositType = 17
	// TransactionsDepositTypeDepositwithholdingtax is the 'DepositWithholdingTax' transactions_deposit_type.
	TransactionsDepositTypeDepositwithholdingtax TransactionsDepositType = 18
	// TransactionsDepositTypeDepositwithholdingtaxadjustment is the 'DepositWithholdingTaxAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDepositwithholdingtaxadjustment TransactionsDepositType = 19
	// TransactionsDepositTypeDepositinterestratechanged is the 'DepositInterestRateChanged' transactions_deposit_type.
	TransactionsDepositTypeDepositinterestratechanged TransactionsDepositType = 20
	// TransactionsDepositTypeDepositoverdraftinterestratechanged is the 'DepositOverdraftInterestRateChanged' transactions_deposit_type.
	TransactionsDepositTypeDepositoverdraftinterestratechanged TransactionsDepositType = 21
	// TransactionsDepositTypeDepositoverdraftlimitchanged is the 'DepositOverdraftLimitChanged' transactions_deposit_type.
	TransactionsDepositTypeDepositoverdraftlimitchanged TransactionsDepositType = 22
	// TransactionsDepositTypeDepositbranchchanged is the 'DepositBranchChanged' transactions_deposit_type.
	TransactionsDepositTypeDepositbranchchanged TransactionsDepositType = 23
	// TransactionsDepositTypeDepositloanfunded is the 'DepositLoanFunded' transactions_deposit_type.
	TransactionsDepositTypeDepositloanfunded TransactionsDepositType = 24
	// TransactionsDepositTypeDepositloanfundedadjustment is the 'DepositLoanFundedAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDepositloanfundedadjustment TransactionsDepositType = 25
	// TransactionsDepositTypeDepositloanrepaid is the 'DepositLoanRepaid' transactions_deposit_type.
	TransactionsDepositTypeDepositloanrepaid TransactionsDepositType = 26
	// TransactionsDepositTypeDepositloanrepaidadjustment is the 'DepositLoanRepaidAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDepositloanrepaidadjustment TransactionsDepositType = 27
	// TransactionsDepositTypeDepositloanfractionbought is the 'DepositLoanFractionBought' transactions_deposit_type.
	TransactionsDepositTypeDepositloanfractionbought TransactionsDepositType = 28
	// TransactionsDepositTypeDepositloanfractionboughtadjustment is the 'DepositLoanFractionBoughtAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDepositloanfractionboughtadjustment TransactionsDepositType = 29
	// TransactionsDepositTypeDepositloanfractionsold is the 'DepositLoanFractionSold' transactions_deposit_type.
	TransactionsDepositTypeDepositloanfractionsold TransactionsDepositType = 30
	// TransactionsDepositTypeDepositloanfractionsoldadjustment is the 'DepositLoanFractionSoldAdjustment' transactions_deposit_type.
	TransactionsDepositTypeDepositloanfractionsoldadjustment TransactionsDepositType = 31
	// TransactionsDepositTypeDepositseizedamount is the 'DepositSeizedAmount' transactions_deposit_type.
	TransactionsDepositTypeDepositseizedamount TransactionsDepositType = 32
)

func NewTransactionsDepositType(tdt transactions.DepositType) TransactionsDepositType {
	return TransactionsDepositType(tdt + 1)
}

func (tdt TransactionsDepositType) PB() transactions.DepositType {
	return transactions.DepositType(tdt - 1)
}

// UnmarshalText unmarshals TransactionsDepositType from text.
func (tdt *TransactionsDepositType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "DepositImport":
		*tdt = TransactionsDepositTypeDepositimport
	case "DepositWriteOff":
		*tdt = TransactionsDepositTypeDepositwriteoff
	case "DepositWriteOffAdjustment":
		*tdt = TransactionsDepositTypeDepositwriteoffadjustment
	case "DepositDeposit":
		*tdt = TransactionsDepositTypeDepositdeposit
	case "DepositAdjustment":
		*tdt = TransactionsDepositTypeDepositadjustment
	case "DepositWithdrawal":
		*tdt = TransactionsDepositTypeDepositwithdrawal
	case "DepositWithdrawalAdjustment":
		*tdt = TransactionsDepositTypeDepositwithdrawaladjustment
	case "DepositCardTransactionReversal":
		*tdt = TransactionsDepositTypeDepositcardtransactionreversal
	case "DepositCardTransactionReversalAdjustment":
		*tdt = TransactionsDepositTypeDepositcardtransactionreversaladjustment
	case "DepositTransfer":
		*tdt = TransactionsDepositTypeDeposittransfer
	case "DepositTransferAdjustment":
		*tdt = TransactionsDepositTypeDeposittransferadjustment
	case "DepositFeeApplied":
		*tdt = TransactionsDepositTypeDepositfeeapplied
	case "DepositFeeAdjusted":
		*tdt = TransactionsDepositTypeDepositfeeadjusted
	case "DepositFeesDueReduced":
		*tdt = TransactionsDepositTypeDepositfeesduereduced
	case "DepositInterestApplied":
		*tdt = TransactionsDepositTypeDepositinterestapplied
	case "DepositInterestAppliedAdjustment":
		*tdt = TransactionsDepositTypeDepositinterestappliedadjustment
	case "DepositFeeReductionAdjustment":
		*tdt = TransactionsDepositTypeDepositfeereductionadjustment
	case "DepositWithholdingTax":
		*tdt = TransactionsDepositTypeDepositwithholdingtax
	case "DepositWithholdingTaxAdjustment":
		*tdt = TransactionsDepositTypeDepositwithholdingtaxadjustment
	case "DepositInterestRateChanged":
		*tdt = TransactionsDepositTypeDepositinterestratechanged
	case "DepositOverdraftInterestRateChanged":
		*tdt = TransactionsDepositTypeDepositoverdraftinterestratechanged
	case "DepositOverdraftLimitChanged":
		*tdt = TransactionsDepositTypeDepositoverdraftlimitchanged
	case "DepositBranchChanged":
		*tdt = TransactionsDepositTypeDepositbranchchanged
	case "DepositLoanFunded":
		*tdt = TransactionsDepositTypeDepositloanfunded
	case "DepositLoanFundedAdjustment":
		*tdt = TransactionsDepositTypeDepositloanfundedadjustment
	case "DepositLoanRepaid":
		*tdt = TransactionsDepositTypeDepositloanrepaid
	case "DepositLoanRepaidAdjustment":
		*tdt = TransactionsDepositTypeDepositloanrepaidadjustment
	case "DepositLoanFractionBought":
		*tdt = TransactionsDepositTypeDepositloanfractionbought
	case "DepositLoanFractionBoughtAdjustment":
		*tdt = TransactionsDepositTypeDepositloanfractionboughtadjustment
	case "DepositLoanFractionSold":
		*tdt = TransactionsDepositTypeDepositloanfractionsold
	case "DepositLoanFractionSoldAdjustment":
		*tdt = TransactionsDepositTypeDepositloanfractionsoldadjustment
	case "DepositSeizedAmount":
		*tdt = TransactionsDepositTypeDepositseizedamount
	default:
		return ErrInvalidTransactionsDepositType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (tdt TransactionsDepositType) String() string {
	switch tdt {
	case TransactionsDepositTypeDepositimport:
		return "DepositImport"
	case TransactionsDepositTypeDepositwriteoff:
		return "DepositWriteOff"
	case TransactionsDepositTypeDepositwriteoffadjustment:
		return "DepositWriteOffAdjustment"
	case TransactionsDepositTypeDepositdeposit:
		return "DepositDeposit"
	case TransactionsDepositTypeDepositadjustment:
		return "DepositAdjustment"
	case TransactionsDepositTypeDepositwithdrawal:
		return "DepositWithdrawal"
	case TransactionsDepositTypeDepositwithdrawaladjustment:
		return "DepositWithdrawalAdjustment"
	case TransactionsDepositTypeDepositcardtransactionreversal:
		return "DepositCardTransactionReversal"
	case TransactionsDepositTypeDepositcardtransactionreversaladjustment:
		return "DepositCardTransactionReversalAdjustment"
	case TransactionsDepositTypeDeposittransfer:
		return "DepositTransfer"
	case TransactionsDepositTypeDeposittransferadjustment:
		return "DepositTransferAdjustment"
	case TransactionsDepositTypeDepositfeeapplied:
		return "DepositFeeApplied"
	case TransactionsDepositTypeDepositfeeadjusted:
		return "DepositFeeAdjusted"
	case TransactionsDepositTypeDepositfeesduereduced:
		return "DepositFeesDueReduced"
	case TransactionsDepositTypeDepositinterestapplied:
		return "DepositInterestApplied"
	case TransactionsDepositTypeDepositinterestappliedadjustment:
		return "DepositInterestAppliedAdjustment"
	case TransactionsDepositTypeDepositfeereductionadjustment:
		return "DepositFeeReductionAdjustment"
	case TransactionsDepositTypeDepositwithholdingtax:
		return "DepositWithholdingTax"
	case TransactionsDepositTypeDepositwithholdingtaxadjustment:
		return "DepositWithholdingTaxAdjustment"
	case TransactionsDepositTypeDepositinterestratechanged:
		return "DepositInterestRateChanged"
	case TransactionsDepositTypeDepositoverdraftinterestratechanged:
		return "DepositOverdraftInterestRateChanged"
	case TransactionsDepositTypeDepositoverdraftlimitchanged:
		return "DepositOverdraftLimitChanged"
	case TransactionsDepositTypeDepositbranchchanged:
		return "DepositBranchChanged"
	case TransactionsDepositTypeDepositloanfunded:
		return "DepositLoanFunded"
	case TransactionsDepositTypeDepositloanfundedadjustment:
		return "DepositLoanFundedAdjustment"
	case TransactionsDepositTypeDepositloanrepaid:
		return "DepositLoanRepaid"
	case TransactionsDepositTypeDepositloanrepaidadjustment:
		return "DepositLoanRepaidAdjustment"
	case TransactionsDepositTypeDepositloanfractionbought:
		return "DepositLoanFractionBought"
	case TransactionsDepositTypeDepositloanfractionboughtadjustment:
		return "DepositLoanFractionBoughtAdjustment"
	case TransactionsDepositTypeDepositloanfractionsold:
		return "DepositLoanFractionSold"
	case TransactionsDepositTypeDepositloanfractionsoldadjustment:
		return "DepositLoanFractionSoldAdjustment"
	case TransactionsDepositTypeDepositseizedamount:
		return "DepositSeizedAmount"
	}
	return fmt.Sprintf("TransactionsDepositType(%d)", tdt)
}

// Value satisfies the driver.Valuer interface.
func (tdt TransactionsDepositType) Value() (driver.Value, error) {
	return tdt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (tdt *TransactionsDepositType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return tdt.UnmarshalText(buf)
	}
	return ErrInvalidTransactionsDepositType(fmt.Sprintf("%T", v))
}

// ErrInvalidTransactionsDepositType is the invalid TransactionsDepositType error.
type ErrInvalidTransactionsDepositType string

// Error satisfies the error interface.
func (err ErrInvalidTransactionsDepositType) Error() string {
	return fmt.Sprintf("invalid TransactionsDepositType(%s)", string(err))
}

// TransactionsLoanType is the 'transactions_loan_type' enum.
type TransactionsLoanType int32

// TransactionsLoanType values.
const (
	// TransactionsLoanTypeLoanimport is the 'LoanImport' transactions_loan_type.
	TransactionsLoanTypeLoanimport TransactionsLoanType = 1
	// TransactionsLoanTypeLoandisbursement is the 'LoanDisbursement' transactions_loan_type.
	TransactionsLoanTypeLoandisbursement TransactionsLoanType = 2
	// TransactionsLoanTypeLoandisbursementadjustment is the 'LoanDisbursementAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoandisbursementadjustment TransactionsLoanType = 3
	// TransactionsLoanTypeLoanwriteoff is the 'LoanWriteOff' transactions_loan_type.
	TransactionsLoanTypeLoanwriteoff TransactionsLoanType = 4
	// TransactionsLoanTypeLoanwriteoffadjustment is the 'LoanWriteOffAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanwriteoffadjustment TransactionsLoanType = 5
	// TransactionsLoanTypeLoanrepayment is the 'LoanRepayment' transactions_loan_type.
	TransactionsLoanTypeLoanrepayment TransactionsLoanType = 6
	// TransactionsLoanTypeLoanpaymentmade is the 'LoanPaymentMade' transactions_loan_type.
	TransactionsLoanTypeLoanpaymentmade TransactionsLoanType = 7
	// TransactionsLoanTypeLoanwithdrawalredraw is the 'LoanWithdrawalRedraw' transactions_loan_type.
	TransactionsLoanTypeLoanwithdrawalredraw TransactionsLoanType = 8
	// TransactionsLoanTypeLoanwithdrawalredrawadjustment is the 'LoanWithdrawalRedrawAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanwithdrawalredrawadjustment TransactionsLoanType = 9
	// TransactionsLoanTypeLoanfeeapplied is the 'LoanFeeApplied' transactions_loan_type.
	TransactionsLoanTypeLoanfeeapplied TransactionsLoanType = 10
	// TransactionsLoanTypeLoanfeecharged is the 'LoanFeeCharged' transactions_loan_type.
	TransactionsLoanTypeLoanfeecharged TransactionsLoanType = 11
	// TransactionsLoanTypeLoanfeesduereduced is the 'LoanFeesDueReduced' transactions_loan_type.
	TransactionsLoanTypeLoanfeesduereduced TransactionsLoanType = 12
	// TransactionsLoanTypeLoanfeeadjustment is the 'LoanFeeAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanfeeadjustment TransactionsLoanType = 13
	// TransactionsLoanTypeLoanpenaltyapplied is the 'LoanPenaltyApplied' transactions_loan_type.
	TransactionsLoanTypeLoanpenaltyapplied TransactionsLoanType = 14
	// TransactionsLoanTypeLoanpenaltyadjustment is the 'LoanPenaltyAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanpenaltyadjustment TransactionsLoanType = 15
	// TransactionsLoanTypeLoanpenaltiesduereduced is the 'LoanPenaltiesDueReduced' transactions_loan_type.
	TransactionsLoanTypeLoanpenaltiesduereduced TransactionsLoanType = 16
	// TransactionsLoanTypeLoanrepaymentadjustment is the 'LoanRepaymentAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanrepaymentadjustment TransactionsLoanType = 17
	// TransactionsLoanTypeLoanpaymentmadeadjustment is the 'LoanPaymentMadeAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanpaymentmadeadjustment TransactionsLoanType = 18
	// TransactionsLoanTypeLoaninterestratechanged is the 'LoanInterestRateChanged' transactions_loan_type.
	TransactionsLoanTypeLoaninterestratechanged TransactionsLoanType = 19
	// TransactionsLoanTypeLoantaxratechanged is the 'LoanTaxRateChanged' transactions_loan_type.
	TransactionsLoanTypeLoantaxratechanged TransactionsLoanType = 20
	// TransactionsLoanTypeLoanpenaltyratechanged is the 'LoanPenaltyRateChanged' transactions_loan_type.
	TransactionsLoanTypeLoanpenaltyratechanged TransactionsLoanType = 21
	// TransactionsLoanTypeLoaninterestapplied is the 'LoanInterestApplied' transactions_loan_type.
	TransactionsLoanTypeLoaninterestapplied TransactionsLoanType = 22
	// TransactionsLoanTypeLoaninterestappliedadjustment is the 'LoanInterestAppliedAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoaninterestappliedadjustment TransactionsLoanType = 23
	// TransactionsLoanTypeLoaninterestduereduced is the 'LoanInterestDueReduced' transactions_loan_type.
	TransactionsLoanTypeLoaninterestduereduced TransactionsLoanType = 24
	// TransactionsLoanTypeLoanpenaltyreductionadjustment is the 'LoanPenaltyReductionAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanpenaltyreductionadjustment TransactionsLoanType = 25
	// TransactionsLoanTypeLoanfeereductionadjustment is the 'LoanFeeReductionAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanfeereductionadjustment TransactionsLoanType = 26
	// TransactionsLoanTypeLoaninterestreductionadjustment is the 'LoanInterestReductionAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoaninterestreductionadjustment TransactionsLoanType = 27
	// TransactionsLoanTypeLoandeferredinterestapplied is the 'LoanDeferredInterestApplied' transactions_loan_type.
	TransactionsLoanTypeLoandeferredinterestapplied TransactionsLoanType = 28
	// TransactionsLoanTypeLoandeferredinterestappliedadjustment is the 'LoanDeferredInterestAppliedAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoandeferredinterestappliedadjustment TransactionsLoanType = 29
	// TransactionsLoanTypeLoandeferredinterestpaid is the 'LoanDeferredInterestPaid' transactions_loan_type.
	TransactionsLoanTypeLoandeferredinterestpaid TransactionsLoanType = 30
	// TransactionsLoanTypeLoandeferredinterestpaidadjustment is the 'LoanDeferredInterestPaidAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoandeferredinterestpaidadjustment TransactionsLoanType = 31
	// TransactionsLoanTypeLoanredrawtransfer is the 'LoanRedrawTransfer' transactions_loan_type.
	TransactionsLoanTypeLoanredrawtransfer TransactionsLoanType = 32
	// TransactionsLoanTypeLoanredrawrepayment is the 'LoanRedrawRepayment' transactions_loan_type.
	TransactionsLoanTypeLoanredrawrepayment TransactionsLoanType = 33
	// TransactionsLoanTypeLoanredrawtransferadjustment is the 'LoanRedrawTransferAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanredrawtransferadjustment TransactionsLoanType = 34
	// TransactionsLoanTypeLoanredrawrepaymentadjustment is the 'LoanRedrawRepaymentAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanredrawrepaymentadjustment TransactionsLoanType = 35
	// TransactionsLoanTypeLoantransfer is the 'LoanTransfer' transactions_loan_type.
	TransactionsLoanTypeLoantransfer TransactionsLoanType = 36
	// TransactionsLoanTypeLoantransferadjustment is the 'LoanTransferAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoantransferadjustment TransactionsLoanType = 37
	// TransactionsLoanTypeLoanbranchchanged is the 'LoanBranchChanged' transactions_loan_type.
	TransactionsLoanTypeLoanbranchchanged TransactionsLoanType = 38
	// TransactionsLoanTypeLoantermschanged is the 'LoanTermsChanged' transactions_loan_type.
	TransactionsLoanTypeLoantermschanged TransactionsLoanType = 39
	// TransactionsLoanTypeLoancardtransactionreversal is the 'LoanCardTransactionReversal' transactions_loan_type.
	TransactionsLoanTypeLoancardtransactionreversal TransactionsLoanType = 40
	// TransactionsLoanTypeLoancardtransactionreversaladjustment is the 'LoanCardTransactionReversalAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoancardtransactionreversaladjustment TransactionsLoanType = 41
	// TransactionsLoanTypeLoanduedatechanged is the 'LoanDueDateChanged' transactions_loan_type.
	TransactionsLoanTypeLoanduedatechanged TransactionsLoanType = 42
	// TransactionsLoanTypeLoanduedatechangedadjustment is the 'LoanDueDateChangedAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanduedatechangedadjustment TransactionsLoanType = 43
	// TransactionsLoanTypeLoanaccountterminated is the 'LoanAccountTerminated' transactions_loan_type.
	TransactionsLoanTypeLoanaccountterminated TransactionsLoanType = 44
	// TransactionsLoanTypeLoanaccountterminatedadjustment is the 'LoanAccountTerminatedAdjustment' transactions_loan_type.
	TransactionsLoanTypeLoanaccountterminatedadjustment TransactionsLoanType = 45
)

func NewTransactionsLoanType(tlt transactions.LoanType) TransactionsLoanType {
	return TransactionsLoanType(tlt + 1)
}

func (tlt TransactionsLoanType) PB() transactions.LoanType {
	return transactions.LoanType(tlt - 1)
}

// UnmarshalText unmarshals TransactionsLoanType from text.
func (tlt *TransactionsLoanType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "LoanImport":
		*tlt = TransactionsLoanTypeLoanimport
	case "LoanDisbursement":
		*tlt = TransactionsLoanTypeLoandisbursement
	case "LoanDisbursementAdjustment":
		*tlt = TransactionsLoanTypeLoandisbursementadjustment
	case "LoanWriteOff":
		*tlt = TransactionsLoanTypeLoanwriteoff
	case "LoanWriteOffAdjustment":
		*tlt = TransactionsLoanTypeLoanwriteoffadjustment
	case "LoanRepayment":
		*tlt = TransactionsLoanTypeLoanrepayment
	case "LoanPaymentMade":
		*tlt = TransactionsLoanTypeLoanpaymentmade
	case "LoanWithdrawalRedraw":
		*tlt = TransactionsLoanTypeLoanwithdrawalredraw
	case "LoanWithdrawalRedrawAdjustment":
		*tlt = TransactionsLoanTypeLoanwithdrawalredrawadjustment
	case "LoanFeeApplied":
		*tlt = TransactionsLoanTypeLoanfeeapplied
	case "LoanFeeCharged":
		*tlt = TransactionsLoanTypeLoanfeecharged
	case "LoanFeesDueReduced":
		*tlt = TransactionsLoanTypeLoanfeesduereduced
	case "LoanFeeAdjustment":
		*tlt = TransactionsLoanTypeLoanfeeadjustment
	case "LoanPenaltyApplied":
		*tlt = TransactionsLoanTypeLoanpenaltyapplied
	case "LoanPenaltyAdjustment":
		*tlt = TransactionsLoanTypeLoanpenaltyadjustment
	case "LoanPenaltiesDueReduced":
		*tlt = TransactionsLoanTypeLoanpenaltiesduereduced
	case "LoanRepaymentAdjustment":
		*tlt = TransactionsLoanTypeLoanrepaymentadjustment
	case "LoanPaymentMadeAdjustment":
		*tlt = TransactionsLoanTypeLoanpaymentmadeadjustment
	case "LoanInterestRateChanged":
		*tlt = TransactionsLoanTypeLoaninterestratechanged
	case "LoanTaxRateChanged":
		*tlt = TransactionsLoanTypeLoantaxratechanged
	case "LoanPenaltyRateChanged":
		*tlt = TransactionsLoanTypeLoanpenaltyratechanged
	case "LoanInterestApplied":
		*tlt = TransactionsLoanTypeLoaninterestapplied
	case "LoanInterestAppliedAdjustment":
		*tlt = TransactionsLoanTypeLoaninterestappliedadjustment
	case "LoanInterestDueReduced":
		*tlt = TransactionsLoanTypeLoaninterestduereduced
	case "LoanPenaltyReductionAdjustment":
		*tlt = TransactionsLoanTypeLoanpenaltyreductionadjustment
	case "LoanFeeReductionAdjustment":
		*tlt = TransactionsLoanTypeLoanfeereductionadjustment
	case "LoanInterestReductionAdjustment":
		*tlt = TransactionsLoanTypeLoaninterestreductionadjustment
	case "LoanDeferredInterestApplied":
		*tlt = TransactionsLoanTypeLoandeferredinterestapplied
	case "LoanDeferredInterestAppliedAdjustment":
		*tlt = TransactionsLoanTypeLoandeferredinterestappliedadjustment
	case "LoanDeferredInterestPaid":
		*tlt = TransactionsLoanTypeLoandeferredinterestpaid
	case "LoanDeferredInterestPaidAdjustment":
		*tlt = TransactionsLoanTypeLoandeferredinterestpaidadjustment
	case "LoanRedrawTransfer":
		*tlt = TransactionsLoanTypeLoanredrawtransfer
	case "LoanRedrawRepayment":
		*tlt = TransactionsLoanTypeLoanredrawrepayment
	case "LoanRedrawTransferAdjustment":
		*tlt = TransactionsLoanTypeLoanredrawtransferadjustment
	case "LoanRedrawRepaymentAdjustment":
		*tlt = TransactionsLoanTypeLoanredrawrepaymentadjustment
	case "LoanTransfer":
		*tlt = TransactionsLoanTypeLoantransfer
	case "LoanTransferAdjustment":
		*tlt = TransactionsLoanTypeLoantransferadjustment
	case "LoanBranchChanged":
		*tlt = TransactionsLoanTypeLoanbranchchanged
	case "LoanTermsChanged":
		*tlt = TransactionsLoanTypeLoantermschanged
	case "LoanCardTransactionReversal":
		*tlt = TransactionsLoanTypeLoancardtransactionreversal
	case "LoanCardTransactionReversalAdjustment":
		*tlt = TransactionsLoanTypeLoancardtransactionreversaladjustment
	case "LoanDueDateChanged":
		*tlt = TransactionsLoanTypeLoanduedatechanged
	case "LoanDueDateChangedAdjustment":
		*tlt = TransactionsLoanTypeLoanduedatechangedadjustment
	case "LoanAccountTerminated":
		*tlt = TransactionsLoanTypeLoanaccountterminated
	case "LoanAccountTerminatedAdjustment":
		*tlt = TransactionsLoanTypeLoanaccountterminatedadjustment
	default:
		return ErrInvalidTransactionsLoanType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (tlt TransactionsLoanType) String() string {
	switch tlt {
	case TransactionsLoanTypeLoanimport:
		return "LoanImport"
	case TransactionsLoanTypeLoandisbursement:
		return "LoanDisbursement"
	case TransactionsLoanTypeLoandisbursementadjustment:
		return "LoanDisbursementAdjustment"
	case TransactionsLoanTypeLoanwriteoff:
		return "LoanWriteOff"
	case TransactionsLoanTypeLoanwriteoffadjustment:
		return "LoanWriteOffAdjustment"
	case TransactionsLoanTypeLoanrepayment:
		return "LoanRepayment"
	case TransactionsLoanTypeLoanpaymentmade:
		return "LoanPaymentMade"
	case TransactionsLoanTypeLoanwithdrawalredraw:
		return "LoanWithdrawalRedraw"
	case TransactionsLoanTypeLoanwithdrawalredrawadjustment:
		return "LoanWithdrawalRedrawAdjustment"
	case TransactionsLoanTypeLoanfeeapplied:
		return "LoanFeeApplied"
	case TransactionsLoanTypeLoanfeecharged:
		return "LoanFeeCharged"
	case TransactionsLoanTypeLoanfeesduereduced:
		return "LoanFeesDueReduced"
	case TransactionsLoanTypeLoanfeeadjustment:
		return "LoanFeeAdjustment"
	case TransactionsLoanTypeLoanpenaltyapplied:
		return "LoanPenaltyApplied"
	case TransactionsLoanTypeLoanpenaltyadjustment:
		return "LoanPenaltyAdjustment"
	case TransactionsLoanTypeLoanpenaltiesduereduced:
		return "LoanPenaltiesDueReduced"
	case TransactionsLoanTypeLoanrepaymentadjustment:
		return "LoanRepaymentAdjustment"
	case TransactionsLoanTypeLoanpaymentmadeadjustment:
		return "LoanPaymentMadeAdjustment"
	case TransactionsLoanTypeLoaninterestratechanged:
		return "LoanInterestRateChanged"
	case TransactionsLoanTypeLoantaxratechanged:
		return "LoanTaxRateChanged"
	case TransactionsLoanTypeLoanpenaltyratechanged:
		return "LoanPenaltyRateChanged"
	case TransactionsLoanTypeLoaninterestapplied:
		return "LoanInterestApplied"
	case TransactionsLoanTypeLoaninterestappliedadjustment:
		return "LoanInterestAppliedAdjustment"
	case TransactionsLoanTypeLoaninterestduereduced:
		return "LoanInterestDueReduced"
	case TransactionsLoanTypeLoanpenaltyreductionadjustment:
		return "LoanPenaltyReductionAdjustment"
	case TransactionsLoanTypeLoanfeereductionadjustment:
		return "LoanFeeReductionAdjustment"
	case TransactionsLoanTypeLoaninterestreductionadjustment:
		return "LoanInterestReductionAdjustment"
	case TransactionsLoanTypeLoandeferredinterestapplied:
		return "LoanDeferredInterestApplied"
	case TransactionsLoanTypeLoandeferredinterestappliedadjustment:
		return "LoanDeferredInterestAppliedAdjustment"
	case TransactionsLoanTypeLoandeferredinterestpaid:
		return "LoanDeferredInterestPaid"
	case TransactionsLoanTypeLoandeferredinterestpaidadjustment:
		return "LoanDeferredInterestPaidAdjustment"
	case TransactionsLoanTypeLoanredrawtransfer:
		return "LoanRedrawTransfer"
	case TransactionsLoanTypeLoanredrawrepayment:
		return "LoanRedrawRepayment"
	case TransactionsLoanTypeLoanredrawtransferadjustment:
		return "LoanRedrawTransferAdjustment"
	case TransactionsLoanTypeLoanredrawrepaymentadjustment:
		return "LoanRedrawRepaymentAdjustment"
	case TransactionsLoanTypeLoantransfer:
		return "LoanTransfer"
	case TransactionsLoanTypeLoantransferadjustment:
		return "LoanTransferAdjustment"
	case TransactionsLoanTypeLoanbranchchanged:
		return "LoanBranchChanged"
	case TransactionsLoanTypeLoantermschanged:
		return "LoanTermsChanged"
	case TransactionsLoanTypeLoancardtransactionreversal:
		return "LoanCardTransactionReversal"
	case TransactionsLoanTypeLoancardtransactionreversaladjustment:
		return "LoanCardTransactionReversalAdjustment"
	case TransactionsLoanTypeLoanduedatechanged:
		return "LoanDueDateChanged"
	case TransactionsLoanTypeLoanduedatechangedadjustment:
		return "LoanDueDateChangedAdjustment"
	case TransactionsLoanTypeLoanaccountterminated:
		return "LoanAccountTerminated"
	case TransactionsLoanTypeLoanaccountterminatedadjustment:
		return "LoanAccountTerminatedAdjustment"
	}
	return fmt.Sprintf("TransactionsLoanType(%d)", tlt)
}

// Value satisfies the driver.Valuer interface.
func (tlt TransactionsLoanType) Value() (driver.Value, error) {
	return tlt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (tlt *TransactionsLoanType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return tlt.UnmarshalText(buf)
	}
	return ErrInvalidTransactionsLoanType(fmt.Sprintf("%T", v))
}

// ErrInvalidTransactionsLoanType is the invalid TransactionsLoanType error.
type ErrInvalidTransactionsLoanType string

// Error satisfies the error interface.
func (err ErrInvalidTransactionsLoanType) Error() string {
	return fmt.Sprintf("invalid TransactionsLoanType(%s)", string(err))
}

// TransactionsPaymentType is the 'transactions_payment_type' enum.
type TransactionsPaymentType int32

// TransactionsPaymentType values.
const (
	// TransactionsPaymentTypePaymentprincipal is the 'PaymentPrincipal' transactions_payment_type.
	TransactionsPaymentTypePaymentprincipal TransactionsPaymentType = 1
	// TransactionsPaymentTypePaymentinterest is the 'PaymentInterest' transactions_payment_type.
	TransactionsPaymentTypePaymentinterest TransactionsPaymentType = 2
	// TransactionsPaymentTypePaymentmanualfee is the 'PaymentManualFee' transactions_payment_type.
	TransactionsPaymentTypePaymentmanualfee TransactionsPaymentType = 3
	// TransactionsPaymentTypePaymentupfrontdisbursementfee is the 'PaymentUpfrontDisbursementFee' transactions_payment_type.
	TransactionsPaymentTypePaymentupfrontdisbursementfee TransactionsPaymentType = 4
	// TransactionsPaymentTypePaymentlaterepaymentfee is the 'PaymentLateRepaymentFee' transactions_payment_type.
	TransactionsPaymentTypePaymentlaterepaymentfee TransactionsPaymentType = 5
	// TransactionsPaymentTypePaymentpaymentduefee is the 'PaymentPaymentDueFee' transactions_payment_type.
	TransactionsPaymentTypePaymentpaymentduefee TransactionsPaymentType = 6
	// TransactionsPaymentTypePaymentpenalty is the 'PaymentPenalty' transactions_payment_type.
	TransactionsPaymentTypePaymentpenalty TransactionsPaymentType = 7
)

func NewTransactionsPaymentType(tpt transactions.PaymentType) TransactionsPaymentType {
	return TransactionsPaymentType(tpt + 1)
}

func (tpt TransactionsPaymentType) PB() transactions.PaymentType {
	return transactions.PaymentType(tpt - 1)
}

// UnmarshalText unmarshals TransactionsPaymentType from text.
func (tpt *TransactionsPaymentType) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "PaymentPrincipal":
		*tpt = TransactionsPaymentTypePaymentprincipal
	case "PaymentInterest":
		*tpt = TransactionsPaymentTypePaymentinterest
	case "PaymentManualFee":
		*tpt = TransactionsPaymentTypePaymentmanualfee
	case "PaymentUpfrontDisbursementFee":
		*tpt = TransactionsPaymentTypePaymentupfrontdisbursementfee
	case "PaymentLateRepaymentFee":
		*tpt = TransactionsPaymentTypePaymentlaterepaymentfee
	case "PaymentPaymentDueFee":
		*tpt = TransactionsPaymentTypePaymentpaymentduefee
	case "PaymentPenalty":
		*tpt = TransactionsPaymentTypePaymentpenalty
	default:
		return ErrInvalidTransactionsPaymentType(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (tpt TransactionsPaymentType) String() string {
	switch tpt {
	case TransactionsPaymentTypePaymentprincipal:
		return "PaymentPrincipal"
	case TransactionsPaymentTypePaymentinterest:
		return "PaymentInterest"
	case TransactionsPaymentTypePaymentmanualfee:
		return "PaymentManualFee"
	case TransactionsPaymentTypePaymentupfrontdisbursementfee:
		return "PaymentUpfrontDisbursementFee"
	case TransactionsPaymentTypePaymentlaterepaymentfee:
		return "PaymentLateRepaymentFee"
	case TransactionsPaymentTypePaymentpaymentduefee:
		return "PaymentPaymentDueFee"
	case TransactionsPaymentTypePaymentpenalty:
		return "PaymentPenalty"
	}
	return fmt.Sprintf("TransactionsPaymentType(%d)", tpt)
}

// Value satisfies the driver.Valuer interface.
func (tpt TransactionsPaymentType) Value() (driver.Value, error) {
	return tpt.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (tpt *TransactionsPaymentType) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return tpt.UnmarshalText(buf)
	}
	return ErrInvalidTransactionsPaymentType(fmt.Sprintf("%T", v))
}

// ErrInvalidTransactionsPaymentType is the invalid TransactionsPaymentType error.
type ErrInvalidTransactionsPaymentType string

// Error satisfies the error interface.
func (err ErrInvalidTransactionsPaymentType) Error() string {
	return fmt.Sprintf("invalid TransactionsPaymentType(%s)", string(err))
}

// UsersState is the 'users_state' enum.
type UsersState int32

// UsersState values.
const (
	// UsersStateActive is the 'Active' users_state.
	UsersStateActive UsersState = 1
	// UsersStateInactive is the 'Inactive' users_state.
	UsersStateInactive UsersState = 2
	// UsersStateLocked is the 'Locked' users_state.
	UsersStateLocked UsersState = 3
)

func NewUsersState(us users.State) UsersState {
	return UsersState(us + 1)
}

func (us UsersState) PB() users.State {
	return users.State(us - 1)
}

// UnmarshalText unmarshals UsersState from text.
func (us *UsersState) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "Active":
		*us = UsersStateActive
	case "Inactive":
		*us = UsersStateInactive
	case "Locked":
		*us = UsersStateLocked
	default:
		return ErrInvalidUsersState(str)
	}
	return nil
}

// String satisfies the fmt.Stringer interface.
func (us UsersState) String() string {
	switch us {
	case UsersStateActive:
		return "Active"
	case UsersStateInactive:
		return "Inactive"
	case UsersStateLocked:
		return "Locked"
	}
	return fmt.Sprintf("UsersState(%d)", us)
}

// Value satisfies the driver.Valuer interface.
func (us UsersState) Value() (driver.Value, error) {
	return us.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (us *UsersState) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return us.UnmarshalText(buf)
	}
	return ErrInvalidUsersState(fmt.Sprintf("%T", v))
}

// ErrInvalidUsersState is the invalid UsersState error.
type ErrInvalidUsersState string

// Error satisfies the error interface.
func (err ErrInvalidUsersState) Error() string {
	return fmt.Sprintf("invalid UsersState(%s)", string(err))
}
