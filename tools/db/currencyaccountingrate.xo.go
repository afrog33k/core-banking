// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/currencies"
)

// CurrencyAccountingRate represents a row from 'currency_accounting_rates'.
type CurrencyAccountingRate struct {
	ID           int32     `json:"id"`            // id
	RateID       string    `json:"rate_id"`       // rate_id
	Rate         string    `json:"rate"`          // rate
	FromCurrency string    `json:"from_currency"` // from_currency
	ToCurrency   string    `json:"to_currency"`   // to_currency
	StartTime    time.Time `json:"start_time"`    // start_time
	EndTime      time.Time `json:"end_time"`      // end_time
	// xo fields
	Exists, Deleted bool
}

func NewCurrencyAccountingRate(pb *currencies.AccountingRate) (CurrencyAccountingRate, error) {
	if pb == nil {
		return CurrencyAccountingRate{}, ErrNilType{"CurrencyAccountingRate"}
	}
	car := CurrencyAccountingRate{
		RateID:       pb.RateID,
		Rate:         pb.Rate,
		FromCurrency: pb.FromCurrency,
		ToCurrency:   pb.ToCurrency,
		StartTime:    pb.StartTime.AsTime(),
		EndTime:      pb.EndTime.AsTime(),
	}
	return car, nil
}

func (car CurrencyAccountingRate) PB() (*currencies.AccountingRate, error) {
	pb := &currencies.AccountingRate{
		RateID:       car.RateID,
		Rate:         car.Rate,
		FromCurrency: car.FromCurrency,
		ToCurrency:   car.ToCurrency,
		StartTime:    timestamppb.New(car.StartTime),
		EndTime:      timestamppb.New(car.EndTime),
	}
	return pb, nil
}

type CurrencyAccountingRateRepository interface {
	InsertCurrencyAccountingRate(context.Context, *CurrencyAccountingRate) error
	ListCurrencyAccountingRates(context.Context, string, int32, string, *ListPosition) (ListStat, []*CurrencyAccountingRate, *ListPosition, error)

	// From currency_accounting_rates_pkey
	CurrencyAccountingRateByID(context.Context, int32) (*CurrencyAccountingRate, error)

	UpdateCurrencyAccountingRateByID(context.Context, *CurrencyAccountingRate) error
	DeleteCurrencyAccountingRateByID(context.Context, int32) error

	// From currency_accounting_rates_rate_id_idx
	CurrencyAccountingRateByRateID(context.Context, string) (*CurrencyAccountingRate, error)

	UpdateCurrencyAccountingRateByRateID(context.Context, *CurrencyAccountingRate) error
	DeleteCurrencyAccountingRateByRateID(context.Context, string) error
}
