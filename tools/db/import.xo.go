// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"bnk.to/core/api/v1/imports"
)

// Import represents a row from 'imports'.
type Import struct {
	ID         int32   `json:"id"`          // id
	ImportID   string  `json:"import_id"`   // import_id
	ImporterID string  `json:"importer_id"` // importer_id
	Status     Status  `json:"status"`      // status
	Errors     []byte  `json:"errors"`      // errors
	Progress   float64 `json:"progress"`    // progress
	// xo fields
	Exists, Deleted bool
}

func NewImport(pb *imports.Import) (Import, error) {
	if pb == nil {
		return Import{}, ErrNilType{"Import"}
	}
	i := Import{
		ImportID:   pb.ImportID,
		ImporterID: pb.ImporterID,
		Status:     NewStatus(pb.Status),
		Progress:   pb.Progress,
	}
	var err error
	i.Errors, err = marshalArray(pb.Errors)
	if err != nil {
		return Import{}, err
	}
	return i, nil
}

func (i Import) PB() (*imports.Import, error) {
	pb := &imports.Import{
		ImportID:   i.ImportID,
		ImporterID: i.ImporterID,
		Status:     i.Status.PB(),
		Progress:   i.Progress,
	}
	var err error
	err = unmarshalArray(i.Errors, &pb.Errors)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type ImportRepository interface {
	InsertImport(context.Context, *Import) error
	ListImports(context.Context, string, int32, string, *ListPosition) (ListStat, []*Import, *ListPosition, error)

	// From imports_pkey
	ImportByID(context.Context, int32) (*Import, error)

	UpdateImportByID(context.Context, *Import) error
	DeleteImportByID(context.Context, int32) error

	// From imports_import_id_idx
	ImportByImportID(context.Context, string) (*Import, error)

	UpdateImportByImportID(context.Context, *Import) error
	DeleteImportByImportID(context.Context, string) error
}
