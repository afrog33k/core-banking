// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/comments"
)

// Comment represents a row from 'comments'.
type Comment struct {
	ID         int32         `json:"id"`          // id
	CommentID  string        `json:"comment_id"`  // comment_id
	UserID     string        `json:"user_id"`     // user_id
	OwnerID    string        `json:"owner_id"`    // owner_id
	OwnerType  CommentsOwner `json:"owner_type"`  // owner_type
	Text       string        `json:"text"`        // text
	CreateTime time.Time     `json:"create_time"` // create_time
	UpdateTime time.Time     `json:"update_time"` // update_time
	// xo fields
	Exists, Deleted bool
}

func NewComment(pb *comments.Comment) (Comment, error) {
	if pb == nil {
		return Comment{}, ErrNilType{"Comment"}
	}
	c := Comment{
		CommentID:  pb.CommentID,
		UserID:     pb.UserID,
		OwnerID:    pb.OwnerID,
		OwnerType:  NewCommentsOwner(pb.OwnerType),
		Text:       pb.Text,
		CreateTime: pb.CreateTime.AsTime(),
		UpdateTime: pb.UpdateTime.AsTime(),
	}
	return c, nil
}

func (c Comment) PB() (*comments.Comment, error) {
	pb := &comments.Comment{
		CommentID:  c.CommentID,
		UserID:     c.UserID,
		OwnerID:    c.OwnerID,
		OwnerType:  c.OwnerType.PB(),
		Text:       c.Text,
		CreateTime: timestamppb.New(c.CreateTime),
		UpdateTime: timestamppb.New(c.UpdateTime),
	}
	return pb, nil
}

type CommentRepository interface {
	InsertComment(context.Context, *Comment) error
	ListComments(context.Context, string, int32, string, *ListPosition) (ListStat, []*Comment, *ListPosition, error)

	// From comments_pkey
	CommentByID(context.Context, int32) (*Comment, error)

	UpdateCommentByID(context.Context, *Comment) error
	DeleteCommentByID(context.Context, int32) error

	// From comments_comment_id_idx
	CommentByCommentID(context.Context, string) (*Comment, error)

	UpdateCommentByCommentID(context.Context, *Comment) error
	DeleteCommentByCommentID(context.Context, string) error
}
