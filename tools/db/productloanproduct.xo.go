// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/products"
)

// ProductLoanProduct represents a row from 'product_loan_products'.
type ProductLoanProduct struct {
	ID                             int32                `json:"id"`                                // id
	ProductID                      string               `json:"product_id"`                        // product_id
	Name                           string               `json:"name"`                              // name
	Type                           ProductsLoanType     `json:"type"`                              // type
	Active                         bool                 `json:"active"`                            // active
	Notes                          string               `json:"notes"`                             // notes
	AllowCustomRepaymentAllocation bool                 `json:"allow_custom_repayment_allocation"` // allow_custom_repayment_allocation
	Category                       ProductsLoanCategory `json:"category"`                          // category
	CurrencyCode                   string               `json:"currency_code"`                     // currency_code
	InternalControls               []byte               `json:"internal_controls"`                 // internal_controls
	TemplateIDs                    StringSlice          `json:"template_ids"`                      // template_ids
	Settings                       []byte               `json:"settings"`                          // settings
	CreateTime                     time.Time            `json:"create_time"`                       // create_time
	UpdateTime                     time.Time            `json:"update_time"`                       // update_time
	// xo fields
	Exists, Deleted bool
}

func NewProductLoanProduct(pb *products.LoanProduct) (ProductLoanProduct, error) {
	if pb == nil {
		return ProductLoanProduct{}, ErrNilType{"ProductLoanProduct"}
	}
	plp := ProductLoanProduct{
		ProductID:                      pb.ProductID,
		Name:                           pb.Name,
		Type:                           NewProductsLoanType(pb.Type),
		Active:                         pb.Active,
		Notes:                          pb.Notes,
		AllowCustomRepaymentAllocation: pb.AllowCustomRepaymentAllocation,
		Category:                       NewProductsLoanCategory(pb.Category),
		CurrencyCode:                   pb.CurrencyCode,
		TemplateIDs:                    pb.TemplateIDs,
		CreateTime:                     pb.CreateTime.AsTime(),
		UpdateTime:                     pb.UpdateTime.AsTime(),
	}
	var err error
	plp.InternalControls, err = protojson.Marshal(pb.InternalControls)
	if err != nil {
		return ProductLoanProduct{}, err
	}
	plp.Settings, err = protojson.Marshal(pb.Settings)
	if err != nil {
		return ProductLoanProduct{}, err
	}
	return plp, nil
}

func (plp ProductLoanProduct) PB() (*products.LoanProduct, error) {
	pb := &products.LoanProduct{
		ProductID:                      plp.ProductID,
		Name:                           plp.Name,
		Type:                           plp.Type.PB(),
		Active:                         plp.Active,
		Notes:                          plp.Notes,
		AllowCustomRepaymentAllocation: plp.AllowCustomRepaymentAllocation,
		Category:                       plp.Category.PB(),
		CurrencyCode:                   plp.CurrencyCode,
		TemplateIDs:                    plp.TemplateIDs,
		CreateTime:                     timestamppb.New(plp.CreateTime),
		UpdateTime:                     timestamppb.New(plp.UpdateTime),
	}
	var err error
	err = unmarshalMessage(plp.InternalControls, &pb.InternalControls)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(plp.Settings, &pb.Settings)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type ProductLoanProductRepository interface {
	InsertProductLoanProduct(context.Context, *ProductLoanProduct) error
	ListProductLoanProducts(context.Context, string, int32, string, *ListPosition) (ListStat, []*ProductLoanProduct, *ListPosition, error)

	// From product_loan_products_pkey
	ProductLoanProductByID(context.Context, int32) (*ProductLoanProduct, error)

	UpdateProductLoanProductByID(context.Context, *ProductLoanProduct) error
	DeleteProductLoanProductByID(context.Context, int32) error

	// From product_loan_products_product_id_idx
	ProductLoanProductByProductID(context.Context, string) (*ProductLoanProduct, error)

	UpdateProductLoanProductByProductID(context.Context, *ProductLoanProduct) error
	DeleteProductLoanProductByProductID(context.Context, string) error
}
