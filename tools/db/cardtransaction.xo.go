// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/cards"
)

// CardTransaction represents a row from 'card_transactions'.
type CardTransaction struct {
	ID              int32     `json:"id"`               // id
	TransactionID   string    `json:"transaction_id"`   // transaction_id
	Advice          bool      `json:"advice"`           // advice
	Amount          []byte    `json:"amount"`           // amount
	Acceptor        []byte    `json:"acceptor"`         // acceptor
	CardID          string    `json:"card_id"`          // card_id
	AuthorizationID string    `json:"authorization_id"` // authorization_id
	TransactionTime time.Time `json:"transaction_time"` // transaction_time
	// xo fields
	Exists, Deleted bool
}

func NewCardTransaction(pb *cards.Transaction) (CardTransaction, error) {
	if pb == nil {
		return CardTransaction{}, ErrNilType{"CardTransaction"}
	}
	ct := CardTransaction{
		TransactionID:   pb.TransactionID,
		Advice:          pb.Advice,
		CardID:          pb.CardID,
		AuthorizationID: pb.AuthorizationID,
		TransactionTime: pb.TransactionTime.AsTime(),
	}
	var err error
	ct.Amount, err = protojson.Marshal(pb.Amount)
	if err != nil {
		return CardTransaction{}, err
	}
	ct.Acceptor, err = protojson.Marshal(pb.Acceptor)
	if err != nil {
		return CardTransaction{}, err
	}
	return ct, nil
}

func (ct CardTransaction) PB() (*cards.Transaction, error) {
	pb := &cards.Transaction{
		TransactionID:   ct.TransactionID,
		Advice:          ct.Advice,
		CardID:          ct.CardID,
		AuthorizationID: ct.AuthorizationID,
		TransactionTime: timestamppb.New(ct.TransactionTime),
	}
	var err error
	err = unmarshalMessage(ct.Amount, &pb.Amount)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(ct.Acceptor, &pb.Acceptor)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type CardTransactionRepository interface {
	InsertCardTransaction(context.Context, *CardTransaction) error
	ListCardTransactions(context.Context, string, int32, string, *ListPosition) (ListStat, []*CardTransaction, *ListPosition, error)

	// From card_transactions_pkey
	CardTransactionByID(context.Context, int32) (*CardTransaction, error)

	UpdateCardTransactionByID(context.Context, *CardTransaction) error
	DeleteCardTransactionByID(context.Context, int32) error
}
