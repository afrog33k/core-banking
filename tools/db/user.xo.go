// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/users"
)

// User represents a row from 'users'.
type User struct {
	ID                      int32          `json:"id"`                        // id
	UserID                  string         `json:"user_id"`                   // user_id
	Username                string         `json:"username"`                  // username
	Password                string         `json:"password"`                  // password
	Email                   string         `json:"email"`                     // email
	Title                   string         `json:"title"`                     // title
	FirstName               string         `json:"first_name"`                // first_name
	LastName                string         `json:"last_name"`                 // last_name
	RoleID                  string         `json:"role_id"`                   // role_id
	Access                  []byte         `json:"access"`                    // access
	AssignedBranchID        string         `json:"assigned_branch_id"`        // assigned_branch_id
	MobilePhone             string         `json:"mobile_phone"`              // mobile_phone
	HomePhone               sql.NullString `json:"home_phone"`                // home_phone
	Language                string         `json:"language"`                  // language
	Notes                   string         `json:"notes"`                     // notes
	TransactionLimits       []byte         `json:"transaction_limits"`        // transaction_limits
	TwoFactorAuthentication bool           `json:"two_factor_authentication"` // two_factor_authentication
	State                   UsersState     `json:"state"`                     // state
	CreateTime              time.Time      `json:"create_time"`               // create_time
	UpdateTime              time.Time      `json:"update_time"`               // update_time
	LoginTime               time.Time      `json:"login_time"`                // login_time
	// xo fields
	Exists, Deleted bool
}

func NewUser(pb *users.User) (User, error) {
	if pb == nil {
		return User{}, ErrNilType{"User"}
	}
	u := User{
		UserID:                  pb.UserID,
		Username:                pb.Username,
		Password:                pb.Password,
		Email:                   pb.Email,
		Title:                   pb.Title,
		FirstName:               pb.FirstName,
		LastName:                pb.LastName,
		RoleID:                  pb.RoleID,
		AssignedBranchID:        pb.AssignedBranchID,
		MobilePhone:             pb.MobilePhone,
		HomePhone:               toNullString(pb.HomePhone),
		Language:                pb.Language,
		Notes:                   pb.Notes,
		TwoFactorAuthentication: pb.TwoFactorAuthentication,
		State:                   NewUsersState(pb.State),
		CreateTime:              pb.CreateTime.AsTime(),
		UpdateTime:              pb.UpdateTime.AsTime(),
		LoginTime:               pb.LoginTime.AsTime(),
	}
	var err error
	u.Access, err = protojson.Marshal(pb.Access)
	if err != nil {
		return User{}, err
	}
	u.TransactionLimits, err = json.Marshal(pb.TransactionLimits)
	if err != nil {
		return User{}, err
	}
	return u, nil
}

func (u User) PB() (*users.User, error) {
	pb := &users.User{
		UserID:                  u.UserID,
		Username:                u.Username,
		Password:                u.Password,
		Email:                   u.Email,
		Title:                   u.Title,
		FirstName:               u.FirstName,
		LastName:                u.LastName,
		RoleID:                  u.RoleID,
		AssignedBranchID:        u.AssignedBranchID,
		MobilePhone:             u.MobilePhone,
		HomePhone:               toStringPB(u.HomePhone),
		Language:                u.Language,
		Notes:                   u.Notes,
		TwoFactorAuthentication: u.TwoFactorAuthentication,
		State:                   u.State.PB(),
		CreateTime:              timestamppb.New(u.CreateTime),
		UpdateTime:              timestamppb.New(u.UpdateTime),
		LoginTime:               timestamppb.New(u.LoginTime),
	}
	var err error
	err = unmarshalMessage(u.Access, &pb.Access)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(u.TransactionLimits, &pb.TransactionLimits)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type UserRepository interface {
	InsertUser(context.Context, *User) error
	ListUsers(context.Context, string, int32, string, *ListPosition) (ListStat, []*User, *ListPosition, error)

	// From users_pkey
	UserByID(context.Context, int32) (*User, error)

	UpdateUserByID(context.Context, *User) error
	DeleteUserByID(context.Context, int32) error

	// From users_user_id_idx
	UserByUserID(context.Context, string) (*User, error)

	UpdateUserByUserID(context.Context, *User) error
	DeleteUserByUserID(context.Context, string) error
}
