// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/deposits"
)

// DepositFundBlock represents a row from 'deposit_fund_blocks'.
type DepositFundBlock struct {
	ID           int32              `json:"id"`            // id
	BlockID      string             `json:"block_id"`      // block_id
	AccountID    string             `json:"account_id"`    // account_id
	Amount       []byte             `json:"amount"`        // amount
	SeizedAmount []byte             `json:"seized_amount"` // seized_amount
	State        DepositsBlockState `json:"state"`         // state
	Notes        string             `json:"notes"`         // notes
	CreateTime   time.Time          `json:"create_time"`   // create_time
	UpdateTime   time.Time          `json:"update_time"`   // update_time
	// xo fields
	Exists, Deleted bool
}

func NewDepositFundBlock(pb *deposits.FundBlock) (DepositFundBlock, error) {
	if pb == nil {
		return DepositFundBlock{}, ErrNilType{"DepositFundBlock"}
	}
	dfb := DepositFundBlock{
		BlockID:    pb.BlockID,
		AccountID:  pb.AccountID,
		State:      NewDepositsBlockState(pb.State),
		Notes:      pb.Notes,
		CreateTime: pb.CreateTime.AsTime(),
		UpdateTime: pb.UpdateTime.AsTime(),
	}
	var err error
	dfb.Amount, err = protojson.Marshal(pb.Amount)
	if err != nil {
		return DepositFundBlock{}, err
	}
	dfb.SeizedAmount, err = protojson.Marshal(pb.SeizedAmount)
	if err != nil {
		return DepositFundBlock{}, err
	}
	return dfb, nil
}

func (dfb DepositFundBlock) PB() (*deposits.FundBlock, error) {
	pb := &deposits.FundBlock{
		BlockID:    dfb.BlockID,
		AccountID:  dfb.AccountID,
		State:      dfb.State.PB(),
		Notes:      dfb.Notes,
		CreateTime: timestamppb.New(dfb.CreateTime),
		UpdateTime: timestamppb.New(dfb.UpdateTime),
	}
	var err error
	err = unmarshalMessage(dfb.Amount, &pb.Amount)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(dfb.SeizedAmount, &pb.SeizedAmount)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type DepositFundBlockRepository interface {
	InsertDepositFundBlock(context.Context, *DepositFundBlock) error
	ListDepositFundBlocks(context.Context, string, int32, string, *ListPosition) (ListStat, []*DepositFundBlock, *ListPosition, error)

	// From deposit_fund_blocks_pkey
	DepositFundBlockByID(context.Context, int32) (*DepositFundBlock, error)

	UpdateDepositFundBlockByID(context.Context, *DepositFundBlock) error
	DeleteDepositFundBlockByID(context.Context, int32) error

	// From deposit_fund_blocks_block_id_idx
	DepositFundBlockByBlockID(context.Context, string) (*DepositFundBlock, error)

	UpdateDepositFundBlockByBlockID(context.Context, *DepositFundBlock) error
	DeleteDepositFundBlockByBlockID(context.Context, string) error
}
