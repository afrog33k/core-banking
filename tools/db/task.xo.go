// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/tasks"
)

// Task represents a row from 'tasks'.
type Task struct {
	ID               int32           `json:"id"`                 // id
	TaskID           string          `json:"task_id"`            // task_id
	Title            string          `json:"title"`              // title
	Status           TasksStatus     `json:"status"`             // status
	Description      string          `json:"description"`        // description
	AssigneeID       sql.NullString  `json:"assignee_id"`        // assignee_id
	AssignerFullName string          `json:"assigner_full_name"` // assigner_full_name
	AssignerID       string          `json:"assigner_id"`        // assigner_id
	LinkedID         sql.NullString  `json:"linked_id"`          // linked_id
	LinkedType       TasksLinkedType `json:"linked_type"`        // linked_type
	TemplateID       string          `json:"template_id"`        // template_id
	DueTime          time.Time       `json:"due_time"`           // due_time
	CreateTime       time.Time       `json:"create_time"`        // create_time
	UpdateTime       time.Time       `json:"update_time"`        // update_time
	// xo fields
	Exists, Deleted bool
}

func NewTask(pb *tasks.Task) (Task, error) {
	if pb == nil {
		return Task{}, ErrNilType{"Task"}
	}
	t := Task{
		TaskID:           pb.TaskID,
		Title:            pb.Title,
		Status:           NewTasksStatus(pb.Status),
		Description:      pb.Description,
		AssigneeID:       toNullString(pb.AssigneeID),
		AssignerFullName: pb.AssignerFullName,
		AssignerID:       pb.AssignerID,
		LinkedID:         toNullString(pb.LinkedID),
		LinkedType:       NewTasksLinkedType(pb.LinkedType),
		TemplateID:       pb.TemplateID,
		DueTime:          pb.DueTime.AsTime(),
		CreateTime:       pb.CreateTime.AsTime(),
		UpdateTime:       pb.UpdateTime.AsTime(),
	}
	return t, nil
}

func (t Task) PB() (*tasks.Task, error) {
	pb := &tasks.Task{
		TaskID:           t.TaskID,
		Title:            t.Title,
		Status:           t.Status.PB(),
		Description:      t.Description,
		AssigneeID:       toStringPB(t.AssigneeID),
		AssignerFullName: t.AssignerFullName,
		AssignerID:       t.AssignerID,
		LinkedID:         toStringPB(t.LinkedID),
		LinkedType:       t.LinkedType.PB(),
		TemplateID:       t.TemplateID,
		DueTime:          timestamppb.New(t.DueTime),
		CreateTime:       timestamppb.New(t.CreateTime),
		UpdateTime:       timestamppb.New(t.UpdateTime),
	}
	return pb, nil
}

type TaskRepository interface {
	InsertTask(context.Context, *Task) error
	ListTasks(context.Context, string, int32, string, *ListPosition) (ListStat, []*Task, *ListPosition, error)

	// From tasks_pkey
	TaskByID(context.Context, int32) (*Task, error)

	UpdateTaskByID(context.Context, *Task) error
	DeleteTaskByID(context.Context, int32) error

	// From tasks_task_id_idx
	TaskByTaskID(context.Context, string) (*Task, error)

	UpdateTaskByTaskID(context.Context, *Task) error
	DeleteTaskByTaskID(context.Context, string) error
}
