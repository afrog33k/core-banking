// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/org"
)

// OrgSetup represents a row from 'org_setups'.
type OrgSetup struct {
	ID                                        int32                     `json:"id"`                                             // id
	AccountingCutOffTime                      time.Time                 `json:"accounting_cut_off_time"`                        // accounting_cut_off_time
	ArrearsDaysBeforeWriteOff                 int32                     `json:"arrears_days_before_write_off"`                  // arrears_days_before_write_off
	AssignmentConstraints                     []OrgAssignmentConstraint `json:"assignment_constraints"`                         // assignment_constraints
	AutomatedAccountingClosuresInterval       int64                     `json:"automated_accounting_closures_interval"`         // automated_accounting_closures_interval
	ClientIDFormat                            string                    `json:"client_id_format"`                               // client_id_format
	GroupIDFormat                             string                    `json:"group_id_format"`                                // group_id_format
	LineOfCreditIDFormat                      string                    `json:"line_of_credit_id_format"`                       // line_of_credit_id_format
	DateFormats                               []byte                    `json:"date_formats"`                                   // date_formats
	EnabledComponents                         []OrgAppComponent         `json:"enabled_components"`                             // enabled_components
	DashboardComponents                       []OrgDashboardComponent   `json:"dashboard_components"`                           // dashboard_components
	DecimalSeparator                          OrgDecimalSeparator       `json:"decimal_separator"`                              // decimal_separator
	Defaults                                  OrgDefault                `json:"defaults"`                                       // defaults
	ClientChecks                              []OrgDuplicateItemType    `json:"client_checks"`                                  // client_checks
	ClientConstraintAction                    OrgConstraintAction       `json:"client_constraint_action"`                       // client_constraint_action
	EndOfDayMode                              OrgEndOfDayMode           `json:"end_of_day_mode"`                                // end_of_day_mode
	ExposureAmount                            []byte                    `json:"exposure_amount"`                                // exposure_amount
	ExposureType                              OrgExposureType           `json:"exposure_type"`                                  // exposure_type
	MinGroupSizeLimit                         int32                     `json:"min_group_size_limit"`                           // min_group_size_limit
	MaxGroupSizeLimit                         int32                     `json:"max_group_size_limit"`                           // max_group_size_limit
	GroupSizeLimitType                        OrgGroupSizeLimitType     `json:"group_size_limit_type"`                          // group_size_limit_type
	InterBranchTransferGLAccountID            string                    `json:"inter_branch_transfer_gl_account_id"`            // inter_branch_transfer_gl_account_id
	MaxAllowedIDDocumentAttachments           int32                     `json:"max_allowed_id_document_attachments"`            // max_allowed_id_document_attachments
	MaxAllowedJournalEntryDocumentAttachments int32                     `json:"max_allowed_journal_entry_document_attachments"` // max_allowed_journal_entry_document_attachments
	MaxAllowedUndoClosurePeriod               int32                     `json:"max_allowed_undo_closure_period"`                // max_allowed_undo_closure_period
	MaxClientGroups                           int32                     `json:"max_client_groups"`                              // max_client_groups
	MaxLoans                                  int32                     `json:"max_loans"`                                      // max_loans
	AllowOtherIDDocuments                     bool                      `json:"allow_other_id_documents"`                       // allow_other_id_documents
	OverdraftInterestDate                     time.Time                 `json:"overdraft_interest_date"`                        // overdraft_interest_date
	MinDisbursalApprovalRequired              int32                     `json:"min_disbursal_approval_required"`                // min_disbursal_approval_required
	MinLoanApprovalRequired                   int32                     `json:"min_loan_approval_required"`                     // min_loan_approval_required
	// xo fields
	Exists, Deleted bool
}

func NewOrgSetup(pb *org.Setup) (OrgSetup, error) {
	if pb == nil {
		return OrgSetup{}, ErrNilType{"OrgSetup"}
	}
	os := OrgSetup{
		AccountingCutOffTime:                      pb.AccountingCutOffTime.AsTime(),
		ArrearsDaysBeforeWriteOff:                 pb.ArrearsDaysBeforeWriteOff,
		AssignmentConstraints:                     convertEnum[org.AssignmentConstraint, OrgAssignmentConstraint](pb.AssignmentConstraints, 1),
		AutomatedAccountingClosuresInterval:       int64(pb.AutomatedAccountingClosuresInterval.AsDuration()),
		ClientIDFormat:                            pb.ClientIDFormat,
		GroupIDFormat:                             pb.GroupIDFormat,
		LineOfCreditIDFormat:                      pb.LineOfCreditIDFormat,
		EnabledComponents:                         convertEnum[org.AppComponent, OrgAppComponent](pb.EnabledComponents, 1),
		DashboardComponents:                       convertEnum[org.DashboardComponent, OrgDashboardComponent](pb.DashboardComponents, 1),
		DecimalSeparator:                          NewOrgDecimalSeparator(pb.DecimalSeparator),
		ClientChecks:                              convertEnum[org.DuplicateItemType, OrgDuplicateItemType](pb.ClientChecks, 1),
		ClientConstraintAction:                    NewOrgConstraintAction(pb.ClientConstraintAction),
		EndOfDayMode:                              NewOrgEndOfDayMode(pb.EndOfDayMode),
		ExposureType:                              NewOrgExposureType(pb.ExposureType),
		MinGroupSizeLimit:                         pb.MinGroupSizeLimit,
		MaxGroupSizeLimit:                         pb.MaxGroupSizeLimit,
		GroupSizeLimitType:                        NewOrgGroupSizeLimitType(pb.GroupSizeLimitType),
		InterBranchTransferGLAccountID:            pb.InterBranchTransferGLAccountID,
		MaxAllowedIDDocumentAttachments:           pb.MaxAllowedIDDocumentAttachments,
		MaxAllowedJournalEntryDocumentAttachments: pb.MaxAllowedJournalEntryDocumentAttachments,
		MaxAllowedUndoClosurePeriod:               pb.MaxAllowedUndoClosurePeriod,
		MaxClientGroups:                           pb.MaxClientGroups,
		MaxLoans:                                  pb.MaxLoans,
		AllowOtherIDDocuments:                     pb.AllowOtherIDDocuments,
		OverdraftInterestDate:                     pb.OverdraftInterestDate.AsTime(),
		MinDisbursalApprovalRequired:              pb.MinDisbursalApprovalRequired,
		MinLoanApprovalRequired:                   pb.MinLoanApprovalRequired,
	}
	var err error
	os.DateFormats, err = json.Marshal(pb.DateFormats)
	if err != nil {
		return OrgSetup{}, err
	}
	os.Defaults, err = NewOrgDefault(pb.Defaults)
	if err != nil {
		return OrgSetup{}, err
	}
	os.ExposureAmount, err = protojson.Marshal(pb.ExposureAmount)
	if err != nil {
		return OrgSetup{}, err
	}
	return os, nil
}

func (os OrgSetup) PB() (*org.Setup, error) {
	pb := &org.Setup{
		AccountingCutOffTime:                      timestamppb.New(os.AccountingCutOffTime),
		ArrearsDaysBeforeWriteOff:                 os.ArrearsDaysBeforeWriteOff,
		AssignmentConstraints:                     convertEnum[OrgAssignmentConstraint, org.AssignmentConstraint](os.AssignmentConstraints, -1),
		AutomatedAccountingClosuresInterval:       durationpb.New(time.Duration(os.AutomatedAccountingClosuresInterval)),
		ClientIDFormat:                            os.ClientIDFormat,
		GroupIDFormat:                             os.GroupIDFormat,
		LineOfCreditIDFormat:                      os.LineOfCreditIDFormat,
		EnabledComponents:                         convertEnum[OrgAppComponent, org.AppComponent](os.EnabledComponents, -1),
		DashboardComponents:                       convertEnum[OrgDashboardComponent, org.DashboardComponent](os.DashboardComponents, -1),
		DecimalSeparator:                          os.DecimalSeparator.PB(),
		ClientChecks:                              convertEnum[OrgDuplicateItemType, org.DuplicateItemType](os.ClientChecks, -1),
		ClientConstraintAction:                    os.ClientConstraintAction.PB(),
		EndOfDayMode:                              os.EndOfDayMode.PB(),
		ExposureType:                              os.ExposureType.PB(),
		MinGroupSizeLimit:                         os.MinGroupSizeLimit,
		MaxGroupSizeLimit:                         os.MaxGroupSizeLimit,
		GroupSizeLimitType:                        os.GroupSizeLimitType.PB(),
		InterBranchTransferGLAccountID:            os.InterBranchTransferGLAccountID,
		MaxAllowedIDDocumentAttachments:           os.MaxAllowedIDDocumentAttachments,
		MaxAllowedJournalEntryDocumentAttachments: os.MaxAllowedJournalEntryDocumentAttachments,
		MaxAllowedUndoClosurePeriod:               os.MaxAllowedUndoClosurePeriod,
		MaxClientGroups:                           os.MaxClientGroups,
		MaxLoans:                                  os.MaxLoans,
		AllowOtherIDDocuments:                     os.AllowOtherIDDocuments,
		OverdraftInterestDate:                     timestamppb.New(os.OverdraftInterestDate),
		MinDisbursalApprovalRequired:              os.MinDisbursalApprovalRequired,
		MinLoanApprovalRequired:                   os.MinLoanApprovalRequired,
	}
	var err error
	err = json.Unmarshal(os.DateFormats, &pb.DateFormats)
	if err != nil {
		return nil, err
	}
	pb.Defaults, err = os.Defaults.PB()
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(os.ExposureAmount, &pb.ExposureAmount)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type OrgSetupRepository interface {
	InsertOrgSetup(context.Context, *OrgSetup) error
	ListOrgSetups(context.Context, string, int32, string, *ListPosition) (ListStat, []*OrgSetup, *ListPosition, error)

	// From org_setups_pkey
	OrgSetupByID(context.Context, int32) (*OrgSetup, error)

	UpdateOrgSetupByID(context.Context, *OrgSetup) error
	DeleteOrgSetupByID(context.Context, int32) error
}
