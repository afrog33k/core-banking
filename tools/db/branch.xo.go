// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/branches"
)

// Branch represents a row from 'branches'.
type Branch struct {
	ID         int32       `json:"id"`          // id
	BranchID   string      `json:"branch_id"`   // branch_id
	Info       ContactInfo `json:"info"`        // info
	Notes      string      `json:"notes"`       // notes
	State      State       `json:"state"`       // state
	Fields     []byte      `json:"fields"`      // fields
	CreateTime time.Time   `json:"create_time"` // create_time
	UpdateTime time.Time   `json:"update_time"` // update_time
	// xo fields
	Exists, Deleted bool
}

func NewBranch(pb *branches.Branch) (Branch, error) {
	if pb == nil {
		return Branch{}, ErrNilType{"Branch"}
	}
	b := Branch{
		BranchID:   pb.BranchID,
		Notes:      pb.Notes,
		State:      NewState(pb.State),
		CreateTime: pb.CreateTime.AsTime(),
		UpdateTime: pb.UpdateTime.AsTime(),
	}
	var err error
	b.Info, err = NewContactInfo(pb.Info)
	if err != nil {
		return Branch{}, err
	}
	b.Fields, err = protojson.Marshal(pb.Fields)
	if err != nil {
		return Branch{}, err
	}
	return b, nil
}

func (b Branch) PB() (*branches.Branch, error) {
	pb := &branches.Branch{
		BranchID:   b.BranchID,
		Notes:      b.Notes,
		State:      b.State.PB(),
		CreateTime: timestamppb.New(b.CreateTime),
		UpdateTime: timestamppb.New(b.UpdateTime),
	}
	var err error
	pb.Info, err = b.Info.PB()
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(b.Fields, &pb.Fields)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type BranchRepository interface {
	InsertBranch(context.Context, *Branch) error
	ListBranches(context.Context, string, int32, string, *ListPosition) (ListStat, []*Branch, *ListPosition, error)

	// From branches_pkey
	BranchByID(context.Context, int32) (*Branch, error)

	UpdateBranchByID(context.Context, *Branch) error
	DeleteBranchByID(context.Context, int32) error

	// From branches_branch_id_idx
	BranchByBranchID(context.Context, string) (*Branch, error)

	UpdateBranchByBranchID(context.Context, *Branch) error
	DeleteBranchByBranchID(context.Context, string) error
}
