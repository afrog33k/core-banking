// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/revolving"
)

// RevolvingAccount represents a row from 'revolving_accounts'.
type RevolvingAccount struct {
	ID                int32                  `json:"id"`                  // id
	AccountID         string                 `json:"account_id"`          // account_id
	ClientID          string                 `json:"client_id"`           // client_id
	HolderType        Entity                 `json:"holder_type"`         // holder_type
	Notes             string                 `json:"notes"`               // notes
	Status            Status                 `json:"status"`              // status
	SubStatus         Status                 `json:"sub_status"`          // sub_status
	MaxCredit         []byte                 `json:"max_credit"`          // max_credit
	AvailableCredit   []byte                 `json:"available_credit"`    // available_credit
	ConsumedCredit    []byte                 `json:"consumed_credit"`     // consumed_credit
	ExposureLimitType RevolvingExposureLimit `json:"exposure_limit_type"` // exposure_limit_type
	ApproveTime       time.Time              `json:"approve_time"`        // approve_time
	StartTime         time.Time              `json:"start_time"`          // start_time
	CloseTime         time.Time              `json:"close_time"`          // close_time
	ExpireTime        time.Time              `json:"expire_time"`         // expire_time
	CreateTime        time.Time              `json:"create_time"`         // create_time
	UpdateTime        time.Time              `json:"update_time"`         // update_time
	// xo fields
	Exists, Deleted bool
}

func NewRevolvingAccount(pb *revolving.Account) (RevolvingAccount, error) {
	if pb == nil {
		return RevolvingAccount{}, ErrNilType{"RevolvingAccount"}
	}
	ra := RevolvingAccount{
		AccountID:         pb.AccountID,
		ClientID:          pb.ClientID,
		HolderType:        NewEntity(pb.HolderType),
		Notes:             pb.Notes,
		Status:            NewStatus(pb.Status),
		SubStatus:         NewStatus(pb.SubStatus),
		ExposureLimitType: NewRevolvingExposureLimit(pb.ExposureLimitType),
		ApproveTime:       pb.ApproveTime.AsTime(),
		StartTime:         pb.StartTime.AsTime(),
		CloseTime:         pb.CloseTime.AsTime(),
		ExpireTime:        pb.ExpireTime.AsTime(),
		CreateTime:        pb.CreateTime.AsTime(),
		UpdateTime:        pb.UpdateTime.AsTime(),
	}
	var err error
	ra.MaxCredit, err = protojson.Marshal(pb.MaxCredit)
	if err != nil {
		return RevolvingAccount{}, err
	}
	ra.AvailableCredit, err = protojson.Marshal(pb.AvailableCredit)
	if err != nil {
		return RevolvingAccount{}, err
	}
	ra.ConsumedCredit, err = protojson.Marshal(pb.ConsumedCredit)
	if err != nil {
		return RevolvingAccount{}, err
	}
	return ra, nil
}

func (ra RevolvingAccount) PB() (*revolving.Account, error) {
	pb := &revolving.Account{
		AccountID:         ra.AccountID,
		ClientID:          ra.ClientID,
		HolderType:        ra.HolderType.PB(),
		Notes:             ra.Notes,
		Status:            ra.Status.PB(),
		SubStatus:         ra.SubStatus.PB(),
		ExposureLimitType: ra.ExposureLimitType.PB(),
		ApproveTime:       timestamppb.New(ra.ApproveTime),
		StartTime:         timestamppb.New(ra.StartTime),
		CloseTime:         timestamppb.New(ra.CloseTime),
		ExpireTime:        timestamppb.New(ra.ExpireTime),
		CreateTime:        timestamppb.New(ra.CreateTime),
		UpdateTime:        timestamppb.New(ra.UpdateTime),
	}
	var err error
	err = unmarshalMessage(ra.MaxCredit, &pb.MaxCredit)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(ra.AvailableCredit, &pb.AvailableCredit)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(ra.ConsumedCredit, &pb.ConsumedCredit)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type RevolvingAccountRepository interface {
	InsertRevolvingAccount(context.Context, *RevolvingAccount) error
	ListRevolvingAccounts(context.Context, string, int32, string, *ListPosition) (ListStat, []*RevolvingAccount, *ListPosition, error)

	// From revolving_accounts_pkey
	RevolvingAccountByID(context.Context, int32) (*RevolvingAccount, error)

	UpdateRevolvingAccountByID(context.Context, *RevolvingAccount) error
	DeleteRevolvingAccountByID(context.Context, int32) error

	// From revolving_accounts_account_id_idx
	RevolvingAccountByAccountID(context.Context, string) (*RevolvingAccount, error)

	UpdateRevolvingAccountByAccountID(context.Context, *RevolvingAccount) error
	DeleteRevolvingAccountByAccountID(context.Context, string) error
}
