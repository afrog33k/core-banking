// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/clients"
)

// Client represents a row from 'clients'.
type Client struct {
	ID                 int32         `json:"id"`                   // id
	ClientID           string        `json:"client_id"`            // client_id
	Info               ContactInfo   `json:"info"`                 // info
	AssignedBranchID   string        `json:"assigned_branch_id"`   // assigned_branch_id
	AssignedCentreID   string        `json:"assigned_centre_id"`   // assigned_centre_id
	AssignedUserID     string        `json:"assigned_user_id"`     // assigned_user_id
	Birthday           time.Time     `json:"birthday"`             // birthday
	RoleID             string        `json:"role_id"`              // role_id
	Gender             ClientsGender `json:"gender"`               // gender
	GroupLoanCycle     int32         `json:"group_loan_cycle"`     // group_loan_cycle
	LoanCycle          int32         `json:"loan_cycle"`           // loan_cycle
	PortalSettings     []byte        `json:"portal_settings"`      // portal_settings
	MigrationEventID   string        `json:"migration_event_id"`   // migration_event_id
	ProfilePictureID   string        `json:"profile_picture_id"`   // profile_picture_id
	ProfileSignatureID string        `json:"profile_signature_id"` // profile_signature_id
	State              State         `json:"state"`                // state
	Notes              string        `json:"notes"`                // notes
	CreateTime         time.Time     `json:"create_time"`          // create_time
	UpdateTime         time.Time     `json:"update_time"`          // update_time
	ApproveTime        time.Time     `json:"approve_time"`         // approve_time
	ActivateTime       time.Time     `json:"activate_time"`        // activate_time
	CloseTime          time.Time     `json:"close_time"`           // close_time
	// xo fields
	Exists, Deleted bool
}

func NewClient(pb *clients.Client) (Client, error) {
	if pb == nil {
		return Client{}, ErrNilType{"Client"}
	}
	c := Client{
		ClientID:           pb.ClientID,
		AssignedBranchID:   pb.AssignedBranchID,
		AssignedCentreID:   pb.AssignedCentreID,
		AssignedUserID:     pb.AssignedUserID,
		Birthday:           pb.Birthday.AsTime(),
		RoleID:             pb.RoleID,
		Gender:             NewClientsGender(pb.Gender),
		GroupLoanCycle:     pb.GroupLoanCycle,
		LoanCycle:          pb.LoanCycle,
		MigrationEventID:   pb.MigrationEventID,
		ProfilePictureID:   pb.ProfilePictureID,
		ProfileSignatureID: pb.ProfileSignatureID,
		State:              NewState(pb.State),
		Notes:              pb.Notes,
		CreateTime:         pb.CreateTime.AsTime(),
		UpdateTime:         pb.UpdateTime.AsTime(),
		ApproveTime:        pb.ApproveTime.AsTime(),
		ActivateTime:       pb.ActivateTime.AsTime(),
		CloseTime:          pb.CloseTime.AsTime(),
	}
	var err error
	c.Info, err = NewContactInfo(pb.Info)
	if err != nil {
		return Client{}, err
	}
	c.PortalSettings, err = protojson.Marshal(pb.PortalSettings)
	if err != nil {
		return Client{}, err
	}
	return c, nil
}

func (c Client) PB() (*clients.Client, error) {
	pb := &clients.Client{
		ClientID:           c.ClientID,
		AssignedBranchID:   c.AssignedBranchID,
		AssignedCentreID:   c.AssignedCentreID,
		AssignedUserID:     c.AssignedUserID,
		Birthday:           timestamppb.New(c.Birthday),
		RoleID:             c.RoleID,
		Gender:             c.Gender.PB(),
		GroupLoanCycle:     c.GroupLoanCycle,
		LoanCycle:          c.LoanCycle,
		MigrationEventID:   c.MigrationEventID,
		ProfilePictureID:   c.ProfilePictureID,
		ProfileSignatureID: c.ProfileSignatureID,
		State:              c.State.PB(),
		Notes:              c.Notes,
		CreateTime:         timestamppb.New(c.CreateTime),
		UpdateTime:         timestamppb.New(c.UpdateTime),
		ApproveTime:        timestamppb.New(c.ApproveTime),
		ActivateTime:       timestamppb.New(c.ActivateTime),
		CloseTime:          timestamppb.New(c.CloseTime),
	}
	var err error
	pb.Info, err = c.Info.PB()
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(c.PortalSettings, &pb.PortalSettings)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type ClientRepository interface {
	InsertClient(context.Context, *Client) error
	ListClients(context.Context, string, int32, string, *ListPosition) (ListStat, []*Client, *ListPosition, error)

	// From clients_pkey
	ClientByID(context.Context, int32) (*Client, error)

	UpdateClientByID(context.Context, *Client) error
	DeleteClientByID(context.Context, int32) error

	// From clients_client_id_idx
	ClientByClientID(context.Context, string) (*Client, error)

	UpdateClientByClientID(context.Context, *Client) error
	DeleteClientByClientID(context.Context, string) error
}
