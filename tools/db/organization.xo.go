// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/org"
)

// Organization represents a row from 'organizations'.
type Organization struct {
	ID             int32       `json:"id"`               // id
	Info           ContactInfo `json:"info"`             // info
	CurrencyCode   string      `json:"currency_code"`    // currency_code
	DateFormat     string      `json:"date_format"`      // date_format
	DateTimeFormat string      `json:"date_time_format"` // date_time_format
	Timezone       string      `json:"timezone"`         // timezone
	CreateTime     time.Time   `json:"create_time"`      // create_time
	UpdateTime     time.Time   `json:"update_time"`      // update_time
	// xo fields
	Exists, Deleted bool
}

func NewOrganization(pb *org.Organization) (Organization, error) {
	if pb == nil {
		return Organization{}, ErrNilType{"Organization"}
	}
	o := Organization{
		CurrencyCode:   pb.CurrencyCode,
		DateFormat:     pb.DateFormat,
		DateTimeFormat: pb.DateTimeFormat,
		Timezone:       pb.Timezone,
		CreateTime:     pb.CreateTime.AsTime(),
		UpdateTime:     pb.UpdateTime.AsTime(),
	}
	var err error
	o.Info, err = NewContactInfo(pb.Info)
	if err != nil {
		return Organization{}, err
	}
	return o, nil
}

func (o Organization) PB() (*org.Organization, error) {
	pb := &org.Organization{
		CurrencyCode:   o.CurrencyCode,
		DateFormat:     o.DateFormat,
		DateTimeFormat: o.DateTimeFormat,
		Timezone:       o.Timezone,
		CreateTime:     timestamppb.New(o.CreateTime),
		UpdateTime:     timestamppb.New(o.UpdateTime),
	}
	var err error
	pb.Info, err = o.Info.PB()
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type OrganizationRepository interface {
	InsertOrganization(context.Context, *Organization) error
	ListOrganizations(context.Context, string, int32, string, *ListPosition) (ListStat, []*Organization, *ListPosition, error)

	// From organizations_pkey
	OrganizationByID(context.Context, int32) (*Organization, error)

	UpdateOrganizationByID(context.Context, *Organization) error
	DeleteOrganizationByID(context.Context, int32) error
}
