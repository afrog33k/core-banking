// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"bnk.to/core/api/v1/org"
)

// OrgNonWorkingDay represents a row from 'org_non_working_days'.
type OrgNonWorkingDay struct {
	ID             int32    `json:"id"`               // id
	NonWorkingDays []OrgDay `json:"non_working_days"` // non_working_days
	// xo fields
	Exists, Deleted bool
}

func NewOrgNonWorkingDay(pb *org.NonWorkingDays) (OrgNonWorkingDay, error) {
	if pb == nil {
		return OrgNonWorkingDay{}, ErrNilType{"OrgNonWorkingDay"}
	}
	onwd := OrgNonWorkingDay{
		NonWorkingDays: convertEnum[org.Day, OrgDay](pb.NonWorkingDays, 1),
	}
	return onwd, nil
}

func (onwd OrgNonWorkingDay) PB() (*org.NonWorkingDays, error) {
	pb := &org.NonWorkingDays{
		NonWorkingDays: convertEnum[OrgDay, org.Day](onwd.NonWorkingDays, -1),
	}
	return pb, nil
}

type OrgNonWorkingDayRepository interface {
	InsertOrgNonWorkingDay(context.Context, *OrgNonWorkingDay) error
	ListOrgNonWorkingDays(context.Context, string, int32, string, *ListPosition) (ListStat, []*OrgNonWorkingDay, *ListPosition, error)

	// From org_non_working_days_pkey
	OrgNonWorkingDayByID(context.Context, int32) (*OrgNonWorkingDay, error)

	UpdateOrgNonWorkingDayByID(context.Context, *OrgNonWorkingDay) error
	DeleteOrgNonWorkingDayByID(context.Context, int32) error
}
