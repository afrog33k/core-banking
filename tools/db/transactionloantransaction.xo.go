// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/transactions"
)

// TransactionLoanTransaction represents a row from 'transaction_loan_transactions'.
type TransactionLoanTransaction struct {
	ID                      int32                         `json:"id"`                         // id
	TransactionID           string                        `json:"transaction_id"`             // transaction_id
	UserID                  string                        `json:"user_id"`                    // user_id
	Type                    TransactionsLoanType          `json:"type"`                       // type
	AccountBalances         []byte                        `json:"account_balances"`           // account_balances
	AdjustmentTransactionID string                        `json:"adjustment_transaction_id"`  // adjustment_transaction_id
	AffectedAmounts         []byte                        `json:"affected_amounts"`           // affected_amounts
	Amount                  []byte                        `json:"amount"`                     // amount
	CardTransaction         CardTransaction               `json:"card_transaction"`           // card_transaction
	BranchID                string                        `json:"branch_id"`                  // branch_id
	CentreID                string                        `json:"centre_id"`                  // centre_id
	CustomPaymentAmounts    []byte                        `json:"custom_payment_amounts"`     // custom_payment_amounts
	Fees                    []byte                        `json:"fees"`                       // fees
	InstallmentID           string                        `json:"installment_id"`             // installment_id
	MigrationEventID        string                        `json:"migration_event_id"`         // migration_event_id
	Notes                   string                        `json:"notes"`                      // notes
	OriginalAmount          []byte                        `json:"original_amount"`            // original_amount
	OriginalTransactionID   string                        `json:"original_transaction_id"`    // original_transaction_id
	ParentAccountID         string                        `json:"parent_account_id"`          // parent_account_id
	ParentLoanTransactionID string                        `json:"parent_loan_transaction_id"` // parent_loan_transaction_id
	RecalculationMethod     TransactionsCalculationMethod `json:"recalculation_method"`       // recalculation_method
	Taxes                   []byte                        `json:"taxes"`                      // taxes
	Terms                   []byte                        `json:"terms"`                      // terms
	TillID                  string                        `json:"till_id"`                    // till_id
	ChannelID               string                        `json:"channel_id"`                 // channel_id
	TransferDetails         []byte                        `json:"transfer_details"`           // transfer_details
	CreateTime              time.Time                     `json:"create_time"`                // create_time
	BookTime                time.Time                     `json:"book_time"`                  // book_time
	ValueTime               time.Time                     `json:"value_time"`                 // value_time
	// xo fields
	Exists, Deleted bool
}

func NewTransactionLoanTransaction(pb *transactions.LoanTransaction) (TransactionLoanTransaction, error) {
	if pb == nil {
		return TransactionLoanTransaction{}, ErrNilType{"TransactionLoanTransaction"}
	}
	tlt := TransactionLoanTransaction{
		TransactionID:           pb.TransactionID,
		UserID:                  pb.UserID,
		Type:                    NewTransactionsLoanType(pb.Type),
		AdjustmentTransactionID: pb.AdjustmentTransactionID,
		BranchID:                pb.BranchID,
		CentreID:                pb.CentreID,
		InstallmentID:           pb.InstallmentID,
		MigrationEventID:        pb.MigrationEventID,
		Notes:                   pb.Notes,
		OriginalTransactionID:   pb.OriginalTransactionID,
		ParentAccountID:         pb.ParentAccountID,
		ParentLoanTransactionID: pb.ParentLoanTransactionID,
		RecalculationMethod:     NewTransactionsCalculationMethod(pb.RecalculationMethod),
		TillID:                  pb.TillID,
		ChannelID:               pb.ChannelID,
		CreateTime:              pb.CreateTime.AsTime(),
		BookTime:                pb.BookTime.AsTime(),
		ValueTime:               pb.ValueTime.AsTime(),
	}
	var err error
	tlt.AccountBalances, err = protojson.Marshal(pb.AccountBalances)
	if err != nil {
		return TransactionLoanTransaction{}, err
	}
	tlt.AffectedAmounts, err = protojson.Marshal(pb.AffectedAmounts)
	if err != nil {
		return TransactionLoanTransaction{}, err
	}
	tlt.Amount, err = protojson.Marshal(pb.Amount)
	if err != nil {
		return TransactionLoanTransaction{}, err
	}
	tlt.CardTransaction, err = NewCardTransaction(pb.CardTransaction)
	if err != nil {
		return TransactionLoanTransaction{}, err
	}
	tlt.CustomPaymentAmounts, err = marshalArray(pb.CustomPaymentAmounts)
	if err != nil {
		return TransactionLoanTransaction{}, err
	}
	tlt.Fees, err = marshalArray(pb.Fees)
	if err != nil {
		return TransactionLoanTransaction{}, err
	}
	tlt.OriginalAmount, err = protojson.Marshal(pb.OriginalAmount)
	if err != nil {
		return TransactionLoanTransaction{}, err
	}
	tlt.Taxes, err = protojson.Marshal(pb.Taxes)
	if err != nil {
		return TransactionLoanTransaction{}, err
	}
	tlt.Terms, err = protojson.Marshal(pb.Terms)
	if err != nil {
		return TransactionLoanTransaction{}, err
	}
	tlt.TransferDetails, err = protojson.Marshal(pb.TransferDetails)
	if err != nil {
		return TransactionLoanTransaction{}, err
	}
	return tlt, nil
}

func (tlt TransactionLoanTransaction) PB() (*transactions.LoanTransaction, error) {
	pb := &transactions.LoanTransaction{
		TransactionID:           tlt.TransactionID,
		UserID:                  tlt.UserID,
		Type:                    tlt.Type.PB(),
		AdjustmentTransactionID: tlt.AdjustmentTransactionID,
		BranchID:                tlt.BranchID,
		CentreID:                tlt.CentreID,
		InstallmentID:           tlt.InstallmentID,
		MigrationEventID:        tlt.MigrationEventID,
		Notes:                   tlt.Notes,
		OriginalTransactionID:   tlt.OriginalTransactionID,
		ParentAccountID:         tlt.ParentAccountID,
		ParentLoanTransactionID: tlt.ParentLoanTransactionID,
		RecalculationMethod:     tlt.RecalculationMethod.PB(),
		TillID:                  tlt.TillID,
		ChannelID:               tlt.ChannelID,
		CreateTime:              timestamppb.New(tlt.CreateTime),
		BookTime:                timestamppb.New(tlt.BookTime),
		ValueTime:               timestamppb.New(tlt.ValueTime),
	}
	var err error
	err = unmarshalMessage(tlt.AccountBalances, &pb.AccountBalances)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(tlt.AffectedAmounts, &pb.AffectedAmounts)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(tlt.Amount, &pb.Amount)
	if err != nil {
		return nil, err
	}
	pb.CardTransaction, err = tlt.CardTransaction.PB()
	if err != nil {
		return nil, err
	}
	err = unmarshalArray(tlt.CustomPaymentAmounts, &pb.CustomPaymentAmounts)
	if err != nil {
		return nil, err
	}
	err = unmarshalArray(tlt.Fees, &pb.Fees)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(tlt.OriginalAmount, &pb.OriginalAmount)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(tlt.Taxes, &pb.Taxes)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(tlt.Terms, &pb.Terms)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(tlt.TransferDetails, &pb.TransferDetails)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type TransactionLoanTransactionRepository interface {
	InsertTransactionLoanTransaction(context.Context, *TransactionLoanTransaction) error
	ListTransactionLoanTransactions(context.Context, string, int32, string, *ListPosition) (ListStat, []*TransactionLoanTransaction, *ListPosition, error)

	// From transaction_loan_transactions_pkey
	TransactionLoanTransactionByID(context.Context, int32) (*TransactionLoanTransaction, error)

	UpdateTransactionLoanTransactionByID(context.Context, *TransactionLoanTransaction) error
	DeleteTransactionLoanTransactionByID(context.Context, int32) error

	// From transaction_loan_transactions_transaction_id_idx
	TransactionLoanTransactionByTransactionID(context.Context, string) (*TransactionLoanTransaction, error)

	UpdateTransactionLoanTransactionByTransactionID(context.Context, *TransactionLoanTransaction) error
	DeleteTransactionLoanTransactionByTransactionID(context.Context, string) error
}
