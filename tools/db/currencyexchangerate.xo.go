// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/currencies"
)

// CurrencyExchangeRate represents a row from 'currency_exchange_rates'.
type CurrencyExchangeRate struct {
	ID           int32     `json:"id"`            // id
	RateID       string    `json:"rate_id"`       // rate_id
	BuyRate      float64   `json:"buy_rate"`      // buy_rate
	SellRate     float64   `json:"sell_rate"`     // sell_rate
	FromCurrency string    `json:"from_currency"` // from_currency
	ToCurrency   string    `json:"to_currency"`   // to_currency
	StartTime    time.Time `json:"start_time"`    // start_time
	EndTime      time.Time `json:"end_time"`      // end_time
	// xo fields
	Exists, Deleted bool
}

func NewCurrencyExchangeRate(pb *currencies.ExchangeRate) (CurrencyExchangeRate, error) {
	if pb == nil {
		return CurrencyExchangeRate{}, ErrNilType{"CurrencyExchangeRate"}
	}
	cer := CurrencyExchangeRate{
		RateID:       pb.RateID,
		BuyRate:      pb.BuyRate,
		SellRate:     pb.SellRate,
		FromCurrency: pb.FromCurrency,
		ToCurrency:   pb.ToCurrency,
		StartTime:    pb.StartTime.AsTime(),
		EndTime:      pb.EndTime.AsTime(),
	}
	return cer, nil
}

func (cer CurrencyExchangeRate) PB() (*currencies.ExchangeRate, error) {
	pb := &currencies.ExchangeRate{
		RateID:       cer.RateID,
		BuyRate:      cer.BuyRate,
		SellRate:     cer.SellRate,
		FromCurrency: cer.FromCurrency,
		ToCurrency:   cer.ToCurrency,
		StartTime:    timestamppb.New(cer.StartTime),
		EndTime:      timestamppb.New(cer.EndTime),
	}
	return pb, nil
}

type CurrencyExchangeRateRepository interface {
	InsertCurrencyExchangeRate(context.Context, *CurrencyExchangeRate) error
	ListCurrencyExchangeRates(context.Context, string, int32, string, *ListPosition) (ListStat, []*CurrencyExchangeRate, *ListPosition, error)

	// From currency_exchange_rates_pkey
	CurrencyExchangeRateByID(context.Context, int32) (*CurrencyExchangeRate, error)

	UpdateCurrencyExchangeRateByID(context.Context, *CurrencyExchangeRate) error
	DeleteCurrencyExchangeRateByID(context.Context, int32) error

	// From currency_exchange_rates_rate_id_idx
	CurrencyExchangeRateByRateID(context.Context, string) (*CurrencyExchangeRate, error)

	UpdateCurrencyExchangeRateByRateID(context.Context, *CurrencyExchangeRate) error
	DeleteCurrencyExchangeRateByRateID(context.Context, string) error
}
