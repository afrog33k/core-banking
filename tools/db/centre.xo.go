// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/centres"
)

// Centre represents a row from 'centres'.
type Centre struct {
	ID               int32       `json:"id"`                 // id
	CentreID         string      `json:"centre_id"`          // centre_id
	Info             ContactInfo `json:"info"`               // info
	Notes            string      `json:"notes"`              // notes
	AssignedBranchID string      `json:"assigned_branch_id"` // assigned_branch_id
	MeetingDay       OrgDay      `json:"meeting_day"`        // meeting_day
	State            State       `json:"state"`              // state
	CreateTime       time.Time   `json:"create_time"`        // create_time
	UpdateTime       time.Time   `json:"update_time"`        // update_time
	Fields           []byte      `json:"fields"`             // fields
	// xo fields
	Exists, Deleted bool
}

func NewCentre(pb *centres.Centre) (Centre, error) {
	if pb == nil {
		return Centre{}, ErrNilType{"Centre"}
	}
	c := Centre{
		CentreID:         pb.CentreID,
		Notes:            pb.Notes,
		AssignedBranchID: pb.AssignedBranchID,
		MeetingDay:       NewOrgDay(pb.MeetingDay),
		State:            NewState(pb.State),
		CreateTime:       pb.CreateTime.AsTime(),
		UpdateTime:       pb.UpdateTime.AsTime(),
	}
	var err error
	c.Info, err = NewContactInfo(pb.Info)
	if err != nil {
		return Centre{}, err
	}
	c.Fields, err = protojson.Marshal(pb.Fields)
	if err != nil {
		return Centre{}, err
	}
	return c, nil
}

func (c Centre) PB() (*centres.Centre, error) {
	pb := &centres.Centre{
		CentreID:         c.CentreID,
		Notes:            c.Notes,
		AssignedBranchID: c.AssignedBranchID,
		MeetingDay:       c.MeetingDay.PB(),
		State:            c.State.PB(),
		CreateTime:       timestamppb.New(c.CreateTime),
		UpdateTime:       timestamppb.New(c.UpdateTime),
	}
	var err error
	pb.Info, err = c.Info.PB()
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(c.Fields, &pb.Fields)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type CentreRepository interface {
	InsertCentre(context.Context, *Centre) error
	ListCentres(context.Context, string, int32, string, *ListPosition) (ListStat, []*Centre, *ListPosition, error)

	// From centres_pkey
	CentreByID(context.Context, int32) (*Centre, error)

	UpdateCentreByID(context.Context, *Centre) error
	DeleteCentreByID(context.Context, int32) error

	// From centres_centre_id_idx
	CentreByCentreID(context.Context, string) (*Centre, error)

	UpdateCentreByCentreID(context.Context, *Centre) error
	DeleteCentreByCentreID(context.Context, string) error
}
