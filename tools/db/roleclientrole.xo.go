// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/roles"
)

// RoleClientRole represents a row from 'role_client_roles'.
type RoleClientRole struct {
	ID                int32     `json:"id"`                  // id
	RoleID            string    `json:"role_id"`             // role_id
	Name              string    `json:"name"`                // name
	ClientType        Entity    `json:"client_type"`         // client_type
	Description       string    `json:"description"`         // description
	RequireID         bool      `json:"require_id"`          // require_id
	CanGuarantee      bool      `json:"can_guarantee"`       // can_guarantee
	CanOpenAccounts   bool      `json:"can_open_accounts"`   // can_open_accounts
	UseDefaultAddress bool      `json:"use_default_address"` // use_default_address
	CreateTime        time.Time `json:"create_time"`         // create_time
	UpdateTime        time.Time `json:"update_time"`         // update_time
	// xo fields
	Exists, Deleted bool
}

func NewRoleClientRole(pb *roles.ClientRole) (RoleClientRole, error) {
	if pb == nil {
		return RoleClientRole{}, ErrNilType{"RoleClientRole"}
	}
	rcr := RoleClientRole{
		RoleID:            pb.RoleID,
		Name:              pb.Name,
		ClientType:        NewEntity(pb.ClientType),
		Description:       pb.Description,
		RequireID:         pb.RequireID,
		CanGuarantee:      pb.CanGuarantee,
		CanOpenAccounts:   pb.CanOpenAccounts,
		UseDefaultAddress: pb.UseDefaultAddress,
		CreateTime:        pb.CreateTime.AsTime(),
		UpdateTime:        pb.UpdateTime.AsTime(),
	}
	return rcr, nil
}

func (rcr RoleClientRole) PB() (*roles.ClientRole, error) {
	pb := &roles.ClientRole{
		RoleID:            rcr.RoleID,
		Name:              rcr.Name,
		ClientType:        rcr.ClientType.PB(),
		Description:       rcr.Description,
		RequireID:         rcr.RequireID,
		CanGuarantee:      rcr.CanGuarantee,
		CanOpenAccounts:   rcr.CanOpenAccounts,
		UseDefaultAddress: rcr.UseDefaultAddress,
		CreateTime:        timestamppb.New(rcr.CreateTime),
		UpdateTime:        timestamppb.New(rcr.UpdateTime),
	}
	return pb, nil
}

type RoleClientRoleRepository interface {
	InsertRoleClientRole(context.Context, *RoleClientRole) error
	ListRoleClientRoles(context.Context, string, int32, string, *ListPosition) (ListStat, []*RoleClientRole, *ListPosition, error)

	// From role_client_roles_pkey
	RoleClientRoleByID(context.Context, int32) (*RoleClientRole, error)

	UpdateRoleClientRoleByID(context.Context, *RoleClientRole) error
	DeleteRoleClientRoleByID(context.Context, int32) error

	// From role_client_roles_role_id_idx
	RoleClientRoleByRoleID(context.Context, string) (*RoleClientRole, error)

	UpdateRoleClientRoleByRoleID(context.Context, *RoleClientRole) error
	DeleteRoleClientRoleByRoleID(context.Context, string) error
}
