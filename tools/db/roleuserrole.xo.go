// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/roles"
)

// RoleUserRole represents a row from 'role_user_roles'.
type RoleUserRole struct {
	ID         int32     `json:"id"`          // id
	RoleID     string    `json:"role_id"`     // role_id
	Name       string    `json:"name"`        // name
	Access     []byte    `json:"access"`      // access
	Notes      string    `json:"notes"`       // notes
	CreateTime time.Time `json:"create_time"` // create_time
	UpdateTime time.Time `json:"update_time"` // update_time
	// xo fields
	Exists, Deleted bool
}

func NewRoleUserRole(pb *roles.UserRole) (RoleUserRole, error) {
	if pb == nil {
		return RoleUserRole{}, ErrNilType{"RoleUserRole"}
	}
	rur := RoleUserRole{
		RoleID:     pb.RoleID,
		Name:       pb.Name,
		Notes:      pb.Notes,
		CreateTime: pb.CreateTime.AsTime(),
		UpdateTime: pb.UpdateTime.AsTime(),
	}
	var err error
	rur.Access, err = protojson.Marshal(pb.Access)
	if err != nil {
		return RoleUserRole{}, err
	}
	return rur, nil
}

func (rur RoleUserRole) PB() (*roles.UserRole, error) {
	pb := &roles.UserRole{
		RoleID:     rur.RoleID,
		Name:       rur.Name,
		Notes:      rur.Notes,
		CreateTime: timestamppb.New(rur.CreateTime),
		UpdateTime: timestamppb.New(rur.UpdateTime),
	}
	var err error
	err = unmarshalMessage(rur.Access, &pb.Access)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type RoleUserRoleRepository interface {
	InsertRoleUserRole(context.Context, *RoleUserRole) error
	ListRoleUserRoles(context.Context, string, int32, string, *ListPosition) (ListStat, []*RoleUserRole, *ListPosition, error)

	// From role_user_roles_pkey
	RoleUserRoleByID(context.Context, int32) (*RoleUserRole, error)

	UpdateRoleUserRoleByID(context.Context, *RoleUserRole) error
	DeleteRoleUserRoleByID(context.Context, int32) error

	// From role_user_roles_role_id_idx
	RoleUserRoleByRoleID(context.Context, string) (*RoleUserRole, error)

	UpdateRoleUserRoleByRoleID(context.Context, *RoleUserRole) error
	DeleteRoleUserRoleByRoleID(context.Context, string) error
}
