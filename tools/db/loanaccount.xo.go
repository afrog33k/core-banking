// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/loans"
)

// LoanAccount represents a row from 'loan_accounts'.
type LoanAccount struct {
	ID                              int32                                       `json:"id"`                                 // id
	AccountID                       string                                      `json:"account_id"`                         // account_id
	Name                            string                                      `json:"name"`                               // name
	HolderID                        string                                      `json:"holder_id"`                          // holder_id
	HolderType                      Entity                                      `json:"holder_type"`                        // holder_type
	State                           LoansAccountState                           `json:"state"`                              // state
	SubState                        LoansAccountSubState                        `json:"sub_state"`                          // sub_state
	AccruedInterest                 []byte                                      `json:"accrued_interest"`                   // accrued_interest
	AccruedPenalty                  []byte                                      `json:"accrued_penalty"`                    // accrued_penalty
	ActivationTransactionID         string                                      `json:"activation_transaction_id"`          // activation_transaction_id
	ArrearsTolerancePeriod          int32                                       `json:"arrears_tolerance_period"`           // arrears_tolerance_period
	Assets                          []byte                                      `json:"assets"`                             // assets
	Guarantors                      []byte                                      `json:"guarantors"`                         // guarantors
	AssignedBranchID                string                                      `json:"assigned_branch_id"`                 // assigned_branch_id
	AssignedCentreID                string                                      `json:"assigned_centre_id"`                 // assigned_centre_id
	AssignedUserID                  string                                      `json:"assigned_user_id"`                   // assigned_user_id
	Balances                        []byte                                      `json:"balances"`                           // balances
	RevolvingAccountID              string                                      `json:"revolving_account_id"`               // revolving_account_id
	CurrencyCode                    string                                      `json:"currency_code"`                      // currency_code
	DaysInArrears                   int32                                       `json:"days_in_arrears"`                    // days_in_arrears
	DaysLate                        int32                                       `json:"days_late"`                          // days_late
	DisbursementDetails             []byte                                      `json:"disbursement_details"`               // disbursement_details
	FuturePaymentsAcceptance        LoansAccountFuturePaymentsAcceptance        `json:"future_payments_acceptance"`         // future_payments_acceptance
	InterestCommission              []byte                                      `json:"interest_commission"`                // interest_commission
	InterestFromArrearsAccrued      []byte                                      `json:"interest_from_arrears_accrued"`      // interest_from_arrears_accrued
	LatePaymentsRecalculationMethod LoansAccountLatePaymentsRecalculationMethod `json:"late_payments_recalculation_method"` // late_payments_recalculation_method
	Amount                          []byte                                      `json:"amount"`                             // amount
	LockedOperations                []LoansLockedOperations                     `json:"locked_operations"`                  // locked_operations
	MigrationEventID                string                                      `json:"migration_event_id"`                 // migration_event_id
	Notes                           string                                      `json:"notes"`                              // notes
	OriginalAccountID               sql.NullString                              `json:"original_account_id"`                // original_account_id
	PaymentHolidaysAccruedInterest  []byte                                      `json:"payment_holidays_accrued_interest"`  // payment_holidays_accrued_interest
	PaymentMethod                   LoansAccountPaymentMethod                   `json:"payment_method"`                     // payment_method
	ProductID                       string                                      `json:"product_id"`                         // product_id
	RescheduledAccountID            sql.NullString                              `json:"rescheduled_account_id"`             // rescheduled_account_id
	Settings                        []byte                                      `json:"settings"`                           // settings
	SettlementAccountID             sql.NullString                              `json:"settlement_account_id"`              // settlement_account_id
	TaxRate                         float64                                     `json:"tax_rate"`                           // tax_rate
	Tranches                        []byte                                      `json:"tranches"`                           // tranches
	ApproveTime                     time.Time                                   `json:"approve_time"`                       // approve_time
	CloseTime                       time.Time                                   `json:"close_time"`                         // close_time
	CreateTime                      time.Time                                   `json:"create_time"`                        // create_time
	AppraiseTime                    time.Time                                   `json:"appraise_time"`                      // appraise_time
	InterestApplyTime               time.Time                                   `json:"interest_apply_time"`                // interest_apply_time
	InterestReviewTime              time.Time                                   `json:"interest_review_time"`               // interest_review_time
	LockTime                        time.Time                                   `json:"lock_time"`                          // lock_time
	UpdateTime                      time.Time                                   `json:"update_time"`                        // update_time
	ArrearsSetTime                  time.Time                                   `json:"arrears_set_time"`                   // arrears_set_time
	TaxRateReviewTime               time.Time                                   `json:"tax_rate_review_time"`               // tax_rate_review_time
	TerminateTime                   time.Time                                   `json:"terminate_time"`                     // terminate_time
	// xo fields
	Exists, Deleted bool
}

func NewLoanAccount(pb *loans.Account) (LoanAccount, error) {
	if pb == nil {
		return LoanAccount{}, ErrNilType{"LoanAccount"}
	}
	la := LoanAccount{
		AccountID:                       pb.AccountID,
		Name:                            pb.Name,
		HolderID:                        pb.HolderID,
		HolderType:                      NewEntity(pb.HolderType),
		State:                           NewLoansAccountState(pb.State),
		SubState:                        NewLoansAccountSubState(pb.SubState),
		ActivationTransactionID:         pb.ActivationTransactionID,
		ArrearsTolerancePeriod:          pb.ArrearsTolerancePeriod,
		AssignedBranchID:                pb.AssignedBranchID,
		AssignedCentreID:                pb.AssignedCentreID,
		AssignedUserID:                  pb.AssignedUserID,
		RevolvingAccountID:              pb.RevolvingAccountID,
		CurrencyCode:                    pb.CurrencyCode,
		DaysInArrears:                   pb.DaysInArrears,
		DaysLate:                        pb.DaysLate,
		FuturePaymentsAcceptance:        NewLoansAccountFuturePaymentsAcceptance(pb.FuturePaymentsAcceptance),
		LatePaymentsRecalculationMethod: NewLoansAccountLatePaymentsRecalculationMethod(pb.LatePaymentsRecalculationMethod),
		LockedOperations:                convertEnum[loans.LockedOperations, LoansLockedOperations](pb.LockedOperations, 1),
		MigrationEventID:                pb.MigrationEventID,
		Notes:                           pb.Notes,
		OriginalAccountID:               toNullString(pb.OriginalAccountID),
		PaymentMethod:                   NewLoansAccountPaymentMethod(pb.PaymentMethod),
		ProductID:                       pb.ProductID,
		RescheduledAccountID:            toNullString(pb.RescheduledAccountID),
		SettlementAccountID:             toNullString(pb.SettlementAccountID),
		TaxRate:                         pb.TaxRate,
		ApproveTime:                     pb.ApproveTime.AsTime(),
		CloseTime:                       pb.CloseTime.AsTime(),
		CreateTime:                      pb.CreateTime.AsTime(),
		AppraiseTime:                    pb.AppraiseTime.AsTime(),
		InterestApplyTime:               pb.InterestApplyTime.AsTime(),
		InterestReviewTime:              pb.InterestReviewTime.AsTime(),
		LockTime:                        pb.LockTime.AsTime(),
		UpdateTime:                      pb.UpdateTime.AsTime(),
		ArrearsSetTime:                  pb.ArrearsSetTime.AsTime(),
		TaxRateReviewTime:               pb.TaxRateReviewTime.AsTime(),
		TerminateTime:                   pb.TerminateTime.AsTime(),
	}
	var err error
	la.AccruedInterest, err = protojson.Marshal(pb.AccruedInterest)
	if err != nil {
		return LoanAccount{}, err
	}
	la.AccruedPenalty, err = protojson.Marshal(pb.AccruedPenalty)
	if err != nil {
		return LoanAccount{}, err
	}
	la.Assets, err = marshalArray(pb.Assets)
	if err != nil {
		return LoanAccount{}, err
	}
	la.Guarantors, err = marshalArray(pb.Guarantors)
	if err != nil {
		return LoanAccount{}, err
	}
	la.Balances, err = protojson.Marshal(pb.Balances)
	if err != nil {
		return LoanAccount{}, err
	}
	la.DisbursementDetails, err = protojson.Marshal(pb.DisbursementDetails)
	if err != nil {
		return LoanAccount{}, err
	}
	la.InterestCommission, err = protojson.Marshal(pb.InterestCommission)
	if err != nil {
		return LoanAccount{}, err
	}
	la.InterestFromArrearsAccrued, err = protojson.Marshal(pb.InterestFromArrearsAccrued)
	if err != nil {
		return LoanAccount{}, err
	}
	la.Amount, err = protojson.Marshal(pb.Amount)
	if err != nil {
		return LoanAccount{}, err
	}
	la.PaymentHolidaysAccruedInterest, err = protojson.Marshal(pb.PaymentHolidaysAccruedInterest)
	if err != nil {
		return LoanAccount{}, err
	}
	la.Settings, err = protojson.Marshal(pb.Settings)
	if err != nil {
		return LoanAccount{}, err
	}
	la.Tranches, err = marshalArray(pb.Tranches)
	if err != nil {
		return LoanAccount{}, err
	}
	return la, nil
}

func (la LoanAccount) PB() (*loans.Account, error) {
	pb := &loans.Account{
		AccountID:                       la.AccountID,
		Name:                            la.Name,
		HolderID:                        la.HolderID,
		HolderType:                      la.HolderType.PB(),
		State:                           la.State.PB(),
		SubState:                        la.SubState.PB(),
		ActivationTransactionID:         la.ActivationTransactionID,
		ArrearsTolerancePeriod:          la.ArrearsTolerancePeriod,
		AssignedBranchID:                la.AssignedBranchID,
		AssignedCentreID:                la.AssignedCentreID,
		AssignedUserID:                  la.AssignedUserID,
		RevolvingAccountID:              la.RevolvingAccountID,
		CurrencyCode:                    la.CurrencyCode,
		DaysInArrears:                   la.DaysInArrears,
		DaysLate:                        la.DaysLate,
		FuturePaymentsAcceptance:        la.FuturePaymentsAcceptance.PB(),
		LatePaymentsRecalculationMethod: la.LatePaymentsRecalculationMethod.PB(),
		LockedOperations:                convertEnum[LoansLockedOperations, loans.LockedOperations](la.LockedOperations, -1),
		MigrationEventID:                la.MigrationEventID,
		Notes:                           la.Notes,
		OriginalAccountID:               toStringPB(la.OriginalAccountID),
		PaymentMethod:                   la.PaymentMethod.PB(),
		ProductID:                       la.ProductID,
		RescheduledAccountID:            toStringPB(la.RescheduledAccountID),
		SettlementAccountID:             toStringPB(la.SettlementAccountID),
		TaxRate:                         la.TaxRate,
		ApproveTime:                     timestamppb.New(la.ApproveTime),
		CloseTime:                       timestamppb.New(la.CloseTime),
		CreateTime:                      timestamppb.New(la.CreateTime),
		AppraiseTime:                    timestamppb.New(la.AppraiseTime),
		InterestApplyTime:               timestamppb.New(la.InterestApplyTime),
		InterestReviewTime:              timestamppb.New(la.InterestReviewTime),
		LockTime:                        timestamppb.New(la.LockTime),
		UpdateTime:                      timestamppb.New(la.UpdateTime),
		ArrearsSetTime:                  timestamppb.New(la.ArrearsSetTime),
		TaxRateReviewTime:               timestamppb.New(la.TaxRateReviewTime),
		TerminateTime:                   timestamppb.New(la.TerminateTime),
	}
	var err error
	err = unmarshalMessage(la.AccruedInterest, &pb.AccruedInterest)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(la.AccruedPenalty, &pb.AccruedPenalty)
	if err != nil {
		return nil, err
	}
	err = unmarshalArray(la.Assets, &pb.Assets)
	if err != nil {
		return nil, err
	}
	err = unmarshalArray(la.Guarantors, &pb.Guarantors)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(la.Balances, &pb.Balances)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(la.DisbursementDetails, &pb.DisbursementDetails)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(la.InterestCommission, &pb.InterestCommission)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(la.InterestFromArrearsAccrued, &pb.InterestFromArrearsAccrued)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(la.Amount, &pb.Amount)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(la.PaymentHolidaysAccruedInterest, &pb.PaymentHolidaysAccruedInterest)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(la.Settings, &pb.Settings)
	if err != nil {
		return nil, err
	}
	err = unmarshalArray(la.Tranches, &pb.Tranches)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type LoanAccountRepository interface {
	InsertLoanAccount(context.Context, *LoanAccount) error
	ListLoanAccounts(context.Context, string, int32, string, *ListPosition) (ListStat, []*LoanAccount, *ListPosition, error)

	// From loan_accounts_pkey
	LoanAccountByID(context.Context, int32) (*LoanAccount, error)

	UpdateLoanAccountByID(context.Context, *LoanAccount) error
	DeleteLoanAccountByID(context.Context, int32) error

	// From loan_accounts_account_id_idx
	LoanAccountByAccountID(context.Context, string) (*LoanAccount, error)

	UpdateLoanAccountByAccountID(context.Context, *LoanAccount) error
	DeleteLoanAccountByAccountID(context.Context, string) error
}
