// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/deposits"
)

// DepositAccount represents a row from 'deposit_accounts'.
type DepositAccount struct {
	ID                          int32                `json:"id"`                             // id
	AccountID                   string               `json:"account_id"`                     // account_id
	Name                        string               `json:"name"`                           // name
	Notes                       string               `json:"notes"`                          // notes
	HolderID                    string               `json:"holder_id"`                      // holder_id
	HolderType                  Entity               `json:"holder_type"`                    // holder_type
	State                       DepositsAccountState `json:"state"`                          // state
	Type                        DepositsAccountType  `json:"type"`                           // type
	AccruedAmounts              []byte               `json:"accrued_amounts"`                // accrued_amounts
	AssignedBranchID            string               `json:"assigned_branch_id"`             // assigned_branch_id
	AssignedCentreID            string               `json:"assigned_centre_id"`             // assigned_centre_id
	AssignedUserID              string               `json:"assigned_user_id"`               // assigned_user_id
	Balances                    []byte               `json:"balances"`                       // balances
	RevolvingAccountID          string               `json:"revolving_account_id"`           // revolving_account_id
	CurrencyCode                string               `json:"currency_code"`                  // currency_code
	InterestSettings            []byte               `json:"interest_settings"`              // interest_settings
	InternalControls            []byte               `json:"internal_controls"`              // internal_controls
	SettlementAccountIDs        StringSlice          `json:"settlement_account_ids"`         // settlement_account_ids
	MigrationEventID            string               `json:"migration_event_id"`             // migration_event_id
	OverdraftRateSettings       []byte               `json:"overdraft_rate_settings"`        // overdraft_rate_settings
	OverdraftSettings           []byte               `json:"overdraft_settings"`             // overdraft_settings
	ProductID                   string               `json:"product_id"`                     // product_id
	WithholdingTaxSourceID      sql.NullString       `json:"withholding_tax_source_id"`      // withholding_tax_source_id
	CreateTime                  time.Time            `json:"create_time"`                    // create_time
	ApproveTime                 time.Time            `json:"approve_time"`                   // approve_time
	ActivateTime                time.Time            `json:"activate_time"`                  // activate_time
	UpdateTime                  time.Time            `json:"update_time"`                    // update_time
	CloseTime                   time.Time            `json:"close_time"`                     // close_time
	AppraiseTime                time.Time            `json:"appraise_time"`                  // appraise_time
	InterestCalculateTime       time.Time            `json:"interest_calculate_time"`        // interest_calculate_time
	InterestStoreTime           time.Time            `json:"interest_store_time"`            // interest_store_time
	OverdraftInterestReviewTime time.Time            `json:"overdraft_interest_review_time"` // overdraft_interest_review_time
	ArrearsSetTime              time.Time            `json:"arrears_set_time"`               // arrears_set_time
	LockTime                    time.Time            `json:"lock_time"`                      // lock_time
	MatureTime                  time.Time            `json:"mature_time"`                    // mature_time
	// xo fields
	Exists, Deleted bool
}

func NewDepositAccount(pb *deposits.Account) (DepositAccount, error) {
	if pb == nil {
		return DepositAccount{}, ErrNilType{"DepositAccount"}
	}
	da := DepositAccount{
		AccountID:                   pb.AccountID,
		Name:                        pb.Name,
		Notes:                       pb.Notes,
		HolderID:                    pb.HolderID,
		HolderType:                  NewEntity(pb.HolderType),
		State:                       NewDepositsAccountState(pb.State),
		Type:                        NewDepositsAccountType(pb.Type),
		AssignedBranchID:            pb.AssignedBranchID,
		AssignedCentreID:            pb.AssignedCentreID,
		AssignedUserID:              pb.AssignedUserID,
		RevolvingAccountID:          pb.RevolvingAccountID,
		CurrencyCode:                pb.CurrencyCode,
		SettlementAccountIDs:        pb.SettlementAccountIDs,
		MigrationEventID:            pb.MigrationEventID,
		ProductID:                   pb.ProductID,
		WithholdingTaxSourceID:      toNullString(pb.WithholdingTaxSourceID),
		CreateTime:                  pb.CreateTime.AsTime(),
		ApproveTime:                 pb.ApproveTime.AsTime(),
		ActivateTime:                pb.ActivateTime.AsTime(),
		UpdateTime:                  pb.UpdateTime.AsTime(),
		CloseTime:                   pb.CloseTime.AsTime(),
		AppraiseTime:                pb.AppraiseTime.AsTime(),
		InterestCalculateTime:       pb.InterestCalculateTime.AsTime(),
		InterestStoreTime:           pb.InterestStoreTime.AsTime(),
		OverdraftInterestReviewTime: pb.OverdraftInterestReviewTime.AsTime(),
		ArrearsSetTime:              pb.ArrearsSetTime.AsTime(),
		LockTime:                    pb.LockTime.AsTime(),
		MatureTime:                  pb.MatureTime.AsTime(),
	}
	var err error
	da.AccruedAmounts, err = protojson.Marshal(pb.AccruedAmounts)
	if err != nil {
		return DepositAccount{}, err
	}
	da.Balances, err = protojson.Marshal(pb.Balances)
	if err != nil {
		return DepositAccount{}, err
	}
	da.InterestSettings, err = protojson.Marshal(pb.InterestSettings)
	if err != nil {
		return DepositAccount{}, err
	}
	da.InternalControls, err = protojson.Marshal(pb.InternalControls)
	if err != nil {
		return DepositAccount{}, err
	}
	da.OverdraftRateSettings, err = protojson.Marshal(pb.OverdraftRateSettings)
	if err != nil {
		return DepositAccount{}, err
	}
	da.OverdraftSettings, err = protojson.Marshal(pb.OverdraftSettings)
	if err != nil {
		return DepositAccount{}, err
	}
	return da, nil
}

func (da DepositAccount) PB() (*deposits.Account, error) {
	pb := &deposits.Account{
		AccountID:                   da.AccountID,
		Name:                        da.Name,
		Notes:                       da.Notes,
		HolderID:                    da.HolderID,
		HolderType:                  da.HolderType.PB(),
		State:                       da.State.PB(),
		Type:                        da.Type.PB(),
		AssignedBranchID:            da.AssignedBranchID,
		AssignedCentreID:            da.AssignedCentreID,
		AssignedUserID:              da.AssignedUserID,
		RevolvingAccountID:          da.RevolvingAccountID,
		CurrencyCode:                da.CurrencyCode,
		SettlementAccountIDs:        da.SettlementAccountIDs,
		MigrationEventID:            da.MigrationEventID,
		ProductID:                   da.ProductID,
		WithholdingTaxSourceID:      toStringPB(da.WithholdingTaxSourceID),
		CreateTime:                  timestamppb.New(da.CreateTime),
		ApproveTime:                 timestamppb.New(da.ApproveTime),
		ActivateTime:                timestamppb.New(da.ActivateTime),
		UpdateTime:                  timestamppb.New(da.UpdateTime),
		CloseTime:                   timestamppb.New(da.CloseTime),
		AppraiseTime:                timestamppb.New(da.AppraiseTime),
		InterestCalculateTime:       timestamppb.New(da.InterestCalculateTime),
		InterestStoreTime:           timestamppb.New(da.InterestStoreTime),
		OverdraftInterestReviewTime: timestamppb.New(da.OverdraftInterestReviewTime),
		ArrearsSetTime:              timestamppb.New(da.ArrearsSetTime),
		LockTime:                    timestamppb.New(da.LockTime),
		MatureTime:                  timestamppb.New(da.MatureTime),
	}
	var err error
	err = unmarshalMessage(da.AccruedAmounts, &pb.AccruedAmounts)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(da.Balances, &pb.Balances)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(da.InterestSettings, &pb.InterestSettings)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(da.InternalControls, &pb.InternalControls)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(da.OverdraftRateSettings, &pb.OverdraftRateSettings)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(da.OverdraftSettings, &pb.OverdraftSettings)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type DepositAccountRepository interface {
	InsertDepositAccount(context.Context, *DepositAccount) error
	ListDepositAccounts(context.Context, string, int32, string, *ListPosition) (ListStat, []*DepositAccount, *ListPosition, error)

	// From deposit_accounts_pkey
	DepositAccountByID(context.Context, int32) (*DepositAccount, error)

	UpdateDepositAccountByID(context.Context, *DepositAccount) error
	DeleteDepositAccountByID(context.Context, int32) error

	// From deposit_accounts_account_id_idx
	DepositAccountByAccountID(context.Context, string) (*DepositAccount, error)

	UpdateDepositAccountByAccountID(context.Context, *DepositAccount) error
	DeleteDepositAccountByAccountID(context.Context, string) error
}
