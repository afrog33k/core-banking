// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"bnk.to/core/api/v1/products"
)

// ProductRiskLevel represents a row from 'product_risk_levels'.
type ProductRiskLevel struct {
	ID                  int32   `json:"id"`                   // id
	LevelID             string  `json:"level_id"`             // level_id
	Name                string  `json:"name"`                 // name
	MinimumDays         int32   `json:"minimum_days"`         // minimum_days
	MaximumDays         int32   `json:"maximum_days"`         // maximum_days
	ProvisioningPercent float64 `json:"provisioning_percent"` // provisioning_percent
	// xo fields
	Exists, Deleted bool
}

func NewProductRiskLevel(pb *products.RiskLevel) (ProductRiskLevel, error) {
	if pb == nil {
		return ProductRiskLevel{}, ErrNilType{"ProductRiskLevel"}
	}
	prl := ProductRiskLevel{
		LevelID:             pb.LevelID,
		Name:                pb.Name,
		MinimumDays:         pb.MinimumDays,
		MaximumDays:         pb.MaximumDays,
		ProvisioningPercent: pb.ProvisioningPercent,
	}
	return prl, nil
}

func (prl ProductRiskLevel) PB() (*products.RiskLevel, error) {
	pb := &products.RiskLevel{
		LevelID:             prl.LevelID,
		Name:                prl.Name,
		MinimumDays:         prl.MinimumDays,
		MaximumDays:         prl.MaximumDays,
		ProvisioningPercent: prl.ProvisioningPercent,
	}
	return pb, nil
}

type ProductRiskLevelRepository interface {
	InsertProductRiskLevel(context.Context, *ProductRiskLevel) error
	ListProductRiskLevels(context.Context, string, int32, string, *ListPosition) (ListStat, []*ProductRiskLevel, *ListPosition, error)

	// From product_risk_levels_pkey
	ProductRiskLevelByID(context.Context, int32) (*ProductRiskLevel, error)

	UpdateProductRiskLevelByID(context.Context, *ProductRiskLevel) error
	DeleteProductRiskLevelByID(context.Context, int32) error

	// From product_risk_levels_level_id_idx
	ProductRiskLevelByLevelID(context.Context, string) (*ProductRiskLevel, error)

	UpdateProductRiskLevelByLevelID(context.Context, *ProductRiskLevel) error
	DeleteProductRiskLevelByLevelID(context.Context, string) error
}
