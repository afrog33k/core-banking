// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/documents"
)

// Document represents a row from 'documents'.
type Document struct {
	ID         int32          `json:"id"`          // id
	DocumentID string         `json:"document_id"` // document_id
	Name       string         `json:"name"`        // name
	Notes      string         `json:"notes"`       // notes
	OwnerID    string         `json:"owner_id"`    // owner_id
	OwnerType  DocumentsOwner `json:"owner_type"`  // owner_type
	TemplateID sql.NullString `json:"template_id"` // template_id
	FileName   string         `json:"file_name"`   // file_name
	Size       int32          `json:"size"`        // size
	CreateTime time.Time      `json:"create_time"` // create_time
	ExpireTime time.Time      `json:"expire_time"` // expire_time
	// xo fields
	Exists, Deleted bool
}

func NewDocument(pb *documents.Document) (Document, error) {
	if pb == nil {
		return Document{}, ErrNilType{"Document"}
	}
	d := Document{
		DocumentID: pb.DocumentID,
		Name:       pb.Name,
		Notes:      pb.Notes,
		OwnerID:    pb.OwnerID,
		OwnerType:  NewDocumentsOwner(pb.OwnerType),
		TemplateID: toNullString(pb.TemplateID),
		FileName:   pb.FileName,
		Size:       pb.Size,
		CreateTime: pb.CreateTime.AsTime(),
		ExpireTime: pb.ExpireTime.AsTime(),
	}
	return d, nil
}

func (d Document) PB() (*documents.Document, error) {
	pb := &documents.Document{
		DocumentID: d.DocumentID,
		Name:       d.Name,
		Notes:      d.Notes,
		OwnerID:    d.OwnerID,
		OwnerType:  d.OwnerType.PB(),
		TemplateID: toStringPB(d.TemplateID),
		FileName:   d.FileName,
		Size:       d.Size,
		CreateTime: timestamppb.New(d.CreateTime),
		ExpireTime: timestamppb.New(d.ExpireTime),
	}
	return pb, nil
}

type DocumentRepository interface {
	InsertDocument(context.Context, *Document) error
	ListDocuments(context.Context, string, int32, string, *ListPosition) (ListStat, []*Document, *ListPosition, error)

	// From documents_pkey
	DocumentByID(context.Context, int32) (*Document, error)

	UpdateDocumentByID(context.Context, *Document) error
	DeleteDocumentByID(context.Context, int32) error

	// From documents_document_id_idx
	DocumentByDocumentID(context.Context, string) (*Document, error)

	UpdateDocumentByDocumentID(context.Context, *Document) error
	DeleteDocumentByDocumentID(context.Context, string) error
}
