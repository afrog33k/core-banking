// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"

	"google.golang.org/protobuf/encoding/protojson"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/transactions"
)

// TransactionDepositTransaction represents a row from 'transaction_deposit_transactions'.
type TransactionDepositTransaction struct {
	ID                      int32                   `json:"id"`                        // id
	TransactionID           string                  `json:"transaction_id"`            // transaction_id
	UserID                  string                  `json:"user_id"`                   // user_id
	TotalChange             []byte                  `json:"total_change"`              // total_change
	AffectedAmounts         []byte                  `json:"affected_amounts"`          // affected_amounts
	AdjustmentTransactionID sql.NullString          `json:"adjustment_transaction_id"` // adjustment_transaction_id
	BlockID                 string                  `json:"block_id"`                  // block_id
	BranchID                string                  `json:"branch_id"`                 // branch_id
	CentreID                string                  `json:"centre_id"`                 // centre_id
	CardTransaction         CardTransaction         `json:"card_transaction"`          // card_transaction
	ParentAccountID         string                  `json:"parent_account_id"`         // parent_account_id
	Fees                    []byte                  `json:"fees"`                      // fees
	InterestAccruedAmounts  []byte                  `json:"interest_accrued_amounts"`  // interest_accrued_amounts
	MigrationEventID        string                  `json:"migration_event_id"`        // migration_event_id
	Notes                   string                  `json:"notes"`                     // notes
	OriginalTransactionID   sql.NullString          `json:"original_transaction_id"`   // original_transaction_id
	Payment                 []byte                  `json:"payment"`                   // payment
	OrderID                 string                  `json:"order_id"`                  // order_id
	TaxRate                 float64                 `json:"tax_rate"`                  // tax_rate
	Terms                   []byte                  `json:"terms"`                     // terms
	TillID                  string                  `json:"till_id"`                   // till_id
	ChannelID               string                  `json:"channel_id"`                // channel_id
	TransferDetails         []byte                  `json:"transfer_details"`          // transfer_details
	Type                    TransactionsDepositType `json:"type"`                      // type
	CreateTime              time.Time               `json:"create_time"`               // create_time
	BookTime                time.Time               `json:"book_time"`                 // book_time
	ValueTime               time.Time               `json:"value_time"`                // value_time
	// xo fields
	Exists, Deleted bool
}

func NewTransactionDepositTransaction(pb *transactions.DepositTransaction) (TransactionDepositTransaction, error) {
	if pb == nil {
		return TransactionDepositTransaction{}, ErrNilType{"TransactionDepositTransaction"}
	}
	tdt := TransactionDepositTransaction{
		TransactionID:           pb.TransactionID,
		UserID:                  pb.UserID,
		AdjustmentTransactionID: toNullString(pb.AdjustmentTransactionID),
		BlockID:                 pb.BlockID,
		BranchID:                pb.BranchID,
		CentreID:                pb.CentreID,
		ParentAccountID:         pb.ParentAccountID,
		MigrationEventID:        pb.MigrationEventID,
		Notes:                   pb.Notes,
		OriginalTransactionID:   toNullString(pb.OriginalTransactionID),
		OrderID:                 pb.OrderID,
		TaxRate:                 pb.TaxRate,
		TillID:                  pb.TillID,
		ChannelID:               pb.ChannelID,
		Type:                    NewTransactionsDepositType(pb.Type),
		CreateTime:              pb.CreateTime.AsTime(),
		BookTime:                pb.BookTime.AsTime(),
		ValueTime:               pb.ValueTime.AsTime(),
	}
	var err error
	tdt.TotalChange, err = protojson.Marshal(pb.TotalChange)
	if err != nil {
		return TransactionDepositTransaction{}, err
	}
	tdt.AffectedAmounts, err = protojson.Marshal(pb.AffectedAmounts)
	if err != nil {
		return TransactionDepositTransaction{}, err
	}
	tdt.CardTransaction, err = NewCardTransaction(pb.CardTransaction)
	if err != nil {
		return TransactionDepositTransaction{}, err
	}
	tdt.Fees, err = marshalArray(pb.Fees)
	if err != nil {
		return TransactionDepositTransaction{}, err
	}
	tdt.InterestAccruedAmounts, err = protojson.Marshal(pb.InterestAccruedAmounts)
	if err != nil {
		return TransactionDepositTransaction{}, err
	}
	tdt.Payment, err = protojson.Marshal(pb.Payment)
	if err != nil {
		return TransactionDepositTransaction{}, err
	}
	tdt.Terms, err = protojson.Marshal(pb.Terms)
	if err != nil {
		return TransactionDepositTransaction{}, err
	}
	tdt.TransferDetails, err = protojson.Marshal(pb.TransferDetails)
	if err != nil {
		return TransactionDepositTransaction{}, err
	}
	return tdt, nil
}

func (tdt TransactionDepositTransaction) PB() (*transactions.DepositTransaction, error) {
	pb := &transactions.DepositTransaction{
		TransactionID:           tdt.TransactionID,
		UserID:                  tdt.UserID,
		AdjustmentTransactionID: toStringPB(tdt.AdjustmentTransactionID),
		BlockID:                 tdt.BlockID,
		BranchID:                tdt.BranchID,
		CentreID:                tdt.CentreID,
		ParentAccountID:         tdt.ParentAccountID,
		MigrationEventID:        tdt.MigrationEventID,
		Notes:                   tdt.Notes,
		OriginalTransactionID:   toStringPB(tdt.OriginalTransactionID),
		OrderID:                 tdt.OrderID,
		TaxRate:                 tdt.TaxRate,
		TillID:                  tdt.TillID,
		ChannelID:               tdt.ChannelID,
		Type:                    tdt.Type.PB(),
		CreateTime:              timestamppb.New(tdt.CreateTime),
		BookTime:                timestamppb.New(tdt.BookTime),
		ValueTime:               timestamppb.New(tdt.ValueTime),
	}
	var err error
	err = unmarshalMessage(tdt.TotalChange, &pb.TotalChange)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(tdt.AffectedAmounts, &pb.AffectedAmounts)
	if err != nil {
		return nil, err
	}
	pb.CardTransaction, err = tdt.CardTransaction.PB()
	if err != nil {
		return nil, err
	}
	err = unmarshalArray(tdt.Fees, &pb.Fees)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(tdt.InterestAccruedAmounts, &pb.InterestAccruedAmounts)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(tdt.Payment, &pb.Payment)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(tdt.Terms, &pb.Terms)
	if err != nil {
		return nil, err
	}
	err = unmarshalMessage(tdt.TransferDetails, &pb.TransferDetails)
	if err != nil {
		return nil, err
	}
	return pb, nil
}

type TransactionDepositTransactionRepository interface {
	InsertTransactionDepositTransaction(context.Context, *TransactionDepositTransaction) error
	ListTransactionDepositTransactions(context.Context, string, int32, string, *ListPosition) (ListStat, []*TransactionDepositTransaction, *ListPosition, error)

	// From transaction_deposit_transactions_pkey
	TransactionDepositTransactionByID(context.Context, int32) (*TransactionDepositTransaction, error)

	UpdateTransactionDepositTransactionByID(context.Context, *TransactionDepositTransaction) error
	DeleteTransactionDepositTransactionByID(context.Context, int32) error

	// From transaction_deposit_transactions_transaction_id_id
	TransactionDepositTransactionByTransactionID(context.Context, string) (*TransactionDepositTransaction, error)

	UpdateTransactionDepositTransactionByTransactionID(context.Context, *TransactionDepositTransaction) error
	DeleteTransactionDepositTransactionByTransactionID(context.Context, string) error
}
