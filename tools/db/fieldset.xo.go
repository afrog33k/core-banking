// Package db contains generated code from xo.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	"bnk.to/core/api/v1/fields"
)

// FieldSet represents a row from 'field_sets'.
type FieldSet struct {
	ID              int32              `json:"id"`               // id
	SetID           string             `json:"set_id"`           // set_id
	Name            string             `json:"name"`             // name
	Description     string             `json:"description"`      // description
	AllowDuplicates bool               `json:"allow_duplicates"` // allow_duplicates
	ValidFor        FieldsAvailableFor `json:"valid_for"`        // valid_for
	State           State              `json:"state"`            // state
	CreateTime      time.Time          `json:"create_time"`      // create_time
	UpdateTime      time.Time          `json:"update_time"`      // update_time
	// xo fields
	Exists, Deleted bool
}

func NewFieldSet(pb *fields.Set) (FieldSet, error) {
	if pb == nil {
		return FieldSet{}, ErrNilType{"FieldSet"}
	}
	fs := FieldSet{
		SetID:           pb.SetID,
		Name:            pb.Name,
		Description:     pb.Description,
		AllowDuplicates: pb.AllowDuplicates,
		ValidFor:        NewFieldsAvailableFor(pb.ValidFor),
		State:           NewState(pb.State),
		CreateTime:      pb.CreateTime.AsTime(),
		UpdateTime:      pb.UpdateTime.AsTime(),
	}
	return fs, nil
}

func (fs FieldSet) PB() (*fields.Set, error) {
	pb := &fields.Set{
		SetID:           fs.SetID,
		Name:            fs.Name,
		Description:     fs.Description,
		AllowDuplicates: fs.AllowDuplicates,
		ValidFor:        fs.ValidFor.PB(),
		State:           fs.State.PB(),
		CreateTime:      timestamppb.New(fs.CreateTime),
		UpdateTime:      timestamppb.New(fs.UpdateTime),
	}
	return pb, nil
}

type FieldSetRepository interface {
	InsertFieldSet(context.Context, *FieldSet) error
	ListFieldSets(context.Context, string, int32, string, *ListPosition) (ListStat, []*FieldSet, *ListPosition, error)

	// From field_sets_pkey
	FieldSetByID(context.Context, int32) (*FieldSet, error)

	UpdateFieldSetByID(context.Context, *FieldSet) error
	DeleteFieldSetByID(context.Context, int32) error

	// From field_sets_set_id_idx
	FieldSetBySetID(context.Context, string) (*FieldSet, error)

	UpdateFieldSetBySetID(context.Context, *FieldSet) error
	DeleteFieldSetBySetID(context.Context, string) error
}
